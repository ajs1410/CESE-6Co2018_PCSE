
examples/c/sapi/bare_metal/Eje3_mpu9250_H05/out/Eje3_mpu9250_H05.elf:     file format elf32-littlearm
examples/c/sapi/bare_metal/Eje3_mpu9250_H05/out/Eje3_mpu9250_H05.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a002a89

Program Header:
0x70000001 off    0x0000fd50 vaddr 0x1a007d50 paddr 0x1a007d50 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**15
         filesz 0x000000b4 memsz 0x00000b1c flags rw-
    LOAD off    0x00008000 vaddr 0x1a000000 paddr 0x1a000000 align 2**15
         filesz 0x00007d58 memsz 0x00007d58 flags r-x
    LOAD off    0x00010000 vaddr 0x10000000 paddr 0x1a007d58 align 2**15
         filesz 0x00000944 memsz 0x00000944 flags rw-
private flags = 5000402: [Version5 EABI] [hard-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007d50  1a000000  1a000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000944  10000000  1a007d58  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00010944  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00010944  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00010944  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00010944  2**2
                  CONTENTS
  6 .bss          000001d4  10000948  10000948  00000948  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00010944  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00010944  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00010944  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00010944  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a007d50  1a007d50  0000fd50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  00010944  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  00010944  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  00010944  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  00010944  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  00010944  2**2
                  CONTENTS
 17 .noinit       00000000  10000b1c  10000b1c  00010944  2**2
                  CONTENTS
 18 .debug_info   00016f72  00000000  00000000  00010944  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00003c87  00000000  00000000  000278b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    000081bf  00000000  00000000  0002b53d  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000bc8  00000000  00000000  000336fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000a88  00000000  00000000  000342c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000bfc8  00000000  00000000  00034d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   0000f56e  00000000  00000000  00040d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0001f9e5  00000000  00000000  00050282  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      00000070  00000000  00000000  0006fc67  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000037  00000000  00000000  0006fcd7  2**0
                  CONTENTS, READONLY
 28 .debug_frame  000024e0  00000000  00000000  0006fd10  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000948 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a007d50 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000b1c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a000898 l     F .text	000000ac uartProcessIRQ
10000954 l     O .bss	00000004 rxIsrCallbackUART0
10000958 l     O .bss	00000004 txIsrCallbackUART0
1000095c l     O .bss	00000004 txIsrCallbackUART2
10000960 l     O .bss	00000004 txIsrCallbackUART3
1a0079e4 l     O .text	00000048 lpcUarts
10000964 l     O .bss	00000004 rxIsrCallbackUART2
10000968 l     O .bss	00000004 rxIsrCallbackUART3
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 mpu9250.c
10000948 l     O .bss	00000001 consolePrint
10000949 l     O .bss	00000001 debugPrint
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a00056c l     F .text	00000010 clearInterrupt
1a00057c l     F .text	00000060 serveInterrupt
10000004 l     O .data	00000048 ultrasonicSensors
1a0078a8 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a000600 l     F .text	0000002c gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_imu_mpu9250.c
1a000b38 l     F .text	00000080 mpu9250InitializeControlStructure
1a000bb8 l     F .text	00000034 mpu9250ReadRegisters
1a000bec l     F .text	00000020 mpu9250WhoAmI
1a000c0c l     F .text	0000004c mpu9250WriteRegister
1a000c58 l     F .text	00000058 mpu9250ReadAK8963Registers
1a000cb0 l     F .text	00000020 mpu9250WhoAmIAK8963
1a000cd0 l     F .text	00000070 mpu9250WriteAK8963Register
1a000d40 l     F .text	00000090 mpu9250SetGyroRange
1a000dd0 l     F .text	000000ec mpu9250SetDlpfBandwidth
1a000ebc l     F .text	000000ac mpu9250SetSrd
1a00124c l     F .text	00000150 mpu9250CalibrateGyro
10000970 l     O .bss	00000158 control
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000050 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_i2c.c
1a001710 l     F .text	00000030 i2cHardwareInit
1a001740 l     F .text	0000003c i2cHardwareRead
1a00177c l     F .text	0000003c i2cHardwareWrite
00000000 l    df *ABS*	00000000 sapi_timer.c
1a001810 l     F .text	00000002 errorOcurred
1a001814 l     F .text	00000002 doNothing
10000054 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_print.c
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 board.c
1a001a30 l     F .text	00000040 Board_LED_Init
1a001a70 l     F .text	0000003c Board_TEC_Init
1a001aac l     F .text	0000003c Board_GPIO_Init
1a001ae8 l     F .text	00000038 Board_SPI_Init
1a001b20 l     F .text	00000024 Board_I2C_Init
1a001b44 l     F .text	00000030 Board_ADC_Init
1a007a2c l     O .text	00000012 GpioPorts
1a007a48 l     O .text	00000008 GpioButtons
1a007a50 l     O .text	0000000c GpioLeds
00000000 l    df *ABS*	00000000 system.c
10000ac8 l     O .bss	00000004 heap_end.11148
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a007a5c l     O .text	0000000c InitClkStates
1a007a68 l     O .text	00000098 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a001cbc l     F .text	0000002c Chip_UART_GetIndex
1a007b00 l     O .text	00000008 UART_BClock
1a007b08 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a001e60 l     F .text	00000014 Chip_ADC_GetClockIndex
1a001e74 l     F .text	00000030 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a001f38 l     F .text	000000a8 pll_calc_divs
1a001fe0 l     F .text	00000104 pll_get_frac
1a0020e4 l     F .text	00000048 Chip_Clock_FindBaseClock
1a002350 l     F .text	00000022 Chip_Clock_GetDivRate
10000acc l     O .bss	00000008 audio_usb_pll_freq
1a007b1c l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a007b88 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 i2cm_18xx_43xx.c
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a002788 l     F .text	00000014 Chip_SSP_GetClockIndex
1a00279c l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000094 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
1a007bd0 l     O .text	00000010 zeroes.6916
1a007c24 l     O .text	00000010 blanks.6915
00000000 l    df *ABS*	00000000 dtoa.c
1a005078 l     F .text	0000012c quorem
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 locale.c
100004fc l     O .data	00000038 lconv
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mprec.c
1a007c50 l     O .text	0000000c p05.5296
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 impure.c
100000d0 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
1a080000 l       *ABS*	00000000 __top_MFlashA512
1a007d58 l       .ARM.exidx	00000000 __exidx_end
1a007d58 l       .ARM.exidx	00000000 _etext
20008000 l       *ABS*	00000000 __top_RamAHB32
1a007d50 l       .ARM.exidx	00000000 __exidx_start
20010000 l       *ABS*	00000000 __top_RamAHB_ETB16
10008000 l       *ABS*	00000000 __top_RamLoc32
2000c000 l       *ABS*	00000000 __top_RamAHB16
1008a000 l       *ABS*	00000000 __top_RamLoc40
1a007d50 l       .bss_RAM5	00000000 __init_array_end
1a007d50 l       .bss_RAM5	00000000 __preinit_array_end
1b080000 l       *ABS*	00000000 __top_MFlashB512
1a007d50 l       .bss_RAM5	00000000 __init_array_start
1a007d50 l       .bss_RAM5	00000000 __preinit_array_start
1a002178 g     F .text	0000001c Chip_Clock_GetDividerSource
1a0026f8 g     F .text	0000000e Chip_I2CM_Xfer
1a007598 g     F .text	00000012 .hidden __aeabi_dcmple
1a002f80 g     F .text	0000002e .hidden __gnu_uldivmod_helper
1a001894 g     F .text	00000040 TIMER2_IRQHandler
1a000974 g     F .text	00000014 uartRxRead
1a0074d4 g     F .text	0000007a .hidden __cmpdf2
1a0017b8 g     F .text	0000000e i2cInit
1a00019c  w    F .text	00000002 DebugMon_Handler
1a0001a8  w    F .text	00000002 RIT_IRQHandler
1a0074d4 g     F .text	0000007a .hidden __eqdf2
1a0001a8  w    F .text	00000002 ADCHS_IRQHandler
1a0033d8 g     F .text	0000029c .hidden __divdi3
1a000114 g       .text	00000000 __section_table_start
1a0001a8  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002e24 g     F .text	0000005a .hidden __floatdidf
1a0001a8  w    F .text	00000002 I2C0_IRQHandler
1a000a18 g     F .text	0000001c uartReadByte
1a0016d0 g     F .text	0000003e delayRead
10000950 g     O .bss	00000004 callBackFuncParams
1a000188  w    F .text	00000002 HardFault_Handler
1a002860 g     F .text	00000122 handleMasterXferState
1a001204 g     F .text	0000000c mpu9250GetAccelX_mss
1a000000 g       *ABS*	00000000 __vectors_start__
1a001f18 g     F .text	0000000c Chip_ADC_SetResolution
1a006928 g     F .text	00000002 __malloc_unlock
1a000868 g     F .text	00000030 SysTick_Handler
1a001d3c g     F .text	00000040 Chip_UART_SetBaud
1a001924 g     F .text	00000008 printString
1a0001a8  w    F .text	00000002 SDIO_IRQHandler
1a0001a8  w    F .text	00000002 ATIMER_IRQHandler
1a00685c g     F .text	000000c6 memmove
1a0001a0  w    F .text	00000002 PendSV_Handler
1a000184  w    F .text	00000002 NMI_Handler
1a00692c g     F .text	0000004c _Balloc
1a000150 g       .text	00000000 __data_section_table_end
1a0001a8  w    F .text	00000002 I2C1_IRQHandler
1a0001a8  w    F .text	00000002 UART1_IRQHandler
1a0074c4 g     F .text	0000008a .hidden __gtdf2
1a0001a8  w    F .text	00000002 GPIO5_IRQHandler
1a0001a8  w    F .text	00000002 CAN1_IRQHandler
1a0017c8 g     F .text	0000002a i2cRead
1a001638 g     F .text	0000000c mpu9250GetMagY_uT
53ff4db6 g       *ABS*	00000000 __valid_user_code_checksum
1a007560 g     F .text	00000010 .hidden __aeabi_cdcmple
1a0001a8  w    F .text	00000002 USB1_IRQHandler
1a0001a8  w    F .text	00000002 I2S0_IRQHandler
1a001644 g     F .text	0000000c mpu9250GetMagZ_uT
1a000a34 g     F .text	0000007c waitForReceiveStringOrTimeout
1a0018d4 g     F .text	00000040 TIMER3_IRQHandler
1a0023dc g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000178 g     F .text	0000000a UART0_IRQHandler
1a0001c8 g     F .text	00000012 bss_init
1a003930 g     F .text	00000134 memcpy
1a007550 g     F .text	00000020 .hidden __aeabi_cdrcmple
1a0001a8  w    F .text	00000002 SGPIO_IRQHandler
1a003ba8 g     F .text	000014cc _svfprintf_r
1a002db4 g     F .text	00000022 .hidden __floatsidf
1a002a0c g     F .text	00000030 Chip_I2C_MasterStateHandler
1a0074cc g     F .text	00000082 .hidden __ltdf2
1a002f20 g     F .text	00000000 .hidden __aeabi_uldivmod
10000b1c g       .noinit	00000000 _noinit
1a000b08 g     F .text	00000018 uartWriteString
10000b18 g     O .bss	00000004 SystemCoreClock
1a007304 g     F .text	0000005c __fpclassifyd
1a001ce8 g     F .text	00000054 Chip_UART_Init
1a0001a8  w    F .text	00000002 ADC0_IRQHandler
1a007c60 g     O .text	000000c8 __mprec_tens
1a000194  w    F .text	00000002 UsageFault_Handler
1a002458 g     F .text	0000004c Chip_Clock_GetRate
1a0001a8  w    F .text	00000002 GPIO6_IRQHandler
1a001914 g     F .text	0000000e printInitUart
10000adc g     O .bss	00000004 __malloc_top_pad
10000b08 g     O .bss	00000008 tickCounter
1a001c44 g     F .text	0000006c Board_SetupClocking
1a002d94 g     F .text	0000001e .hidden __aeabi_ui2d
1a00629c g     F .text	00000008 _localeconv_r
1a006aac g     F .text	00000012 __i2b
1a0029d8 g     F .text	00000034 Chip_I2C_SetMasterEventHandler
1a002b10 g     F .text	00000000 .hidden __aeabi_drsub
1a00139c g     F .text	00000290 mpu9250Init
1a001bd4 g     F .text	00000020 _sbrk_r
1a007a44 g     O .text	00000004 ExtRateIn
1a0001a8  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a001650 g     F .text	0000000c mpu9250GetTemperature_C
1a007584 g     F .text	00000012 .hidden __aeabi_dcmplt
1a0005e8 g     F .text	0000000a GPIO1_IRQHandler
10000ad8 g     O .bss	00000004 __malloc_max_sbrked_mem
1a002dd8 g     F .text	0000003a .hidden __extendsfdf2
1a003208 g     F .text	000001d0 .hidden __aeabi_ddiv
1a0001a8  w    F .text	00000002 SSP0_IRQHandler
1a00121c g     F .text	0000000c mpu9250GetAccelZ_mss
1a002b1c g     F .text	00000276 .hidden __adddf3
1a000944 g     F .text	00000018 uartRxReady
1a002fb4 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
1a006f18 g     F .text	000003ec _realloc_r
1a0038e0 g     F .text	00000050 __libc_init_array
1a003674 g     F .text	0000026a .hidden __udivdi3
1a007d28 g     O .text	00000028 __mprec_bigtens
1a002d94 g     F .text	0000001e .hidden __floatunsidf
1a0001a8  w    F .text	00000002 ADC1_IRQHandler
1a006d40 g     F .text	00000046 __mcmp
1a001b98 g     F .text	0000003c Board_Init
1a002b0c g     F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a002e80 g     F .text	0000009e .hidden __aeabi_d2f
1a0001a8  w    F .text	00000002 RTC_IRQHandler
10000b1c g       .bss	00000000 _ebss
1a001818 g     F .text	0000003c TIMER0_IRQHandler
1a0007ec g     F .text	0000007c tickInit
1a0001a8  w    F .text	00000002 SPI_IRQHandler
1a002708 g     F .text	00000024 Chip_I2CM_XferBlocking
1a006a10 g     F .text	00000040 __hi0bits
1a0029a8 g     F .text	00000030 Chip_I2C_SetClockRate
1a0075d4 g     F .text	0000004e .hidden __fixdfsi
1a0001a8  w    F .text	00000002 LCD_IRQHandler
1a00212c g     F .text	0000004c Chip_Clock_EnableCrystal
1a000300 g     F .text	0000002c hm10bleTest
1a002b1c g     F .text	00000276 .hidden __aeabi_dadd
1a0001ac g     F .text	0000001a data_init
1a0074cc g     F .text	00000082 .hidden __ledf2
1a006bf4 g     F .text	000000a0 __pow5mult
1a002e14 g     F .text	0000006a .hidden __aeabi_ul2d
1a001854 g     F .text	00000040 TIMER1_IRQHandler
1a002984 g     F .text	00000024 Chip_I2C_Init
1a000b20 g     F .text	0000000a UART2_IRQHandler
1a00192c g     F .text	00000010 printEnter
1a0022e8 g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a0078ac g     O .text	00000136 gpioPinsInit
1a000aec g     F .text	0000001a uartWriteByte
1a0027b4 g     F .text	00000012 Chip_SSP_SetClockRate
1a0075c0 g     F .text	00000012 .hidden __aeabi_dcmpgt
1a0005f4 g     F .text	0000000a GPIO2_IRQHandler
1a0067c8 g     F .text	00000092 memchr
1a0060ec g     F .text	000001b0 _free_r
1a0023b8 g     F .text	00000024 Chip_Clock_GetBaseClock
1a0075ac g     F .text	00000012 .hidden __aeabi_dcmpge
10000948 g       .bss	00000000 _bss
1a001ee4 g     F .text	00000032 Chip_ADC_SetSampleRate
1a002b18 g     F .text	0000027a .hidden __aeabi_dsub
10000940 g     O .data	00000004 __malloc_sbrk_base
1a0016b0 g     F .text	00000020 delayInit
1a002e14 g     F .text	0000006a .hidden __floatundidf
1a006c94 g     F .text	000000aa __lshift
1a0001a8  w    F .text	00000002 I2S1_IRQHandler
1a007360 g     F .text	00000104 __ssprint_r
1a0027c8 g     F .text	0000003e Chip_SSP_SetBitRate
1a001234 g     F .text	0000000c mpu9250GetGyroY_rads
1a002784 g     F .text	00000002 Chip_GPIO_Init
1a007a40 g     O .text	00000004 OscRateIn
1a00099c g     F .text	0000007c uartInit
1a006ac0 g     F .text	00000134 __multiply
10000b1c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
10000ae0 g     O .bss	00000028 __malloc_current_mallinfo
1a006e5c g     F .text	000000ba __d2b
1a0001a8  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a002db4 g     F .text	00000022 .hidden __aeabi_i2d
1a00062c g     F .text	0000019c gpioInit
1a002fb0  w    F .text	00000002 .hidden __aeabi_ldiv0
1a003208 g     F .text	000001d0 .hidden __divdf3
10000534 g     O .data	00000408 __malloc_av_
1a002fb4 g     F .text	00000254 .hidden __muldf3
1a0001a8  w    F .text	00000002 USB0_IRQHandler
1a0001a8  w    F .text	00000002 GPIO3_IRQHandler
10000000 g     O .data	00000001 addr
1a006924 g     F .text	00000002 __malloc_lock
1a002a3c g     F .text	00000018 Chip_I2C_IsStateChanged
1a0001a8  w    F .text	00000002 SCT_IRQHandler
1a007464 g     F .text	0000005e _calloc_r
1a002194 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a003a64 g     F .text	0000009a memset
1a00018c  w    F .text	00000002 MemManage_Handler
1a00032c g     F .text	00000240 main
10000ad4 g     O .bss	00000004 __malloc_max_total_mem
1a00162c g     F .text	0000000c mpu9250GetMagX_uT
1a0001a8  w    F .text	00000002 WDT_IRQHandler
1a000198  w    F .text	00000002 SVC_Handler
1000004c g     O .data	00000004 DWT_CTRL
1a002e80 g     F .text	0000009e .hidden __truncdfsf2
1a0051a8 g     F .text	00000ea2 _dtoa_r
1a0062a4 g     F .text	00000524 _malloc_r
1a002e24 g     F .text	0000005a .hidden __aeabi_l2d
1a00095c g     F .text	00000018 uartTxReady
1a0001a8  w    F .text	00000002 GPIO7_IRQHandler
1a0023e8 g     F .text	0000003c Chip_Clock_EnableOpts
1a006050 g     F .text	0000009c _malloc_trim_r
1a0021b0 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a00272c g     F .text	00000058 fpuInit
1a001210 g     F .text	0000000c mpu9250GetAccelY_mss
1a002268 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001bf4 g     F .text	0000001c SystemInit
1a0001a8  w    F .text	00000002 SPIFI_IRQHandler
1a001678 g     F .text	00000038 delay
1a0001a8  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0074d4 g     F .text	0000007a .hidden __nedf2
1a003b00 g     F .text	0000004c sprintf
1a001ea4 g     F .text	00000040 Chip_ADC_Init
1a001c10 g     F .text	00000034 Board_SetupMuxing
1a001d7c g     F .text	000000e4 Chip_UART_SetBaudFDR
1a0007c8 g     F .text	0000000c tickRead
10000b10 g     O .bss	00000008 tickRateMS
1a000f68 g     F .text	0000029c mpu9250Read
1a0001a8  w    F .text	00000002 ETH_IRQHandler
1000094c g     O .bss	00000004 tickHookFunction
100004f8 g     O .data	00000004 _impure_ptr
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a000ab0 g     F .text	0000003a waitForReceiveStringOrTimeoutBlocking
1a000988 g     F .text	00000014 uartTxWrite
1a0001a8  w    F .text	00000002 CAN0_IRQHandler
1a0025f4 g     F .text	00000104 Chip_I2CM_XferHandler
10000000 g       .data	00000000 _data
10000b1c g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a002808 g     F .text	00000038 Chip_SSP_Init
1a002a54 g     F .text	00000034 Chip_I2C_EventHandlerPolling
1a0001a8  w    F .text	00000002 GINT0_IRQHandler
1a0001a8  w    F .text	00000002 DAC_IRQHandler
1a0017f4 g     F .text	0000001a i2cWrite
1a001b74 g     F .text	00000024 Board_Debug_Init
1a007570 g     F .text	00000012 .hidden __aeabi_dcmpeq
10000944 g       .data	00000000 _edata
1a002840 g     F .text	00000020 Chip_I2C_EventHandler
1a0001a8  w    F .text	00000002 M0SUB_IRQHandler
1a0024a4 g     F .text	00000150 Chip_SetupCoreClock
1a001240 g     F .text	0000000c mpu9250GetGyroZ_rads
1a0005dc g     F .text	0000000a GPIO0_IRQHandler
1000093c g     O .data	00000004 __malloc_trim_threshold
1a000000 g     O .text	00000114 g_pfnVectors
1a002a88 g     F .text	00000084 ResetISR
1a001f24 g     F .text	00000014 SystemCoreClockUpdate
1a006d88 g     F .text	000000d2 __mdiff
1a0075d4 g     F .text	0000004e .hidden __aeabi_d2iz
1a0001a8  w    F .text	00000002 DMA_IRQHandler
1a0001a8  w    F .text	00000002 EVRT_IRQHandler
1a002fb0  w    F .text	00000002 .hidden __aeabi_idiv0
1a000190  w    F .text	00000002 BusFault_Handler
1a003b4c g     F .text	0000005c strlen
1a002424 g     F .text	00000034 Chip_Clock_Enable
1a007560 g     F .text	00000010 .hidden __aeabi_cdcmpeq
1a0074c4 g     F .text	0000008a .hidden __gedf2
1a000b2c g     F .text	0000000a UART3_IRQHandler
1a0001a8  w    F .text	00000002 MCPWM_IRQHandler
1a001228 g     F .text	0000000c mpu9250GetGyroX_rads
1a002f50 g     F .text	0000002e .hidden __gnu_ldivmod_helper
1a0001a8  w    F .text	00000002 M0APP_IRQHandler
1a002dd8 g     F .text	0000003a .hidden __aeabi_f2d
1a00193c g     F .text	000000f4 boardInit
1a002b18 g     F .text	0000027a .hidden __subdf3
1a0001a8  w    F .text	00000002 GINT1_IRQHandler
1a006a50 g     F .text	0000005a __lo0bits
1a0007d4 g     F .text	00000018 tickPowerSet
1a002374 g     F .text	00000044 Chip_Clock_SetBaseClock
1a00165c g     F .text	0000001c cyclesCounterInit
1a0001a8  w    F .text	00000002 GPIO4_IRQHandler
1a001cb0 g     F .text	0000000c Board_SystemInit
1a00698c g     F .text	00000082 __multadd
1a006978 g     F .text	00000012 _Bfree



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 89 2a 00 1a 85 01 00 1a 89 01 00 1a     .....*..........
1a000010:	8d 01 00 1a 91 01 00 1a 95 01 00 1a b6 4d ff 53     .............M.S
	...
1a00002c:	99 01 00 1a 9d 01 00 1a 00 00 00 00 a1 01 00 1a     ................
1a00003c:	69 08 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     i...............
1a00004c:	00 00 00 00 a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00005c:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00006c:	a9 01 00 1a 19 18 00 1a 55 18 00 1a 95 18 00 1a     ........U.......
1a00007c:	d5 18 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00008c:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00009c:	a9 01 00 1a 79 01 00 1a a9 01 00 1a 21 0b 00 1a     ....y.......!...
1a0000ac:	2d 0b 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     -...............
1a0000bc:	a9 01 00 1a dd 05 00 1a e9 05 00 1a f5 05 00 1a     ................
1a0000cc:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000dc:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000ec:	a9 01 00 1a 00 00 00 00 a9 01 00 1a a9 01 00 1a     ................
1a0000fc:	a9 01 00 1a 00 00 00 00 a9 01 00 1a a9 01 00 1a     ................
1a00010c:	a9 01 00 1a a9 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a007d58 	.word	0x1a007d58
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000944 	.word	0x00000944
1a000120:	1a007d58 	.word	0x1a007d58
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a007d58 	.word	0x1a007d58
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a007d58 	.word	0x1a007d58
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a007d58 	.word	0x1a007d58
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000948 	.word	0x10000948
1a000154:	000001d4 	.word	0x000001d4
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a000178:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a00017a:	2000      	movs	r0, #0
1a00017c:	f000 fb8c 	bl	1a000898 <uartProcessIRQ>
1a000180:	bd08      	pop	{r3, pc}
1a000182:	bf00      	nop

1a000184 <NMI_Handler>:
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <NMI_Handler>
1a000186:	bf00      	nop

1a000188 <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <HardFault_Handler>
1a00018a:	bf00      	nop

1a00018c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00018c:	e7fe      	b.n	1a00018c <MemManage_Handler>
1a00018e:	bf00      	nop

1a000190 <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a000190:	e7fe      	b.n	1a000190 <BusFault_Handler>
1a000192:	bf00      	nop

1a000194 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000194:	e7fe      	b.n	1a000194 <UsageFault_Handler>
1a000196:	bf00      	nop

1a000198 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000198:	e7fe      	b.n	1a000198 <SVC_Handler>
1a00019a:	bf00      	nop

1a00019c <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a00019c:	e7fe      	b.n	1a00019c <DebugMon_Handler>
1a00019e:	bf00      	nop

1a0001a0 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a0001a0:	e7fe      	b.n	1a0001a0 <PendSV_Handler>
1a0001a2:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a0001a4:	e7fe      	b.n	1a0001a4 <PendSV_Handler+0x4>
1a0001a6:	bf00      	nop

1a0001a8 <ADC0_IRQHandler>:
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001a8:	e7fe      	b.n	1a0001a8 <ADC0_IRQHandler>
1a0001aa:	bf00      	nop

1a0001ac <data_init>:
// ResetISR() function in order to cope with MCUs with multiple banks of
// memory.
//*****************************************************************************
        __attribute__((section(".after_vectors"
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a0001ac:	b410      	push	{r4}
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001ae:	2300      	movs	r3, #0
1a0001b0:	e004      	b.n	1a0001bc <data_init+0x10>
        *pulDest++ = *pulSrc++;
1a0001b2:	6804      	ldr	r4, [r0, #0]
1a0001b4:	600c      	str	r4, [r1, #0]
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a0001b8:	3004      	adds	r0, #4
1a0001ba:	3104      	adds	r1, #4
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001bc:	4293      	cmp	r3, r2
1a0001be:	d3f8      	bcc.n	1a0001b2 <data_init+0x6>
        *pulDest++ = *pulSrc++;
}
1a0001c0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001c4:	4770      	bx	lr
1a0001c6:	bf00      	nop

1a0001c8 <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c8:	2300      	movs	r3, #0
1a0001ca:	e003      	b.n	1a0001d4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001cc:	2200      	movs	r2, #0
1a0001ce:	6002      	str	r2, [r0, #0]

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001d0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001d2:	3004      	adds	r0, #4

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001d4:	428b      	cmp	r3, r1
1a0001d6:	d3f9      	bcc.n	1a0001cc <bss_init+0x4>
        *pulDest++ = 0;
}
1a0001d8:	4770      	bx	lr
1a0001da:	bf00      	nop
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <hm10bleTest>:
   return 0 ;
}

/*==================[end of file]============================================*/
bool_t hm10bleTest( int32_t uart )
{
1a000300:	b510      	push	{r4, lr}
1a000302:	b082      	sub	sp, #8
   uartWriteString( uart, "AT\r\n" );
1a000304:	b2c4      	uxtb	r4, r0
1a000306:	4620      	mov	r0, r4
1a000308:	4906      	ldr	r1, [pc, #24]	; (1a000324 <hm10bleTest+0x24>)
1a00030a:	f000 fbfd 	bl	1a000b08 <uartWriteString>
   return waitForReceiveStringOrTimeoutBlocking( uart,
1a00030e:	2232      	movs	r2, #50	; 0x32
1a000310:	2300      	movs	r3, #0
1a000312:	e9cd 2300 	strd	r2, r3, [sp]
1a000316:	4620      	mov	r0, r4
1a000318:	4903      	ldr	r1, [pc, #12]	; (1a000328 <hm10bleTest+0x28>)
1a00031a:	2204      	movs	r2, #4
1a00031c:	f000 fbc8 	bl	1a000ab0 <waitForReceiveStringOrTimeoutBlocking>
                                                 "OK\r\n", strlen("OK\r\n"),
                                                 50 );
}
1a000320:	b002      	add	sp, #8
1a000322:	bd10      	pop	{r4, pc}
1a000324:	1a007624 	.word	0x1a007624
1a000328:	1a00762c 	.word	0x1a00762c

1a00032c <main>:
/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

/* FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE RESET. */
int main(void){
1a00032c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00032e:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
   /* ------------- INICIALIZACIONES ------------- */
char strGiroscopo[400], strMagnetometro[400],strAcelerometro[400],strTemperatura[400];
boardConfig();
1a000332:	f001 fb03 	bl	1a00193c <boardInit>

   // Inicializar UART_232 para conectar al modulo bluetooth
     consolePrintConfigUart( UART_BLUETOOTH, 9600 );
1a000336:	4878      	ldr	r0, [pc, #480]	; (1a000518 <main+0x1ec>)
1a000338:	2105      	movs	r1, #5
1a00033a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
1a00033e:	f001 fae9 	bl	1a001914 <printInitUart>
     debugPrintlnString( "UART_BLUETOOTH para modulo Bluetooth configurada." );
1a000342:	4c76      	ldr	r4, [pc, #472]	; (1a00051c <main+0x1f0>)
1a000344:	7820      	ldrb	r0, [r4, #0]
1a000346:	4976      	ldr	r1, [pc, #472]	; (1a000520 <main+0x1f4>)
1a000348:	f001 faec 	bl	1a001924 <printString>
1a00034c:	7820      	ldrb	r0, [r4, #0]
1a00034e:	f001 faed 	bl	1a00192c <printEnter>

     // Inicializar UART_USB para conectar a la PC
     debugPrintConfigUart( UART_PC, 115200 );
1a000352:	4620      	mov	r0, r4
1a000354:	2103      	movs	r1, #3
1a000356:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a00035a:	f001 fadb 	bl	1a001914 <printInitUart>
     debugPrintlnString( "UART_PC configurada." );
1a00035e:	7820      	ldrb	r0, [r4, #0]
1a000360:	4970      	ldr	r1, [pc, #448]	; (1a000524 <main+0x1f8>)
1a000362:	f001 fadf 	bl	1a001924 <printString>
1a000366:	7820      	ldrb	r0, [r4, #0]
1a000368:	f001 fae0 	bl	1a00192c <printEnter>


     uint8_t data = 0;

     uartWriteString( UART_PC, "Testeto si el modulo esta conectado enviando: AT\r\n" );
1a00036c:	2003      	movs	r0, #3
1a00036e:	496e      	ldr	r1, [pc, #440]	; (1a000528 <main+0x1fc>)
1a000370:	f000 fbca 	bl	1a000b08 <uartWriteString>
      if( hm10bleTest( UART_BLUETOOTH ) ){
1a000374:	2005      	movs	r0, #5
1a000376:	f7ff ffc3 	bl	1a000300 <hm10bleTest>
1a00037a:	b118      	cbz	r0, 1a000384 <main+0x58>
    	  uartWriteString( UART_PC,"Modulo conectado correctamente." );
1a00037c:	2003      	movs	r0, #3
1a00037e:	496b      	ldr	r1, [pc, #428]	; (1a00052c <main+0x200>)
1a000380:	f000 fbc2 	bl	1a000b08 <uartWriteString>
      }



   // Inicializar la IMU
      uartWriteString( UART_PC,"Inicializando IMU MPU9250...\r\n" );
1a000384:	2003      	movs	r0, #3
1a000386:	496a      	ldr	r1, [pc, #424]	; (1a000530 <main+0x204>)
1a000388:	f000 fbbe 	bl	1a000b08 <uartWriteString>
   int8_t status;
   status = mpu9250Init( addr );
1a00038c:	4b69      	ldr	r3, [pc, #420]	; (1a000534 <main+0x208>)
1a00038e:	7818      	ldrb	r0, [r3, #0]
1a000390:	f001 f804 	bl	1a00139c <mpu9250Init>

   if( status < 0 ){
1a000394:	2800      	cmp	r0, #0
1a000396:	da20      	bge.n	1a0003da <main+0xae>
	   uartWriteString( UART_PC, "IMU MPU9250 no inicializado, chequee las conexiones:\r\n\r\n" );
1a000398:	2003      	movs	r0, #3
1a00039a:	4967      	ldr	r1, [pc, #412]	; (1a000538 <main+0x20c>)
1a00039c:	f000 fbb4 	bl	1a000b08 <uartWriteString>
	   uartWriteString( UART_PC, "MPU9250 ---- EDU-CIAA-NXP\r\n\r\n" );
1a0003a0:	2003      	movs	r0, #3
1a0003a2:	4966      	ldr	r1, [pc, #408]	; (1a00053c <main+0x210>)
1a0003a4:	f000 fbb0 	bl	1a000b08 <uartWriteString>
	   uartWriteString( UART_PC, "    VCC ---- 3.3V\r\n" );
1a0003a8:	2003      	movs	r0, #3
1a0003aa:	4965      	ldr	r1, [pc, #404]	; (1a000540 <main+0x214>)
1a0003ac:	f000 fbac 	bl	1a000b08 <uartWriteString>
	   uartWriteString( UART_PC, "    GND ---- GND\r\n" );
1a0003b0:	2003      	movs	r0, #3
1a0003b2:	4964      	ldr	r1, [pc, #400]	; (1a000544 <main+0x218>)
1a0003b4:	f000 fba8 	bl	1a000b08 <uartWriteString>
	   uartWriteString( UART_PC, "    SCL ---- SCL\r\n" );
1a0003b8:	2003      	movs	r0, #3
1a0003ba:	4963      	ldr	r1, [pc, #396]	; (1a000548 <main+0x21c>)
1a0003bc:	f000 fba4 	bl	1a000b08 <uartWriteString>
	   uartWriteString( UART_PC, "    SDA ---- SDA\r\n" );
1a0003c0:	2003      	movs	r0, #3
1a0003c2:	4962      	ldr	r1, [pc, #392]	; (1a00054c <main+0x220>)
1a0003c4:	f000 fba0 	bl	1a000b08 <uartWriteString>
	   uartWriteString( UART_PC, "    AD0 ---- GND\r\n\r\n" );
1a0003c8:	2003      	movs	r0, #3
1a0003ca:	4961      	ldr	r1, [pc, #388]	; (1a000550 <main+0x224>)
1a0003cc:	f000 fb9c 	bl	1a000b08 <uartWriteString>
	   uartWriteString( UART_PC, "Se detiene el programa.\r\n" );
1a0003d0:	2003      	movs	r0, #3
1a0003d2:	4960      	ldr	r1, [pc, #384]	; (1a000554 <main+0x228>)
1a0003d4:	f000 fb98 	bl	1a000b08 <uartWriteString>
      while(1);
1a0003d8:	e7fe      	b.n	1a0003d8 <main+0xac>
   }
   uartWriteString( UART_PC,"IMU MPU9250 inicializado correctamente.\r\n\r\n" );
1a0003da:	2003      	movs	r0, #3
1a0003dc:	495e      	ldr	r1, [pc, #376]	; (1a000558 <main+0x22c>)
1a0003de:	f000 fb93 	bl	1a000b08 <uartWriteString>

   /* ------------- REPETIR POR SIEMPRE ------------- */
   while(TRUE){

      //Leer el sensor y guardar en estructura de control
      mpu9250Read();
1a0003e2:	f000 fdc1 	bl	1a000f68 <mpu9250Read>

      // Imprimir resultados
       sprintf( strGiroscopo,"Giroscopo:      (%f, %f, %f)   [rad/s]\r\n",
              mpu9250GetGyroX_rads(),
1a0003e6:	f000 ff1f 	bl	1a001228 <mpu9250GetGyroX_rads>
1a0003ea:	ee10 4a10 	vmov	r4, s0
              mpu9250GetGyroY_rads(),
1a0003ee:	f000 ff21 	bl	1a001234 <mpu9250GetGyroY_rads>
1a0003f2:	ee10 7a10 	vmov	r7, s0
              mpu9250GetGyroZ_rads()
1a0003f6:	f000 ff23 	bl	1a001240 <mpu9250GetGyroZ_rads>
1a0003fa:	ee10 6a10 	vmov	r6, s0

      //Leer el sensor y guardar en estructura de control
      mpu9250Read();

      // Imprimir resultados
       sprintf( strGiroscopo,"Giroscopo:      (%f, %f, %f)   [rad/s]\r\n",
1a0003fe:	4620      	mov	r0, r4
1a000400:	f002 fcea 	bl	1a002dd8 <__aeabi_f2d>
1a000404:	4604      	mov	r4, r0
1a000406:	460d      	mov	r5, r1
1a000408:	4638      	mov	r0, r7
1a00040a:	f002 fce5 	bl	1a002dd8 <__aeabi_f2d>
1a00040e:	e9cd 0100 	strd	r0, r1, [sp]
1a000412:	4630      	mov	r0, r6
1a000414:	f002 fce0 	bl	1a002dd8 <__aeabi_f2d>
1a000418:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a00041c:	f50d 6098 	add.w	r0, sp, #1216	; 0x4c0
1a000420:	494e      	ldr	r1, [pc, #312]	; (1a00055c <main+0x230>)
1a000422:	4622      	mov	r2, r4
1a000424:	462b      	mov	r3, r5
1a000426:	f003 fb6b 	bl	1a003b00 <sprintf>
              mpu9250GetGyroX_rads(),
              mpu9250GetGyroY_rads(),
              mpu9250GetGyroZ_rads()
            );
      uartWriteString( UART_PC,strGiroscopo);
1a00042a:	2003      	movs	r0, #3
1a00042c:	f50d 6198 	add.w	r1, sp, #1216	; 0x4c0
1a000430:	f000 fb6a 	bl	1a000b08 <uartWriteString>
      uartWriteString( UART_BLUETOOTH,strGiroscopo);
1a000434:	2005      	movs	r0, #5
1a000436:	f50d 6198 	add.w	r1, sp, #1216	; 0x4c0
1a00043a:	f000 fb65 	bl	1a000b08 <uartWriteString>


		sprintf(strAcelerometro, "Acelerometro:   (%f, %f, %f)   [m/s2]\r\n",
              mpu9250GetAccelX_mss(),
1a00043e:	f000 fee1 	bl	1a001204 <mpu9250GetAccelX_mss>
1a000442:	ee10 4a10 	vmov	r4, s0
              mpu9250GetAccelY_mss(),
1a000446:	f000 fee3 	bl	1a001210 <mpu9250GetAccelY_mss>
1a00044a:	ee10 7a10 	vmov	r7, s0
              mpu9250GetAccelZ_mss()
1a00044e:	f000 fee5 	bl	1a00121c <mpu9250GetAccelZ_mss>
1a000452:	ee10 6a10 	vmov	r6, s0
            );
      uartWriteString( UART_PC,strGiroscopo);
      uartWriteString( UART_BLUETOOTH,strGiroscopo);


		sprintf(strAcelerometro, "Acelerometro:   (%f, %f, %f)   [m/s2]\r\n",
1a000456:	4620      	mov	r0, r4
1a000458:	f002 fcbe 	bl	1a002dd8 <__aeabi_f2d>
1a00045c:	4604      	mov	r4, r0
1a00045e:	460d      	mov	r5, r1
1a000460:	4638      	mov	r0, r7
1a000462:	f002 fcb9 	bl	1a002dd8 <__aeabi_f2d>
1a000466:	e9cd 0100 	strd	r0, r1, [sp]
1a00046a:	4630      	mov	r0, r6
1a00046c:	f002 fcb4 	bl	1a002dd8 <__aeabi_f2d>
1a000470:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a000474:	a868      	add	r0, sp, #416	; 0x1a0
1a000476:	493a      	ldr	r1, [pc, #232]	; (1a000560 <main+0x234>)
1a000478:	4622      	mov	r2, r4
1a00047a:	462b      	mov	r3, r5
1a00047c:	f003 fb40 	bl	1a003b00 <sprintf>
              mpu9250GetAccelX_mss(),
              mpu9250GetAccelY_mss(),
              mpu9250GetAccelZ_mss()
            );
	      uartWriteString( UART_PC,strAcelerometro);
1a000480:	2003      	movs	r0, #3
1a000482:	a968      	add	r1, sp, #416	; 0x1a0
1a000484:	f000 fb40 	bl	1a000b08 <uartWriteString>
	      uartWriteString( UART_BLUETOOTH,strAcelerometro);
1a000488:	2005      	movs	r0, #5
1a00048a:	a968      	add	r1, sp, #416	; 0x1a0
1a00048c:	f000 fb3c 	bl	1a000b08 <uartWriteString>


		sprintf(strMagnetometro, "Magnetometro:   (%f, %f, %f)   [uT]\r\n",
              mpu9250GetMagX_uT(),
1a000490:	f001 f8cc 	bl	1a00162c <mpu9250GetMagX_uT>
1a000494:	ee10 4a10 	vmov	r4, s0
              mpu9250GetMagY_uT(),
1a000498:	f001 f8ce 	bl	1a001638 <mpu9250GetMagY_uT>
1a00049c:	ee10 7a10 	vmov	r7, s0
              mpu9250GetMagZ_uT()
1a0004a0:	f001 f8d0 	bl	1a001644 <mpu9250GetMagZ_uT>
1a0004a4:	ee10 6a10 	vmov	r6, s0
            );
	      uartWriteString( UART_PC,strAcelerometro);
	      uartWriteString( UART_BLUETOOTH,strAcelerometro);


		sprintf(strMagnetometro, "Magnetometro:   (%f, %f, %f)   [uT]\r\n",
1a0004a8:	4620      	mov	r0, r4
1a0004aa:	f002 fc95 	bl	1a002dd8 <__aeabi_f2d>
1a0004ae:	4604      	mov	r4, r0
1a0004b0:	460d      	mov	r5, r1
1a0004b2:	4638      	mov	r0, r7
1a0004b4:	f002 fc90 	bl	1a002dd8 <__aeabi_f2d>
1a0004b8:	e9cd 0100 	strd	r0, r1, [sp]
1a0004bc:	4630      	mov	r0, r6
1a0004be:	f002 fc8b 	bl	1a002dd8 <__aeabi_f2d>
1a0004c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a0004c6:	a8cc      	add	r0, sp, #816	; 0x330
1a0004c8:	4926      	ldr	r1, [pc, #152]	; (1a000564 <main+0x238>)
1a0004ca:	4622      	mov	r2, r4
1a0004cc:	462b      	mov	r3, r5
1a0004ce:	f003 fb17 	bl	1a003b00 <sprintf>
              mpu9250GetMagX_uT(),
              mpu9250GetMagY_uT(),
              mpu9250GetMagZ_uT()
            );
		 uartWriteString( UART_PC,strMagnetometro);
1a0004d2:	2003      	movs	r0, #3
1a0004d4:	a9cc      	add	r1, sp, #816	; 0x330
1a0004d6:	f000 fb17 	bl	1a000b08 <uartWriteString>
		 uartWriteString( UART_BLUETOOTH,strMagnetometro);
1a0004da:	2005      	movs	r0, #5
1a0004dc:	a9cc      	add	r1, sp, #816	; 0x330
1a0004de:	f000 fb13 	bl	1a000b08 <uartWriteString>


		sprintf(strTemperatura, "Temperatura:    %f   [C]\r\n\r\n",
              mpu9250GetTemperature_C()
1a0004e2:	f001 f8b5 	bl	1a001650 <mpu9250GetTemperature_C>
            );
		 uartWriteString( UART_PC,strMagnetometro);
		 uartWriteString( UART_BLUETOOTH,strMagnetometro);


		sprintf(strTemperatura, "Temperatura:    %f   [C]\r\n\r\n",
1a0004e6:	ee10 0a10 	vmov	r0, s0
1a0004ea:	f002 fc75 	bl	1a002dd8 <__aeabi_f2d>
1a0004ee:	4602      	mov	r2, r0
1a0004f0:	460b      	mov	r3, r1
1a0004f2:	a804      	add	r0, sp, #16
1a0004f4:	491c      	ldr	r1, [pc, #112]	; (1a000568 <main+0x23c>)
1a0004f6:	f003 fb03 	bl	1a003b00 <sprintf>
              mpu9250GetTemperature_C()
            );
		 uartWriteString( UART_PC,strTemperatura);
1a0004fa:	2003      	movs	r0, #3
1a0004fc:	a904      	add	r1, sp, #16
1a0004fe:	f000 fb03 	bl	1a000b08 <uartWriteString>
		 uartWriteString( UART_BLUETOOTH,strTemperatura);
1a000502:	2005      	movs	r0, #5
1a000504:	a904      	add	r1, sp, #16
1a000506:	f000 faff 	bl	1a000b08 <uartWriteString>


      delay(3000);
1a00050a:	f640 30b8 	movw	r0, #3000	; 0xbb8
1a00050e:	2100      	movs	r1, #0
1a000510:	f001 f8b2 	bl	1a001678 <delay>
   }
1a000514:	e765      	b.n	1a0003e2 <main+0xb6>
1a000516:	bf00      	nop
1a000518:	10000948 	.word	0x10000948
1a00051c:	10000949 	.word	0x10000949
1a000520:	1a007634 	.word	0x1a007634
1a000524:	1a007668 	.word	0x1a007668
1a000528:	1a007680 	.word	0x1a007680
1a00052c:	1a0076b4 	.word	0x1a0076b4
1a000530:	1a0076d4 	.word	0x1a0076d4
1a000534:	10000000 	.word	0x10000000
1a000538:	1a0076f4 	.word	0x1a0076f4
1a00053c:	1a007730 	.word	0x1a007730
1a000540:	1a007750 	.word	0x1a007750
1a000544:	1a007764 	.word	0x1a007764
1a000548:	1a007778 	.word	0x1a007778
1a00054c:	1a00778c 	.word	0x1a00778c
1a000550:	1a0077a0 	.word	0x1a0077a0
1a000554:	1a0077b8 	.word	0x1a0077b8
1a000558:	1a0077d4 	.word	0x1a0077d4
1a00055c:	1a007800 	.word	0x1a007800
1a000560:	1a00782c 	.word	0x1a00782c
1a000564:	1a007854 	.word	0x1a007854
1a000568:	1a00787c 	.word	0x1a00787c

1a00056c <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a00056c:	2301      	movs	r3, #1
1a00056e:	4083      	lsls	r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a000570:	4a01      	ldr	r2, [pc, #4]	; (1a000578 <clearInterrupt+0xc>)
1a000572:	6253      	str	r3, [r2, #36]	; 0x24
1a000574:	4770      	bx	lr
1a000576:	bf00      	nop
1a000578:	40087000 	.word	0x40087000

1a00057c <serveInterrupt>:
}

static void serveInterrupt(uint8_t irqChannel)
{
1a00057c:	b570      	push	{r4, r5, r6, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a00057e:	4b13      	ldr	r3, [pc, #76]	; (1a0005cc <serveInterrupt+0x50>)
1a000580:	5c1b      	ldrb	r3, [r3, r0]
 * @param	pPININT	: The base address of Pin interrupt block
 * @return	PININT states (bit n = high) with a latched rise state detected
 */
STATIC INLINE uint32_t Chip_PININT_GetRiseStates(LPC_PIN_INT_T *pPININT)
{
	return pPININT->RISE;
1a000582:	4a13      	ldr	r2, [pc, #76]	; (1a0005d0 <serveInterrupt+0x54>)
1a000584:	69d2      	ldr	r2, [r2, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a000586:	2401      	movs	r4, #1
1a000588:	4084      	lsls	r4, r0
1a00058a:	4214      	tst	r4, r2
1a00058c:	d00a      	beq.n	1a0005a4 <serveInterrupt+0x28>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a00058e:	4a11      	ldr	r2, [pc, #68]	; (1a0005d4 <serveInterrupt+0x58>)
1a000590:	6892      	ldr	r2, [r2, #8]
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly

      /* Save actual timer count in echoRiseTime */
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a000592:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a000596:	00db      	lsls	r3, r3, #3
1a000598:	490f      	ldr	r1, [pc, #60]	; (1a0005d8 <serveInterrupt+0x5c>)
1a00059a:	440b      	add	r3, r1
1a00059c:	605a      	str	r2, [r3, #4]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearRiseStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->RISE = pins;
1a00059e:	4b0c      	ldr	r3, [pc, #48]	; (1a0005d0 <serveInterrupt+0x54>)
1a0005a0:	61dc      	str	r4, [r3, #28]
1a0005a2:	e00f      	b.n	1a0005c4 <serveInterrupt+0x48>
1a0005a4:	4a0b      	ldr	r2, [pc, #44]	; (1a0005d4 <serveInterrupt+0x58>)
1a0005a6:	6891      	ldr	r1, [r2, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0005a8:	4d0b      	ldr	r5, [pc, #44]	; (1a0005d8 <serveInterrupt+0x5c>)
1a0005aa:	005e      	lsls	r6, r3, #1
1a0005ac:	18f2      	adds	r2, r6, r3
1a0005ae:	00d2      	lsls	r2, r2, #3
1a0005b0:	442a      	add	r2, r5
1a0005b2:	6091      	str	r1, [r2, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a0005b4:	6852      	ldr	r2, [r2, #4]
1a0005b6:	1a89      	subs	r1, r1, r2
1a0005b8:	4433      	add	r3, r6
1a0005ba:	00db      	lsls	r3, r3, #3
1a0005bc:	442b      	add	r3, r5
1a0005be:	60d9      	str	r1, [r3, #12]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearFallStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->FALL = pins;
1a0005c0:	4b03      	ldr	r3, [pc, #12]	; (1a0005d0 <serveInterrupt+0x54>)
1a0005c2:	621c      	str	r4, [r3, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a0005c4:	f7ff ffd2 	bl	1a00056c <clearInterrupt>
1a0005c8:	bd70      	pop	{r4, r5, r6, pc}
1a0005ca:	bf00      	nop
1a0005cc:	1a0078a8 	.word	0x1a0078a8
1a0005d0:	40087000 	.word	0x40087000
1a0005d4:	40084000 	.word	0x40084000
1a0005d8:	10000004 	.word	0x10000004

1a0005dc <GPIO0_IRQHandler>:
/*==================[ISR external functions definition]======================*/
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
void GPIO0_IRQHandler(void)
{
1a0005dc:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a0005de:	2000      	movs	r0, #0
1a0005e0:	f7ff ffcc 	bl	1a00057c <serveInterrupt>
1a0005e4:	bd08      	pop	{r3, pc}
1a0005e6:	bf00      	nop

1a0005e8 <GPIO1_IRQHandler>:
}

void GPIO1_IRQHandler(void)
{
1a0005e8:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a0005ea:	2001      	movs	r0, #1
1a0005ec:	f7ff ffc6 	bl	1a00057c <serveInterrupt>
1a0005f0:	bd08      	pop	{r3, pc}
1a0005f2:	bf00      	nop

1a0005f4 <GPIO2_IRQHandler>:
}

void GPIO2_IRQHandler(void)
{
1a0005f4:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a0005f6:	2002      	movs	r0, #2
1a0005f8:	f7ff ffc0 	bl	1a00057c <serveInterrupt>
1a0005fc:	bd08      	pop	{r3, pc}
1a0005fe:	bf00      	nop

1a000600 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a000600:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a000602:	4d09      	ldr	r5, [pc, #36]	; (1a000628 <gpioObtainPinInit+0x28>)
1a000604:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a000608:	182c      	adds	r4, r5, r0
1a00060a:	5c28      	ldrb	r0, [r5, r0]
1a00060c:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00060e:	7861      	ldrb	r1, [r4, #1]
1a000610:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a000612:	78a2      	ldrb	r2, [r4, #2]
1a000614:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a000616:	78e2      	ldrb	r2, [r4, #3]
1a000618:	9b02      	ldr	r3, [sp, #8]
1a00061a:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00061c:	7922      	ldrb	r2, [r4, #4]
1a00061e:	9b03      	ldr	r3, [sp, #12]
1a000620:	701a      	strb	r2, [r3, #0]
}
1a000622:	bc30      	pop	{r4, r5}
1a000624:	4770      	bx	lr
1a000626:	bf00      	nop
1a000628:	1a0078ac 	.word	0x1a0078ac

1a00062c <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a00062c:	b570      	push	{r4, r5, r6, lr}
1a00062e:	b084      	sub	sp, #16
1a000630:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a000632:	2300      	movs	r3, #0
1a000634:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a000638:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00063c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a000640:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a000644:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a000648:	ab03      	add	r3, sp, #12
1a00064a:	9300      	str	r3, [sp, #0]
1a00064c:	f10d 030b 	add.w	r3, sp, #11
1a000650:	9301      	str	r3, [sp, #4]
1a000652:	f10d 010f 	add.w	r1, sp, #15
1a000656:	f10d 020e 	add.w	r2, sp, #14
1a00065a:	f10d 030d 	add.w	r3, sp, #13
1a00065e:	f7ff ffcf 	bl	1a000600 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a000662:	2c05      	cmp	r4, #5
1a000664:	f200 80a8 	bhi.w	1a0007b8 <gpioInit+0x18c>
1a000668:	e8df f004 	tbb	[pc, r4]
1a00066c:	46278408 	.word	0x46278408
1a000670:	0365      	.short	0x0365

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a000672:	4853      	ldr	r0, [pc, #332]	; (1a0007c0 <gpioInit+0x194>)
1a000674:	f002 f886 	bl	1a002784 <Chip_GPIO_Init>
/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{

   bool_t ret_val     = 1;
1a000678:	2001      	movs	r0, #1
   switch(config) {

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
      break;
1a00067a:	e09e      	b.n	1a0007ba <gpioInit+0x18e>

   case GPIO_INPUT:
      Chip_SCU_PinMux(
1a00067c:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000680:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000684:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a000688:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00068c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000690:	494c      	ldr	r1, [pc, #304]	; (1a0007c4 <gpioInit+0x198>)
1a000692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000696:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00069a:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00069e:	2001      	movs	r0, #1
1a0006a0:	fa00 f402 	lsl.w	r4, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0006a4:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a0006a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0006ac:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a0006b0:	ea22 0204 	bic.w	r2, r2, r4
1a0006b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a0006b8:	e07f      	b.n	1a0007ba <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLUP:
      Chip_SCU_PinMux(
1a0006ba:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0006be:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0006c2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0006c6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0006ca:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0006ce:	493d      	ldr	r1, [pc, #244]	; (1a0007c4 <gpioInit+0x198>)
1a0006d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0006d4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0006d8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0006dc:	2001      	movs	r0, #1
1a0006de:	fa00 f402 	lsl.w	r4, r0, r2
1a0006e2:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a0006e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0006ea:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a0006ee:	ea22 0204 	bic.w	r2, r2, r4
1a0006f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a0006f6:	e060      	b.n	1a0007ba <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLDOWN:
      Chip_SCU_PinMux(
1a0006f8:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0006fc:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000700:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a000704:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000708:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00070c:	492d      	ldr	r1, [pc, #180]	; (1a0007c4 <gpioInit+0x198>)
1a00070e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLDOWN | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000712:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000716:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00071a:	2001      	movs	r0, #1
1a00071c:	fa00 f402 	lsl.w	r4, r0, r2
1a000720:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a000724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a000728:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a00072c:	ea22 0204 	bic.w	r2, r2, r4
1a000730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a000734:	e041      	b.n	1a0007ba <gpioInit+0x18e>
      break;
   case GPIO_INPUT_PULLUP_PULLDOWN:
      Chip_SCU_PinMux(
1a000736:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00073a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00073e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a000742:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000746:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00074a:	491e      	ldr	r1, [pc, #120]	; (1a0007c4 <gpioInit+0x198>)
1a00074c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_REPEATER | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000750:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000754:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000758:	2001      	movs	r0, #1
1a00075a:	fa00 f402 	lsl.w	r4, r0, r2
1a00075e:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a000762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a000766:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a00076a:	ea22 0204 	bic.w	r2, r2, r4
1a00076e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a000772:	e022      	b.n	1a0007ba <gpioInit+0x18e>
      break;

   case GPIO_OUTPUT:
      Chip_SCU_PinMux(
1a000774:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000778:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00077c:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a000780:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000784:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000788:	490e      	ldr	r1, [pc, #56]	; (1a0007c4 <gpioInit+0x198>)
1a00078a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_INBUFF_EN,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a00078e:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a000792:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a000796:	b25a      	sxtb	r2, r3
1a000798:	2001      	movs	r0, #1
1a00079a:	fa00 f602 	lsl.w	r6, r0, r2
 * Chip_GPIO_SetPortDIR() function instead.
 */
STATIC INLINE void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
1a00079e:	4a08      	ldr	r2, [pc, #32]	; (1a0007c0 <gpioInit+0x194>)
1a0007a0:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0007a4:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
1a0007a8:	4331      	orrs	r1, r6
1a0007aa:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a0007ae:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0007b2:	2100      	movs	r1, #0
1a0007b4:	54d1      	strb	r1, [r2, r3]
1a0007b6:	e000      	b.n	1a0007ba <gpioInit+0x18e>
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
      break;

   default:
      ret_val = 0;
1a0007b8:	2000      	movs	r0, #0
      break;
   }

   return ret_val;

}
1a0007ba:	b004      	add	sp, #16
1a0007bc:	bd70      	pop	{r4, r5, r6, pc}
1a0007be:	bf00      	nop
1a0007c0:	400f4000 	.word	0x400f4000
1a0007c4:	40086000 	.word	0x40086000

1a0007c8 <tickRead>:

// Read Tick Counter
tick_t tickRead( void )
{
   return tickCounter;
}
1a0007c8:	4b01      	ldr	r3, [pc, #4]	; (1a0007d0 <tickRead+0x8>)
1a0007ca:	e9d3 0100 	ldrd	r0, r1, [r3]
1a0007ce:	4770      	bx	lr
1a0007d0:	10000b08 	.word	0x10000b08

1a0007d4 <tickPowerSet>:
}

// Enable or disable the peripheral energy and clock
void tickPowerSet( bool_t power )
{
   if( power ) {
1a0007d4:	b118      	cbz	r0, 1a0007de <tickPowerSet+0xa>
      // Enable SysTick IRQ and SysTick Timer
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a0007d6:	2207      	movs	r2, #7
1a0007d8:	4b03      	ldr	r3, [pc, #12]	; (1a0007e8 <tickPowerSet+0x14>)
1a0007da:	601a      	str	r2, [r3, #0]
1a0007dc:	4770      	bx	lr
                      SysTick_CTRL_TICKINT_Msk   |
                      SysTick_CTRL_ENABLE_Msk;
   } else {
      // Disable SysTick IRQ and SysTick Timer
      SysTick->CTRL = 0x0000000;
1a0007de:	2200      	movs	r2, #0
1a0007e0:	4b01      	ldr	r3, [pc, #4]	; (1a0007e8 <tickPowerSet+0x14>)
1a0007e2:	601a      	str	r2, [r3, #0]
1a0007e4:	4770      	bx	lr
1a0007e6:	bf00      	nop
1a0007e8:	e000e010 	.word	0xe000e010

1a0007ec <tickInit>:

void tickerCallback( void );

// Tick Initialization and rate configuration from 1 to 50 ms
bool_t tickInit( tick_t tickRateMSvalue )
{
1a0007ec:	b510      	push	{r4, lr}
   #ifndef TICK_OVER_RTOS
      bool_t ret_val = 1;
      tick_t tickRateHz = 0;
      if( tickRateMSvalue == 0 ) {
1a0007ee:	ea50 0301 	orrs.w	r3, r0, r1
1a0007f2:	d104      	bne.n	1a0007fe <tickInit+0x12>
         tickPowerSet( OFF );
1a0007f4:	2000      	movs	r0, #0
1a0007f6:	f7ff ffed 	bl	1a0007d4 <tickPowerSet>
         ret_val = 0;
1a0007fa:	2000      	movs	r0, #0
1a0007fc:	bd10      	pop	{r4, pc}
      } else {
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a0007fe:	f110 32ff 	adds.w	r2, r0, #4294967295
1a000802:	f141 33ff 	adc.w	r3, r1, #4294967295
1a000806:	2b00      	cmp	r3, #0
1a000808:	bf08      	it	eq
1a00080a:	2a32      	cmpeq	r2, #50	; 0x32
1a00080c:	d222      	bcs.n	1a000854 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a00080e:	4b12      	ldr	r3, [pc, #72]	; (1a000858 <tickInit+0x6c>)
1a000810:	e9c3 0100 	strd	r0, r1, [r3]
            tickRateHz =  200 =>  200 ticks per second =>  5 ms tick
            tickRateHz =  100 =>  100 ticks per second => 10 ms tick
            tickRateHz =   20 =>   20 ticks per second => 50 ms tick
            */
            // Init SysTick interrupt, tickRateHz ticks per second
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a000814:	4b11      	ldr	r3, [pc, #68]	; (1a00085c <tickInit+0x70>)
1a000816:	681c      	ldr	r4, [r3, #0]
1a000818:	fba4 2300 	umull	r2, r3, r4, r0
1a00081c:	fb04 3301 	mla	r3, r4, r1, r3
1a000820:	4610      	mov	r0, r2
1a000822:	4619      	mov	r1, r3
1a000824:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a000828:	2300      	movs	r3, #0
1a00082a:	f002 fb79 	bl	1a002f20 <__aeabi_uldivmod>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1a00082e:	3801      	subs	r0, #1
1a000830:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a000834:	d209      	bcs.n	1a00084a <tickInit+0x5e>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1a000836:	4b0a      	ldr	r3, [pc, #40]	; (1a000860 <tickInit+0x74>)
1a000838:	6058      	str	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a00083a:	21e0      	movs	r1, #224	; 0xe0
1a00083c:	4a09      	ldr	r2, [pc, #36]	; (1a000864 <tickInit+0x78>)
1a00083e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1a000842:	2200      	movs	r2, #0
1a000844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a000846:	2207      	movs	r2, #7
1a000848:	601a      	str	r2, [r3, #0]
            if ( SysTick_Config( CMU_ClockFreqGet(cmuClock_CORE) / tickRateHz) ){
               //DEBUG_BREAK;
               ret_val = 0;
            }
            */
            tickPowerSet( ON );
1a00084a:	2001      	movs	r0, #1
1a00084c:	f7ff ffc2 	bl	1a0007d4 <tickPowerSet>

// Tick Initialization and rate configuration from 1 to 50 ms
bool_t tickInit( tick_t tickRateMSvalue )
{
   #ifndef TICK_OVER_RTOS
      bool_t ret_val = 1;
1a000850:	2001      	movs	r0, #1
1a000852:	bd10      	pop	{r4, pc}
            }
            */
            tickPowerSet( ON );
         } else {
            // Error, tickRateMS variable not in range (1 <= tickRateMS <= 50)
            ret_val = 0;
1a000854:	2000      	movs	r0, #0
      #else
         #warning "Unknown RTOS. Ticker disabled"
            return 0;
      #endif
   #endif
}
1a000856:	bd10      	pop	{r4, pc}
1a000858:	10000b10 	.word	0x10000b10
1a00085c:	10000b18 	.word	0x10000b18
1a000860:	e000e010 	.word	0xe000e010
1a000864:	e000ed00 	.word	0xe000ed00

1a000868 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a000868:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a00086a:	4908      	ldr	r1, [pc, #32]	; (1a00088c <SysTick_Handler+0x24>)
1a00086c:	e9d1 2300 	ldrd	r2, r3, [r1]
1a000870:	3201      	adds	r2, #1
1a000872:	f143 0300 	adc.w	r3, r3, #0
1a000876:	e9c1 2300 	strd	r2, r3, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a00087a:	4b05      	ldr	r3, [pc, #20]	; (1a000890 <SysTick_Handler+0x28>)
1a00087c:	681b      	ldr	r3, [r3, #0]
1a00087e:	b123      	cbz	r3, 1a00088a <SysTick_Handler+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a000880:	4b03      	ldr	r3, [pc, #12]	; (1a000890 <SysTick_Handler+0x28>)
1a000882:	681b      	ldr	r3, [r3, #0]
1a000884:	4a03      	ldr	r2, [pc, #12]	; (1a000894 <SysTick_Handler+0x2c>)
1a000886:	6810      	ldr	r0, [r2, #0]
1a000888:	4798      	blx	r3
1a00088a:	bd08      	pop	{r3, pc}
1a00088c:	10000b08 	.word	0x10000b08
1a000890:	1000094c 	.word	0x1000094c
1a000894:	10000950 	.word	0x10000950

1a000898 <uartProcessIRQ>:
static void uartProcessIRQ( uartMap_t uart );

/*==================[internal functions definition]==========================*/

static void uartProcessIRQ( uartMap_t uart )
{
1a000898:	b570      	push	{r4, r5, r6, lr}
1a00089a:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a00089c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a0008a0:	009b      	lsls	r3, r3, #2
1a0008a2:	4a21      	ldr	r2, [pc, #132]	; (1a000928 <uartProcessIRQ+0x90>)
1a0008a4:	58d6      	ldr	r6, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0008a6:	6975      	ldr	r5, [r6, #20]
1a0008a8:	b2ed      	uxtb	r5, r5

   // Rx Interrupt
   if(status & UART_LSR_RDR) { // uartRxReady
1a0008aa:	f015 0f01 	tst.w	r5, #1
1a0008ae:	d019      	beq.n	1a0008e4 <uartProcessIRQ+0x4c>
      // Execute callback
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a0008b0:	b930      	cbnz	r0, 1a0008c0 <uartProcessIRQ+0x28>
1a0008b2:	4b1e      	ldr	r3, [pc, #120]	; (1a00092c <uartProcessIRQ+0x94>)
1a0008b4:	681b      	ldr	r3, [r3, #0]
1a0008b6:	b11b      	cbz	r3, 1a0008c0 <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART0)(0);
1a0008b8:	4b1c      	ldr	r3, [pc, #112]	; (1a00092c <uartProcessIRQ+0x94>)
1a0008ba:	681b      	ldr	r3, [r3, #0]
1a0008bc:	2000      	movs	r0, #0
1a0008be:	4798      	blx	r3

      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a0008c0:	2c03      	cmp	r4, #3
1a0008c2:	d106      	bne.n	1a0008d2 <uartProcessIRQ+0x3a>
1a0008c4:	4b1a      	ldr	r3, [pc, #104]	; (1a000930 <uartProcessIRQ+0x98>)
1a0008c6:	681b      	ldr	r3, [r3, #0]
1a0008c8:	b11b      	cbz	r3, 1a0008d2 <uartProcessIRQ+0x3a>
         (*rxIsrCallbackUART2)(0);
1a0008ca:	4b19      	ldr	r3, [pc, #100]	; (1a000930 <uartProcessIRQ+0x98>)
1a0008cc:	681b      	ldr	r3, [r3, #0]
1a0008ce:	2000      	movs	r0, #0
1a0008d0:	4798      	blx	r3

      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a0008d2:	2c05      	cmp	r4, #5
1a0008d4:	d106      	bne.n	1a0008e4 <uartProcessIRQ+0x4c>
1a0008d6:	4b17      	ldr	r3, [pc, #92]	; (1a000934 <uartProcessIRQ+0x9c>)
1a0008d8:	681b      	ldr	r3, [r3, #0]
1a0008da:	b11b      	cbz	r3, 1a0008e4 <uartProcessIRQ+0x4c>
         (*rxIsrCallbackUART3)(0);
1a0008dc:	4b15      	ldr	r3, [pc, #84]	; (1a000934 <uartProcessIRQ+0x9c>)
1a0008de:	681b      	ldr	r3, [r3, #0]
1a0008e0:	2000      	movs	r0, #0
1a0008e2:	4798      	blx	r3
   }

   // Tx Interrupt
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a0008e4:	f015 0f20 	tst.w	r5, #32
1a0008e8:	d01d      	beq.n	1a000926 <uartProcessIRQ+0x8e>
 *			to determine which interrupts are enabled. You can check
 *			for multiple enabled bits if needed.
 */
STATIC INLINE uint32_t Chip_UART_GetIntsEnabled(LPC_USART_T *pUART)
{
	return pUART->IER;
1a0008ea:	6873      	ldr	r3, [r6, #4]
1a0008ec:	f013 0f02 	tst.w	r3, #2
1a0008f0:	d019      	beq.n	1a000926 <uartProcessIRQ+0x8e>
       ( Chip_UART_GetIntsEnabled( lpcUarts[uart].uartAddr ) & UART_IER_THREINT ) ) {

      // Execute callback
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a0008f2:	b934      	cbnz	r4, 1a000902 <uartProcessIRQ+0x6a>
1a0008f4:	4b10      	ldr	r3, [pc, #64]	; (1a000938 <uartProcessIRQ+0xa0>)
1a0008f6:	681b      	ldr	r3, [r3, #0]
1a0008f8:	b11b      	cbz	r3, 1a000902 <uartProcessIRQ+0x6a>
         (*txIsrCallbackUART0)(0);
1a0008fa:	4b0f      	ldr	r3, [pc, #60]	; (1a000938 <uartProcessIRQ+0xa0>)
1a0008fc:	681b      	ldr	r3, [r3, #0]
1a0008fe:	2000      	movs	r0, #0
1a000900:	4798      	blx	r3

      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a000902:	2c03      	cmp	r4, #3
1a000904:	d106      	bne.n	1a000914 <uartProcessIRQ+0x7c>
1a000906:	4b0d      	ldr	r3, [pc, #52]	; (1a00093c <uartProcessIRQ+0xa4>)
1a000908:	681b      	ldr	r3, [r3, #0]
1a00090a:	b11b      	cbz	r3, 1a000914 <uartProcessIRQ+0x7c>
         (*txIsrCallbackUART2)(0);
1a00090c:	4b0b      	ldr	r3, [pc, #44]	; (1a00093c <uartProcessIRQ+0xa4>)
1a00090e:	681b      	ldr	r3, [r3, #0]
1a000910:	2000      	movs	r0, #0
1a000912:	4798      	blx	r3

      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a000914:	2c05      	cmp	r4, #5
1a000916:	d106      	bne.n	1a000926 <uartProcessIRQ+0x8e>
1a000918:	4b09      	ldr	r3, [pc, #36]	; (1a000940 <uartProcessIRQ+0xa8>)
1a00091a:	681b      	ldr	r3, [r3, #0]
1a00091c:	b11b      	cbz	r3, 1a000926 <uartProcessIRQ+0x8e>
         (*txIsrCallbackUART3)(0);
1a00091e:	4b08      	ldr	r3, [pc, #32]	; (1a000940 <uartProcessIRQ+0xa8>)
1a000920:	681b      	ldr	r3, [r3, #0]
1a000922:	2000      	movs	r0, #0
1a000924:	4798      	blx	r3
1a000926:	bd70      	pop	{r4, r5, r6, pc}
1a000928:	1a0079e4 	.word	0x1a0079e4
1a00092c:	10000954 	.word	0x10000954
1a000930:	10000964 	.word	0x10000964
1a000934:	10000968 	.word	0x10000968
1a000938:	10000958 	.word	0x10000958
1a00093c:	1000095c 	.word	0x1000095c
1a000940:	10000960 	.word	0x10000960

1a000944 <uartRxReady>:
//-------------------------------------------------------------

// Return TRUE if have unread data in RX FIFO
bool_t uartRxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
1a000944:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a000948:	0080      	lsls	r0, r0, #2
1a00094a:	4b03      	ldr	r3, [pc, #12]	; (1a000958 <uartRxReady+0x14>)
1a00094c:	581b      	ldr	r3, [r3, r0]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a00094e:	6958      	ldr	r0, [r3, #20]
}
1a000950:	f000 0001 	and.w	r0, r0, #1
1a000954:	4770      	bx	lr
1a000956:	bf00      	nop
1a000958:	1a0079e4 	.word	0x1a0079e4

1a00095c <uartTxReady>:
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a00095c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a000960:	0080      	lsls	r0, r0, #2
1a000962:	4b03      	ldr	r3, [pc, #12]	; (1a000970 <uartTxReady+0x14>)
1a000964:	581b      	ldr	r3, [r3, r0]
1a000966:	6958      	ldr	r0, [r3, #20]
}
1a000968:	f000 0020 	and.w	r0, r0, #32
1a00096c:	4770      	bx	lr
1a00096e:	bf00      	nop
1a000970:	1a0079e4 	.word	0x1a0079e4

1a000974 <uartRxRead>:
// Read from RX FIFO
uint8_t uartRxRead( uartMap_t uart )
{
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a000974:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a000978:	0080      	lsls	r0, r0, #2
1a00097a:	4b02      	ldr	r3, [pc, #8]	; (1a000984 <uartRxRead+0x10>)
1a00097c:	581b      	ldr	r3, [r3, r0]
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00097e:	6818      	ldr	r0, [r3, #0]
}
1a000980:	b2c0      	uxtb	r0, r0
1a000982:	4770      	bx	lr
1a000984:	1a0079e4 	.word	0x1a0079e4

1a000988 <uartTxWrite>:
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a000988:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a00098c:	0080      	lsls	r0, r0, #2
1a00098e:	4b02      	ldr	r3, [pc, #8]	; (1a000998 <uartTxWrite+0x10>)
1a000990:	581b      	ldr	r3, [r3, r0]
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
1a000992:	6019      	str	r1, [r3, #0]
1a000994:	4770      	bx	lr
1a000996:	bf00      	nop
1a000998:	1a0079e4 	.word	0x1a0079e4

1a00099c <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a00099c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0009a0:	4607      	mov	r7, r0
1a0009a2:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a0009a4:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1a000a14 <uartInit+0x78>
1a0009a8:	0044      	lsls	r4, r0, #1
1a0009aa:	1823      	adds	r3, r4, r0
1a0009ac:	009b      	lsls	r3, r3, #2
1a0009ae:	eb08 0503 	add.w	r5, r8, r3
1a0009b2:	f858 6003 	ldr.w	r6, [r8, r3]
1a0009b6:	4630      	mov	r0, r6
1a0009b8:	f001 f996 	bl	1a001ce8 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a0009bc:	4630      	mov	r0, r6
1a0009be:	4649      	mov	r1, r9
1a0009c0:	f001 f9bc 	bl	1a001d3c <Chip_UART_SetBaud>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a0009c4:	2307      	movs	r3, #7
1a0009c6:	60b3      	str	r3, [r6, #8]
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0009c8:	6833      	ldr	r3, [r6, #0]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a0009ca:	2301      	movs	r3, #1
1a0009cc:	65f3      	str	r3, [r6, #92]	; 0x5c
   // Dummy read
   Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a0009ce:	7929      	ldrb	r1, [r5, #4]
1a0009d0:	796b      	ldrb	r3, [r5, #5]
1a0009d2:	79aa      	ldrb	r2, [r5, #6]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0009d4:	f042 0218 	orr.w	r2, r2, #24
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0009d8:	480c      	ldr	r0, [pc, #48]	; (1a000a0c <uartInit+0x70>)
1a0009da:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0009de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a0009e2:	79ee      	ldrb	r6, [r5, #7]
1a0009e4:	7a2a      	ldrb	r2, [r5, #8]
1a0009e6:	7a69      	ldrb	r1, [r5, #9]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0009e8:	f041 01d0 	orr.w	r1, r1, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0009ec:	eb02 1346 	add.w	r3, r2, r6, lsl #5
1a0009f0:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a0009f4:	2f01      	cmp	r7, #1
1a0009f6:	d107      	bne.n	1a000a08 <uartInit+0x6c>
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a0009f8:	4a05      	ldr	r2, [pc, #20]	; (1a000a10 <uartInit+0x74>)
1a0009fa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a0009fc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a000a00:	64d3      	str	r3, [r2, #76]	; 0x4c
1a000a02:	221a      	movs	r2, #26
1a000a04:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
1a000a08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a000a0c:	40086000 	.word	0x40086000
1a000a10:	40081000 	.word	0x40081000
1a000a14:	1a0079e4 	.word	0x1a0079e4

1a000a18 <uartReadByte>:
   }
}

// Read 1 byte from RX FIFO, check first if exist aviable data
bool_t uartReadByte( uartMap_t uart, uint8_t* receivedByte )
{
1a000a18:	b538      	push	{r3, r4, r5, lr}
1a000a1a:	4605      	mov	r5, r0
1a000a1c:	460c      	mov	r4, r1
   bool_t retVal = TRUE;
   if ( uartRxReady(uart) ) {
1a000a1e:	f7ff ff91 	bl	1a000944 <uartRxReady>
1a000a22:	b128      	cbz	r0, 1a000a30 <uartReadByte+0x18>
      *receivedByte = uartRxRead(uart);
1a000a24:	4628      	mov	r0, r5
1a000a26:	f7ff ffa5 	bl	1a000974 <uartRxRead>
1a000a2a:	7020      	strb	r0, [r4, #0]
}

// Read 1 byte from RX FIFO, check first if exist aviable data
bool_t uartReadByte( uartMap_t uart, uint8_t* receivedByte )
{
   bool_t retVal = TRUE;
1a000a2c:	2001      	movs	r0, #1
1a000a2e:	bd38      	pop	{r3, r4, r5, pc}
   if ( uartRxReady(uart) ) {
      *receivedByte = uartRxRead(uart);
   } else {
      retVal = FALSE;
1a000a30:	2000      	movs	r0, #0
   }
   return retVal;
}
1a000a32:	bd38      	pop	{r3, r4, r5, pc}

1a000a34 <waitForReceiveStringOrTimeout>:

// Check for Receive a given pattern

waitForReceiveStringOrTimeoutState_t waitForReceiveStringOrTimeout(
   uartMap_t uart, waitForReceiveStringOrTimeout_t* instance )
{
1a000a34:	b510      	push	{r4, lr}
1a000a36:	b082      	sub	sp, #8
1a000a38:	460c      	mov	r4, r1

   uint8_t receiveByte;
   //char receiveBuffer[100];

   switch( instance->state ) {
1a000a3a:	780b      	ldrb	r3, [r1, #0]
1a000a3c:	2b04      	cmp	r3, #4
1a000a3e:	d832      	bhi.n	1a000aa6 <waitForReceiveStringOrTimeout+0x72>
1a000a40:	e8df f003 	tbb	[pc, r3]
1a000a44:	312b0e03 	.word	0x312b0e03
1a000a48:	2e          	.byte	0x2e
1a000a49:	00          	.byte	0x00

   case UART_RECEIVE_STRING_CONFIG:

      delayInit( &(instance->delay), instance->timeout );
1a000a4a:	f101 0018 	add.w	r0, r1, #24
1a000a4e:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a000a52:	f000 fe2d 	bl	1a0016b0 <delayInit>

      instance->stringIndex = 0;
1a000a56:	2300      	movs	r3, #0
1a000a58:	8163      	strh	r3, [r4, #10]

      instance->state = UART_RECEIVE_STRING_RECEIVING;
1a000a5a:	2301      	movs	r3, #1
1a000a5c:	7023      	strb	r3, [r4, #0]

      break;
1a000a5e:	e024      	b.n	1a000aaa <waitForReceiveStringOrTimeout+0x76>

   case UART_RECEIVE_STRING_RECEIVING:

      if( uartReadByte( uart, &receiveByte ) ) {
1a000a60:	f10d 0107 	add.w	r1, sp, #7
1a000a64:	f7ff ffd8 	bl	1a000a18 <uartReadByte>
1a000a68:	b178      	cbz	r0, 1a000a8a <waitForReceiveStringOrTimeout+0x56>
         //uartWriteByte( UART_DEBUG, receiveByte ); // TODO: DEBUG
         /*            if( (instance->stringIndex) <= 100 ){
                        receiveBuffer[instance->stringIndex] = receiveByte;
                     }
         */
         if( (instance->string)[(instance->stringIndex)] == receiveByte ) {
1a000a6a:	6862      	ldr	r2, [r4, #4]
1a000a6c:	8963      	ldrh	r3, [r4, #10]
1a000a6e:	5cd1      	ldrb	r1, [r2, r3]
1a000a70:	f89d 2007 	ldrb.w	r2, [sp, #7]
1a000a74:	4291      	cmp	r1, r2
1a000a76:	d108      	bne.n	1a000a8a <waitForReceiveStringOrTimeout+0x56>

            (instance->stringIndex)++;
1a000a78:	3301      	adds	r3, #1
1a000a7a:	b29b      	uxth	r3, r3
1a000a7c:	8163      	strh	r3, [r4, #10]

            if( (instance->stringIndex) == (instance->stringSize - 1) ) {
1a000a7e:	8922      	ldrh	r2, [r4, #8]
1a000a80:	3a01      	subs	r2, #1
1a000a82:	4293      	cmp	r3, r2
1a000a84:	d101      	bne.n	1a000a8a <waitForReceiveStringOrTimeout+0x56>
               instance->state = UART_RECEIVE_STRING_RECEIVED_OK;
1a000a86:	2302      	movs	r3, #2
1a000a88:	7023      	strb	r3, [r4, #0]

         }

      }

      if( delayRead( &(instance->delay) ) ) {
1a000a8a:	f104 0018 	add.w	r0, r4, #24
1a000a8e:	f000 fe1f 	bl	1a0016d0 <delayRead>
1a000a92:	b150      	cbz	r0, 1a000aaa <waitForReceiveStringOrTimeout+0x76>
         instance->state = UART_RECEIVE_STRING_TIMEOUT;
1a000a94:	2304      	movs	r3, #4
1a000a96:	7023      	strb	r3, [r4, #0]
1a000a98:	e007      	b.n	1a000aaa <waitForReceiveStringOrTimeout+0x76>
      }

      break;

   case UART_RECEIVE_STRING_RECEIVED_OK:
      instance->state = UART_RECEIVE_STRING_CONFIG;
1a000a9a:	2300      	movs	r3, #0
1a000a9c:	700b      	strb	r3, [r1, #0]
      break;
1a000a9e:	e004      	b.n	1a000aaa <waitForReceiveStringOrTimeout+0x76>

   case UART_RECEIVE_STRING_TIMEOUT:
      instance->state = UART_RECEIVE_STRING_CONFIG;
1a000aa0:	2300      	movs	r3, #0
1a000aa2:	700b      	strb	r3, [r1, #0]
      break;
1a000aa4:	e001      	b.n	1a000aaa <waitForReceiveStringOrTimeout+0x76>

   default:
      instance->state = UART_RECEIVE_STRING_CONFIG;
1a000aa6:	2300      	movs	r3, #0
1a000aa8:	700b      	strb	r3, [r1, #0]
      break;
   }

   return instance->state;
}
1a000aaa:	7820      	ldrb	r0, [r4, #0]
1a000aac:	b002      	add	sp, #8
1a000aae:	bd10      	pop	{r4, pc}

1a000ab0 <waitForReceiveStringOrTimeoutBlocking>:
// Devuelve TRUE cuando recibio la cadena patron, si paso el tiempo timeout
// en milisegundos antes de recibir el patron devuelve FALSE.
// No almacena los datos recibidos!! Simplemente espera a recibir cierto patron.
bool_t waitForReceiveStringOrTimeoutBlocking(
   uartMap_t uart, char* string, uint16_t stringSize, tick_t timeout )
{
1a000ab0:	b510      	push	{r4, lr}
1a000ab2:	b08c      	sub	sp, #48	; 0x30
1a000ab4:	4604      	mov	r4, r0
   waitForReceiveStringOrTimeout_t waitText;
   waitForReceiveStringOrTimeoutState_t waitTextState;

   waitTextState = UART_RECEIVE_STRING_CONFIG;

   waitText.state = UART_RECEIVE_STRING_CONFIG;
1a000ab6:	2000      	movs	r0, #0
1a000ab8:	f88d 0000 	strb.w	r0, [sp]
   waitText.string =  string;
1a000abc:	9101      	str	r1, [sp, #4]
   waitText.stringSize = stringSize;
1a000abe:	f8ad 2008 	strh.w	r2, [sp, #8]
   waitText.timeout = timeout;
1a000ac2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
1a000ac6:	e9cd 2304 	strd	r2, r3, [sp, #16]

   while( waitTextState != UART_RECEIVE_STRING_RECEIVED_OK &&
1a000aca:	e003      	b.n	1a000ad4 <waitForReceiveStringOrTimeoutBlocking+0x24>
          waitTextState != UART_RECEIVE_STRING_TIMEOUT ) {
      waitTextState = waitForReceiveStringOrTimeout( uart, &waitText );
1a000acc:	4620      	mov	r0, r4
1a000ace:	4669      	mov	r1, sp
1a000ad0:	f7ff ffb0 	bl	1a000a34 <waitForReceiveStringOrTimeout>
   waitText.state = UART_RECEIVE_STRING_CONFIG;
   waitText.string =  string;
   waitText.stringSize = stringSize;
   waitText.timeout = timeout;

   while( waitTextState != UART_RECEIVE_STRING_RECEIVED_OK &&
1a000ad4:	2802      	cmp	r0, #2
1a000ad6:	d001      	beq.n	1a000adc <waitForReceiveStringOrTimeoutBlocking+0x2c>
1a000ad8:	2804      	cmp	r0, #4
1a000ada:	d1f7      	bne.n	1a000acc <waitForReceiveStringOrTimeoutBlocking+0x1c>
          waitTextState != UART_RECEIVE_STRING_TIMEOUT ) {
      waitTextState = waitForReceiveStringOrTimeout( uart, &waitText );
   }

   if( waitTextState == UART_RECEIVE_STRING_TIMEOUT ) {
1a000adc:	2804      	cmp	r0, #4
1a000ade:	d001      	beq.n	1a000ae4 <waitForReceiveStringOrTimeoutBlocking+0x34>
// No almacena los datos recibidos!! Simplemente espera a recibir cierto patron.
bool_t waitForReceiveStringOrTimeoutBlocking(
   uartMap_t uart, char* string, uint16_t stringSize, tick_t timeout )
{

   bool_t retVal = TRUE; // True if OK
1a000ae0:	2001      	movs	r0, #1
1a000ae2:	e000      	b.n	1a000ae6 <waitForReceiveStringOrTimeoutBlocking+0x36>
          waitTextState != UART_RECEIVE_STRING_TIMEOUT ) {
      waitTextState = waitForReceiveStringOrTimeout( uart, &waitText );
   }

   if( waitTextState == UART_RECEIVE_STRING_TIMEOUT ) {
      retVal = FALSE;
1a000ae4:	2000      	movs	r0, #0
   }

   return retVal;
}
1a000ae6:	b00c      	add	sp, #48	; 0x30
1a000ae8:	bd10      	pop	{r4, pc}
1a000aea:	bf00      	nop

1a000aec <uartWriteByte>:
   return retVal;
}

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a000aec:	b538      	push	{r3, r4, r5, lr}
1a000aee:	4604      	mov	r4, r0
1a000af0:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a000af2:	4620      	mov	r0, r4
1a000af4:	f7ff ff32 	bl	1a00095c <uartTxReady>
1a000af8:	2800      	cmp	r0, #0
1a000afa:	d0fa      	beq.n	1a000af2 <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a000afc:	4620      	mov	r0, r4
1a000afe:	4629      	mov	r1, r5
1a000b00:	f7ff ff42 	bl	1a000988 <uartTxWrite>
1a000b04:	bd38      	pop	{r3, r4, r5, pc}
1a000b06:	bf00      	nop

1a000b08 <uartWriteString>:
}

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a000b08:	b538      	push	{r3, r4, r5, lr}
1a000b0a:	4605      	mov	r5, r0
1a000b0c:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a000b0e:	e003      	b.n	1a000b18 <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a000b10:	4628      	mov	r0, r5
1a000b12:	f7ff ffeb 	bl	1a000aec <uartWriteByte>
      str++;
1a000b16:	3401      	adds	r4, #1
}

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
   while( *str != 0 ) {
1a000b18:	7821      	ldrb	r1, [r4, #0]
1a000b1a:	2900      	cmp	r1, #0
1a000b1c:	d1f8      	bne.n	1a000b10 <uartWriteString+0x8>
      uartWriteByte( uart, (uint8_t)*str );
      str++;
   }
}
1a000b1e:	bd38      	pop	{r3, r4, r5, pc}

1a000b20 <UART2_IRQHandler>:
}

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a000b20:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a000b22:	2003      	movs	r0, #3
1a000b24:	f7ff feb8 	bl	1a000898 <uartProcessIRQ>
1a000b28:	bd08      	pop	{r3, pc}
1a000b2a:	bf00      	nop

1a000b2c <UART3_IRQHandler>:
}

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a000b2c:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a000b2e:	2005      	movs	r0, #5
1a000b30:	f7ff feb2 	bl	1a000898 <uartProcessIRQ>
1a000b34:	bd08      	pop	{r3, pc}
1a000b36:	bf00      	nop

1a000b38 <mpu9250InitializeControlStructure>:

/*==================[internal functions definition]==========================*/

static int8_t mpu9250InitializeControlStructure( void )
{
	control._tempScale = 333.87f;
1a000b38:	4b1b      	ldr	r3, [pc, #108]	; (1a000ba8 <mpu9250InitializeControlStructure+0x70>)
1a000b3a:	4a1c      	ldr	r2, [pc, #112]	; (1a000bac <mpu9250InitializeControlStructure+0x74>)
1a000b3c:	619a      	str	r2, [r3, #24]
	control._tempOffset = 21.0f;
1a000b3e:	4a1c      	ldr	r2, [pc, #112]	; (1a000bb0 <mpu9250InitializeControlStructure+0x78>)
1a000b40:	61da      	str	r2, [r3, #28]
	control._numSamples = 100;
1a000b42:	2264      	movs	r2, #100	; 0x64
1a000b44:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	control._axs = 1.0f;
1a000b48:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
1a000b4c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	control._ays = 1.0f;
1a000b50:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	control._azs = 1.0f;
1a000b54:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	control._maxCounts = 1000;
1a000b58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a000b5c:	f8a3 10d8 	strh.w	r1, [r3, #216]	; 0xd8
	control._deltaThresh = 0.3f;
1a000b60:	4914      	ldr	r1, [pc, #80]	; (1a000bb4 <mpu9250InitializeControlStructure+0x7c>)
1a000b62:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
	control._coeff = 8;
1a000b66:	2108      	movs	r1, #8
1a000b68:	f883 10e0 	strb.w	r1, [r3, #224]	; 0xe0
	control._hxs = 1.0f;
1a000b6c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	control._hys = 1.0f;
1a000b70:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	control._hzs = 1.0f;
1a000b74:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	control.tX[0] = 0;
1a000b78:	2200      	movs	r2, #0
1a000b7a:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
	control.tX[1] = 1;
1a000b7e:	2101      	movs	r1, #1
1a000b80:	f8a3 1142 	strh.w	r1, [r3, #322]	; 0x142
	control.tX[2] = 0;
1a000b84:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
	control.tY[0] = 1;
1a000b88:	f8a3 1146 	strh.w	r1, [r3, #326]	; 0x146
	control.tY[1] = 0;
1a000b8c:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148
	control.tY[2] = 0;
1a000b90:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
	control.tZ[0] = 0;
1a000b94:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
	control.tZ[1] = 0;
1a000b98:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
	control.tZ[2] = -1;
1a000b9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
1a000ba0:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
}
1a000ba4:	4770      	bx	lr
1a000ba6:	bf00      	nop
1a000ba8:	10000970 	.word	0x10000970
1a000bac:	43a6ef5c 	.word	0x43a6ef5c
1a000bb0:	41a80000 	.word	0x41a80000
1a000bb4:	3e99999a 	.word	0x3e99999a

1a000bb8 <mpu9250ReadRegisters>:
      return -1;
	}
}

static int8_t mpu9250ReadRegisters( uint8_t subAddress, uint8_t count )
{
1a000bb8:	b510      	push	{r4, lr}
1a000bba:	b086      	sub	sp, #24
1a000bbc:	aa06      	add	r2, sp, #24
1a000bbe:	f802 0d01 	strb.w	r0, [r2, #-1]!
	if( i2cRead( I2C0,control.address,&subAddress,1,TRUE,control._buffer,count,TRUE) ){
1a000bc2:	4809      	ldr	r0, [pc, #36]	; (1a000be8 <mpu9250ReadRegisters+0x30>)
1a000bc4:	f810 4b24 	ldrb.w	r4, [r0], #36
1a000bc8:	2301      	movs	r3, #1
1a000bca:	9300      	str	r3, [sp, #0]
1a000bcc:	9001      	str	r0, [sp, #4]
1a000bce:	9102      	str	r1, [sp, #8]
1a000bd0:	9303      	str	r3, [sp, #12]
1a000bd2:	2000      	movs	r0, #0
1a000bd4:	4621      	mov	r1, r4
1a000bd6:	f000 fdf7 	bl	1a0017c8 <i2cRead>
1a000bda:	b108      	cbz	r0, 1a000be0 <mpu9250ReadRegisters+0x28>
		return 1;
1a000bdc:	2001      	movs	r0, #1
1a000bde:	e000      	b.n	1a000be2 <mpu9250ReadRegisters+0x2a>
	} else {
		return -1;
1a000be0:	20ff      	movs	r0, #255	; 0xff
	}
}
1a000be2:	b240      	sxtb	r0, r0
1a000be4:	b006      	add	sp, #24
1a000be6:	bd10      	pop	{r4, pc}
1a000be8:	10000970 	.word	0x10000970

1a000bec <mpu9250WhoAmI>:
		return -6;
	}
}

static int8_t mpu9250WhoAmI( void )
{
1a000bec:	b508      	push	{r3, lr}
	// read the WHO AM I register
	if (mpu9250ReadRegisters(MPU9250_WHO_AM_I,1) < 0) {
1a000bee:	2075      	movs	r0, #117	; 0x75
1a000bf0:	2101      	movs	r1, #1
1a000bf2:	f7ff ffe1 	bl	1a000bb8 <mpu9250ReadRegisters>
1a000bf6:	2800      	cmp	r0, #0
1a000bf8:	db03      	blt.n	1a000c02 <mpu9250WhoAmI+0x16>
		return -1;
	}
	// return the register value
	return control._buffer[0];
1a000bfa:	4b03      	ldr	r3, [pc, #12]	; (1a000c08 <mpu9250WhoAmI+0x1c>)
1a000bfc:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
1a000c00:	e000      	b.n	1a000c04 <mpu9250WhoAmI+0x18>

static int8_t mpu9250WhoAmI( void )
{
	// read the WHO AM I register
	if (mpu9250ReadRegisters(MPU9250_WHO_AM_I,1) < 0) {
		return -1;
1a000c02:	20ff      	movs	r0, #255	; 0xff
	}
	// return the register value
	return control._buffer[0];
}
1a000c04:	b240      	sxtb	r0, r0
1a000c06:	bd08      	pop	{r3, pc}
1a000c08:	10000970 	.word	0x10000970

1a000c0c <mpu9250WriteRegister>:
	control.tZ[1] = 0;
	control.tZ[2] = -1;
}

static int8_t mpu9250WriteRegister( uint8_t subAddress, uint8_t data )
{
1a000c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000c0e:	b085      	sub	sp, #20
1a000c10:	4607      	mov	r7, r0
1a000c12:	460c      	mov	r4, r1
	uint8_t transmitDataBuffer[2];
	transmitDataBuffer[0] = subAddress;
1a000c14:	f88d 000c 	strb.w	r0, [sp, #12]
	transmitDataBuffer[1] = data;
1a000c18:	f88d 100d 	strb.w	r1, [sp, #13]
	i2cWrite(I2C0, control.address, transmitDataBuffer, 2, TRUE);
1a000c1c:	4d0d      	ldr	r5, [pc, #52]	; (1a000c54 <mpu9250WriteRegister+0x48>)
1a000c1e:	7829      	ldrb	r1, [r5, #0]
1a000c20:	2601      	movs	r6, #1
1a000c22:	9600      	str	r6, [sp, #0]
1a000c24:	2000      	movs	r0, #0
1a000c26:	aa03      	add	r2, sp, #12
1a000c28:	2302      	movs	r3, #2
1a000c2a:	f000 fde3 	bl	1a0017f4 <i2cWrite>

	delay(10);
1a000c2e:	200a      	movs	r0, #10
1a000c30:	2100      	movs	r1, #0
1a000c32:	f000 fd21 	bl	1a001678 <delay>

	/* read back the register */
	mpu9250ReadRegisters(subAddress,1);
1a000c36:	4638      	mov	r0, r7
1a000c38:	4631      	mov	r1, r6
1a000c3a:	f7ff ffbd 	bl	1a000bb8 <mpu9250ReadRegisters>
	/* check the read back register against the written register */
	if(control._buffer[0] == data) {
1a000c3e:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
1a000c42:	42a3      	cmp	r3, r4
1a000c44:	d101      	bne.n	1a000c4a <mpu9250WriteRegister+0x3e>
      return 1;
1a000c46:	4630      	mov	r0, r6
1a000c48:	e000      	b.n	1a000c4c <mpu9250WriteRegister+0x40>
	}
	else{
      return -1;
1a000c4a:	20ff      	movs	r0, #255	; 0xff
	}
}
1a000c4c:	b240      	sxtb	r0, r0
1a000c4e:	b005      	add	sp, #20
1a000c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a000c52:	bf00      	nop
1a000c54:	10000970 	.word	0x10000970

1a000c58 <mpu9250ReadAK8963Registers>:
	// return the register value
	return control._buffer[0];
}

static int8_t mpu9250ReadAK8963Registers( uint8_t subAddress, uint8_t count )
{
1a000c58:	b538      	push	{r3, r4, r5, lr}
1a000c5a:	4605      	mov	r5, r0
1a000c5c:	460c      	mov	r4, r1
	// set slave 0 to the AK8963 and set for read
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_ADDR, MPU9250_AK8963_I2C_ADDR | MPU9250_I2C_READ_FLAG) < 0) {
1a000c5e:	2025      	movs	r0, #37	; 0x25
1a000c60:	218c      	movs	r1, #140	; 0x8c
1a000c62:	f7ff ffd3 	bl	1a000c0c <mpu9250WriteRegister>
1a000c66:	2800      	cmp	r0, #0
1a000c68:	db18      	blt.n	1a000c9c <mpu9250ReadAK8963Registers+0x44>
		return -1;
	}
	// set the register to the desired AK8963 sub address
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_REG, subAddress) < 0) {
1a000c6a:	2026      	movs	r0, #38	; 0x26
1a000c6c:	4629      	mov	r1, r5
1a000c6e:	f7ff ffcd 	bl	1a000c0c <mpu9250WriteRegister>
1a000c72:	2800      	cmp	r0, #0
1a000c74:	db14      	blt.n	1a000ca0 <mpu9250ReadAK8963Registers+0x48>
		return -2;
	}
	// enable I2C and request the bytes
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_CTRL, MPU9250_I2C_SLV0_EN | count) < 0) {
1a000c76:	2027      	movs	r0, #39	; 0x27
1a000c78:	f044 0180 	orr.w	r1, r4, #128	; 0x80
1a000c7c:	f7ff ffc6 	bl	1a000c0c <mpu9250WriteRegister>
1a000c80:	2800      	cmp	r0, #0
1a000c82:	db0f      	blt.n	1a000ca4 <mpu9250ReadAK8963Registers+0x4c>
		return -3;
	}
	delay(1); // takes some time for these registers to fill
1a000c84:	2001      	movs	r0, #1
1a000c86:	2100      	movs	r1, #0
1a000c88:	f000 fcf6 	bl	1a001678 <delay>
	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	control._status = mpu9250ReadRegisters(MPU9250_EXT_SENS_DATA_00,count);
1a000c8c:	2049      	movs	r0, #73	; 0x49
1a000c8e:	4621      	mov	r1, r4
1a000c90:	f7ff ff92 	bl	1a000bb8 <mpu9250ReadRegisters>
1a000c94:	4b05      	ldr	r3, [pc, #20]	; (1a000cac <mpu9250ReadAK8963Registers+0x54>)
1a000c96:	f883 0152 	strb.w	r0, [r3, #338]	; 0x152
	return control._status;
1a000c9a:	e004      	b.n	1a000ca6 <mpu9250ReadAK8963Registers+0x4e>

static int8_t mpu9250ReadAK8963Registers( uint8_t subAddress, uint8_t count )
{
	// set slave 0 to the AK8963 and set for read
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_ADDR, MPU9250_AK8963_I2C_ADDR | MPU9250_I2C_READ_FLAG) < 0) {
		return -1;
1a000c9c:	20ff      	movs	r0, #255	; 0xff
1a000c9e:	e002      	b.n	1a000ca6 <mpu9250ReadAK8963Registers+0x4e>
	}
	// set the register to the desired AK8963 sub address
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_REG, subAddress) < 0) {
		return -2;
1a000ca0:	20fe      	movs	r0, #254	; 0xfe
1a000ca2:	e000      	b.n	1a000ca6 <mpu9250ReadAK8963Registers+0x4e>
	}
	// enable I2C and request the bytes
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_CTRL, MPU9250_I2C_SLV0_EN | count) < 0) {
		return -3;
1a000ca4:	20fd      	movs	r0, #253	; 0xfd
	}
	delay(1); // takes some time for these registers to fill
	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	control._status = mpu9250ReadRegisters(MPU9250_EXT_SENS_DATA_00,count);
	return control._status;
}
1a000ca6:	b240      	sxtb	r0, r0
1a000ca8:	bd38      	pop	{r3, r4, r5, pc}
1a000caa:	bf00      	nop
1a000cac:	10000970 	.word	0x10000970

1a000cb0 <mpu9250WhoAmIAK8963>:
	// return the register value
	return control._buffer[0];
}

static int8_t mpu9250WhoAmIAK8963( void )
{
1a000cb0:	b508      	push	{r3, lr}
	// read the WHO AM I register
	if (mpu9250ReadAK8963Registers(MPU9250_AK8963_WHO_AM_I,1) < 0) {
1a000cb2:	2000      	movs	r0, #0
1a000cb4:	2101      	movs	r1, #1
1a000cb6:	f7ff ffcf 	bl	1a000c58 <mpu9250ReadAK8963Registers>
1a000cba:	2800      	cmp	r0, #0
1a000cbc:	db03      	blt.n	1a000cc6 <mpu9250WhoAmIAK8963+0x16>
		return -1;
	}
	// return the register value
	return control._buffer[0];
1a000cbe:	4b03      	ldr	r3, [pc, #12]	; (1a000ccc <mpu9250WhoAmIAK8963+0x1c>)
1a000cc0:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
1a000cc4:	e000      	b.n	1a000cc8 <mpu9250WhoAmIAK8963+0x18>

static int8_t mpu9250WhoAmIAK8963( void )
{
	// read the WHO AM I register
	if (mpu9250ReadAK8963Registers(MPU9250_AK8963_WHO_AM_I,1) < 0) {
		return -1;
1a000cc6:	20ff      	movs	r0, #255	; 0xff
	}
	// return the register value
	return control._buffer[0];
}
1a000cc8:	b240      	sxtb	r0, r0
1a000cca:	bd08      	pop	{r3, pc}
1a000ccc:	10000970 	.word	0x10000970

1a000cd0 <mpu9250WriteAK8963Register>:
		return -1;
	}
}

static int8_t mpu9250WriteAK8963Register( uint8_t subAddress, uint8_t data )
{
1a000cd0:	b538      	push	{r3, r4, r5, lr}
1a000cd2:	4604      	mov	r4, r0
1a000cd4:	460d      	mov	r5, r1
	// set slave 0 to the AK8963 and set for write
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_ADDR, MPU9250_AK8963_I2C_ADDR) < 0) {
1a000cd6:	2025      	movs	r0, #37	; 0x25
1a000cd8:	210c      	movs	r1, #12
1a000cda:	f7ff ff97 	bl	1a000c0c <mpu9250WriteRegister>
1a000cde:	2800      	cmp	r0, #0
1a000ce0:	db1e      	blt.n	1a000d20 <mpu9250WriteAK8963Register+0x50>
		return -1;
	}
	// set the register to the desired AK8963 sub address
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_REG, subAddress) < 0) {
1a000ce2:	2026      	movs	r0, #38	; 0x26
1a000ce4:	4621      	mov	r1, r4
1a000ce6:	f7ff ff91 	bl	1a000c0c <mpu9250WriteRegister>
1a000cea:	2800      	cmp	r0, #0
1a000cec:	db1a      	blt.n	1a000d24 <mpu9250WriteAK8963Register+0x54>
		return -2;
	}
	// store the data for write
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_DO, data) < 0) {
1a000cee:	2063      	movs	r0, #99	; 0x63
1a000cf0:	4629      	mov	r1, r5
1a000cf2:	f7ff ff8b 	bl	1a000c0c <mpu9250WriteRegister>
1a000cf6:	2800      	cmp	r0, #0
1a000cf8:	db16      	blt.n	1a000d28 <mpu9250WriteAK8963Register+0x58>
		return -3;
	}
	// enable I2C and send 1 byte
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_CTRL, MPU9250_I2C_SLV0_EN | (uint8_t)1) < 0) {
1a000cfa:	2027      	movs	r0, #39	; 0x27
1a000cfc:	2181      	movs	r1, #129	; 0x81
1a000cfe:	f7ff ff85 	bl	1a000c0c <mpu9250WriteRegister>
1a000d02:	2800      	cmp	r0, #0
1a000d04:	db12      	blt.n	1a000d2c <mpu9250WriteAK8963Register+0x5c>
		return -4;
	}
	// read the register and confirm
	if (mpu9250ReadAK8963Registers(subAddress,1) < 0) {
1a000d06:	4620      	mov	r0, r4
1a000d08:	2101      	movs	r1, #1
1a000d0a:	f7ff ffa5 	bl	1a000c58 <mpu9250ReadAK8963Registers>
1a000d0e:	2800      	cmp	r0, #0
1a000d10:	db0e      	blt.n	1a000d30 <mpu9250WriteAK8963Register+0x60>
		return -5;
	}
	if(control._buffer[0] == data) {
1a000d12:	4b0a      	ldr	r3, [pc, #40]	; (1a000d3c <mpu9250WriteAK8963Register+0x6c>)
1a000d14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
1a000d18:	42ab      	cmp	r3, r5
1a000d1a:	d10b      	bne.n	1a000d34 <mpu9250WriteAK8963Register+0x64>
		return 1;
1a000d1c:	2001      	movs	r0, #1
1a000d1e:	e00a      	b.n	1a000d36 <mpu9250WriteAK8963Register+0x66>

static int8_t mpu9250WriteAK8963Register( uint8_t subAddress, uint8_t data )
{
	// set slave 0 to the AK8963 and set for write
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_ADDR, MPU9250_AK8963_I2C_ADDR) < 0) {
		return -1;
1a000d20:	20ff      	movs	r0, #255	; 0xff
1a000d22:	e008      	b.n	1a000d36 <mpu9250WriteAK8963Register+0x66>
	}
	// set the register to the desired AK8963 sub address
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_REG, subAddress) < 0) {
		return -2;
1a000d24:	20fe      	movs	r0, #254	; 0xfe
1a000d26:	e006      	b.n	1a000d36 <mpu9250WriteAK8963Register+0x66>
	}
	// store the data for write
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_DO, data) < 0) {
		return -3;
1a000d28:	20fd      	movs	r0, #253	; 0xfd
1a000d2a:	e004      	b.n	1a000d36 <mpu9250WriteAK8963Register+0x66>
	}
	// enable I2C and send 1 byte
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_CTRL, MPU9250_I2C_SLV0_EN | (uint8_t)1) < 0) {
		return -4;
1a000d2c:	20fc      	movs	r0, #252	; 0xfc
1a000d2e:	e002      	b.n	1a000d36 <mpu9250WriteAK8963Register+0x66>
	}
	// read the register and confirm
	if (mpu9250ReadAK8963Registers(subAddress,1) < 0) {
		return -5;
1a000d30:	20fb      	movs	r0, #251	; 0xfb
1a000d32:	e000      	b.n	1a000d36 <mpu9250WriteAK8963Register+0x66>
	}
	if(control._buffer[0] == data) {
		return 1;
	} else{
		return -6;
1a000d34:	20fa      	movs	r0, #250	; 0xfa
	}
}
1a000d36:	b240      	sxtb	r0, r0
1a000d38:	bd38      	pop	{r3, r4, r5, pc}
1a000d3a:	bf00      	nop
1a000d3c:	10000970 	.word	0x10000970

1a000d40 <mpu9250SetGyroRange>:
	}
	return 1;
}

static int8_t mpu9250SetGyroRange( MPU9250_GyroRange_t range )
{
1a000d40:	b510      	push	{r4, lr}
1a000d42:	4604      	mov	r4, r0
	switch(range) {
1a000d44:	2803      	cmp	r0, #3
1a000d46:	d82a      	bhi.n	1a000d9e <mpu9250SetGyroRange+0x5e>
1a000d48:	e8df f000 	tbb	[pc, r0]
1a000d4c:	20160c02 	.word	0x20160c02
		case MPU9250_GYRO_RANGE_250DPS: {
		  // setting the gyro range to 250DPS
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_250DPS) < 0){
1a000d50:	201b      	movs	r0, #27
1a000d52:	2100      	movs	r1, #0
1a000d54:	f7ff ff5a 	bl	1a000c0c <mpu9250WriteRegister>
1a000d58:	2800      	cmp	r0, #0
1a000d5a:	db25      	blt.n	1a000da8 <mpu9250SetGyroRange+0x68>
			return -1;
		  }
        // setting the gyro scale to 250DPS
		  control._gyroScale = 250.0f/32767.5f * MPU9250_D2R; 
1a000d5c:	4a17      	ldr	r2, [pc, #92]	; (1a000dbc <mpu9250SetGyroRange+0x7c>)
1a000d5e:	4b18      	ldr	r3, [pc, #96]	; (1a000dc0 <mpu9250SetGyroRange+0x80>)
1a000d60:	609a      	str	r2, [r3, #8]
		  break;
1a000d62:	e01c      	b.n	1a000d9e <mpu9250SetGyroRange+0x5e>
		}
		case MPU9250_GYRO_RANGE_500DPS: {
		  // setting the gyro range to 500DPS
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_500DPS) < 0){
1a000d64:	201b      	movs	r0, #27
1a000d66:	2108      	movs	r1, #8
1a000d68:	f7ff ff50 	bl	1a000c0c <mpu9250WriteRegister>
1a000d6c:	2800      	cmp	r0, #0
1a000d6e:	db1d      	blt.n	1a000dac <mpu9250SetGyroRange+0x6c>
			return -1;
		  }
        // setting the gyro scale to 500DPS
		  control._gyroScale = 500.0f/32767.5f * MPU9250_D2R; 
1a000d70:	4a14      	ldr	r2, [pc, #80]	; (1a000dc4 <mpu9250SetGyroRange+0x84>)
1a000d72:	4b13      	ldr	r3, [pc, #76]	; (1a000dc0 <mpu9250SetGyroRange+0x80>)
1a000d74:	609a      	str	r2, [r3, #8]
		  break;
1a000d76:	e012      	b.n	1a000d9e <mpu9250SetGyroRange+0x5e>
		}
		case MPU9250_GYRO_RANGE_1000DPS: {
		  // setting the gyro range to 1000DPS
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_1000DPS) < 0){
1a000d78:	201b      	movs	r0, #27
1a000d7a:	2110      	movs	r1, #16
1a000d7c:	f7ff ff46 	bl	1a000c0c <mpu9250WriteRegister>
1a000d80:	2800      	cmp	r0, #0
1a000d82:	db15      	blt.n	1a000db0 <mpu9250SetGyroRange+0x70>
			return -1;
		  }
        // setting the gyro scale to 1000DPS
		  control._gyroScale = 1000.0f/32767.5f * MPU9250_D2R; 
1a000d84:	4a10      	ldr	r2, [pc, #64]	; (1a000dc8 <mpu9250SetGyroRange+0x88>)
1a000d86:	4b0e      	ldr	r3, [pc, #56]	; (1a000dc0 <mpu9250SetGyroRange+0x80>)
1a000d88:	609a      	str	r2, [r3, #8]
		  break;
1a000d8a:	e008      	b.n	1a000d9e <mpu9250SetGyroRange+0x5e>
		}
		case MPU9250_GYRO_RANGE_2000DPS: {
		  // setting the gyro range to 2000DPS
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_2000DPS) < 0){
1a000d8c:	201b      	movs	r0, #27
1a000d8e:	2118      	movs	r1, #24
1a000d90:	f7ff ff3c 	bl	1a000c0c <mpu9250WriteRegister>
1a000d94:	2800      	cmp	r0, #0
1a000d96:	db0d      	blt.n	1a000db4 <mpu9250SetGyroRange+0x74>
			return -1;
		  }
        // setting the gyro scale to 2000DPS
		  control._gyroScale = 2000.0f/32767.5f * MPU9250_D2R; 
1a000d98:	4a0c      	ldr	r2, [pc, #48]	; (1a000dcc <mpu9250SetGyroRange+0x8c>)
1a000d9a:	4b09      	ldr	r3, [pc, #36]	; (1a000dc0 <mpu9250SetGyroRange+0x80>)
1a000d9c:	609a      	str	r2, [r3, #8]
		  break;
		}
	}
	control._gyroRange = range;
1a000d9e:	4b08      	ldr	r3, [pc, #32]	; (1a000dc0 <mpu9250SetGyroRange+0x80>)
1a000da0:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
	return 1;
1a000da4:	2001      	movs	r0, #1
1a000da6:	e006      	b.n	1a000db6 <mpu9250SetGyroRange+0x76>
{
	switch(range) {
		case MPU9250_GYRO_RANGE_250DPS: {
		  // setting the gyro range to 250DPS
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_250DPS) < 0){
			return -1;
1a000da8:	20ff      	movs	r0, #255	; 0xff
1a000daa:	e004      	b.n	1a000db6 <mpu9250SetGyroRange+0x76>
		  break;
		}
		case MPU9250_GYRO_RANGE_500DPS: {
		  // setting the gyro range to 500DPS
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_500DPS) < 0){
			return -1;
1a000dac:	20ff      	movs	r0, #255	; 0xff
1a000dae:	e002      	b.n	1a000db6 <mpu9250SetGyroRange+0x76>
		  break;
		}
		case MPU9250_GYRO_RANGE_1000DPS: {
		  // setting the gyro range to 1000DPS
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_1000DPS) < 0){
			return -1;
1a000db0:	20ff      	movs	r0, #255	; 0xff
1a000db2:	e000      	b.n	1a000db6 <mpu9250SetGyroRange+0x76>
		  break;
		}
		case MPU9250_GYRO_RANGE_2000DPS: {
		  // setting the gyro range to 2000DPS
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_2000DPS) < 0){
			return -1;
1a000db4:	20ff      	movs	r0, #255	; 0xff
		  break;
		}
	}
	control._gyroRange = range;
	return 1;
}
1a000db6:	b240      	sxtb	r0, r0
1a000db8:	bd10      	pop	{r4, pc}
1a000dba:	bf00      	nop
1a000dbc:	390ba0e4 	.word	0x390ba0e4
1a000dc0:	10000970 	.word	0x10000970
1a000dc4:	398ba0e4 	.word	0x398ba0e4
1a000dc8:	3a0ba0e4 	.word	0x3a0ba0e4
1a000dcc:	3a8ba0e4 	.word	0x3a8ba0e4

1a000dd0 <mpu9250SetDlpfBandwidth>:

static int8_t mpu9250SetDlpfBandwidth( MPU9250_DlpfBandwidth_t bandwidth )
{
1a000dd0:	b510      	push	{r4, lr}
1a000dd2:	4604      	mov	r4, r0
	switch (bandwidth) {
1a000dd4:	2805      	cmp	r0, #5
1a000dd6:	d851      	bhi.n	1a000e7c <mpu9250SetDlpfBandwidth+0xac>
1a000dd8:	e8df f000 	tbb	[pc, r0]
1a000ddc:	2a1d1003 	.word	0x2a1d1003
1a000de0:	4437      	.short	0x4437
		case MPU9250_DLPF_BANDWIDTH_184HZ: {
         // setting accel bandwidth to 184Hz
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_184) < 0) { 
1a000de2:	201d      	movs	r0, #29
1a000de4:	2101      	movs	r1, #1
1a000de6:	f7ff ff11 	bl	1a000c0c <mpu9250WriteRegister>
1a000dea:	2800      	cmp	r0, #0
1a000dec:	db4b      	blt.n	1a000e86 <mpu9250SetDlpfBandwidth+0xb6>
				return -1;
			}
         // setting gyro bandwidth to 184Hz
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_184) < 0) { 
1a000dee:	201a      	movs	r0, #26
1a000df0:	2101      	movs	r1, #1
1a000df2:	f7ff ff0b 	bl	1a000c0c <mpu9250WriteRegister>
1a000df6:	2800      	cmp	r0, #0
1a000df8:	da40      	bge.n	1a000e7c <mpu9250SetDlpfBandwidth+0xac>
1a000dfa:	e046      	b.n	1a000e8a <mpu9250SetDlpfBandwidth+0xba>
			}
			break;
		}
		case MPU9250_DLPF_BANDWIDTH_92HZ: {
         // setting accel bandwidth to 92Hz
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_92) < 0) { 
1a000dfc:	201d      	movs	r0, #29
1a000dfe:	2102      	movs	r1, #2
1a000e00:	f7ff ff04 	bl	1a000c0c <mpu9250WriteRegister>
1a000e04:	2800      	cmp	r0, #0
1a000e06:	db42      	blt.n	1a000e8e <mpu9250SetDlpfBandwidth+0xbe>
				return -1;
			}
         // setting gyro bandwidth to 92Hz
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_92) < 0) { 
1a000e08:	201a      	movs	r0, #26
1a000e0a:	2102      	movs	r1, #2
1a000e0c:	f7ff fefe 	bl	1a000c0c <mpu9250WriteRegister>
1a000e10:	2800      	cmp	r0, #0
1a000e12:	da33      	bge.n	1a000e7c <mpu9250SetDlpfBandwidth+0xac>
1a000e14:	e03d      	b.n	1a000e92 <mpu9250SetDlpfBandwidth+0xc2>
			}
			break;
		}
		case MPU9250_DLPF_BANDWIDTH_41HZ: {
         // setting accel bandwidth to 41Hz
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_41) < 0) { 
1a000e16:	201d      	movs	r0, #29
1a000e18:	2103      	movs	r1, #3
1a000e1a:	f7ff fef7 	bl	1a000c0c <mpu9250WriteRegister>
1a000e1e:	2800      	cmp	r0, #0
1a000e20:	db39      	blt.n	1a000e96 <mpu9250SetDlpfBandwidth+0xc6>
				return -1;
			}
         // setting gyro bandwidth to 41Hz
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_41) < 0) { 
1a000e22:	201a      	movs	r0, #26
1a000e24:	2103      	movs	r1, #3
1a000e26:	f7ff fef1 	bl	1a000c0c <mpu9250WriteRegister>
1a000e2a:	2800      	cmp	r0, #0
1a000e2c:	da26      	bge.n	1a000e7c <mpu9250SetDlpfBandwidth+0xac>
1a000e2e:	e034      	b.n	1a000e9a <mpu9250SetDlpfBandwidth+0xca>
			}
			break;
		}
		case MPU9250_DLPF_BANDWIDTH_20HZ: {
         // setting accel bandwidth to 20Hz
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_20) < 0) { 
1a000e30:	201d      	movs	r0, #29
1a000e32:	2104      	movs	r1, #4
1a000e34:	f7ff feea 	bl	1a000c0c <mpu9250WriteRegister>
1a000e38:	2800      	cmp	r0, #0
1a000e3a:	db30      	blt.n	1a000e9e <mpu9250SetDlpfBandwidth+0xce>
				return -1;
			}
         // setting gyro bandwidth to 20Hz
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_20) < 0) { 
1a000e3c:	201a      	movs	r0, #26
1a000e3e:	2104      	movs	r1, #4
1a000e40:	f7ff fee4 	bl	1a000c0c <mpu9250WriteRegister>
1a000e44:	2800      	cmp	r0, #0
1a000e46:	da19      	bge.n	1a000e7c <mpu9250SetDlpfBandwidth+0xac>
1a000e48:	e02b      	b.n	1a000ea2 <mpu9250SetDlpfBandwidth+0xd2>
			}
			break;
		}
		case MPU9250_DLPF_BANDWIDTH_10HZ: {
         // setting accel bandwidth to 10Hz
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_10) < 0) { 
1a000e4a:	201d      	movs	r0, #29
1a000e4c:	2105      	movs	r1, #5
1a000e4e:	f7ff fedd 	bl	1a000c0c <mpu9250WriteRegister>
1a000e52:	2800      	cmp	r0, #0
1a000e54:	db27      	blt.n	1a000ea6 <mpu9250SetDlpfBandwidth+0xd6>
				return -1;
			}
         // setting gyro bandwidth to 10Hz
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_10) < 0) { 
1a000e56:	201a      	movs	r0, #26
1a000e58:	2105      	movs	r1, #5
1a000e5a:	f7ff fed7 	bl	1a000c0c <mpu9250WriteRegister>
1a000e5e:	2800      	cmp	r0, #0
1a000e60:	da0c      	bge.n	1a000e7c <mpu9250SetDlpfBandwidth+0xac>
1a000e62:	e022      	b.n	1a000eaa <mpu9250SetDlpfBandwidth+0xda>
			}
			break;
		}
		case MPU9250_DLPF_BANDWIDTH_5HZ: {
         // setting accel bandwidth to 5Hz
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_5) < 0) { 
1a000e64:	201d      	movs	r0, #29
1a000e66:	2106      	movs	r1, #6
1a000e68:	f7ff fed0 	bl	1a000c0c <mpu9250WriteRegister>
1a000e6c:	2800      	cmp	r0, #0
1a000e6e:	db1e      	blt.n	1a000eae <mpu9250SetDlpfBandwidth+0xde>
				return -1;
			}
         // setting gyro bandwidth to 5Hz
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_5) < 0) { 
1a000e70:	201a      	movs	r0, #26
1a000e72:	2106      	movs	r1, #6
1a000e74:	f7ff feca 	bl	1a000c0c <mpu9250WriteRegister>
1a000e78:	2800      	cmp	r0, #0
1a000e7a:	db1a      	blt.n	1a000eb2 <mpu9250SetDlpfBandwidth+0xe2>
				return -2;
			}
			break;
		}
	}
	control._bandwidth = bandwidth;
1a000e7c:	4b0e      	ldr	r3, [pc, #56]	; (1a000eb8 <mpu9250SetDlpfBandwidth+0xe8>)
1a000e7e:	f883 4022 	strb.w	r4, [r3, #34]	; 0x22
	return 1;
1a000e82:	2001      	movs	r0, #1
1a000e84:	e016      	b.n	1a000eb4 <mpu9250SetDlpfBandwidth+0xe4>
{
	switch (bandwidth) {
		case MPU9250_DLPF_BANDWIDTH_184HZ: {
         // setting accel bandwidth to 184Hz
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_184) < 0) { 
				return -1;
1a000e86:	20ff      	movs	r0, #255	; 0xff
1a000e88:	e014      	b.n	1a000eb4 <mpu9250SetDlpfBandwidth+0xe4>
			}
         // setting gyro bandwidth to 184Hz
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_184) < 0) { 
				return -2;
1a000e8a:	20fe      	movs	r0, #254	; 0xfe
1a000e8c:	e012      	b.n	1a000eb4 <mpu9250SetDlpfBandwidth+0xe4>
			break;
		}
		case MPU9250_DLPF_BANDWIDTH_92HZ: {
         // setting accel bandwidth to 92Hz
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_92) < 0) { 
				return -1;
1a000e8e:	20ff      	movs	r0, #255	; 0xff
1a000e90:	e010      	b.n	1a000eb4 <mpu9250SetDlpfBandwidth+0xe4>
			}
         // setting gyro bandwidth to 92Hz
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_92) < 0) { 
				return -2;
1a000e92:	20fe      	movs	r0, #254	; 0xfe
1a000e94:	e00e      	b.n	1a000eb4 <mpu9250SetDlpfBandwidth+0xe4>
			break;
		}
		case MPU9250_DLPF_BANDWIDTH_41HZ: {
         // setting accel bandwidth to 41Hz
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_41) < 0) { 
				return -1;
1a000e96:	20ff      	movs	r0, #255	; 0xff
1a000e98:	e00c      	b.n	1a000eb4 <mpu9250SetDlpfBandwidth+0xe4>
			}
         // setting gyro bandwidth to 41Hz
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_41) < 0) { 
				return -2;
1a000e9a:	20fe      	movs	r0, #254	; 0xfe
1a000e9c:	e00a      	b.n	1a000eb4 <mpu9250SetDlpfBandwidth+0xe4>
			break;
		}
		case MPU9250_DLPF_BANDWIDTH_20HZ: {
         // setting accel bandwidth to 20Hz
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_20) < 0) { 
				return -1;
1a000e9e:	20ff      	movs	r0, #255	; 0xff
1a000ea0:	e008      	b.n	1a000eb4 <mpu9250SetDlpfBandwidth+0xe4>
			}
         // setting gyro bandwidth to 20Hz
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_20) < 0) { 
				return -2;
1a000ea2:	20fe      	movs	r0, #254	; 0xfe
1a000ea4:	e006      	b.n	1a000eb4 <mpu9250SetDlpfBandwidth+0xe4>
			break;
		}
		case MPU9250_DLPF_BANDWIDTH_10HZ: {
         // setting accel bandwidth to 10Hz
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_10) < 0) { 
				return -1;
1a000ea6:	20ff      	movs	r0, #255	; 0xff
1a000ea8:	e004      	b.n	1a000eb4 <mpu9250SetDlpfBandwidth+0xe4>
			}
         // setting gyro bandwidth to 10Hz
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_10) < 0) { 
				return -2;
1a000eaa:	20fe      	movs	r0, #254	; 0xfe
1a000eac:	e002      	b.n	1a000eb4 <mpu9250SetDlpfBandwidth+0xe4>
			break;
		}
		case MPU9250_DLPF_BANDWIDTH_5HZ: {
         // setting accel bandwidth to 5Hz
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_5) < 0) { 
				return -1;
1a000eae:	20ff      	movs	r0, #255	; 0xff
1a000eb0:	e000      	b.n	1a000eb4 <mpu9250SetDlpfBandwidth+0xe4>
			}
         // setting gyro bandwidth to 5Hz
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_5) < 0) { 
				return -2;
1a000eb2:	20fe      	movs	r0, #254	; 0xfe
			break;
		}
	}
	control._bandwidth = bandwidth;
	return 1;
}
1a000eb4:	b240      	sxtb	r0, r0
1a000eb6:	bd10      	pop	{r4, pc}
1a000eb8:	10000970 	.word	0x10000970

1a000ebc <mpu9250SetSrd>:

static int8_t mpu9250SetSrd( uint8_t srd )
{
1a000ebc:	b510      	push	{r4, lr}
1a000ebe:	4604      	mov	r4, r0
	/* setting the sample rate divider to 19 to facilitate setting up 
      magnetometer */
   // setting the sample rate divider
	if (mpu9250WriteRegister(MPU9250_SMPDIV, 19) < 0) {
1a000ec0:	2019      	movs	r0, #25
1a000ec2:	2113      	movs	r1, #19
1a000ec4:	f7ff fea2 	bl	1a000c0c <mpu9250WriteRegister>
1a000ec8:	2800      	cmp	r0, #0
1a000eca:	db3d      	blt.n	1a000f48 <mpu9250SetSrd+0x8c>
		return -1;
	}
	if (srd > 9) {
1a000ecc:	2c09      	cmp	r4, #9
1a000ece:	d918      	bls.n	1a000f02 <mpu9250SetSrd+0x46>
		// set AK8963 to Power Down
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a000ed0:	200a      	movs	r0, #10
1a000ed2:	2100      	movs	r1, #0
1a000ed4:	f7ff fefc 	bl	1a000cd0 <mpu9250WriteAK8963Register>
1a000ed8:	2800      	cmp	r0, #0
1a000eda:	db37      	blt.n	1a000f4c <mpu9250SetSrd+0x90>
			return -2;
		}
		delay(100); // long wait between AK8963 mode changes
1a000edc:	2064      	movs	r0, #100	; 0x64
1a000ede:	2100      	movs	r1, #0
1a000ee0:	f000 fbca 	bl	1a001678 <delay>
		// set AK8963 to 16 bit resolution, 8 Hz update rate
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS1) < 0) {
1a000ee4:	200a      	movs	r0, #10
1a000ee6:	2112      	movs	r1, #18
1a000ee8:	f7ff fef2 	bl	1a000cd0 <mpu9250WriteAK8963Register>
1a000eec:	2800      	cmp	r0, #0
1a000eee:	db2f      	blt.n	1a000f50 <mpu9250SetSrd+0x94>
			return -3;
		}
		delay(100); // long wait between AK8963 mode changes
1a000ef0:	2064      	movs	r0, #100	; 0x64
1a000ef2:	2100      	movs	r1, #0
1a000ef4:	f000 fbc0 	bl	1a001678 <delay>
		// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
		mpu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
1a000ef8:	2003      	movs	r0, #3
1a000efa:	2107      	movs	r1, #7
1a000efc:	f7ff feac 	bl	1a000c58 <mpu9250ReadAK8963Registers>
1a000f00:	e017      	b.n	1a000f32 <mpu9250SetSrd+0x76>
	} else {
		// set AK8963 to Power Down
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a000f02:	200a      	movs	r0, #10
1a000f04:	2100      	movs	r1, #0
1a000f06:	f7ff fee3 	bl	1a000cd0 <mpu9250WriteAK8963Register>
1a000f0a:	2800      	cmp	r0, #0
1a000f0c:	db22      	blt.n	1a000f54 <mpu9250SetSrd+0x98>
			return -2;
		}
		delay(100); // long wait between AK8963 mode changes
1a000f0e:	2064      	movs	r0, #100	; 0x64
1a000f10:	2100      	movs	r1, #0
1a000f12:	f000 fbb1 	bl	1a001678 <delay>
		// set AK8963 to 16 bit resolution, 100 Hz update rate
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS2) < 0) {
1a000f16:	200a      	movs	r0, #10
1a000f18:	2116      	movs	r1, #22
1a000f1a:	f7ff fed9 	bl	1a000cd0 <mpu9250WriteAK8963Register>
1a000f1e:	2800      	cmp	r0, #0
1a000f20:	db1a      	blt.n	1a000f58 <mpu9250SetSrd+0x9c>
			return -3;
		}
		delay(100); // long wait between AK8963 mode changes
1a000f22:	2064      	movs	r0, #100	; 0x64
1a000f24:	2100      	movs	r1, #0
1a000f26:	f000 fba7 	bl	1a001678 <delay>
		// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
		mpu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
1a000f2a:	2003      	movs	r0, #3
1a000f2c:	2107      	movs	r1, #7
1a000f2e:	f7ff fe93 	bl	1a000c58 <mpu9250ReadAK8963Registers>
	}
	/* setting the sample rate divider */
	if (mpu9250WriteRegister(MPU9250_SMPDIV, srd) < 0) { // setting the sample rate divider
1a000f32:	2019      	movs	r0, #25
1a000f34:	4621      	mov	r1, r4
1a000f36:	f7ff fe69 	bl	1a000c0c <mpu9250WriteRegister>
1a000f3a:	2800      	cmp	r0, #0
1a000f3c:	db0e      	blt.n	1a000f5c <mpu9250SetSrd+0xa0>
		return -4;
	}
	control._srd = srd;
1a000f3e:	4b09      	ldr	r3, [pc, #36]	; (1a000f64 <mpu9250SetSrd+0xa8>)
1a000f40:	f883 4023 	strb.w	r4, [r3, #35]	; 0x23
	return 1;
1a000f44:	2001      	movs	r0, #1
1a000f46:	e00a      	b.n	1a000f5e <mpu9250SetSrd+0xa2>
{
	/* setting the sample rate divider to 19 to facilitate setting up 
      magnetometer */
   // setting the sample rate divider
	if (mpu9250WriteRegister(MPU9250_SMPDIV, 19) < 0) {
		return -1;
1a000f48:	20ff      	movs	r0, #255	; 0xff
1a000f4a:	e008      	b.n	1a000f5e <mpu9250SetSrd+0xa2>
	}
	if (srd > 9) {
		// set AK8963 to Power Down
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
			return -2;
1a000f4c:	20fe      	movs	r0, #254	; 0xfe
1a000f4e:	e006      	b.n	1a000f5e <mpu9250SetSrd+0xa2>
		}
		delay(100); // long wait between AK8963 mode changes
		// set AK8963 to 16 bit resolution, 8 Hz update rate
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS1) < 0) {
			return -3;
1a000f50:	20fd      	movs	r0, #253	; 0xfd
1a000f52:	e004      	b.n	1a000f5e <mpu9250SetSrd+0xa2>
		// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
		mpu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
	} else {
		// set AK8963 to Power Down
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
			return -2;
1a000f54:	20fe      	movs	r0, #254	; 0xfe
1a000f56:	e002      	b.n	1a000f5e <mpu9250SetSrd+0xa2>
		}
		delay(100); // long wait between AK8963 mode changes
		// set AK8963 to 16 bit resolution, 100 Hz update rate
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS2) < 0) {
			return -3;
1a000f58:	20fd      	movs	r0, #253	; 0xfd
1a000f5a:	e000      	b.n	1a000f5e <mpu9250SetSrd+0xa2>
		// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
		mpu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
	}
	/* setting the sample rate divider */
	if (mpu9250WriteRegister(MPU9250_SMPDIV, srd) < 0) { // setting the sample rate divider
		return -4;
1a000f5c:	20fc      	movs	r0, #252	; 0xfc
	}
	control._srd = srd;
	return 1;
}
1a000f5e:	b240      	sxtb	r0, r0
1a000f60:	bd10      	pop	{r4, pc}
1a000f62:	bf00      	nop
1a000f64:	10000970 	.word	0x10000970

1a000f68 <mpu9250Read>:
	return 1;
}

//Read sensor registers and store data at control structure
bool_t mpu9250Read(void)
{
1a000f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000f6c:	b087      	sub	sp, #28
	// grab the data from the MPU9250
	if( !mpu9250ReadRegisters(MPU9250_ACCEL_OUT, 21) ){
1a000f6e:	203b      	movs	r0, #59	; 0x3b
1a000f70:	2115      	movs	r1, #21
1a000f72:	f7ff fe21 	bl	1a000bb8 <mpu9250ReadRegisters>
1a000f76:	2800      	cmp	r0, #0
1a000f78:	f000 813e 	beq.w	1a0011f8 <mpu9250Read+0x290>
		return 0;
	}
	// combine into 16 bit values
	control._axcounts = (((int16_t)control._buffer[0]) << 8)  | control._buffer[1];
1a000f7c:	4ba0      	ldr	r3, [pc, #640]	; (1a001200 <mpu9250Read+0x298>)
1a000f7e:	f893 b024 	ldrb.w	fp, [r3, #36]	; 0x24
1a000f82:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
1a000f86:	ea42 2b0b 	orr.w	fp, r2, fp, lsl #8
1a000f8a:	f8a3 b12c 	strh.w	fp, [r3, #300]	; 0x12c
	control._aycounts = (((int16_t)control._buffer[2]) << 8)  | control._buffer[3];
1a000f8e:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
1a000f92:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
1a000f96:	ea42 2401 	orr.w	r4, r2, r1, lsl #8
1a000f9a:	f8a3 412e 	strh.w	r4, [r3, #302]	; 0x12e
	control._azcounts = (((int16_t)control._buffer[4]) << 8)  | control._buffer[5];
1a000f9e:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
1a000fa2:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
1a000fa6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
1a000faa:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
	control._tcounts  = (((int16_t)control._buffer[6]) << 8)  | control._buffer[7];
1a000fae:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
1a000fb2:	f893 102b 	ldrb.w	r1, [r3, #43]	; 0x2b
1a000fb6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
1a000fba:	9101      	str	r1, [sp, #4]
1a000fbc:	f8a3 113e 	strh.w	r1, [r3, #318]	; 0x13e
	control._gxcounts = (((int16_t)control._buffer[8]) << 8)  | control._buffer[9];
1a000fc0:	f893 602c 	ldrb.w	r6, [r3, #44]	; 0x2c
1a000fc4:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
1a000fc8:	ea41 2606 	orr.w	r6, r1, r6, lsl #8
1a000fcc:	f8a3 6132 	strh.w	r6, [r3, #306]	; 0x132
	control._gycounts = (((int16_t)control._buffer[10]) << 8) | control._buffer[11];
1a000fd0:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
1a000fd4:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
1a000fd8:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
1a000fdc:	f8a3 0134 	strh.w	r0, [r3, #308]	; 0x134
	control._gzcounts = (((int16_t)control._buffer[12]) << 8) | control._buffer[13];
1a000fe0:	f893 e030 	ldrb.w	lr, [r3, #48]	; 0x30
1a000fe4:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
1a000fe8:	ea41 250e 	orr.w	r5, r1, lr, lsl #8
1a000fec:	9502      	str	r5, [sp, #8]
1a000fee:	f8a3 5136 	strh.w	r5, [r3, #310]	; 0x136
	control._hxcounts = (((int16_t)control._buffer[15]) << 8) | control._buffer[14];
1a000ff2:	f893 5033 	ldrb.w	r5, [r3, #51]	; 0x33
1a000ff6:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
1a000ffa:	ea41 2705 	orr.w	r7, r1, r5, lsl #8
1a000ffe:	9703      	str	r7, [sp, #12]
1a001000:	f8a3 7138 	strh.w	r7, [r3, #312]	; 0x138
	control._hycounts = (((int16_t)control._buffer[17]) << 8) | control._buffer[16];
1a001004:	f893 5035 	ldrb.w	r5, [r3, #53]	; 0x35
1a001008:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
1a00100c:	ea41 2e05 	orr.w	lr, r1, r5, lsl #8
1a001010:	f8cd e010 	str.w	lr, [sp, #16]
1a001014:	f8a3 e13a 	strh.w	lr, [r3, #314]	; 0x13a
	control._hzcounts = (((int16_t)control._buffer[19]) << 8) | control._buffer[18];
1a001018:	f893 5037 	ldrb.w	r5, [r3, #55]	; 0x37
1a00101c:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
1a001020:	ea41 2e05 	orr.w	lr, r1, r5, lsl #8
1a001024:	f8cd e014 	str.w	lr, [sp, #20]
1a001028:	f8a3 e13c 	strh.w	lr, [r3, #316]	; 0x13c
	// transform and convert to float values
	control._ax = (((float)(control.tX[0]*control._axcounts + control.tX[1]*control._aycounts + control.tX[2]*control._azcounts) * control._accelScale) - control._axb)*control._axs;
1a00102c:	f9b3 a140 	ldrsh.w	sl, [r3, #320]	; 0x140
1a001030:	fa0f fb8b 	sxth.w	fp, fp
1a001034:	f9b3 7142 	ldrsh.w	r7, [r3, #322]	; 0x142
1a001038:	b221      	sxth	r1, r4
1a00103a:	fb01 f407 	mul.w	r4, r1, r7
1a00103e:	fb0b 440a 	mla	r4, fp, sl, r4
1a001042:	f9b3 5144 	ldrsh.w	r5, [r3, #324]	; 0x144
1a001046:	b212      	sxth	r2, r2
1a001048:	fb02 4405 	mla	r4, r2, r5, r4
1a00104c:	ee07 4a90 	vmov	s15, r4
1a001050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a001054:	ed93 7a01 	vldr	s14, [r3, #4]
1a001058:	ee67 7a87 	vmul.f32	s15, s15, s14
1a00105c:	edd3 6a30 	vldr	s13, [r3, #192]	; 0xc0
1a001060:	ee77 7ae6 	vsub.f32	s15, s15, s13
1a001064:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
1a001068:	ee67 7aa6 	vmul.f32	s15, s15, s13
1a00106c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	control._ay = (((float)(control.tY[0]*control._axcounts + control.tY[1]*control._aycounts + control.tY[2]*control._azcounts) * control._accelScale) - control._ayb)*control._ays;
1a001070:	f9b3 c146 	ldrsh.w	ip, [r3, #326]	; 0x146
1a001074:	f9b3 8148 	ldrsh.w	r8, [r3, #328]	; 0x148
1a001078:	fb08 fe01 	mul.w	lr, r8, r1
1a00107c:	fb0c ee0b 	mla	lr, ip, fp, lr
1a001080:	f9b3 414a 	ldrsh.w	r4, [r3, #330]	; 0x14a
1a001084:	fb04 ee02 	mla	lr, r4, r2, lr
1a001088:	ee07 ea90 	vmov	s15, lr
1a00108c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a001090:	ee67 7a27 	vmul.f32	s15, s14, s15
1a001094:	edd3 6a31 	vldr	s13, [r3, #196]	; 0xc4
1a001098:	ee77 7ae6 	vsub.f32	s15, s15, s13
1a00109c:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
1a0010a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
1a0010a4:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	control._az = (((float)(control.tZ[0]*control._axcounts + control.tZ[1]*control._aycounts + control.tZ[2]*control._azcounts) * control._accelScale) - control._azb)*control._azs;
1a0010a8:	f9b3 e14c 	ldrsh.w	lr, [r3, #332]	; 0x14c
1a0010ac:	f9b3 914e 	ldrsh.w	r9, [r3, #334]	; 0x14e
1a0010b0:	fb09 f101 	mul.w	r1, r9, r1
1a0010b4:	fb0e 110b 	mla	r1, lr, fp, r1
1a0010b8:	f9b3 b150 	ldrsh.w	fp, [r3, #336]	; 0x150
1a0010bc:	fb0b 1102 	mla	r1, fp, r2, r1
1a0010c0:	ee07 1a90 	vmov	s15, r1
1a0010c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a0010c8:	ee27 7a27 	vmul.f32	s14, s14, s15
1a0010cc:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
1a0010d0:	ee37 7a67 	vsub.f32	s14, s14, s15
1a0010d4:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
1a0010d8:	ee27 7a27 	vmul.f32	s14, s14, s15
1a0010dc:	ed83 7a11 	vstr	s14, [r3, #68]	; 0x44
	control._gx = ((float) (control.tX[0]*control._gxcounts + control.tX[1]*control._gycounts + control.tX[2]*control._gzcounts) * control._gyroScale) -  control._gxb;
1a0010e0:	b236      	sxth	r6, r6
1a0010e2:	b200      	sxth	r0, r0
1a0010e4:	fb00 f707 	mul.w	r7, r0, r7
1a0010e8:	fb06 770a 	mla	r7, r6, sl, r7
1a0010ec:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
1a0010f0:	fb02 7a05 	mla	sl, r2, r5, r7
1a0010f4:	ee07 aa90 	vmov	s15, sl
1a0010f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a0010fc:	ed93 7a02 	vldr	s14, [r3, #8]
1a001100:	ee67 7a87 	vmul.f32	s15, s15, s14
1a001104:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
1a001108:	ee77 7ae6 	vsub.f32	s15, s15, s13
1a00110c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	control._gy = ((float) (control.tY[0]*control._gxcounts + control.tY[1]*control._gycounts + control.tY[2]*control._gzcounts) * control._gyroScale) -  control._gyb;
1a001110:	fb00 f808 	mul.w	r8, r0, r8
1a001114:	fb06 8c0c 	mla	ip, r6, ip, r8
1a001118:	fb02 c404 	mla	r4, r2, r4, ip
1a00111c:	ee07 4a90 	vmov	s15, r4
1a001120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a001124:	ee67 7a27 	vmul.f32	s15, s14, s15
1a001128:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
1a00112c:	ee77 7ae6 	vsub.f32	s15, s15, s13
1a001130:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	control._gz = ((float) (control.tZ[0]*control._gxcounts + control.tZ[1]*control._gycounts + control.tZ[2]*control._gzcounts) * control._gyroScale) -  control._gzb;
1a001134:	fb00 f009 	mul.w	r0, r0, r9
1a001138:	fb06 060e 	mla	r6, r6, lr, r0
1a00113c:	fb02 6b0b 	mla	fp, r2, fp, r6
1a001140:	ee07 ba90 	vmov	s15, fp
1a001144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a001148:	ee27 7a27 	vmul.f32	s14, s14, s15
1a00114c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
1a001150:	ee37 7a67 	vsub.f32	s14, s14, s15
1a001154:	ed83 7a14 	vstr	s14, [r3, #80]	; 0x50
	control._hx = (((float)(control._hxcounts) * control._magScaleX) - control._hxb)*control._hxs;
1a001158:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
1a00115c:	ee07 2a90 	vmov	s15, r2
1a001160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a001164:	ed93 7a03 	vldr	s14, [r3, #12]
1a001168:	ee67 7a87 	vmul.f32	s15, s15, s14
1a00116c:	ed93 7a44 	vldr	s14, [r3, #272]	; 0x110
1a001170:	ee77 7ac7 	vsub.f32	s15, s15, s14
1a001174:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
1a001178:	ee67 7a87 	vmul.f32	s15, s15, s14
1a00117c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	control._hy = (((float)(control._hycounts) * control._magScaleY) - control._hyb)*control._hys;
1a001180:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
1a001184:	ee07 2a90 	vmov	s15, r2
1a001188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a00118c:	ed93 7a04 	vldr	s14, [r3, #16]
1a001190:	ee67 7a87 	vmul.f32	s15, s15, s14
1a001194:	ed93 7a45 	vldr	s14, [r3, #276]	; 0x114
1a001198:	ee77 7ac7 	vsub.f32	s15, s15, s14
1a00119c:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
1a0011a0:	ee67 7a87 	vmul.f32	s15, s15, s14
1a0011a4:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	control._hz = (((float)(control._hzcounts) * control._magScaleZ) - control._hzb)*control._hzs;
1a0011a8:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
1a0011ac:	ee07 2a90 	vmov	s15, r2
1a0011b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a0011b4:	ed93 7a05 	vldr	s14, [r3, #20]
1a0011b8:	ee67 7a87 	vmul.f32	s15, s15, s14
1a0011bc:	ed93 7a46 	vldr	s14, [r3, #280]	; 0x118
1a0011c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
1a0011c4:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
1a0011c8:	ee67 7a87 	vmul.f32	s15, s15, s14
1a0011cc:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	control._t = ((((float) control._tcounts)  - control._tempOffset)/ control._tempScale) + control._tempOffset;
1a0011d0:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
1a0011d4:	ee07 2a10 	vmov	s14, r2
1a0011d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
1a0011dc:	edd3 6a07 	vldr	s13, [r3, #28]
1a0011e0:	ee37 7a66 	vsub.f32	s14, s14, s13
1a0011e4:	edd3 7a06 	vldr	s15, [r3, #24]
1a0011e8:	eec7 7a27 	vdiv.f32	s15, s14, s15
1a0011ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
1a0011f0:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	return 1;
1a0011f4:	2001      	movs	r0, #1
1a0011f6:	e000      	b.n	1a0011fa <mpu9250Read+0x292>
//Read sensor registers and store data at control structure
bool_t mpu9250Read(void)
{
	// grab the data from the MPU9250
	if( !mpu9250ReadRegisters(MPU9250_ACCEL_OUT, 21) ){
		return 0;
1a0011f8:	2000      	movs	r0, #0
	control._hx = (((float)(control._hxcounts) * control._magScaleX) - control._hxb)*control._hxs;
	control._hy = (((float)(control._hycounts) * control._magScaleY) - control._hyb)*control._hys;
	control._hz = (((float)(control._hzcounts) * control._magScaleZ) - control._hzb)*control._hzs;
	control._t = ((((float) control._tcounts)  - control._tempOffset)/ control._tempScale) + control._tempOffset;
	return 1;
}
1a0011fa:	b007      	add	sp, #28
1a0011fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001200:	10000970 	.word	0x10000970

1a001204 <mpu9250GetAccelX_mss>:

// Returns the accelerometer measurement in the x direction, m/s/s
float mpu9250GetAccelX_mss( void )
{
	return control._ax;
}
1a001204:	4b01      	ldr	r3, [pc, #4]	; (1a00120c <mpu9250GetAccelX_mss+0x8>)
1a001206:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
1a00120a:	4770      	bx	lr
1a00120c:	10000970 	.word	0x10000970

1a001210 <mpu9250GetAccelY_mss>:

// Returns the accelerometer measurement in the y direction, m/s/s
float mpu9250GetAccelY_mss( void )
{
	return control._ay;
}
1a001210:	4b01      	ldr	r3, [pc, #4]	; (1a001218 <mpu9250GetAccelY_mss+0x8>)
1a001212:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
1a001216:	4770      	bx	lr
1a001218:	10000970 	.word	0x10000970

1a00121c <mpu9250GetAccelZ_mss>:

// Returns the accelerometer measurement in the z direction, m/s/s
float mpu9250GetAccelZ_mss( void )
{
	return control._az;
}
1a00121c:	4b01      	ldr	r3, [pc, #4]	; (1a001224 <mpu9250GetAccelZ_mss+0x8>)
1a00121e:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
1a001222:	4770      	bx	lr
1a001224:	10000970 	.word	0x10000970

1a001228 <mpu9250GetGyroX_rads>:

// Returns the gyroscope measurement in the x direction, rad/s
float mpu9250GetGyroX_rads( void )
{
	return control._gx;
}
1a001228:	4b01      	ldr	r3, [pc, #4]	; (1a001230 <mpu9250GetGyroX_rads+0x8>)
1a00122a:	ed93 0a12 	vldr	s0, [r3, #72]	; 0x48
1a00122e:	4770      	bx	lr
1a001230:	10000970 	.word	0x10000970

1a001234 <mpu9250GetGyroY_rads>:

// Returns the gyroscope measurement in the y direction, rad/s
float mpu9250GetGyroY_rads( void )
{
	return control._gy;
}
1a001234:	4b01      	ldr	r3, [pc, #4]	; (1a00123c <mpu9250GetGyroY_rads+0x8>)
1a001236:	ed93 0a13 	vldr	s0, [r3, #76]	; 0x4c
1a00123a:	4770      	bx	lr
1a00123c:	10000970 	.word	0x10000970

1a001240 <mpu9250GetGyroZ_rads>:

// Returns the gyroscope measurement in the z direction, rad/s
float mpu9250GetGyroZ_rads( void )
{
	return control._gz;
}
1a001240:	4b01      	ldr	r3, [pc, #4]	; (1a001248 <mpu9250GetGyroZ_rads+0x8>)
1a001242:	ed93 0a14 	vldr	s0, [r3, #80]	; 0x50
1a001246:	4770      	bx	lr
1a001248:	10000970 	.word	0x10000970

1a00124c <mpu9250CalibrateGyro>:
	control._status = mpu9250ReadRegisters(MPU9250_EXT_SENS_DATA_00,count);
	return control._status;
}

static int8_t mpu9250CalibrateGyro( void )
{
1a00124c:	b538      	push	{r3, r4, r5, lr}
1a00124e:	ed2d 8b02 	vpush	{d8}
	// set the range, bandwidth, and srd
	if (mpu9250SetGyroRange(MPU9250_GYRO_RANGE_250DPS) < 0) {
1a001252:	2000      	movs	r0, #0
1a001254:	f7ff fd74 	bl	1a000d40 <mpu9250SetGyroRange>
1a001258:	2800      	cmp	r0, #0
1a00125a:	f2c0 808e 	blt.w	1a00137a <mpu9250CalibrateGyro+0x12e>
		return -1;
	}
	if (mpu9250SetDlpfBandwidth(MPU9250_DLPF_BANDWIDTH_20HZ) < 0) {
1a00125e:	2003      	movs	r0, #3
1a001260:	f7ff fdb6 	bl	1a000dd0 <mpu9250SetDlpfBandwidth>
1a001264:	2800      	cmp	r0, #0
1a001266:	f2c0 808a 	blt.w	1a00137e <mpu9250CalibrateGyro+0x132>
		return -2;
	}
	if (mpu9250SetSrd(19) < 0) {
1a00126a:	2013      	movs	r0, #19
1a00126c:	f7ff fe26 	bl	1a000ebc <mpu9250SetSrd>
1a001270:	2800      	cmp	r0, #0
1a001272:	f2c0 8086 	blt.w	1a001382 <mpu9250CalibrateGyro+0x136>
		return -3;
	}

	// take samples and find bias
	control._gxbD = 0;
1a001276:	4b48      	ldr	r3, [pc, #288]	; (1a001398 <mpu9250CalibrateGyro+0x14c>)
1a001278:	2000      	movs	r0, #0
1a00127a:	2100      	movs	r1, #0
1a00127c:	e9c3 011a 	strd	r0, r1, [r3, #104]	; 0x68
	control._gybD = 0;
1a001280:	e9c3 011c 	strd	r0, r1, [r3, #112]	; 0x70
	control._gzbD = 0;
1a001284:	e9c3 011e 	strd	r0, r1, [r3, #120]	; 0x78
	for (uint8_t i=0; i < control._numSamples; i++) {
1a001288:	2500      	movs	r5, #0
1a00128a:	e04a      	b.n	1a001322 <mpu9250CalibrateGyro+0xd6>
		mpu9250Read();
1a00128c:	f7ff fe6c 	bl	1a000f68 <mpu9250Read>
		control._gxbD += ((mpu9250GetGyroX_rads() + control._gxb)/control._numSamples);
1a001290:	f7ff ffca 	bl	1a001228 <mpu9250GetGyroX_rads>
1a001294:	4c40      	ldr	r4, [pc, #256]	; (1a001398 <mpu9250CalibrateGyro+0x14c>)
1a001296:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
1a00129a:	ee30 0a27 	vadd.f32	s0, s0, s15
1a00129e:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
1a0012a2:	ee08 3a10 	vmov	s16, r3
1a0012a6:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
1a0012aa:	eec0 7a08 	vdiv.f32	s15, s0, s16
1a0012ae:	ee17 0a90 	vmov	r0, s15
1a0012b2:	f001 fd91 	bl	1a002dd8 <__aeabi_f2d>
1a0012b6:	4602      	mov	r2, r0
1a0012b8:	460b      	mov	r3, r1
1a0012ba:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
1a0012be:	f001 fc2d 	bl	1a002b1c <__adddf3>
1a0012c2:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
		control._gybD += ((mpu9250GetGyroY_rads() + control._gyb)/control._numSamples);
1a0012c6:	f7ff ffb5 	bl	1a001234 <mpu9250GetGyroY_rads>
1a0012ca:	edd4 7a21 	vldr	s15, [r4, #132]	; 0x84
1a0012ce:	ee30 0a27 	vadd.f32	s0, s0, s15
1a0012d2:	eec0 7a08 	vdiv.f32	s15, s0, s16
1a0012d6:	ee17 0a90 	vmov	r0, s15
1a0012da:	f001 fd7d 	bl	1a002dd8 <__aeabi_f2d>
1a0012de:	4602      	mov	r2, r0
1a0012e0:	460b      	mov	r3, r1
1a0012e2:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
1a0012e6:	f001 fc19 	bl	1a002b1c <__adddf3>
1a0012ea:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
		control._gzbD += ((mpu9250GetGyroZ_rads() + control._gzb)/control._numSamples);
1a0012ee:	f7ff ffa7 	bl	1a001240 <mpu9250GetGyroZ_rads>
1a0012f2:	edd4 7a22 	vldr	s15, [r4, #136]	; 0x88
1a0012f6:	ee30 0a27 	vadd.f32	s0, s0, s15
1a0012fa:	eec0 7a08 	vdiv.f32	s15, s0, s16
1a0012fe:	ee17 0a90 	vmov	r0, s15
1a001302:	f001 fd69 	bl	1a002dd8 <__aeabi_f2d>
1a001306:	4602      	mov	r2, r0
1a001308:	460b      	mov	r3, r1
1a00130a:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
1a00130e:	f001 fc05 	bl	1a002b1c <__adddf3>
1a001312:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
		delay(20);
1a001316:	2014      	movs	r0, #20
1a001318:	2100      	movs	r1, #0
1a00131a:	f000 f9ad 	bl	1a001678 <delay>

	// take samples and find bias
	control._gxbD = 0;
	control._gybD = 0;
	control._gzbD = 0;
	for (uint8_t i=0; i < control._numSamples; i++) {
1a00131e:	3501      	adds	r5, #1
1a001320:	b2ed      	uxtb	r5, r5
1a001322:	4b1d      	ldr	r3, [pc, #116]	; (1a001398 <mpu9250CalibrateGyro+0x14c>)
1a001324:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
1a001328:	42ab      	cmp	r3, r5
1a00132a:	d8af      	bhi.n	1a00128c <mpu9250CalibrateGyro+0x40>
		control._gxbD += ((mpu9250GetGyroX_rads() + control._gxb)/control._numSamples);
		control._gybD += ((mpu9250GetGyroY_rads() + control._gyb)/control._numSamples);
		control._gzbD += ((mpu9250GetGyroZ_rads() + control._gzb)/control._numSamples);
		delay(20);
	}
	control._gxb = (float)control._gxbD;
1a00132c:	4c1a      	ldr	r4, [pc, #104]	; (1a001398 <mpu9250CalibrateGyro+0x14c>)
1a00132e:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
1a001332:	f001 fda5 	bl	1a002e80 <__aeabi_d2f>
1a001336:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	control._gyb = (float)control._gybD;
1a00133a:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
1a00133e:	f001 fd9f 	bl	1a002e80 <__aeabi_d2f>
1a001342:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
	control._gzb = (float)control._gzbD;
1a001346:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
1a00134a:	f001 fd99 	bl	1a002e80 <__aeabi_d2f>
1a00134e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88

	// set the range, bandwidth, and srd back to what they were
	if (mpu9250SetGyroRange(control._gyroRange) < 0) {
1a001352:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
1a001356:	f7ff fcf3 	bl	1a000d40 <mpu9250SetGyroRange>
1a00135a:	2800      	cmp	r0, #0
1a00135c:	db13      	blt.n	1a001386 <mpu9250CalibrateGyro+0x13a>
		return -4;
	}
	if (mpu9250SetDlpfBandwidth(control._bandwidth) < 0) {
1a00135e:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
1a001362:	f7ff fd35 	bl	1a000dd0 <mpu9250SetDlpfBandwidth>
1a001366:	2800      	cmp	r0, #0
1a001368:	db0f      	blt.n	1a00138a <mpu9250CalibrateGyro+0x13e>
		return -5;
	}
	if (mpu9250SetSrd(control._srd) < 0) {
1a00136a:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
1a00136e:	f7ff fda5 	bl	1a000ebc <mpu9250SetSrd>
1a001372:	2800      	cmp	r0, #0
1a001374:	da0b      	bge.n	1a00138e <mpu9250CalibrateGyro+0x142>
		return -6;
1a001376:	20fa      	movs	r0, #250	; 0xfa
1a001378:	e00a      	b.n	1a001390 <mpu9250CalibrateGyro+0x144>

static int8_t mpu9250CalibrateGyro( void )
{
	// set the range, bandwidth, and srd
	if (mpu9250SetGyroRange(MPU9250_GYRO_RANGE_250DPS) < 0) {
		return -1;
1a00137a:	20ff      	movs	r0, #255	; 0xff
1a00137c:	e008      	b.n	1a001390 <mpu9250CalibrateGyro+0x144>
	}
	if (mpu9250SetDlpfBandwidth(MPU9250_DLPF_BANDWIDTH_20HZ) < 0) {
		return -2;
1a00137e:	20fe      	movs	r0, #254	; 0xfe
1a001380:	e006      	b.n	1a001390 <mpu9250CalibrateGyro+0x144>
	}
	if (mpu9250SetSrd(19) < 0) {
		return -3;
1a001382:	20fd      	movs	r0, #253	; 0xfd
1a001384:	e004      	b.n	1a001390 <mpu9250CalibrateGyro+0x144>
	control._gyb = (float)control._gybD;
	control._gzb = (float)control._gzbD;

	// set the range, bandwidth, and srd back to what they were
	if (mpu9250SetGyroRange(control._gyroRange) < 0) {
		return -4;
1a001386:	20fc      	movs	r0, #252	; 0xfc
1a001388:	e002      	b.n	1a001390 <mpu9250CalibrateGyro+0x144>
	}
	if (mpu9250SetDlpfBandwidth(control._bandwidth) < 0) {
		return -5;
1a00138a:	20fb      	movs	r0, #251	; 0xfb
1a00138c:	e000      	b.n	1a001390 <mpu9250CalibrateGyro+0x144>
	}
	if (mpu9250SetSrd(control._srd) < 0) {
		return -6;
	}
	return 1;
1a00138e:	2001      	movs	r0, #1
}
1a001390:	b240      	sxtb	r0, r0
1a001392:	ecbd 8b02 	vpop	{d8}
1a001396:	bd38      	pop	{r3, r4, r5, pc}
1a001398:	10000970 	.word	0x10000970

1a00139c <mpu9250Init>:

/*==================[external functions definition]==========================*/

//Initialize MPU9250 (TODO: include SPI communication)
int8_t mpu9250Init( MPU9250_address_t address )
{
1a00139c:	b510      	push	{r4, lr}
1a00139e:	4604      	mov	r4, r0
	mpu9250InitializeControlStructure();
1a0013a0:	f7ff fbca 	bl	1a000b38 <mpu9250InitializeControlStructure>

	control.address = address;
1a0013a4:	4b99      	ldr	r3, [pc, #612]	; (1a00160c <mpu9250Init+0x270>)
1a0013a6:	701c      	strb	r4, [r3, #0]

	// using I2C for communication
	// starting the I2C bus
	i2cInit(I2C0, MPU9250_I2C_RATE);
1a0013a8:	2000      	movs	r0, #0
1a0013aa:	4999      	ldr	r1, [pc, #612]	; (1a001610 <mpu9250Init+0x274>)
1a0013ac:	f000 fa04 	bl	1a0017b8 <i2cInit>

	// select clock source to gyro
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
1a0013b0:	206b      	movs	r0, #107	; 0x6b
1a0013b2:	2101      	movs	r1, #1
1a0013b4:	f7ff fc2a 	bl	1a000c0c <mpu9250WriteRegister>
1a0013b8:	2800      	cmp	r0, #0
1a0013ba:	f2c0 80fd 	blt.w	1a0015b8 <mpu9250Init+0x21c>
		return -1;
	}
	// enable I2C master mode
	if (mpu9250WriteRegister(MPU9250_USER_CTRL, MPU9250_I2C_MST_EN) < 0) {
1a0013be:	206a      	movs	r0, #106	; 0x6a
1a0013c0:	2120      	movs	r1, #32
1a0013c2:	f7ff fc23 	bl	1a000c0c <mpu9250WriteRegister>
1a0013c6:	2800      	cmp	r0, #0
1a0013c8:	f2c0 80f8 	blt.w	1a0015bc <mpu9250Init+0x220>
		return -2;
	}
	// set the I2C bus speed to 400 kHz
	if (mpu9250WriteRegister(MPU9250_I2C_MST_CTRL, MPU9250_I2C_MST_CLK) < 0) {
1a0013cc:	2024      	movs	r0, #36	; 0x24
1a0013ce:	210d      	movs	r1, #13
1a0013d0:	f7ff fc1c 	bl	1a000c0c <mpu9250WriteRegister>
1a0013d4:	2800      	cmp	r0, #0
1a0013d6:	f2c0 80f3 	blt.w	1a0015c0 <mpu9250Init+0x224>
		return -3;
	}
	// set AK8963 to Power Down
	mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN);
1a0013da:	200a      	movs	r0, #10
1a0013dc:	2100      	movs	r1, #0
1a0013de:	f7ff fc77 	bl	1a000cd0 <mpu9250WriteAK8963Register>
	// reset the MPU9250
	mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_PWR_RESET);
1a0013e2:	206b      	movs	r0, #107	; 0x6b
1a0013e4:	2180      	movs	r1, #128	; 0x80
1a0013e6:	f7ff fc11 	bl	1a000c0c <mpu9250WriteRegister>
	// wait for MPU-9250 to come back up
	delay(1);
1a0013ea:	2001      	movs	r0, #1
1a0013ec:	2100      	movs	r1, #0
1a0013ee:	f000 f943 	bl	1a001678 <delay>
	// reset the AK8963
	mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL2, MPU9250_AK8963_RESET);
1a0013f2:	200b      	movs	r0, #11
1a0013f4:	2101      	movs	r1, #1
1a0013f6:	f7ff fc6b 	bl	1a000cd0 <mpu9250WriteAK8963Register>
	// select clock source to gyro
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
1a0013fa:	206b      	movs	r0, #107	; 0x6b
1a0013fc:	2101      	movs	r1, #1
1a0013fe:	f7ff fc05 	bl	1a000c0c <mpu9250WriteRegister>
1a001402:	2800      	cmp	r0, #0
1a001404:	f2c0 80de 	blt.w	1a0015c4 <mpu9250Init+0x228>
		return -4;
	}
	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	if ((mpu9250WhoAmI() != 113) && (mpu9250WhoAmI() != 115)) {
1a001408:	f7ff fbf0 	bl	1a000bec <mpu9250WhoAmI>
1a00140c:	2871      	cmp	r0, #113	; 0x71
1a00140e:	d004      	beq.n	1a00141a <mpu9250Init+0x7e>
1a001410:	f7ff fbec 	bl	1a000bec <mpu9250WhoAmI>
1a001414:	2873      	cmp	r0, #115	; 0x73
1a001416:	f040 80d7 	bne.w	1a0015c8 <mpu9250Init+0x22c>
		return -5;
	}
	// enable accelerometer and gyro
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_2, MPU9250_SEN_ENABLE) < 0) {
1a00141a:	206c      	movs	r0, #108	; 0x6c
1a00141c:	2100      	movs	r1, #0
1a00141e:	f7ff fbf5 	bl	1a000c0c <mpu9250WriteRegister>
1a001422:	2800      	cmp	r0, #0
1a001424:	f2c0 80d2 	blt.w	1a0015cc <mpu9250Init+0x230>
		return -6;
	}
	// setting accel range to 16G as default
	if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG, MPU9250_ACCEL_FS_SEL_16G) < 0) {
1a001428:	201c      	movs	r0, #28
1a00142a:	2118      	movs	r1, #24
1a00142c:	f7ff fbee 	bl	1a000c0c <mpu9250WriteRegister>
1a001430:	2800      	cmp	r0, #0
1a001432:	f2c0 80cd 	blt.w	1a0015d0 <mpu9250Init+0x234>
		return -7;
	}
	control._accelScale = MPU9250_G * 16.0f / 32767.5f; // setting the accel scale to 16G
1a001436:	4b75      	ldr	r3, [pc, #468]	; (1a00160c <mpu9250Init+0x270>)
1a001438:	4a76      	ldr	r2, [pc, #472]	; (1a001614 <mpu9250Init+0x278>)
1a00143a:	605a      	str	r2, [r3, #4]
	control._accelRange = MPU9250_ACCEL_RANGE_16G;
1a00143c:	2203      	movs	r2, #3
1a00143e:	f883 2020 	strb.w	r2, [r3, #32]
	// setting the gyro range to 2000DPS as default
	if (mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_2000DPS) < 0) {
1a001442:	201b      	movs	r0, #27
1a001444:	2118      	movs	r1, #24
1a001446:	f7ff fbe1 	bl	1a000c0c <mpu9250WriteRegister>
1a00144a:	2800      	cmp	r0, #0
1a00144c:	f2c0 80c2 	blt.w	1a0015d4 <mpu9250Init+0x238>
		return -8;
	}
   // setting the gyro scale to 2000DPS
	control._gyroScale = 2000.0f / 32767.5f * MPU9250_D2R; 
1a001450:	4b6e      	ldr	r3, [pc, #440]	; (1a00160c <mpu9250Init+0x270>)
1a001452:	4a71      	ldr	r2, [pc, #452]	; (1a001618 <mpu9250Init+0x27c>)
1a001454:	609a      	str	r2, [r3, #8]
	control._gyroRange = MPU9250_GYRO_RANGE_2000DPS;
1a001456:	2203      	movs	r2, #3
1a001458:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	// setting bandwidth to 184Hz as default
	if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_184) < 0) {
1a00145c:	201d      	movs	r0, #29
1a00145e:	2101      	movs	r1, #1
1a001460:	f7ff fbd4 	bl	1a000c0c <mpu9250WriteRegister>
1a001464:	2800      	cmp	r0, #0
1a001466:	f2c0 80b7 	blt.w	1a0015d8 <mpu9250Init+0x23c>
		return -9;
	}
   // setting gyro bandwidth to 184Hz
	if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_184) < 0) { 
1a00146a:	201a      	movs	r0, #26
1a00146c:	2101      	movs	r1, #1
1a00146e:	f7ff fbcd 	bl	1a000c0c <mpu9250WriteRegister>
1a001472:	2800      	cmp	r0, #0
1a001474:	f2c0 80b2 	blt.w	1a0015dc <mpu9250Init+0x240>
		return -10;
	}
	control._bandwidth = MPU9250_DLPF_BANDWIDTH_184HZ;
1a001478:	2100      	movs	r1, #0
1a00147a:	4b64      	ldr	r3, [pc, #400]	; (1a00160c <mpu9250Init+0x270>)
1a00147c:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
	// setting the sample rate divider to 0 as default
	if (mpu9250WriteRegister(MPU9250_SMPDIV, 0x00) < 0) {
1a001480:	2019      	movs	r0, #25
1a001482:	f7ff fbc3 	bl	1a000c0c <mpu9250WriteRegister>
1a001486:	2800      	cmp	r0, #0
1a001488:	f2c0 80aa 	blt.w	1a0015e0 <mpu9250Init+0x244>
		return -11;
	}
	control._srd = 0;
1a00148c:	2200      	movs	r2, #0
1a00148e:	4b5f      	ldr	r3, [pc, #380]	; (1a00160c <mpu9250Init+0x270>)
1a001490:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	// enable I2C master mode
	if (mpu9250WriteRegister(MPU9250_USER_CTRL, MPU9250_I2C_MST_EN) < 0) {
1a001494:	206a      	movs	r0, #106	; 0x6a
1a001496:	2120      	movs	r1, #32
1a001498:	f7ff fbb8 	bl	1a000c0c <mpu9250WriteRegister>
1a00149c:	2800      	cmp	r0, #0
1a00149e:	f2c0 80a1 	blt.w	1a0015e4 <mpu9250Init+0x248>
		return -12;
	}
	// set the I2C bus speed to 400 kHz
	if (mpu9250WriteRegister(MPU9250_I2C_MST_CTRL, MPU9250_I2C_MST_CLK) < 0) {
1a0014a2:	2024      	movs	r0, #36	; 0x24
1a0014a4:	210d      	movs	r1, #13
1a0014a6:	f7ff fbb1 	bl	1a000c0c <mpu9250WriteRegister>
1a0014aa:	2800      	cmp	r0, #0
1a0014ac:	f2c0 809c 	blt.w	1a0015e8 <mpu9250Init+0x24c>
		return -13;
	}
	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if (mpu9250WhoAmIAK8963() != 72) {
1a0014b0:	f7ff fbfe 	bl	1a000cb0 <mpu9250WhoAmIAK8963>
1a0014b4:	2848      	cmp	r0, #72	; 0x48
1a0014b6:	f040 8099 	bne.w	1a0015ec <mpu9250Init+0x250>
		return -14;
	}
	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a0014ba:	200a      	movs	r0, #10
1a0014bc:	2100      	movs	r1, #0
1a0014be:	f7ff fc07 	bl	1a000cd0 <mpu9250WriteAK8963Register>
1a0014c2:	2800      	cmp	r0, #0
1a0014c4:	f2c0 8094 	blt.w	1a0015f0 <mpu9250Init+0x254>
		return -15;
	}
	delay(100); // long wait between AK8963 mode changes
1a0014c8:	2064      	movs	r0, #100	; 0x64
1a0014ca:	2100      	movs	r1, #0
1a0014cc:	f000 f8d4 	bl	1a001678 <delay>
	// set AK8963 to FUSE ROM access
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_FUSE_ROM) < 0) {
1a0014d0:	200a      	movs	r0, #10
1a0014d2:	210f      	movs	r1, #15
1a0014d4:	f7ff fbfc 	bl	1a000cd0 <mpu9250WriteAK8963Register>
1a0014d8:	2800      	cmp	r0, #0
1a0014da:	f2c0 808b 	blt.w	1a0015f4 <mpu9250Init+0x258>
		return -16;
	}
	delay(100); // long wait between AK8963 mode changes
1a0014de:	2064      	movs	r0, #100	; 0x64
1a0014e0:	2100      	movs	r1, #0
1a0014e2:	f000 f8c9 	bl	1a001678 <delay>
	// read the AK8963 ASA registers and compute magnetometer scale factors
	mpu9250ReadAK8963Registers(MPU9250_AK8963_ASA, 3);
1a0014e6:	2010      	movs	r0, #16
1a0014e8:	2103      	movs	r1, #3
1a0014ea:	f7ff fbb5 	bl	1a000c58 <mpu9250ReadAK8963Registers>
	control._magScaleX = ((((float) control._buffer[0]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a0014ee:	4b47      	ldr	r3, [pc, #284]	; (1a00160c <mpu9250Init+0x270>)
1a0014f0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
1a0014f4:	ee06 2a10 	vmov	s12, r2
1a0014f8:	eeb8 6a46 	vcvt.f32.u32	s12, s12
1a0014fc:	eddf 4a47 	vldr	s9, [pc, #284]	; 1a00161c <mpu9250Init+0x280>
1a001500:	ee36 6a64 	vsub.f32	s12, s12, s9
1a001504:	ed9f 7a46 	vldr	s14, [pc, #280]	; 1a001620 <mpu9250Init+0x284>
1a001508:	ee26 6a07 	vmul.f32	s12, s12, s14
1a00150c:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
1a001510:	ee36 6a27 	vadd.f32	s12, s12, s15
1a001514:	ed9f 5a43 	vldr	s10, [pc, #268]	; 1a001624 <mpu9250Init+0x288>
1a001518:	ee26 6a05 	vmul.f32	s12, s12, s10
			/ 32760.0f; // micro Tesla
1a00151c:	eddf 5a42 	vldr	s11, [pc, #264]	; 1a001628 <mpu9250Init+0x28c>
1a001520:	ee86 6a25 	vdiv.f32	s12, s12, s11
		return -16;
	}
	delay(100); // long wait between AK8963 mode changes
	// read the AK8963 ASA registers and compute magnetometer scale factors
	mpu9250ReadAK8963Registers(MPU9250_AK8963_ASA, 3);
	control._magScaleX = ((((float) control._buffer[0]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a001524:	ed83 6a03 	vstr	s12, [r3, #12]
			/ 32760.0f; // micro Tesla
	control._magScaleY = ((((float) control._buffer[1]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a001528:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
1a00152c:	ee06 2a10 	vmov	s12, r2
1a001530:	eeb8 6a46 	vcvt.f32.u32	s12, s12
1a001534:	ee36 6a64 	vsub.f32	s12, s12, s9
1a001538:	ee26 6a07 	vmul.f32	s12, s12, s14
1a00153c:	ee36 6a27 	vadd.f32	s12, s12, s15
1a001540:	ee26 6a05 	vmul.f32	s12, s12, s10
			/ 32760.0f; // micro Tesla
1a001544:	ee86 6a25 	vdiv.f32	s12, s12, s11
	delay(100); // long wait between AK8963 mode changes
	// read the AK8963 ASA registers and compute magnetometer scale factors
	mpu9250ReadAK8963Registers(MPU9250_AK8963_ASA, 3);
	control._magScaleX = ((((float) control._buffer[0]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
			/ 32760.0f; // micro Tesla
	control._magScaleY = ((((float) control._buffer[1]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a001548:	ed83 6a04 	vstr	s12, [r3, #16]
			/ 32760.0f; // micro Tesla
	control._magScaleZ = ((((float) control._buffer[2]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a00154c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
1a001550:	ee06 2a90 	vmov	s13, r2
1a001554:	eef8 6a66 	vcvt.f32.u32	s13, s13
1a001558:	ee76 6ae4 	vsub.f32	s13, s13, s9
1a00155c:	ee26 7a87 	vmul.f32	s14, s13, s14
1a001560:	ee37 7a27 	vadd.f32	s14, s14, s15
1a001564:	ee67 7a05 	vmul.f32	s15, s14, s10
			/ 32760.0f; // micro Tesla
1a001568:	eec7 7aa5 	vdiv.f32	s15, s15, s11
	mpu9250ReadAK8963Registers(MPU9250_AK8963_ASA, 3);
	control._magScaleX = ((((float) control._buffer[0]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
			/ 32760.0f; // micro Tesla
	control._magScaleY = ((((float) control._buffer[1]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
			/ 32760.0f; // micro Tesla
	control._magScaleZ = ((((float) control._buffer[2]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a00156c:	edc3 7a05 	vstr	s15, [r3, #20]
			/ 32760.0f; // micro Tesla
	// set AK8963 to Power Down
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a001570:	200a      	movs	r0, #10
1a001572:	2100      	movs	r1, #0
1a001574:	f7ff fbac 	bl	1a000cd0 <mpu9250WriteAK8963Register>
1a001578:	2800      	cmp	r0, #0
1a00157a:	db3d      	blt.n	1a0015f8 <mpu9250Init+0x25c>
		return -17;
	}
	delay(100); // long wait between AK8963 mode changes
1a00157c:	2064      	movs	r0, #100	; 0x64
1a00157e:	2100      	movs	r1, #0
1a001580:	f000 f87a 	bl	1a001678 <delay>
	// set AK8963 to 16 bit resolution, 100 Hz update rate
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS2) < 0) {
1a001584:	200a      	movs	r0, #10
1a001586:	2116      	movs	r1, #22
1a001588:	f7ff fba2 	bl	1a000cd0 <mpu9250WriteAK8963Register>
1a00158c:	2800      	cmp	r0, #0
1a00158e:	db35      	blt.n	1a0015fc <mpu9250Init+0x260>
		return -18;
	}
	delay(100); // long wait between AK8963 mode changes
1a001590:	2064      	movs	r0, #100	; 0x64
1a001592:	2100      	movs	r1, #0
1a001594:	f000 f870 	bl	1a001678 <delay>
	// select clock source to gyro
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
1a001598:	206b      	movs	r0, #107	; 0x6b
1a00159a:	2101      	movs	r1, #1
1a00159c:	f7ff fb36 	bl	1a000c0c <mpu9250WriteRegister>
1a0015a0:	2800      	cmp	r0, #0
1a0015a2:	db2d      	blt.n	1a001600 <mpu9250Init+0x264>
		return -19;
	}
	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	mpu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
1a0015a4:	2003      	movs	r0, #3
1a0015a6:	2107      	movs	r1, #7
1a0015a8:	f7ff fb56 	bl	1a000c58 <mpu9250ReadAK8963Registers>
	// estimate gyro bias
	if (mpu9250CalibrateGyro() < 0) {
1a0015ac:	f7ff fe4e 	bl	1a00124c <mpu9250CalibrateGyro>
1a0015b0:	2800      	cmp	r0, #0
1a0015b2:	da27      	bge.n	1a001604 <mpu9250Init+0x268>
		return -20;
1a0015b4:	20ec      	movs	r0, #236	; 0xec
1a0015b6:	e026      	b.n	1a001606 <mpu9250Init+0x26a>
	// starting the I2C bus
	i2cInit(I2C0, MPU9250_I2C_RATE);

	// select clock source to gyro
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
		return -1;
1a0015b8:	20ff      	movs	r0, #255	; 0xff
1a0015ba:	e024      	b.n	1a001606 <mpu9250Init+0x26a>
	}
	// enable I2C master mode
	if (mpu9250WriteRegister(MPU9250_USER_CTRL, MPU9250_I2C_MST_EN) < 0) {
		return -2;
1a0015bc:	20fe      	movs	r0, #254	; 0xfe
1a0015be:	e022      	b.n	1a001606 <mpu9250Init+0x26a>
	}
	// set the I2C bus speed to 400 kHz
	if (mpu9250WriteRegister(MPU9250_I2C_MST_CTRL, MPU9250_I2C_MST_CLK) < 0) {
		return -3;
1a0015c0:	20fd      	movs	r0, #253	; 0xfd
1a0015c2:	e020      	b.n	1a001606 <mpu9250Init+0x26a>
	delay(1);
	// reset the AK8963
	mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL2, MPU9250_AK8963_RESET);
	// select clock source to gyro
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
		return -4;
1a0015c4:	20fc      	movs	r0, #252	; 0xfc
1a0015c6:	e01e      	b.n	1a001606 <mpu9250Init+0x26a>
	}
	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	if ((mpu9250WhoAmI() != 113) && (mpu9250WhoAmI() != 115)) {
		return -5;
1a0015c8:	20fb      	movs	r0, #251	; 0xfb
1a0015ca:	e01c      	b.n	1a001606 <mpu9250Init+0x26a>
	}
	// enable accelerometer and gyro
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_2, MPU9250_SEN_ENABLE) < 0) {
		return -6;
1a0015cc:	20fa      	movs	r0, #250	; 0xfa
1a0015ce:	e01a      	b.n	1a001606 <mpu9250Init+0x26a>
	}
	// setting accel range to 16G as default
	if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG, MPU9250_ACCEL_FS_SEL_16G) < 0) {
		return -7;
1a0015d0:	20f9      	movs	r0, #249	; 0xf9
1a0015d2:	e018      	b.n	1a001606 <mpu9250Init+0x26a>
	}
	control._accelScale = MPU9250_G * 16.0f / 32767.5f; // setting the accel scale to 16G
	control._accelRange = MPU9250_ACCEL_RANGE_16G;
	// setting the gyro range to 2000DPS as default
	if (mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_2000DPS) < 0) {
		return -8;
1a0015d4:	20f8      	movs	r0, #248	; 0xf8
1a0015d6:	e016      	b.n	1a001606 <mpu9250Init+0x26a>
   // setting the gyro scale to 2000DPS
	control._gyroScale = 2000.0f / 32767.5f * MPU9250_D2R; 
	control._gyroRange = MPU9250_GYRO_RANGE_2000DPS;
	// setting bandwidth to 184Hz as default
	if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_184) < 0) {
		return -9;
1a0015d8:	20f7      	movs	r0, #247	; 0xf7
1a0015da:	e014      	b.n	1a001606 <mpu9250Init+0x26a>
	}
   // setting gyro bandwidth to 184Hz
	if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_184) < 0) { 
		return -10;
1a0015dc:	20f6      	movs	r0, #246	; 0xf6
1a0015de:	e012      	b.n	1a001606 <mpu9250Init+0x26a>
	}
	control._bandwidth = MPU9250_DLPF_BANDWIDTH_184HZ;
	// setting the sample rate divider to 0 as default
	if (mpu9250WriteRegister(MPU9250_SMPDIV, 0x00) < 0) {
		return -11;
1a0015e0:	20f5      	movs	r0, #245	; 0xf5
1a0015e2:	e010      	b.n	1a001606 <mpu9250Init+0x26a>
	}
	control._srd = 0;
	// enable I2C master mode
	if (mpu9250WriteRegister(MPU9250_USER_CTRL, MPU9250_I2C_MST_EN) < 0) {
		return -12;
1a0015e4:	20f4      	movs	r0, #244	; 0xf4
1a0015e6:	e00e      	b.n	1a001606 <mpu9250Init+0x26a>
	}
	// set the I2C bus speed to 400 kHz
	if (mpu9250WriteRegister(MPU9250_I2C_MST_CTRL, MPU9250_I2C_MST_CLK) < 0) {
		return -13;
1a0015e8:	20f3      	movs	r0, #243	; 0xf3
1a0015ea:	e00c      	b.n	1a001606 <mpu9250Init+0x26a>
	}
	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if (mpu9250WhoAmIAK8963() != 72) {
		return -14;
1a0015ec:	20f2      	movs	r0, #242	; 0xf2
1a0015ee:	e00a      	b.n	1a001606 <mpu9250Init+0x26a>
	}
	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
		return -15;
1a0015f0:	20f1      	movs	r0, #241	; 0xf1
1a0015f2:	e008      	b.n	1a001606 <mpu9250Init+0x26a>
	}
	delay(100); // long wait between AK8963 mode changes
	// set AK8963 to FUSE ROM access
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_FUSE_ROM) < 0) {
		return -16;
1a0015f4:	20f0      	movs	r0, #240	; 0xf0
1a0015f6:	e006      	b.n	1a001606 <mpu9250Init+0x26a>
			/ 32760.0f; // micro Tesla
	control._magScaleZ = ((((float) control._buffer[2]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
			/ 32760.0f; // micro Tesla
	// set AK8963 to Power Down
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
		return -17;
1a0015f8:	20ef      	movs	r0, #239	; 0xef
1a0015fa:	e004      	b.n	1a001606 <mpu9250Init+0x26a>
	}
	delay(100); // long wait between AK8963 mode changes
	// set AK8963 to 16 bit resolution, 100 Hz update rate
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS2) < 0) {
		return -18;
1a0015fc:	20ee      	movs	r0, #238	; 0xee
1a0015fe:	e002      	b.n	1a001606 <mpu9250Init+0x26a>
	}
	delay(100); // long wait between AK8963 mode changes
	// select clock source to gyro
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
		return -19;
1a001600:	20ed      	movs	r0, #237	; 0xed
1a001602:	e000      	b.n	1a001606 <mpu9250Init+0x26a>
	// estimate gyro bias
	if (mpu9250CalibrateGyro() < 0) {
		return -20;
	}
	// successful init, return 1
	return 1;
1a001604:	2001      	movs	r0, #1
}
1a001606:	b240      	sxtb	r0, r0
1a001608:	bd10      	pop	{r4, pc}
1a00160a:	bf00      	nop
1a00160c:	10000970 	.word	0x10000970
1a001610:	00061a80 	.word	0x00061a80
1a001614:	3b9cea16 	.word	0x3b9cea16
1a001618:	3a8ba0e4 	.word	0x3a8ba0e4
1a00161c:	43000000 	.word	0x43000000
1a001620:	3b800000 	.word	0x3b800000
1a001624:	45998000 	.word	0x45998000
1a001628:	46fff000 	.word	0x46fff000

1a00162c <mpu9250GetMagX_uT>:

// Returns the magnetometer measurement in the x direction, uT
float mpu9250GetMagX_uT( void )
{
  return control._hx;
}
1a00162c:	4b01      	ldr	r3, [pc, #4]	; (1a001634 <mpu9250GetMagX_uT+0x8>)
1a00162e:	ed93 0a15 	vldr	s0, [r3, #84]	; 0x54
1a001632:	4770      	bx	lr
1a001634:	10000970 	.word	0x10000970

1a001638 <mpu9250GetMagY_uT>:

// Returns the magnetometer measurement in the y direction, uT
float mpu9250GetMagY_uT( void )
{
  return control._hy;
}
1a001638:	4b01      	ldr	r3, [pc, #4]	; (1a001640 <mpu9250GetMagY_uT+0x8>)
1a00163a:	ed93 0a16 	vldr	s0, [r3, #88]	; 0x58
1a00163e:	4770      	bx	lr
1a001640:	10000970 	.word	0x10000970

1a001644 <mpu9250GetMagZ_uT>:

// Returns the magnetometer measurement in the z direction, uT
float mpu9250GetMagZ_uT( void )
{
  return control._hz;
}
1a001644:	4b01      	ldr	r3, [pc, #4]	; (1a00164c <mpu9250GetMagZ_uT+0x8>)
1a001646:	ed93 0a17 	vldr	s0, [r3, #92]	; 0x5c
1a00164a:	4770      	bx	lr
1a00164c:	10000970 	.word	0x10000970

1a001650 <mpu9250GetTemperature_C>:

// Returns the die temperature, C
float mpu9250GetTemperature_C( void )
{
  return control._t;
}
1a001650:	4b01      	ldr	r3, [pc, #4]	; (1a001658 <mpu9250GetTemperature_C+0x8>)
1a001652:	ed93 0a18 	vldr	s0, [r3, #96]	; 0x60
1a001656:	4770      	bx	lr
1a001658:	10000970 	.word	0x10000970

1a00165c <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a00165c:	4b04      	ldr	r3, [pc, #16]	; (1a001670 <cyclesCounterInit+0x14>)
1a00165e:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a001660:	4b04      	ldr	r3, [pc, #16]	; (1a001674 <cyclesCounterInit+0x18>)
1a001662:	681a      	ldr	r2, [r3, #0]
1a001664:	6813      	ldr	r3, [r2, #0]
1a001666:	f043 0301 	orr.w	r3, r3, #1
1a00166a:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a00166c:	2001      	movs	r0, #1
1a00166e:	4770      	bx	lr
1a001670:	10000050 	.word	0x10000050
1a001674:	1000004c 	.word	0x1000004c

1a001678 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay(tick_t duration)
{
1a001678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00167c:	4680      	mov	r8, r0
1a00167e:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a001680:	f7ff f8a2 	bl	1a0007c8 <tickRead>
1a001684:	4606      	mov	r6, r0
1a001686:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration/tickRateMS );
1a001688:	f7ff f89e 	bl	1a0007c8 <tickRead>
1a00168c:	1b84      	subs	r4, r0, r6
1a00168e:	eb61 0507 	sbc.w	r5, r1, r7
1a001692:	4640      	mov	r0, r8
1a001694:	4649      	mov	r1, r9
1a001696:	4b05      	ldr	r3, [pc, #20]	; (1a0016ac <delay+0x34>)
1a001698:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00169c:	f001 fc40 	bl	1a002f20 <__aeabi_uldivmod>
1a0016a0:	428d      	cmp	r5, r1
1a0016a2:	bf08      	it	eq
1a0016a4:	4284      	cmpeq	r4, r0
1a0016a6:	d3ef      	bcc.n	1a001688 <delay+0x10>
}
1a0016a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0016ac:	10000b10 	.word	0x10000b10

1a0016b0 <delayInit>:


/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a0016b0:	b510      	push	{r4, lr}
1a0016b2:	4604      	mov	r4, r0
   delay->duration = duration/tickRateMS;
1a0016b4:	4610      	mov	r0, r2
1a0016b6:	4619      	mov	r1, r3
1a0016b8:	4b04      	ldr	r3, [pc, #16]	; (1a0016cc <delayInit+0x1c>)
1a0016ba:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0016be:	f001 fc2f 	bl	1a002f20 <__aeabi_uldivmod>
1a0016c2:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a0016c6:	2300      	movs	r3, #0
1a0016c8:	7423      	strb	r3, [r4, #16]
1a0016ca:	bd10      	pop	{r4, pc}
1a0016cc:	10000b10 	.word	0x10000b10

1a0016d0 <delayRead>:
}

bool_t delayRead( delay_t * delay )
{
1a0016d0:	b510      	push	{r4, lr}
1a0016d2:	4604      	mov	r4, r0

   bool_t timeArrived = 0;

   if( !delay->running ) {
1a0016d4:	7c03      	ldrb	r3, [r0, #16]
1a0016d6:	b93b      	cbnz	r3, 1a0016e8 <delayRead+0x18>
      delay->startTime = tickRead();
1a0016d8:	f7ff f876 	bl	1a0007c8 <tickRead>
1a0016dc:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a0016e0:	2301      	movs	r3, #1
1a0016e2:	7423      	strb	r3, [r4, #16]
}

bool_t delayRead( delay_t * delay )
{

   bool_t timeArrived = 0;
1a0016e4:	2000      	movs	r0, #0
1a0016e6:	bd10      	pop	{r4, pc}

   if( !delay->running ) {
      delay->startTime = tickRead();
      delay->running = 1;
   } else {
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a0016e8:	f7ff f86e 	bl	1a0007c8 <tickRead>
1a0016ec:	e9d4 2300 	ldrd	r2, r3, [r4]
1a0016f0:	1a80      	subs	r0, r0, r2
1a0016f2:	eb61 0103 	sbc.w	r1, r1, r3
1a0016f6:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a0016fa:	4299      	cmp	r1, r3
1a0016fc:	bf08      	it	eq
1a0016fe:	4290      	cmpeq	r0, r2
1a001700:	d303      	bcc.n	1a00170a <delayRead+0x3a>
         timeArrived = 1;
         delay->running = 0;
1a001702:	2300      	movs	r3, #0
1a001704:	7423      	strb	r3, [r4, #16]
   if( !delay->running ) {
      delay->startTime = tickRead();
      delay->running = 1;
   } else {
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
         timeArrived = 1;
1a001706:	2001      	movs	r0, #1
1a001708:	bd10      	pop	{r4, pc}
}

bool_t delayRead( delay_t * delay )
{

   bool_t timeArrived = 0;
1a00170a:	2000      	movs	r0, #0
         delay->running = 0;
      }
   }

   return timeArrived;
}
1a00170c:	bd10      	pop	{r4, pc}
1a00170e:	bf00      	nop

1a001710 <i2cHardwareInit>:
   return retVal;
}
#else

static bool_t i2cHardwareInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{
1a001710:	b538      	push	{r3, r4, r5, lr}
1a001712:	4604      	mov	r4, r0
1a001714:	460d      	mov	r5, r1
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a001716:	f640 0208 	movw	r2, #2056	; 0x808
1a00171a:	4b07      	ldr	r3, [pc, #28]	; (1a001738 <i2cHardwareInit+0x28>)
1a00171c:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

   // Configuracion de las lineas de SDA y SCL de la placa
   Chip_SCU_I2C0PinConfig( I2C0_STANDARD_FAST_MODE );

   // Inicializacion del periferico
   Chip_I2C_Init( i2cNumber );
1a001720:	f001 f930 	bl	1a002984 <Chip_I2C_Init>
   // Seleccion de velocidad del bus
   Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
1a001724:	4620      	mov	r0, r4
1a001726:	4629      	mov	r1, r5
1a001728:	f001 f93e 	bl	1a0029a8 <Chip_I2C_SetClockRate>
   // Configuracion para que los eventos se resuelvan por polliong
   // (la otra opcion es por interrupcion)
   Chip_I2C_SetMasterEventHandler( i2cNumber, Chip_I2C_EventHandlerPolling );
1a00172c:	4620      	mov	r0, r4
1a00172e:	4903      	ldr	r1, [pc, #12]	; (1a00173c <i2cHardwareInit+0x2c>)
1a001730:	f001 f952 	bl	1a0029d8 <Chip_I2C_SetMasterEventHandler>

   return TRUE;
}
1a001734:	2001      	movs	r0, #1
1a001736:	bd38      	pop	{r3, r4, r5, pc}
1a001738:	40086000 	.word	0x40086000
1a00173c:	1a002a55 	.word	0x1a002a55

1a001740 <i2cHardwareRead>:
                               uint16_t dataToReadBufferSize,
                               bool_t   sendWriteStop,
                               uint8_t* receiveDataBuffer,
                               uint16_t receiveDataBufferSize,
                               bool_t   sendReadStop )
{
1a001740:	b500      	push	{lr}
1a001742:	b085      	sub	sp, #20

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   i2cData.slaveAddr = i2cSlaveAddress;
1a001744:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a001748:	2100      	movs	r1, #0
1a00174a:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a00174e:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = dataToReadBuffer;
1a001752:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = dataToReadBufferSize;
1a001754:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = receiveDataBuffer;
1a001758:	9b07      	ldr	r3, [sp, #28]
1a00175a:	9303      	str	r3, [sp, #12]
   i2cData.rxSz      = receiveDataBufferSize;
1a00175c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
1a001760:	f8ad 3006 	strh.w	r3, [sp, #6]

   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a001764:	4804      	ldr	r0, [pc, #16]	; (1a001778 <i2cHardwareRead+0x38>)
1a001766:	4669      	mov	r1, sp
1a001768:	f000 ffce 	bl	1a002708 <Chip_I2CM_XferBlocking>
1a00176c:	b100      	cbz	r0, 1a001770 <i2cHardwareRead+0x30>
      return FALSE;
   }

   return TRUE;
1a00176e:	2001      	movs	r0, #1
}
1a001770:	b005      	add	sp, #20
1a001772:	f85d fb04 	ldr.w	pc, [sp], #4
1a001776:	bf00      	nop
1a001778:	400a1000 	.word	0x400a1000

1a00177c <i2cHardwareWrite>:

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   if( i2cNumber != I2C0 ) {
1a00177c:	b9a0      	cbnz	r0, 1a0017a8 <i2cHardwareWrite+0x2c>
static bool_t i2cHardwareWrite( i2cMap_t  i2cNumber,
                                uint8_t  i2cSlaveAddress,
                                uint8_t* transmitDataBuffer,
                                uint16_t transmitDataBufferSize,
                                bool_t   sendWriteStop )
{
1a00177e:	b500      	push	{lr}
1a001780:	b085      	sub	sp, #20
   if( i2cNumber != I2C0 ) {
      return FALSE;
   }

   // Prepare the i2cData register
   i2cData.slaveAddr = i2cSlaveAddress;
1a001782:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a001786:	2100      	movs	r1, #0
1a001788:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a00178c:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = transmitDataBuffer;
1a001790:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = transmitDataBufferSize;
1a001792:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = 0;
1a001796:	9103      	str	r1, [sp, #12]
   i2cData.rxSz      = 0;
1a001798:	f8ad 1006 	strh.w	r1, [sp, #6]

   /* Send the i2c data */
   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a00179c:	4805      	ldr	r0, [pc, #20]	; (1a0017b4 <i2cHardwareWrite+0x38>)
1a00179e:	4669      	mov	r1, sp
1a0017a0:	f000 ffb2 	bl	1a002708 <Chip_I2CM_XferBlocking>
1a0017a4:	b910      	cbnz	r0, 1a0017ac <i2cHardwareWrite+0x30>
1a0017a6:	e002      	b.n	1a0017ae <i2cHardwareWrite+0x32>
   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   if( i2cNumber != I2C0 ) {
      return FALSE;
1a0017a8:	2000      	movs	r0, #0
   }

   *** END - TEST I2C Response *** */

   return TRUE;
}
1a0017aa:	4770      	bx	lr
      }
   }

   *** END - TEST I2C Response *** */

   return TRUE;
1a0017ac:	2001      	movs	r0, #1
}
1a0017ae:	b005      	add	sp, #20
1a0017b0:	f85d fb04 	ldr.w	pc, [sp], #4
1a0017b4:	400a1000 	.word	0x400a1000

1a0017b8 <i2cInit>:
bool_t i2cInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a0017b8:	b918      	cbnz	r0, 1a0017c2 <i2cInit+0xa>


/*==================[external functions definition]==========================*/

bool_t i2cInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{
1a0017ba:	b508      	push	{r3, lr}
   }

#if( I2C_SOFTWARE == 1 )
   retVal = i2cSoftwareInit( i2cNumber, clockRateHz );
#else
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
1a0017bc:	f7ff ffa8 	bl	1a001710 <i2cHardwareInit>
#endif

   return retVal;
1a0017c0:	bd08      	pop	{r3, pc}
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
      return FALSE;
1a0017c2:	2000      	movs	r0, #0
1a0017c4:	4770      	bx	lr
1a0017c6:	bf00      	nop

1a0017c8 <i2cRead>:
                bool_t   sendReadStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a0017c8:	b978      	cbnz	r0, 1a0017ea <i2cRead+0x22>
                uint16_t dataToReadBufferSize,
                bool_t   sendWriteStop,
                uint8_t* receiveDataBuffer,
                uint16_t receiveDataBufferSize,
                bool_t   sendReadStop )
{
1a0017ca:	b510      	push	{r4, lr}
1a0017cc:	b084      	sub	sp, #16
                             sendWriteStop,
                             receiveDataBuffer,
                             receiveDataBufferSize,
                             sendReadStop );
#else
   retVal = i2cHardwareRead( i2cNumber,
1a0017ce:	f89d 4018 	ldrb.w	r4, [sp, #24]
1a0017d2:	9400      	str	r4, [sp, #0]
1a0017d4:	9c07      	ldr	r4, [sp, #28]
1a0017d6:	9401      	str	r4, [sp, #4]
1a0017d8:	f8bd 4020 	ldrh.w	r4, [sp, #32]
1a0017dc:	9402      	str	r4, [sp, #8]
1a0017de:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
1a0017e2:	9403      	str	r4, [sp, #12]
1a0017e4:	f7ff ffac 	bl	1a001740 <i2cHardwareRead>
                             receiveDataBuffer,
                             receiveDataBufferSize,
                             sendReadStop );
#endif

   return retVal;
1a0017e8:	e001      	b.n	1a0017ee <i2cRead+0x26>
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
      return FALSE;
1a0017ea:	2000      	movs	r0, #0
1a0017ec:	4770      	bx	lr
                             receiveDataBufferSize,
                             sendReadStop );
#endif

   return retVal;
}
1a0017ee:	b004      	add	sp, #16
1a0017f0:	bd10      	pop	{r4, pc}
1a0017f2:	bf00      	nop

1a0017f4 <i2cWrite>:
                 bool_t   sendWriteStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a0017f4:	b938      	cbnz	r0, 1a001806 <i2cWrite+0x12>
bool_t i2cWrite( i2cMap_t  i2cNumber,
                 uint8_t  i2cSlaveAddress,
                 uint8_t* transmitDataBuffer,
                 uint16_t transmitDataBufferSize,
                 bool_t   sendWriteStop )
{
1a0017f6:	b510      	push	{r4, lr}
1a0017f8:	b082      	sub	sp, #8
                              i2cSlaveAddress,
                              transmitDataBuffer,
                              transmitDataBufferSize,
                              sendWriteStop );
#else
   retVal = i2cHardwareWrite( i2cNumber,
1a0017fa:	f89d 4010 	ldrb.w	r4, [sp, #16]
1a0017fe:	9400      	str	r4, [sp, #0]
1a001800:	f7ff ffbc 	bl	1a00177c <i2cHardwareWrite>
                              transmitDataBuffer,
                              transmitDataBufferSize,
                              sendWriteStop );
#endif

   return retVal;
1a001804:	e001      	b.n	1a00180a <i2cWrite+0x16>
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
      return FALSE;
1a001806:	2000      	movs	r0, #0
1a001808:	4770      	bx	lr
                              transmitDataBufferSize,
                              sendWriteStop );
#endif

   return retVal;
}
1a00180a:	b002      	add	sp, #8
1a00180c:	bd10      	pop	{r4, pc}
1a00180e:	bf00      	nop

1a001810 <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a001810:	e7fe      	b.n	1a001810 <errorOcurred>
1a001812:	bf00      	nop

1a001814 <doNothing>:
}

static void doNothing( void* ptr )
{
1a001814:	4770      	bx	lr
1a001816:	bf00      	nop

1a001818 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a001818:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00181a:	2400      	movs	r4, #0
1a00181c:	e013      	b.n	1a001846 <TIMER0_IRQHandler+0x2e>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00181e:	4b0b      	ldr	r3, [pc, #44]	; (1a00184c <TIMER0_IRQHandler+0x34>)
1a001820:	681a      	ldr	r2, [r3, #0]
1a001822:	f004 010f 	and.w	r1, r4, #15
1a001826:	2301      	movs	r3, #1
1a001828:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a00182a:	421a      	tst	r2, r3
1a00182c:	d009      	beq.n	1a001842 <TIMER0_IRQHandler+0x2a>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a00182e:	4b08      	ldr	r3, [pc, #32]	; (1a001850 <TIMER0_IRQHandler+0x38>)
1a001830:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a001834:	2000      	movs	r0, #0
1a001836:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001838:	b262      	sxtb	r2, r4
1a00183a:	2301      	movs	r3, #1
1a00183c:	4093      	lsls	r3, r2
1a00183e:	4a03      	ldr	r2, [pc, #12]	; (1a00184c <TIMER0_IRQHandler+0x34>)
1a001840:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a001842:	3401      	adds	r4, #1
1a001844:	b2e4      	uxtb	r4, r4
void TIMER0_IRQHandler(void)
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001846:	2c03      	cmp	r4, #3
1a001848:	d9e9      	bls.n	1a00181e <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a00184a:	bd10      	pop	{r4, pc}
1a00184c:	40084000 	.word	0x40084000
1a001850:	10000054 	.word	0x10000054

1a001854 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a001854:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001856:	2400      	movs	r4, #0
1a001858:	e014      	b.n	1a001884 <TIMER1_IRQHandler+0x30>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00185a:	4b0c      	ldr	r3, [pc, #48]	; (1a00188c <TIMER1_IRQHandler+0x38>)
1a00185c:	681a      	ldr	r2, [r3, #0]
1a00185e:	f004 010f 	and.w	r1, r4, #15
1a001862:	2301      	movs	r3, #1
1a001864:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a001866:	421a      	tst	r2, r3
1a001868:	d00a      	beq.n	1a001880 <TIMER1_IRQHandler+0x2c>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a00186a:	1d23      	adds	r3, r4, #4
1a00186c:	4a08      	ldr	r2, [pc, #32]	; (1a001890 <TIMER1_IRQHandler+0x3c>)
1a00186e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001872:	2000      	movs	r0, #0
1a001874:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001876:	b262      	sxtb	r2, r4
1a001878:	2301      	movs	r3, #1
1a00187a:	4093      	lsls	r3, r2
1a00187c:	4a03      	ldr	r2, [pc, #12]	; (1a00188c <TIMER1_IRQHandler+0x38>)
1a00187e:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a001880:	3401      	adds	r4, #1
1a001882:	b2e4      	uxtb	r4, r4
void TIMER1_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001884:	2c03      	cmp	r4, #3
1a001886:	d9e8      	bls.n	1a00185a <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a001888:	bd10      	pop	{r4, pc}
1a00188a:	bf00      	nop
1a00188c:	40085000 	.word	0x40085000
1a001890:	10000054 	.word	0x10000054

1a001894 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a001894:	b510      	push	{r4, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001896:	2400      	movs	r4, #0
1a001898:	e015      	b.n	1a0018c6 <TIMER2_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00189a:	4b0c      	ldr	r3, [pc, #48]	; (1a0018cc <TIMER2_IRQHandler+0x38>)
1a00189c:	681a      	ldr	r2, [r3, #0]
1a00189e:	f004 010f 	and.w	r1, r4, #15
1a0018a2:	2301      	movs	r3, #1
1a0018a4:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a0018a6:	421a      	tst	r2, r3
1a0018a8:	d00b      	beq.n	1a0018c2 <TIMER2_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0018aa:	f104 0308 	add.w	r3, r4, #8
1a0018ae:	4a08      	ldr	r2, [pc, #32]	; (1a0018d0 <TIMER2_IRQHandler+0x3c>)
1a0018b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0018b4:	2000      	movs	r0, #0
1a0018b6:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0018b8:	b262      	sxtb	r2, r4
1a0018ba:	2301      	movs	r3, #1
1a0018bc:	4093      	lsls	r3, r2
1a0018be:	4a03      	ldr	r2, [pc, #12]	; (1a0018cc <TIMER2_IRQHandler+0x38>)
1a0018c0:	6013      	str	r3, [r2, #0]
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0018c2:	3401      	adds	r4, #1
1a0018c4:	b2e4      	uxtb	r4, r4

void TIMER2_IRQHandler( void )
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0018c6:	2c03      	cmp	r4, #3
1a0018c8:	d9e7      	bls.n	1a00189a <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a0018ca:	bd10      	pop	{r4, pc}
1a0018cc:	400c3000 	.word	0x400c3000
1a0018d0:	10000054 	.word	0x10000054

1a0018d4 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a0018d4:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0018d6:	2400      	movs	r4, #0
1a0018d8:	e015      	b.n	1a001906 <TIMER3_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0018da:	4b0c      	ldr	r3, [pc, #48]	; (1a00190c <TIMER3_IRQHandler+0x38>)
1a0018dc:	681a      	ldr	r2, [r3, #0]
1a0018de:	f004 010f 	and.w	r1, r4, #15
1a0018e2:	2301      	movs	r3, #1
1a0018e4:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a0018e6:	421a      	tst	r2, r3
1a0018e8:	d00b      	beq.n	1a001902 <TIMER3_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0018ea:	f104 030c 	add.w	r3, r4, #12
1a0018ee:	4a08      	ldr	r2, [pc, #32]	; (1a001910 <TIMER3_IRQHandler+0x3c>)
1a0018f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0018f4:	2000      	movs	r0, #0
1a0018f6:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0018f8:	b262      	sxtb	r2, r4
1a0018fa:	2301      	movs	r3, #1
1a0018fc:	4093      	lsls	r3, r2
1a0018fe:	4a03      	ldr	r2, [pc, #12]	; (1a00190c <TIMER3_IRQHandler+0x38>)
1a001900:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a001902:	3401      	adds	r4, #1
1a001904:	b2e4      	uxtb	r4, r4
void TIMER3_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001906:	2c03      	cmp	r4, #3
1a001908:	d9e7      	bls.n	1a0018da <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a00190a:	bd10      	pop	{r4, pc}
1a00190c:	400c4000 	.word	0x400c4000
1a001910:	10000054 	.word	0x10000054

1a001914 <printInitUart>:
{
   *printer = uart;
}

void printInitUart( print_t* printer, uartMap_t uart, uint32_t baudRate )
{
1a001914:	b508      	push	{r3, lr}
   *printer = uart;
1a001916:	7001      	strb	r1, [r0, #0]
   uartInit( uart, baudRate );
1a001918:	4608      	mov	r0, r1
1a00191a:	4611      	mov	r1, r2
1a00191c:	f7ff f83e 	bl	1a00099c <uartInit>
1a001920:	bd08      	pop	{r3, pc}
1a001922:	bf00      	nop

1a001924 <printString>:


// Print String

void printString( print_t printer, const char* string )
{
1a001924:	b508      	push	{r3, lr}
   uartWriteString( printer, string );
1a001926:	f7ff f8ef 	bl	1a000b08 <uartWriteString>
1a00192a:	bd08      	pop	{r3, pc}

1a00192c <printEnter>:
}

void printEnter( print_t printer )
{
1a00192c:	b508      	push	{r3, lr}
   uartWriteString( printer, PRINT_ENTER_STRING );
1a00192e:	4902      	ldr	r1, [pc, #8]	; (1a001938 <printEnter+0xc>)
1a001930:	f7ff f8ea 	bl	1a000b08 <uartWriteString>
1a001934:	bd08      	pop	{r3, pc}
1a001936:	bf00      	nop
1a001938:	1a0076f0 	.word	0x1a0076f0

1a00193c <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a00193c:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a00193e:	f000 faf1 	bl	1a001f24 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a001942:	4b3a      	ldr	r3, [pc, #232]	; (1a001a2c <boardInit+0xf0>)
1a001944:	6818      	ldr	r0, [r3, #0]
1a001946:	f7ff fe89 	bl	1a00165c <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a00194a:	2001      	movs	r0, #1
1a00194c:	2100      	movs	r1, #0
1a00194e:	f7fe ff4d 	bl	1a0007ec <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a001952:	2000      	movs	r0, #0
1a001954:	2105      	movs	r1, #5
1a001956:	f7fe fe69 	bl	1a00062c <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a00195a:	2024      	movs	r0, #36	; 0x24
1a00195c:	2100      	movs	r1, #0
1a00195e:	f7fe fe65 	bl	1a00062c <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a001962:	2025      	movs	r0, #37	; 0x25
1a001964:	2100      	movs	r1, #0
1a001966:	f7fe fe61 	bl	1a00062c <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a00196a:	2026      	movs	r0, #38	; 0x26
1a00196c:	2100      	movs	r1, #0
1a00196e:	f7fe fe5d 	bl	1a00062c <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a001972:	2027      	movs	r0, #39	; 0x27
1a001974:	2100      	movs	r1, #0
1a001976:	f7fe fe59 	bl	1a00062c <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a00197a:	2028      	movs	r0, #40	; 0x28
1a00197c:	2101      	movs	r1, #1
1a00197e:	f7fe fe55 	bl	1a00062c <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a001982:	2029      	movs	r0, #41	; 0x29
1a001984:	2101      	movs	r1, #1
1a001986:	f7fe fe51 	bl	1a00062c <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a00198a:	202a      	movs	r0, #42	; 0x2a
1a00198c:	2101      	movs	r1, #1
1a00198e:	f7fe fe4d 	bl	1a00062c <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a001992:	202b      	movs	r0, #43	; 0x2b
1a001994:	2101      	movs	r1, #1
1a001996:	f7fe fe49 	bl	1a00062c <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a00199a:	202c      	movs	r0, #44	; 0x2c
1a00199c:	2101      	movs	r1, #1
1a00199e:	f7fe fe45 	bl	1a00062c <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a0019a2:	202d      	movs	r0, #45	; 0x2d
1a0019a4:	2101      	movs	r1, #1
1a0019a6:	f7fe fe41 	bl	1a00062c <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a0019aa:	202e      	movs	r0, #46	; 0x2e
1a0019ac:	2100      	movs	r1, #0
1a0019ae:	f7fe fe3d 	bl	1a00062c <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a0019b2:	202f      	movs	r0, #47	; 0x2f
1a0019b4:	2100      	movs	r1, #0
1a0019b6:	f7fe fe39 	bl	1a00062c <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a0019ba:	2030      	movs	r0, #48	; 0x30
1a0019bc:	2100      	movs	r1, #0
1a0019be:	f7fe fe35 	bl	1a00062c <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a0019c2:	2031      	movs	r0, #49	; 0x31
1a0019c4:	2100      	movs	r1, #0
1a0019c6:	f7fe fe31 	bl	1a00062c <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a0019ca:	2032      	movs	r0, #50	; 0x32
1a0019cc:	2100      	movs	r1, #0
1a0019ce:	f7fe fe2d 	bl	1a00062c <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a0019d2:	2033      	movs	r0, #51	; 0x33
1a0019d4:	2100      	movs	r1, #0
1a0019d6:	f7fe fe29 	bl	1a00062c <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a0019da:	2034      	movs	r0, #52	; 0x34
1a0019dc:	2100      	movs	r1, #0
1a0019de:	f7fe fe25 	bl	1a00062c <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a0019e2:	2035      	movs	r0, #53	; 0x35
1a0019e4:	2100      	movs	r1, #0
1a0019e6:	f7fe fe21 	bl	1a00062c <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a0019ea:	2036      	movs	r0, #54	; 0x36
1a0019ec:	2101      	movs	r1, #1
1a0019ee:	f7fe fe1d 	bl	1a00062c <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a0019f2:	2037      	movs	r0, #55	; 0x37
1a0019f4:	2101      	movs	r1, #1
1a0019f6:	f7fe fe19 	bl	1a00062c <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a0019fa:	2038      	movs	r0, #56	; 0x38
1a0019fc:	2101      	movs	r1, #1
1a0019fe:	f7fe fe15 	bl	1a00062c <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a001a02:	2039      	movs	r0, #57	; 0x39
1a001a04:	2101      	movs	r1, #1
1a001a06:	f7fe fe11 	bl	1a00062c <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a001a0a:	203a      	movs	r0, #58	; 0x3a
1a001a0c:	2101      	movs	r1, #1
1a001a0e:	f7fe fe0d 	bl	1a00062c <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a001a12:	203b      	movs	r0, #59	; 0x3b
1a001a14:	2101      	movs	r1, #1
1a001a16:	f7fe fe09 	bl	1a00062c <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a001a1a:	203c      	movs	r0, #60	; 0x3c
1a001a1c:	2101      	movs	r1, #1
1a001a1e:	f7fe fe05 	bl	1a00062c <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a001a22:	203d      	movs	r0, #61	; 0x3d
1a001a24:	2101      	movs	r1, #1
1a001a26:	f7fe fe01 	bl	1a00062c <gpioInit>
1a001a2a:	bd08      	pop	{r3, pc}
1a001a2c:	10000b18 	.word	0x10000b18

1a001a30 <Board_LED_Init>:
#define GPIO_BUTTONS_SIZE   (sizeof(GpioButtons) / sizeof(struct gpio_t))
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
1a001a30:	b470      	push	{r4, r5, r6}
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a001a32:	2200      	movs	r2, #0
1a001a34:	e014      	b.n	1a001a60 <Board_LED_Init+0x30>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a001a36:	4b0c      	ldr	r3, [pc, #48]	; (1a001a68 <Board_LED_Init+0x38>)
1a001a38:	f813 4012 	ldrb.w	r4, [r3, r2, lsl #1]
1a001a3c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
1a001a40:	7859      	ldrb	r1, [r3, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a001a42:	480a      	ldr	r0, [pc, #40]	; (1a001a6c <Board_LED_Init+0x3c>)
1a001a44:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a001a48:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
1a001a4c:	2301      	movs	r3, #1
1a001a4e:	408b      	lsls	r3, r1
1a001a50:	4333      	orrs	r3, r6
1a001a52:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a001a56:	eb01 1144 	add.w	r1, r1, r4, lsl #5
1a001a5a:	2300      	movs	r3, #0
1a001a5c:	5443      	strb	r3, [r0, r1]
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a001a5e:	3201      	adds	r2, #1
1a001a60:	2a05      	cmp	r2, #5
1a001a62:	d9e8      	bls.n	1a001a36 <Board_LED_Init+0x6>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a001a64:	bc70      	pop	{r4, r5, r6}
1a001a66:	4770      	bx	lr
1a001a68:	1a007a50 	.word	0x1a007a50
1a001a6c:	400f4000 	.word	0x400f4000

1a001a70 <Board_TEC_Init>:


static void Board_TEC_Init()
{
1a001a70:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a001a72:	2300      	movs	r3, #0
1a001a74:	e011      	b.n	1a001a9a <Board_TEC_Init+0x2a>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a001a76:	490b      	ldr	r1, [pc, #44]	; (1a001aa4 <Board_TEC_Init+0x34>)
1a001a78:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a001a7c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a001a80:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a001a82:	4c09      	ldr	r4, [pc, #36]	; (1a001aa8 <Board_TEC_Init+0x38>)
1a001a84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a001a88:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a001a8c:	2101      	movs	r1, #1
1a001a8e:	40a9      	lsls	r1, r5
1a001a90:	ea20 0101 	bic.w	r1, r0, r1
1a001a94:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a001a98:	3301      	adds	r3, #1
1a001a9a:	2b03      	cmp	r3, #3
1a001a9c:	d9eb      	bls.n	1a001a76 <Board_TEC_Init+0x6>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a001a9e:	bc30      	pop	{r4, r5}
1a001aa0:	4770      	bx	lr
1a001aa2:	bf00      	nop
1a001aa4:	1a007a48 	.word	0x1a007a48
1a001aa8:	400f4000 	.word	0x400f4000

1a001aac <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
1a001aac:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a001aae:	2300      	movs	r3, #0
1a001ab0:	e011      	b.n	1a001ad6 <Board_GPIO_Init+0x2a>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a001ab2:	490b      	ldr	r1, [pc, #44]	; (1a001ae0 <Board_GPIO_Init+0x34>)
1a001ab4:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a001ab8:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a001abc:	784d      	ldrb	r5, [r1, #1]
1a001abe:	4c09      	ldr	r4, [pc, #36]	; (1a001ae4 <Board_GPIO_Init+0x38>)
1a001ac0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a001ac4:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a001ac8:	2101      	movs	r1, #1
1a001aca:	40a9      	lsls	r1, r5
1a001acc:	ea20 0101 	bic.w	r1, r0, r1
1a001ad0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a001ad4:	3301      	adds	r3, #1
1a001ad6:	2b08      	cmp	r3, #8
1a001ad8:	d9eb      	bls.n	1a001ab2 <Board_GPIO_Init+0x6>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a001ada:	bc30      	pop	{r4, r5}
1a001adc:	4770      	bx	lr
1a001ade:	bf00      	nop
1a001ae0:	1a007a2c 	.word	0x1a007a2c
1a001ae4:	400f4000 	.word	0x400f4000

1a001ae8 <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a001ae8:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a001aea:	4c0b      	ldr	r4, [pc, #44]	; (1a001b18 <Board_SPI_Init+0x30>)
1a001aec:	4620      	mov	r0, r4
1a001aee:	f000 fe8b 	bl	1a002808 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a001af2:	6863      	ldr	r3, [r4, #4]
1a001af4:	f023 0304 	bic.w	r3, r3, #4
1a001af8:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a001afa:	6823      	ldr	r3, [r4, #0]
1a001afc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001b00:	f043 0307 	orr.w	r3, r3, #7
1a001b04:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a001b06:	4620      	mov	r0, r4
1a001b08:	4904      	ldr	r1, [pc, #16]	; (1a001b1c <Board_SPI_Init+0x34>)
1a001b0a:	f000 fe5d 	bl	1a0027c8 <Chip_SSP_SetBitRate>
 * @param	pSSP		: The base of SSP peripheral on the chip
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Enable(LPC_SSP_T *pSSP)
{
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a001b0e:	6863      	ldr	r3, [r4, #4]
1a001b10:	f043 0302 	orr.w	r3, r3, #2
1a001b14:	6063      	str	r3, [r4, #4]
1a001b16:	bd10      	pop	{r4, pc}
1a001b18:	400c5000 	.word	0x400c5000
1a001b1c:	000186a0 	.word	0x000186a0

1a001b20 <Board_I2C_Init>:
    }
}


static void Board_I2C_Init()
{
1a001b20:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a001b22:	2000      	movs	r0, #0
1a001b24:	f000 ff2e 	bl	1a002984 <Chip_I2C_Init>
1a001b28:	f640 0208 	movw	r2, #2056	; 0x808
1a001b2c:	4b03      	ldr	r3, [pc, #12]	; (1a001b3c <Board_I2C_Init+0x1c>)
1a001b2e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_SCU_I2C0PinConfig(BOARD_I2C_MODE);
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a001b32:	2000      	movs	r0, #0
1a001b34:	4902      	ldr	r1, [pc, #8]	; (1a001b40 <Board_I2C_Init+0x20>)
1a001b36:	f000 ff37 	bl	1a0029a8 <Chip_I2C_SetClockRate>
1a001b3a:	bd08      	pop	{r3, pc}
1a001b3c:	40086000 	.word	0x40086000
1a001b40:	000f4240 	.word	0x000f4240

1a001b44 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a001b44:	b510      	push	{r4, lr}
1a001b46:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a001b48:	4c08      	ldr	r4, [pc, #32]	; (1a001b6c <Board_ADC_Init+0x28>)
1a001b4a:	4620      	mov	r0, r4
1a001b4c:	4669      	mov	r1, sp
1a001b4e:	f000 f9a9 	bl	1a001ea4 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a001b52:	4620      	mov	r0, r4
1a001b54:	4669      	mov	r1, sp
1a001b56:	4a06      	ldr	r2, [pc, #24]	; (1a001b70 <Board_ADC_Init+0x2c>)
1a001b58:	f000 f9c4 	bl	1a001ee4 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a001b5c:	4620      	mov	r0, r4
1a001b5e:	4669      	mov	r1, sp
1a001b60:	2200      	movs	r2, #0
1a001b62:	f000 f9d9 	bl	1a001f18 <Chip_ADC_SetResolution>
}
1a001b66:	b002      	add	sp, #8
1a001b68:	bd10      	pop	{r4, pc}
1a001b6a:	bf00      	nop
1a001b6c:	400e3000 	.word	0x400e3000
1a001b70:	00061a80 	.word	0x00061a80

1a001b74 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a001b74:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a001b76:	4c07      	ldr	r4, [pc, #28]	; (1a001b94 <Board_Debug_Init+0x20>)
1a001b78:	4620      	mov	r0, r4
1a001b7a:	f000 f8b5 	bl	1a001ce8 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a001b7e:	4620      	mov	r0, r4
1a001b80:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a001b84:	f000 f8fa 	bl	1a001d7c <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a001b88:	2303      	movs	r3, #3
1a001b8a:	60e3      	str	r3, [r4, #12]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a001b8c:	2301      	movs	r3, #1
1a001b8e:	65e3      	str	r3, [r4, #92]	; 0x5c
1a001b90:	bd10      	pop	{r4, pc}
1a001b92:	bf00      	nop
1a001b94:	400c1000 	.word	0x400c1000

1a001b98 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a001b98:	b508      	push	{r3, lr}
   DEBUGINIT();
1a001b9a:	f7ff ffeb 	bl	1a001b74 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a001b9e:	480b      	ldr	r0, [pc, #44]	; (1a001bcc <Board_Init+0x34>)
1a001ba0:	f000 fdf0 	bl	1a002784 <Chip_GPIO_Init>

   Board_LED_Init();
1a001ba4:	f7ff ff44 	bl	1a001a30 <Board_LED_Init>
   Board_TEC_Init();
1a001ba8:	f7ff ff62 	bl	1a001a70 <Board_TEC_Init>
   Board_SPI_Init();
1a001bac:	f7ff ff9c 	bl	1a001ae8 <Board_SPI_Init>
   Board_GPIO_Init();
1a001bb0:	f7ff ff7c 	bl	1a001aac <Board_GPIO_Init>
   Board_I2C_Init();
1a001bb4:	f7ff ffb4 	bl	1a001b20 <Board_I2C_Init>
   Board_ADC_Init();
1a001bb8:	f7ff ffc4 	bl	1a001b44 <Board_ADC_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
	LPC_CREG->CREG6 |= 0x4;
1a001bbc:	4a04      	ldr	r2, [pc, #16]	; (1a001bd0 <Board_Init+0x38>)
1a001bbe:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a001bc2:	f043 0304 	orr.w	r3, r3, #4
1a001bc6:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
1a001bca:	bd08      	pop	{r3, pc}
1a001bcc:	400f4000 	.word	0x400f4000
1a001bd0:	40043000 	.word	0x40043000

1a001bd4 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a001bd4:	4b05      	ldr	r3, [pc, #20]	; (1a001bec <_sbrk_r+0x18>)
1a001bd6:	681b      	ldr	r3, [r3, #0]
1a001bd8:	b913      	cbnz	r3, 1a001be0 <_sbrk_r+0xc>
       heap_end = &_pvHeapStart;
1a001bda:	4a05      	ldr	r2, [pc, #20]	; (1a001bf0 <_sbrk_r+0x1c>)
1a001bdc:	4b03      	ldr	r3, [pc, #12]	; (1a001bec <_sbrk_r+0x18>)
1a001bde:	601a      	str	r2, [r3, #0]
   }
   prev_heap_end = heap_end;
1a001be0:	4b02      	ldr	r3, [pc, #8]	; (1a001bec <_sbrk_r+0x18>)
1a001be2:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a001be4:	4401      	add	r1, r0
1a001be6:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a001be8:	4770      	bx	lr
1a001bea:	bf00      	nop
1a001bec:	10000ac8 	.word	0x10000ac8
1a001bf0:	10000b1c 	.word	0x10000b1c

1a001bf4 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a001bf4:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a001bf6:	4b04      	ldr	r3, [pc, #16]	; (1a001c08 <SystemInit+0x14>)
1a001bf8:	4a04      	ldr	r2, [pc, #16]	; (1a001c0c <SystemInit+0x18>)
1a001bfa:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a001bfc:	f000 fd96 	bl	1a00272c <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a001c00:	f000 f856 	bl	1a001cb0 <Board_SystemInit>
1a001c04:	bd08      	pop	{r3, pc}
1a001c06:	bf00      	nop
1a001c08:	e000ed08 	.word	0xe000ed08
1a001c0c:	1a000000 	.word	0x1a000000

1a001c10 <Board_SetupMuxing>:
    {0,  1, (SCU_MODE_HIGHSPEEDSLEW_EN | SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_FUNC6)}, /* TXEN */
};


void Board_SetupMuxing(void)
{
1a001c10:	b410      	push	{r4}
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a001c12:	2300      	movs	r3, #0
1a001c14:	e00c      	b.n	1a001c30 <Board_SetupMuxing+0x20>
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a001c16:	4a09      	ldr	r2, [pc, #36]	; (1a001c3c <Board_SetupMuxing+0x2c>)
1a001c18:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a001c1c:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a001c20:	784a      	ldrb	r2, [r1, #1]
1a001c22:	8848      	ldrh	r0, [r1, #2]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001c24:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a001c28:	4905      	ldr	r1, [pc, #20]	; (1a001c40 <Board_SetupMuxing+0x30>)
1a001c2a:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a001c2e:	3301      	adds	r3, #1
1a001c30:	2b25      	cmp	r3, #37	; 0x25
1a001c32:	d9f0      	bls.n	1a001c16 <Board_SetupMuxing+0x6>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a001c34:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001c38:	4770      	bx	lr
1a001c3a:	bf00      	nop
1a001c3c:	1a007a68 	.word	0x1a007a68
1a001c40:	40086000 	.word	0x40086000

1a001c44 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a001c44:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a001c46:	4a17      	ldr	r2, [pc, #92]	; (1a001ca4 <Board_SetupClocking+0x60>)
1a001c48:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a001c4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001c50:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001c54:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a001c58:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a001c5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001c60:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001c64:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a001c68:	2006      	movs	r0, #6
1a001c6a:	490f      	ldr	r1, [pc, #60]	; (1a001ca8 <Board_SetupClocking+0x64>)
1a001c6c:	2201      	movs	r2, #1
1a001c6e:	f000 fc19 	bl	1a0024a4 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a001c72:	2400      	movs	r4, #0
1a001c74:	e00a      	b.n	1a001c8c <Board_SetupClocking+0x48>
    {
        const struct CLK_BASE_STATES *c = &InitClkStates[i];
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a001c76:	4a0d      	ldr	r2, [pc, #52]	; (1a001cac <Board_SetupClocking+0x68>)
1a001c78:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a001c7c:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a001c80:	7859      	ldrb	r1, [r3, #1]
1a001c82:	789a      	ldrb	r2, [r3, #2]
1a001c84:	78db      	ldrb	r3, [r3, #3]
1a001c86:	f000 fb75 	bl	1a002374 <Chip_Clock_SetBaseClock>
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a001c8a:	3401      	adds	r4, #1
1a001c8c:	2c02      	cmp	r4, #2
1a001c8e:	d9f2      	bls.n	1a001c76 <Board_SetupClocking+0x32>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a001c90:	4b04      	ldr	r3, [pc, #16]	; (1a001ca4 <Board_SetupClocking+0x60>)
1a001c92:	685a      	ldr	r2, [r3, #4]
1a001c94:	f022 020c 	bic.w	r2, r2, #12
1a001c98:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a001c9a:	685a      	ldr	r2, [r3, #4]
1a001c9c:	f042 0203 	orr.w	r2, r2, #3
1a001ca0:	605a      	str	r2, [r3, #4]
1a001ca2:	bd10      	pop	{r4, pc}
1a001ca4:	40043000 	.word	0x40043000
1a001ca8:	0c28cb00 	.word	0x0c28cb00
1a001cac:	1a007a5c 	.word	0x1a007a5c

1a001cb0 <Board_SystemInit>:
}


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a001cb0:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a001cb2:	f7ff ffad 	bl	1a001c10 <Board_SetupMuxing>
    Board_SetupClocking();
1a001cb6:	f7ff ffc5 	bl	1a001c44 <Board_SetupClocking>
1a001cba:	bd08      	pop	{r3, pc}

1a001cbc <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a001cbc:	4b09      	ldr	r3, [pc, #36]	; (1a001ce4 <Chip_UART_GetIndex+0x28>)
1a001cbe:	4298      	cmp	r0, r3
1a001cc0:	d009      	beq.n	1a001cd6 <Chip_UART_GetIndex+0x1a>
1a001cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a001cc6:	4298      	cmp	r0, r3
1a001cc8:	d007      	beq.n	1a001cda <Chip_UART_GetIndex+0x1e>
1a001cca:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a001cce:	4298      	cmp	r0, r3
1a001cd0:	d005      	beq.n	1a001cde <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a001cd2:	2000      	movs	r0, #0
1a001cd4:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a001cd6:	2002      	movs	r0, #2
1a001cd8:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a001cda:	2003      	movs	r0, #3
1a001cdc:	4770      	bx	lr
	uint32_t base = (uint32_t) pUART;
	switch(base) {
		case LPC_USART0_BASE:
			return 0;
		case LPC_UART1_BASE:
			return 1;
1a001cde:	2001      	movs	r0, #1
		case LPC_USART3_BASE:
			return 3;
		default:
			return 0; /* Should never come here */
	}
}
1a001ce0:	4770      	bx	lr
1a001ce2:	bf00      	nop
1a001ce4:	400c1000 	.word	0x400c1000

1a001ce8 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a001ce8:	b510      	push	{r4, lr}
1a001cea:	b082      	sub	sp, #8
1a001cec:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a001cee:	f7ff ffe5 	bl	1a001cbc <Chip_UART_GetIndex>
1a001cf2:	4b10      	ldr	r3, [pc, #64]	; (1a001d34 <Chip_UART_Init+0x4c>)
1a001cf4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001cf8:	2101      	movs	r1, #1
1a001cfa:	460a      	mov	r2, r1
1a001cfc:	460b      	mov	r3, r1
1a001cfe:	f000 fb73 	bl	1a0023e8 <Chip_Clock_EnableOpts>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a001d02:	2307      	movs	r3, #7
1a001d04:	60a3      	str	r3, [r4, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
    pUART->TER2 = 0;
1a001d06:	2300      	movs	r3, #0
1a001d08:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a001d0a:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a001d0c:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a001d0e:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a001d10:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a001d12:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a001d14:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a001d16:	4b08      	ldr	r3, [pc, #32]	; (1a001d38 <Chip_UART_Init+0x50>)
1a001d18:	429c      	cmp	r4, r3
1a001d1a:	d103      	bne.n	1a001d24 <Chip_UART_Init+0x3c>
		/* Set Modem Control to default state */
		pUART->MCR = 0;
1a001d1c:	2300      	movs	r3, #0
1a001d1e:	6123      	str	r3, [r4, #16]
		/*Dummy Reading to Clear Status */
		tmp = pUART->MSR;
1a001d20:	69a3      	ldr	r3, [r4, #24]
1a001d22:	9301      	str	r3, [sp, #4]
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a001d24:	2303      	movs	r3, #3
1a001d26:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a001d28:	2310      	movs	r3, #16
1a001d2a:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a001d2c:	9b01      	ldr	r3, [sp, #4]
}
1a001d2e:	b002      	add	sp, #8
1a001d30:	bd10      	pop	{r4, pc}
1a001d32:	bf00      	nop
1a001d34:	1a007b08 	.word	0x1a007b08
1a001d38:	40082000 	.word	0x40082000

1a001d3c <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a001d3c:	b538      	push	{r3, r4, r5, lr}
1a001d3e:	4605      	mov	r5, r0
1a001d40:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a001d42:	f7ff ffbb 	bl	1a001cbc <Chip_UART_GetIndex>
1a001d46:	4b0c      	ldr	r3, [pc, #48]	; (1a001d78 <Chip_UART_SetBaud+0x3c>)
1a001d48:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001d4c:	f000 fb84 	bl	1a002458 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a001d50:	0124      	lsls	r4, r4, #4
1a001d52:	fbb0 f3f4 	udiv	r3, r0, r4
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a001d56:	68ea      	ldr	r2, [r5, #12]
1a001d58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a001d5c:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a001d5e:	b2da      	uxtb	r2, r3
1a001d60:	602a      	str	r2, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a001d62:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a001d66:	606a      	str	r2, [r5, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001d68:	68ea      	ldr	r2, [r5, #12]
1a001d6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a001d6e:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a001d70:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a001d74:	0900      	lsrs	r0, r0, #4
1a001d76:	bd38      	pop	{r3, r4, r5, pc}
1a001d78:	1a007b00 	.word	0x1a007b00

1a001d7c <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a001d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001d80:	b083      	sub	sp, #12
1a001d82:	4683      	mov	fp, r0
1a001d84:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a001d86:	f7ff ff99 	bl	1a001cbc <Chip_UART_GetIndex>
1a001d8a:	4b34      	ldr	r3, [pc, #208]	; (1a001e5c <Chip_UART_SetBaudFDR+0xe0>)
1a001d8c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001d90:	f000 fb62 	bl	1a002458 <Chip_Clock_GetRate>
1a001d94:	4606      	mov	r6, r0
/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */
1a001d96:	f04f 37ff 	mov.w	r7, #4294967295

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a001d9a:	2401      	movs	r4, #1
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a001d9c:	2300      	movs	r3, #0
1a001d9e:	9301      	str	r3, [sp, #4]
1a001da0:	46a2      	mov	sl, r4
1a001da2:	4699      	mov	r9, r3

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a001da4:	e029      	b.n	1a001dfa <Chip_UART_SetBaudFDR+0x7e>
		for (d = 0; d < m; d++) {
			uint32_t diff, div;
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a001da6:	2300      	movs	r3, #0
1a001da8:	0932      	lsrs	r2, r6, #4
1a001daa:	0730      	lsls	r0, r6, #28
1a001dac:	fba0 0104 	umull	r0, r1, r0, r4
1a001db0:	fb04 1102 	mla	r1, r4, r2, r1
1a001db4:	1962      	adds	r2, r4, r5
1a001db6:	fb08 f202 	mul.w	r2, r8, r2
1a001dba:	f001 f8b1 	bl	1a002f20 <__aeabi_uldivmod>

			/* Lower 32-bit of dval has diff */
			diff = (uint32_t) dval;
1a001dbe:	4603      	mov	r3, r0
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);
1a001dc0:	460a      	mov	r2, r1

			/* Closer to next div */
			if ((int)diff < 0) {
1a001dc2:	2800      	cmp	r0, #0
1a001dc4:	da01      	bge.n	1a001dca <Chip_UART_SetBaudFDR+0x4e>
				diff = -diff;
1a001dc6:	4243      	negs	r3, r0
				div ++;
1a001dc8:	1c4a      	adds	r2, r1, #1
			}

			/* Check if new value is worse than old or out of range */
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a001dca:	429f      	cmp	r7, r3
1a001dcc:	d30a      	bcc.n	1a001de4 <Chip_UART_SetBaudFDR+0x68>
1a001dce:	b14a      	cbz	r2, 1a001de4 <Chip_UART_SetBaudFDR+0x68>
1a001dd0:	0c11      	lsrs	r1, r2, #16
1a001dd2:	d107      	bne.n	1a001de4 <Chip_UART_SetBaudFDR+0x68>
1a001dd4:	2a02      	cmp	r2, #2
1a001dd6:	d800      	bhi.n	1a001dda <Chip_UART_SetBaudFDR+0x5e>
1a001dd8:	b925      	cbnz	r5, 1a001de4 <Chip_UART_SetBaudFDR+0x68>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a001dda:	b14b      	cbz	r3, 1a001df0 <Chip_UART_SetBaudFDR+0x74>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a001ddc:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a001dde:	9501      	str	r5, [sp, #4]
			sm = m;
1a001de0:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a001de2:	4691      	mov	r9, r2
	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
		for (d = 0; d < m; d++) {
1a001de4:	3501      	adds	r5, #1
1a001de6:	e000      	b.n	1a001dea <Chip_UART_SetBaudFDR+0x6e>
1a001de8:	2500      	movs	r5, #0
1a001dea:	42a5      	cmp	r5, r4
1a001dec:	d3db      	bcc.n	1a001da6 <Chip_UART_SetBaudFDR+0x2a>
1a001dee:	e003      	b.n	1a001df8 <Chip_UART_SetBaudFDR+0x7c>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a001df0:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a001df2:	9501      	str	r5, [sp, #4]
			sm = m;
1a001df4:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a001df6:	4691      	mov	r9, r2

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a001df8:	3401      	adds	r4, #1
1a001dfa:	b10f      	cbz	r7, 1a001e00 <Chip_UART_SetBaudFDR+0x84>
1a001dfc:	2c0f      	cmp	r4, #15
1a001dfe:	d9f3      	bls.n	1a001de8 <Chip_UART_SetBaudFDR+0x6c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a001e00:	f1b9 0f00 	cmp.w	r9, #0
1a001e04:	d026      	beq.n	1a001e54 <Chip_UART_SetBaudFDR+0xd8>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a001e06:	f8db 300c 	ldr.w	r3, [fp, #12]
1a001e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001e0e:	f8cb 300c 	str.w	r3, [fp, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a001e12:	fa5f f389 	uxtb.w	r3, r9
1a001e16:	f8cb 3000 	str.w	r3, [fp]
	pUART->DLM = (uint32_t) dlm;
1a001e1a:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a001e1e:	f8cb 3004 	str.w	r3, [fp, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001e22:	f8db 300c 	ldr.w	r3, [fp, #12]
1a001e26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001e2a:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a001e2e:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a001e32:	b2da      	uxtb	r2, r3
1a001e34:	9901      	ldr	r1, [sp, #4]
1a001e36:	f001 030f 	and.w	r3, r1, #15
1a001e3a:	4313      	orrs	r3, r2
1a001e3c:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a001e40:	0933      	lsrs	r3, r6, #4
1a001e42:	fb0a f303 	mul.w	r3, sl, r3
1a001e46:	eb0a 0001 	add.w	r0, sl, r1
1a001e4a:	fb09 f000 	mul.w	r0, r9, r0
1a001e4e:	fbb3 f0f0 	udiv	r0, r3, r0
1a001e52:	e000      	b.n	1a001e56 <Chip_UART_SetBaudFDR+0xda>
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
		return 0;
1a001e54:	2000      	movs	r0, #0
	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
}
1a001e56:	b003      	add	sp, #12
1a001e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001e5c:	1a007b00 	.word	0x1a007b00

1a001e60 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a001e60:	4b03      	ldr	r3, [pc, #12]	; (1a001e70 <Chip_ADC_GetClockIndex+0x10>)
1a001e62:	4298      	cmp	r0, r3
1a001e64:	d101      	bne.n	1a001e6a <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
1a001e66:	2004      	movs	r0, #4
1a001e68:	4770      	bx	lr
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a001e6a:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a001e6c:	4770      	bx	lr
1a001e6e:	bf00      	nop
1a001e70:	400e4000 	.word	0x400e4000

1a001e74 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a001e74:	b570      	push	{r4, r5, r6, lr}
1a001e76:	460d      	mov	r5, r1
1a001e78:	4614      	mov	r4, r2
1a001e7a:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a001e7c:	f7ff fff0 	bl	1a001e60 <Chip_ADC_GetClockIndex>
1a001e80:	f000 faea 	bl	1a002458 <Chip_Clock_GetRate>
	if (burstMode) {
1a001e84:	b115      	cbz	r5, 1a001e8c <getClkDiv+0x18>
		fullAdcRate = adcRate * clks;
1a001e86:	fb04 f406 	mul.w	r4, r4, r6
1a001e8a:	e003      	b.n	1a001e94 <getClkDiv+0x20>
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a001e8c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001e90:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a001e94:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a001e98:	0064      	lsls	r4, r4, #1
1a001e9a:	fbb0 f4f4 	udiv	r4, r0, r4
1a001e9e:	1e60      	subs	r0, r4, #1
	return div;
}
1a001ea0:	b2c0      	uxtb	r0, r0
1a001ea2:	bd70      	pop	{r4, r5, r6, pc}

1a001ea4 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a001ea4:	b538      	push	{r3, r4, r5, lr}
1a001ea6:	4605      	mov	r5, r0
1a001ea8:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a001eaa:	f7ff ffd9 	bl	1a001e60 <Chip_ADC_GetClockIndex>
1a001eae:	2101      	movs	r1, #1
1a001eb0:	460a      	mov	r2, r1
1a001eb2:	460b      	mov	r3, r1
1a001eb4:	f000 fa98 	bl	1a0023e8 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a001eb8:	2100      	movs	r1, #0
1a001eba:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a001ebc:	4a08      	ldr	r2, [pc, #32]	; (1a001ee0 <Chip_ADC_Init+0x3c>)
1a001ebe:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a001ec0:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a001ec2:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a001ec4:	4628      	mov	r0, r5
1a001ec6:	230b      	movs	r3, #11
1a001ec8:	f7ff ffd4 	bl	1a001e74 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001ecc:	0200      	lsls	r0, r0, #8
1a001ece:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001ed2:	7920      	ldrb	r0, [r4, #4]
1a001ed4:	f000 0007 	and.w	r0, r0, #7
1a001ed8:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
	pADC->CR = cr;
1a001edc:	6028      	str	r0, [r5, #0]
1a001ede:	bd38      	pop	{r3, r4, r5, pc}
1a001ee0:	00061a80 	.word	0x00061a80

1a001ee4 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a001ee4:	b570      	push	{r4, r5, r6, lr}
1a001ee6:	4606      	mov	r6, r0
1a001ee8:	460d      	mov	r5, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a001eea:	6804      	ldr	r4, [r0, #0]
1a001eec:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a001ef0:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a001ef4:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a001ef6:	790b      	ldrb	r3, [r1, #4]
1a001ef8:	f1c3 030b 	rsb	r3, r3, #11
1a001efc:	7949      	ldrb	r1, [r1, #5]
1a001efe:	b2db      	uxtb	r3, r3
1a001f00:	f7ff ffb8 	bl	1a001e74 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001f04:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001f08:	792c      	ldrb	r4, [r5, #4]
1a001f0a:	f004 0407 	and.w	r4, r4, #7
1a001f0e:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	pADC->CR = cr;
1a001f12:	6030      	str	r0, [r6, #0]
1a001f14:	bd70      	pop	{r4, r5, r6, pc}
1a001f16:	bf00      	nop

1a001f18 <Chip_ADC_SetResolution>:
}

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a001f18:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a001f1a:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a001f1c:	680a      	ldr	r2, [r1, #0]
1a001f1e:	f7ff ffe1 	bl	1a001ee4 <Chip_ADC_SetSampleRate>
1a001f22:	bd08      	pop	{r3, pc}

1a001f24 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a001f24:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a001f26:	2069      	movs	r0, #105	; 0x69
1a001f28:	f000 fa96 	bl	1a002458 <Chip_Clock_GetRate>
1a001f2c:	4b01      	ldr	r3, [pc, #4]	; (1a001f34 <SystemCoreClockUpdate+0x10>)
1a001f2e:	6018      	str	r0, [r3, #0]
1a001f30:	bd08      	pop	{r3, pc}
1a001f32:	bf00      	nop
1a001f34:	10000b18 	.word	0x10000b18

1a001f38 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001f38:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a001f3a:	680b      	ldr	r3, [r1, #0]
1a001f3c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001f40:	d002      	beq.n	1a001f48 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a001f42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a001f46:	600b      	str	r3, [r1, #0]
1a001f48:	4686      	mov	lr, r0
1a001f4a:	2601      	movs	r6, #1
1a001f4c:	e041      	b.n	1a001fd2 <pll_calc_divs+0x9a>
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
1a001f4e:	680d      	ldr	r5, [r1, #0]
1a001f50:	f015 0f40 	tst.w	r5, #64	; 0x40
1a001f54:	d008      	beq.n	1a001f68 <pll_calc_divs+0x30>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a001f56:	1c7b      	adds	r3, r7, #1
1a001f58:	fa04 f203 	lsl.w	r2, r4, r3
1a001f5c:	694b      	ldr	r3, [r1, #20]
1a001f5e:	fb03 f302 	mul.w	r3, r3, r2
1a001f62:	fbb3 f3f6 	udiv	r3, r3, r6
1a001f66:	e004      	b.n	1a001f72 <pll_calc_divs+0x3a>
				} else {
					fcco = (m * ppll->fin) / n;
1a001f68:	694b      	ldr	r3, [r1, #20]
1a001f6a:	fb04 f303 	mul.w	r3, r4, r3
1a001f6e:	fbb3 f3f6 	udiv	r3, r3, r6
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a001f72:	4a19      	ldr	r2, [pc, #100]	; (1a001fd8 <pll_calc_divs+0xa0>)
1a001f74:	4293      	cmp	r3, r2
1a001f76:	d920      	bls.n	1a001fba <pll_calc_divs+0x82>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a001f78:	4a18      	ldr	r2, [pc, #96]	; (1a001fdc <pll_calc_divs+0xa4>)
1a001f7a:	4293      	cmp	r3, r2
1a001f7c:	d823      	bhi.n	1a001fc6 <pll_calc_divs+0x8e>
				if (ppll->ctrl & (1 << 7)) {
1a001f7e:	f015 0f80 	tst.w	r5, #128	; 0x80
1a001f82:	d103      	bne.n	1a001f8c <pll_calc_divs+0x54>
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
1a001f84:	1c7a      	adds	r2, r7, #1
1a001f86:	fa23 f202 	lsr.w	r2, r3, r2
1a001f8a:	e000      	b.n	1a001f8e <pll_calc_divs+0x56>
					fcco = (m * ppll->fin) / n;
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a001f8c:	461a      	mov	r2, r3
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a001f8e:	1a85      	subs	r5, r0, r2
1a001f90:	d502      	bpl.n	1a001f98 <pll_calc_divs+0x60>
		return -val;
1a001f92:	f1c5 0c00 	rsb	ip, r5, #0
1a001f96:	e000      	b.n	1a001f9a <pll_calc_divs+0x62>
	return val;
1a001f98:	46ac      	mov	ip, r5
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a001f9a:	45e6      	cmp	lr, ip
1a001f9c:	d90d      	bls.n	1a001fba <pll_calc_divs+0x82>
					ppll->nsel = n;
1a001f9e:	608e      	str	r6, [r1, #8]
					ppll->psel = p + 1;
1a001fa0:	f107 0e01 	add.w	lr, r7, #1
1a001fa4:	f8c1 e00c 	str.w	lr, [r1, #12]
					ppll->msel = m;
1a001fa8:	610c      	str	r4, [r1, #16]
					ppll->fout = fout;
1a001faa:	618a      	str	r2, [r1, #24]
					ppll->fcco = fcco;
1a001fac:	61cb      	str	r3, [r1, #28]
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a001fae:	2d00      	cmp	r5, #0
1a001fb0:	da02      	bge.n	1a001fb8 <pll_calc_divs+0x80>
		return -val;
1a001fb2:	f1c5 0e00 	rsb	lr, r5, #0
1a001fb6:	e000      	b.n	1a001fba <pll_calc_divs+0x82>
	return val;
1a001fb8:	46ae      	mov	lr, r5
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
1a001fba:	3401      	adds	r4, #1
1a001fbc:	e000      	b.n	1a001fc0 <pll_calc_divs+0x88>
1a001fbe:	2401      	movs	r4, #1
1a001fc0:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
1a001fc4:	ddc3      	ble.n	1a001f4e <pll_calc_divs+0x16>
	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a001fc6:	3701      	adds	r7, #1
1a001fc8:	e000      	b.n	1a001fcc <pll_calc_divs+0x94>
1a001fca:	2700      	movs	r7, #0
1a001fcc:	2f03      	cmp	r7, #3
1a001fce:	ddf6      	ble.n	1a001fbe <pll_calc_divs+0x86>

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
1a001fd0:	3601      	adds	r6, #1
1a001fd2:	2e04      	cmp	r6, #4
1a001fd4:	ddf9      	ble.n	1a001fca <pll_calc_divs+0x92>
					prev = ABS(freq - fout);
				}
			}
		}
	}
}
1a001fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a001fd8:	094c5eff 	.word	0x094c5eff
1a001fdc:	1312d000 	.word	0x1312d000

1a001fe0 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001fe2:	b099      	sub	sp, #100	; 0x64
1a001fe4:	4605      	mov	r5, r0
1a001fe6:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a001fe8:	4668      	mov	r0, sp
1a001fea:	2100      	movs	r1, #0
1a001fec:	2260      	movs	r2, #96	; 0x60
1a001fee:	f001 fd39 	bl	1a003a64 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a001ff2:	2380      	movs	r3, #128	; 0x80
1a001ff4:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a001ff6:	6963      	ldr	r3, [r4, #20]
1a001ff8:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a001ffa:	7923      	ldrb	r3, [r4, #4]
1a001ffc:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a002000:	4628      	mov	r0, r5
1a002002:	4669      	mov	r1, sp
1a002004:	f7ff ff98 	bl	1a001f38 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a002008:	9b06      	ldr	r3, [sp, #24]
1a00200a:	42ab      	cmp	r3, r5
1a00200c:	d107      	bne.n	1a00201e <pll_get_frac+0x3e>
		*ppll = pll[0];
1a00200e:	466d      	mov	r5, sp
1a002010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002014:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002018:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a00201c:	e05e      	b.n	1a0020dc <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a00201e:	1aeb      	subs	r3, r5, r3
1a002020:	d500      	bpl.n	1a002024 <pll_get_frac+0x44>
		return -val;
1a002022:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[0]);
	if (pll[0].fout == freq) {
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a002024:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a002026:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a002028:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00202c:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a00202e:	6963      	ldr	r3, [r4, #20]
1a002030:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a002032:	7923      	ldrb	r3, [r4, #4]
1a002034:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a002038:	4628      	mov	r0, r5
1a00203a:	a910      	add	r1, sp, #64	; 0x40
1a00203c:	f7ff ff7c 	bl	1a001f38 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a002040:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a002042:	42ab      	cmp	r3, r5
1a002044:	d107      	bne.n	1a002056 <pll_get_frac+0x76>
		*ppll = pll[2];
1a002046:	ad10      	add	r5, sp, #64	; 0x40
1a002048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00204a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00204c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002050:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a002054:	e042      	b.n	1a0020dc <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a002056:	1aeb      	subs	r3, r5, r3
1a002058:	d500      	bpl.n	1a00205c <pll_get_frac+0x7c>
		return -val;
1a00205a:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[2]);
	if (pll[2].fout == freq) {
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a00205c:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a00205e:	4b20      	ldr	r3, [pc, #128]	; (1a0020e0 <pll_get_frac+0x100>)
1a002060:	429d      	cmp	r5, r3
1a002062:	d812      	bhi.n	1a00208a <pll_get_frac+0xaa>
		/* Try integer mode */
		pll[1].ctrl = (1 << 6);
1a002064:	2340      	movs	r3, #64	; 0x40
1a002066:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a002068:	6963      	ldr	r3, [r4, #20]
1a00206a:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a00206c:	4628      	mov	r0, r5
1a00206e:	a908      	add	r1, sp, #32
1a002070:	f7ff ff62 	bl	1a001f38 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a002074:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a002076:	42ab      	cmp	r3, r5
1a002078:	d107      	bne.n	1a00208a <pll_get_frac+0xaa>
			*ppll = pll[1];
1a00207a:	ad08      	add	r5, sp, #32
1a00207c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00207e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002080:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002084:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a002088:	e028      	b.n	1a0020dc <pll_get_frac+0xfc>
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a00208a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a00208c:	1aed      	subs	r5, r5, r3
1a00208e:	d500      	bpl.n	1a002092 <pll_get_frac+0xb2>
		return -val;
1a002090:	426d      	negs	r5, r5
		}
	}
	diff[1] = ABS(freq - pll[1].fout);

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a002092:	42ae      	cmp	r6, r5
1a002094:	dc11      	bgt.n	1a0020ba <pll_get_frac+0xda>
		if (diff[0] <= diff[2]) {
1a002096:	42be      	cmp	r6, r7
1a002098:	dc07      	bgt.n	1a0020aa <pll_get_frac+0xca>
			*ppll = pll[0];
1a00209a:	466d      	mov	r5, sp
1a00209c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00209e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0020a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0020a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0020a8:	e018      	b.n	1a0020dc <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a0020aa:	ad10      	add	r5, sp, #64	; 0x40
1a0020ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0020ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0020b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0020b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0020b8:	e010      	b.n	1a0020dc <pll_get_frac+0xfc>
		}
	} else {
		if (diff[1] <= diff[2]) {
1a0020ba:	42af      	cmp	r7, r5
1a0020bc:	db07      	blt.n	1a0020ce <pll_get_frac+0xee>
			*ppll = pll[1];
1a0020be:	ad08      	add	r5, sp, #32
1a0020c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0020c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0020c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0020c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0020cc:	e006      	b.n	1a0020dc <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a0020ce:	ad10      	add	r5, sp, #64	; 0x40
1a0020d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0020d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0020d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0020d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
	}
}
1a0020dc:	b019      	add	sp, #100	; 0x64
1a0020de:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0020e0:	068e7780 	.word	0x068e7780

1a0020e4 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a0020e4:	b430      	push	{r4, r5}
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a0020e6:	2300      	movs	r3, #0
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a0020e8:	211c      	movs	r1, #28
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0020ea:	e010      	b.n	1a00210e <Chip_Clock_FindBaseClock+0x2a>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a0020ec:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0020f0:	0052      	lsls	r2, r2, #1
1a0020f2:	4d0d      	ldr	r5, [pc, #52]	; (1a002128 <Chip_Clock_FindBaseClock+0x44>)
1a0020f4:	5aaa      	ldrh	r2, [r5, r2]
1a0020f6:	4282      	cmp	r2, r0
1a0020f8:	d806      	bhi.n	1a002108 <Chip_Clock_FindBaseClock+0x24>
1a0020fa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0020fe:	0052      	lsls	r2, r2, #1
1a002100:	442a      	add	r2, r5
1a002102:	8852      	ldrh	r2, [r2, #2]
1a002104:	4282      	cmp	r2, r0
1a002106:	d201      	bcs.n	1a00210c <Chip_Clock_FindBaseClock+0x28>
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a002108:	3301      	adds	r3, #1
1a00210a:	e000      	b.n	1a00210e <Chip_Clock_FindBaseClock+0x2a>
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
1a00210c:	4621      	mov	r1, r4
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00210e:	291c      	cmp	r1, #28
1a002110:	d107      	bne.n	1a002122 <Chip_Clock_FindBaseClock+0x3e>
1a002112:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002116:	0052      	lsls	r2, r2, #1
1a002118:	4c03      	ldr	r4, [pc, #12]	; (1a002128 <Chip_Clock_FindBaseClock+0x44>)
1a00211a:	4422      	add	r2, r4
1a00211c:	7914      	ldrb	r4, [r2, #4]
1a00211e:	428c      	cmp	r4, r1
1a002120:	d1e4      	bne.n	1a0020ec <Chip_Clock_FindBaseClock+0x8>
			i++;
		}
	}

	return baseclk;
}
1a002122:	4608      	mov	r0, r1
1a002124:	bc30      	pop	{r4, r5}
1a002126:	4770      	bx	lr
1a002128:	1a007b1c 	.word	0x1a007b1c

1a00212c <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a00212c:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a00212e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a002132:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a002134:	4a0d      	ldr	r2, [pc, #52]	; (1a00216c <Chip_Clock_EnableCrystal+0x40>)
1a002136:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a002138:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a00213c:	6992      	ldr	r2, [r2, #24]
1a00213e:	428a      	cmp	r2, r1
1a002140:	d001      	beq.n	1a002146 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002142:	4a0a      	ldr	r2, [pc, #40]	; (1a00216c <Chip_Clock_EnableCrystal+0x40>)
1a002144:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a002146:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a00214a:	4a09      	ldr	r2, [pc, #36]	; (1a002170 <Chip_Clock_EnableCrystal+0x44>)
1a00214c:	6811      	ldr	r1, [r2, #0]
1a00214e:	4a09      	ldr	r2, [pc, #36]	; (1a002174 <Chip_Clock_EnableCrystal+0x48>)
1a002150:	4291      	cmp	r1, r2
1a002152:	d901      	bls.n	1a002158 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a002154:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002158:	4a04      	ldr	r2, [pc, #16]	; (1a00216c <Chip_Clock_EnableCrystal+0x40>)
1a00215a:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a00215c:	9b01      	ldr	r3, [sp, #4]
1a00215e:	1e5a      	subs	r2, r3, #1
1a002160:	9201      	str	r2, [sp, #4]
1a002162:	2b00      	cmp	r3, #0
1a002164:	d1fa      	bne.n	1a00215c <Chip_Clock_EnableCrystal+0x30>
}
1a002166:	b002      	add	sp, #8
1a002168:	4770      	bx	lr
1a00216a:	bf00      	nop
1a00216c:	40050000 	.word	0x40050000
1a002170:	1a007a40 	.word	0x1a007a40
1a002174:	01312cff 	.word	0x01312cff

1a002178 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a002178:	3012      	adds	r0, #18
1a00217a:	4b05      	ldr	r3, [pc, #20]	; (1a002190 <Chip_Clock_GetDividerSource+0x18>)
1a00217c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a002180:	f010 0f01 	tst.w	r0, #1
1a002184:	d102      	bne.n	1a00218c <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002186:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00218a:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];

	if (reg & 1) {	/* divider is powered down */
		return CLKINPUT_PD;
1a00218c:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a00218e:	4770      	bx	lr
1a002190:	40050000 	.word	0x40050000

1a002194 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a002194:	f100 0212 	add.w	r2, r0, #18
1a002198:	4b03      	ldr	r3, [pc, #12]	; (1a0021a8 <Chip_Clock_GetDividerDivisor+0x14>)
1a00219a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a00219e:	4b03      	ldr	r3, [pc, #12]	; (1a0021ac <Chip_Clock_GetDividerDivisor+0x18>)
1a0021a0:	5c18      	ldrb	r0, [r3, r0]
}
1a0021a2:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a0021a6:	4770      	bx	lr
1a0021a8:	40050000 	.word	0x40050000
1a0021ac:	1a007b14 	.word	0x1a007b14

1a0021b0 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a0021b0:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a0021b2:	2810      	cmp	r0, #16
1a0021b4:	d80a      	bhi.n	1a0021cc <Chip_Clock_GetClockInputHz+0x1c>
1a0021b6:	e8df f000 	tbb	[pc, r0]
1a0021ba:	0b42      	.short	0x0b42
1a0021bc:	091f160d 	.word	0x091f160d
1a0021c0:	2b282522 	.word	0x2b282522
1a0021c4:	322e0909 	.word	0x322e0909
1a0021c8:	3a36      	.short	0x3a36
1a0021ca:	3e          	.byte	0x3e
1a0021cb:	00          	.byte	0x00
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a0021cc:	2000      	movs	r0, #0
1a0021ce:	bd08      	pop	{r3, pc}
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a0021d0:	481e      	ldr	r0, [pc, #120]	; (1a00224c <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a0021d2:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0021d4:	4b1e      	ldr	r3, [pc, #120]	; (1a002250 <Chip_Clock_GetClockInputHz+0xa0>)
1a0021d6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0021da:	f003 0307 	and.w	r3, r3, #7
1a0021de:	2b04      	cmp	r3, #4
1a0021e0:	d130      	bne.n	1a002244 <Chip_Clock_GetClockInputHz+0x94>
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a0021e2:	2000      	movs	r0, #0
1a0021e4:	bd08      	pop	{r3, pc}
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0021e6:	4b1a      	ldr	r3, [pc, #104]	; (1a002250 <Chip_Clock_GetClockInputHz+0xa0>)
1a0021e8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0021ec:	f003 0307 	and.w	r3, r3, #7
1a0021f0:	2b04      	cmp	r3, #4
1a0021f2:	d029      	beq.n	1a002248 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a0021f4:	4817      	ldr	r0, [pc, #92]	; (1a002254 <Chip_Clock_GetClockInputHz+0xa4>)
1a0021f6:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a0021f8:	4b17      	ldr	r3, [pc, #92]	; (1a002258 <Chip_Clock_GetClockInputHz+0xa8>)
1a0021fa:	6818      	ldr	r0, [r3, #0]
		break;
1a0021fc:	bd08      	pop	{r3, pc}

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a0021fe:	4b17      	ldr	r3, [pc, #92]	; (1a00225c <Chip_Clock_GetClockInputHz+0xac>)
1a002200:	6818      	ldr	r0, [r3, #0]
		break;
1a002202:	bd08      	pop	{r3, pc}

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a002204:	4b16      	ldr	r3, [pc, #88]	; (1a002260 <Chip_Clock_GetClockInputHz+0xb0>)
1a002206:	6818      	ldr	r0, [r3, #0]
		break;
1a002208:	bd08      	pop	{r3, pc}

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00220a:	4b15      	ldr	r3, [pc, #84]	; (1a002260 <Chip_Clock_GetClockInputHz+0xb0>)
1a00220c:	6858      	ldr	r0, [r3, #4]
		break;
1a00220e:	bd08      	pop	{r3, pc}

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a002210:	f000 f86a 	bl	1a0022e8 <Chip_Clock_GetMainPLLHz>
		break;
1a002214:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a002216:	2100      	movs	r1, #0
1a002218:	f000 f89a 	bl	1a002350 <Chip_Clock_GetDivRate>
		break;
1a00221c:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00221e:	2101      	movs	r1, #1
1a002220:	f000 f896 	bl	1a002350 <Chip_Clock_GetDivRate>
		break;
1a002224:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a002226:	2102      	movs	r1, #2
1a002228:	f000 f892 	bl	1a002350 <Chip_Clock_GetDivRate>
		break;
1a00222c:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00222e:	2103      	movs	r1, #3
1a002230:	f000 f88e 	bl	1a002350 <Chip_Clock_GetDivRate>
		break;
1a002234:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a002236:	2104      	movs	r1, #4
1a002238:	f000 f88a 	bl	1a002350 <Chip_Clock_GetDivRate>
		break;
1a00223c:	bd08      	pop	{r3, pc}
{
	uint32_t rate = 0;

	switch (input) {
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
1a00223e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a002242:	bd08      	pop	{r3, pc}
		break;

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a002244:	4803      	ldr	r0, [pc, #12]	; (1a002254 <Chip_Clock_GetClockInputHz+0xa4>)
1a002246:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			rate = 25000000; /* MII uses 25 MHz */
		} else {
			rate = 50000000; /* RMII uses 50 MHz */
1a002248:	4806      	ldr	r0, [pc, #24]	; (1a002264 <Chip_Clock_GetClockInputHz+0xb4>)
	default:
		break;
	}

	return rate;
}
1a00224a:	bd08      	pop	{r3, pc}
1a00224c:	00b71b00 	.word	0x00b71b00
1a002250:	40043000 	.word	0x40043000
1a002254:	017d7840 	.word	0x017d7840
1a002258:	1a007a44 	.word	0x1a007a44
1a00225c:	1a007a40 	.word	0x1a007a40
1a002260:	10000acc 	.word	0x10000acc
1a002264:	02faf080 	.word	0x02faf080

1a002268 <Chip_Clock_CalcMainPLLValue>:
	while(delay--) {}
}

/* Calculate the Main PLL div values */
int Chip_Clock_CalcMainPLLValue(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002268:	b538      	push	{r3, r4, r5, lr}
1a00226a:	4605      	mov	r5, r0
1a00226c:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a00226e:	7908      	ldrb	r0, [r1, #4]
1a002270:	f7ff ff9e 	bl	1a0021b0 <Chip_Clock_GetClockInputHz>
1a002274:	6160      	str	r0, [r4, #20]

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a002276:	4b19      	ldr	r3, [pc, #100]	; (1a0022dc <Chip_Clock_CalcMainPLLValue+0x74>)
1a002278:	442b      	add	r3, r5
1a00227a:	4a19      	ldr	r2, [pc, #100]	; (1a0022e0 <Chip_Clock_CalcMainPLLValue+0x78>)
1a00227c:	4293      	cmp	r3, r2
1a00227e:	d821      	bhi.n	1a0022c4 <Chip_Clock_CalcMainPLLValue+0x5c>
1a002280:	b318      	cbz	r0, 1a0022ca <Chip_Clock_CalcMainPLLValue+0x62>
		return -1;
	}

	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a002282:	2380      	movs	r3, #128	; 0x80
1a002284:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a002286:	2300      	movs	r3, #0
1a002288:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a00228a:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a00228c:	fbb5 f3f0 	udiv	r3, r5, r0
1a002290:	6123      	str	r3, [r4, #16]

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a002292:	4a14      	ldr	r2, [pc, #80]	; (1a0022e4 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a002294:	4295      	cmp	r5, r2
1a002296:	d903      	bls.n	1a0022a0 <Chip_Clock_CalcMainPLLValue+0x38>
1a002298:	fb03 f000 	mul.w	r0, r3, r0
1a00229c:	42a8      	cmp	r0, r5
1a00229e:	d007      	beq.n	1a0022b0 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a0022a0:	4628      	mov	r0, r5
1a0022a2:	4621      	mov	r1, r4
1a0022a4:	f7ff fe9c 	bl	1a001fe0 <pll_get_frac>
		if (!ppll->nsel) {
1a0022a8:	68a3      	ldr	r3, [r4, #8]
1a0022aa:	b18b      	cbz	r3, 1a0022d0 <Chip_Clock_CalcMainPLLValue+0x68>
			return -1;
		}
		ppll->nsel --;
1a0022ac:	3b01      	subs	r3, #1
1a0022ae:	60a3      	str	r3, [r4, #8]
	}

	if (ppll->msel == 0) {
1a0022b0:	6923      	ldr	r3, [r4, #16]
1a0022b2:	b183      	cbz	r3, 1a0022d6 <Chip_Clock_CalcMainPLLValue+0x6e>
		return - 1;
	}

	if (ppll->psel) {
1a0022b4:	68e2      	ldr	r2, [r4, #12]
1a0022b6:	b10a      	cbz	r2, 1a0022bc <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a0022b8:	3a01      	subs	r2, #1
1a0022ba:	60e2      	str	r2, [r4, #12]
	}

	ppll->msel --;
1a0022bc:	3b01      	subs	r3, #1
1a0022be:	6123      	str	r3, [r4, #16]

	return 0;
1a0022c0:	2000      	movs	r0, #0
1a0022c2:	bd38      	pop	{r3, r4, r5, pc}
{
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
		return -1;
1a0022c4:	f04f 30ff 	mov.w	r0, #4294967295
1a0022c8:	bd38      	pop	{r3, r4, r5, pc}
1a0022ca:	f04f 30ff 	mov.w	r0, #4294967295
1a0022ce:	bd38      	pop	{r3, r4, r5, pc}
	ppll->msel = freq / ppll->fin;

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
		pll_get_frac(freq, ppll);
		if (!ppll->nsel) {
			return -1;
1a0022d0:	f04f 30ff 	mov.w	r0, #4294967295
1a0022d4:	bd38      	pop	{r3, r4, r5, pc}
		}
		ppll->nsel --;
	}

	if (ppll->msel == 0) {
		return - 1;
1a0022d6:	f04f 30ff 	mov.w	r0, #4294967295
	}

	ppll->msel --;

	return 0;
}
1a0022da:	bd38      	pop	{r3, r4, r5, pc}
1a0022dc:	ff6b3a10 	.word	0xff6b3a10
1a0022e0:	0b940510 	.word	0x0b940510
1a0022e4:	094c5eff 	.word	0x094c5eff

1a0022e8 <Chip_Clock_GetMainPLLHz>:
	return freq;
}

/* Returns the frequency of the main PLL */
uint32_t Chip_Clock_GetMainPLLHz(void)
{
1a0022e8:	b570      	push	{r4, r5, r6, lr}
1a0022ea:	b082      	sub	sp, #8
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a0022ec:	4d16      	ldr	r5, [pc, #88]	; (1a002348 <Chip_Clock_GetMainPLLHz+0x60>)
1a0022ee:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a0022f0:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a0022f4:	f7ff ff5c 	bl	1a0021b0 <Chip_Clock_GetClockInputHz>
1a0022f8:	4606      	mov	r6, r0
	uint32_t msel, nsel, psel, direct, fbsel;
	uint32_t m, n, p;
	const uint8_t ptab[] = {1, 2, 4, 8};
1a0022fa:	4b14      	ldr	r3, [pc, #80]	; (1a00234c <Chip_Clock_GetMainPLLHz+0x64>)
1a0022fc:	6818      	ldr	r0, [r3, #0]
1a0022fe:	9001      	str	r0, [sp, #4]

	/* No lock? */
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a002300:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a002302:	f010 0001 	ands.w	r0, r0, #1
1a002306:	d01d      	beq.n	1a002344 <Chip_Clock_GetMainPLLHz+0x5c>
		return 0;
	}

	msel = (PLLReg >> 16) & 0xFF;
1a002308:	f3c4 4007 	ubfx	r0, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a00230c:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a002310:	f3c4 2101 	ubfx	r1, r4, #8, #2
	direct = (PLLReg >> 7) & 0x1;
	fbsel = (PLLReg >> 6) & 0x1;
1a002314:	f3c4 1580 	ubfx	r5, r4, #6, #1

	m = msel + 1;
1a002318:	1c43      	adds	r3, r0, #1
	n = nsel + 1;
1a00231a:	3201      	adds	r2, #1
	p = ptab[psel];
1a00231c:	a802      	add	r0, sp, #8
1a00231e:	4401      	add	r1, r0
1a002320:	f811 0c04 	ldrb.w	r0, [r1, #-4]

	if (direct || fbsel) {
1a002324:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002328:	d100      	bne.n	1a00232c <Chip_Clock_GetMainPLLHz+0x44>
1a00232a:	b125      	cbz	r5, 1a002336 <Chip_Clock_GetMainPLLHz+0x4e>
		return m * (freq / n);
1a00232c:	fbb6 f0f2 	udiv	r0, r6, r2
1a002330:	fb03 f000 	mul.w	r0, r3, r0
1a002334:	e006      	b.n	1a002344 <Chip_Clock_GetMainPLLHz+0x5c>
	}

	return (m / (2 * p)) * (freq / n);
1a002336:	0040      	lsls	r0, r0, #1
1a002338:	fbb3 f3f0 	udiv	r3, r3, r0
1a00233c:	fbb6 f0f2 	udiv	r0, r6, r2
1a002340:	fb00 f003 	mul.w	r0, r0, r3
}
1a002344:	b002      	add	sp, #8
1a002346:	bd70      	pop	{r4, r5, r6, pc}
1a002348:	40050000 	.word	0x40050000
1a00234c:	1a007b10 	.word	0x1a007b10

1a002350 <Chip_Clock_GetDivRate>:
	return TestHz;
}

/* Returns clock rate out of a divider */
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
{
1a002350:	b538      	push	{r3, r4, r5, lr}
1a002352:	460c      	mov	r4, r1
	CHIP_CGU_CLKIN_T input;
	uint32_t div;

	input = Chip_Clock_GetDividerSource(divider);
1a002354:	4608      	mov	r0, r1
1a002356:	f7ff ff0f 	bl	1a002178 <Chip_Clock_GetDividerSource>
1a00235a:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a00235c:	4620      	mov	r0, r4
1a00235e:	f7ff ff19 	bl	1a002194 <Chip_Clock_GetDividerDivisor>
1a002362:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a002364:	4628      	mov	r0, r5
1a002366:	f7ff ff23 	bl	1a0021b0 <Chip_Clock_GetClockInputHz>
1a00236a:	3401      	adds	r4, #1
}
1a00236c:	fbb0 f0f4 	udiv	r0, r0, r4
1a002370:	bd38      	pop	{r3, r4, r5, pc}
1a002372:	bf00      	nop

1a002374 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a002374:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a002376:	0085      	lsls	r5, r0, #2
1a002378:	4c0d      	ldr	r4, [pc, #52]	; (1a0023b0 <Chip_Clock_SetBaseClock+0x3c>)
1a00237a:	5965      	ldr	r5, [r4, r5]

	if (BaseClock < CLK_BASE_NONE) {
1a00237c:	281b      	cmp	r0, #27
1a00237e:	d80f      	bhi.n	1a0023a0 <Chip_Clock_SetBaseClock+0x2c>
		if (Input != CLKINPUT_PD) {
1a002380:	2911      	cmp	r1, #17
1a002382:	d012      	beq.n	1a0023aa <Chip_Clock_SetBaseClock+0x36>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a002384:	4c0b      	ldr	r4, [pc, #44]	; (1a0023b4 <Chip_Clock_SetBaseClock+0x40>)
1a002386:	402c      	ands	r4, r5

			if (autoblocken) {
1a002388:	b10a      	cbz	r2, 1a00238e <Chip_Clock_SetBaseClock+0x1a>
				reg |= (1 << 11);
1a00238a:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
			}
			if (powerdn) {
1a00238e:	b10b      	cbz	r3, 1a002394 <Chip_Clock_SetBaseClock+0x20>
				reg |= (1 << 0);
1a002390:	f044 0401 	orr.w	r4, r4, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a002394:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a002398:	0080      	lsls	r0, r0, #2
1a00239a:	4b05      	ldr	r3, [pc, #20]	; (1a0023b0 <Chip_Clock_SetBaseClock+0x3c>)
1a00239c:	501c      	str	r4, [r3, r0]
1a00239e:	e004      	b.n	1a0023aa <Chip_Clock_SetBaseClock+0x36>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a0023a0:	f045 0501 	orr.w	r5, r5, #1
1a0023a4:	0080      	lsls	r0, r0, #2
1a0023a6:	4b02      	ldr	r3, [pc, #8]	; (1a0023b0 <Chip_Clock_SetBaseClock+0x3c>)
1a0023a8:	501d      	str	r5, [r3, r0]
	}
}
1a0023aa:	bc30      	pop	{r4, r5}
1a0023ac:	4770      	bx	lr
1a0023ae:	bf00      	nop
1a0023b0:	4005005c 	.word	0x4005005c
1a0023b4:	e0fff7fe 	.word	0xe0fff7fe

1a0023b8 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a0023b8:	281b      	cmp	r0, #27
1a0023ba:	d808      	bhi.n	1a0023ce <Chip_Clock_GetBaseClock+0x16>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a0023bc:	0080      	lsls	r0, r0, #2
1a0023be:	4b06      	ldr	r3, [pc, #24]	; (1a0023d8 <Chip_Clock_GetBaseClock+0x20>)
1a0023c0:	5818      	ldr	r0, [r3, r0]

	/* base clock is powered down? */
	if (reg & 1) {
1a0023c2:	f010 0f01 	tst.w	r0, #1
1a0023c6:	d104      	bne.n	1a0023d2 <Chip_Clock_GetBaseClock+0x1a>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0023c8:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0023cc:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
		return CLKINPUT_PD;
1a0023ce:	2011      	movs	r0, #17
1a0023d0:	4770      	bx	lr

	reg = LPC_CGU->BASE_CLK[BaseClock];

	/* base clock is powered down? */
	if (reg & 1) {
		return CLKINPUT_PD;
1a0023d2:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a0023d4:	4770      	bx	lr
1a0023d6:	bf00      	nop
1a0023d8:	4005005c 	.word	0x4005005c

1a0023dc <Chip_Clock_GetBaseClocktHz>:
	return rate;
}

/* Returns the frequency of the specified base clock source */
uint32_t Chip_Clock_GetBaseClocktHz(CHIP_CGU_BASE_CLK_T clock)
{
1a0023dc:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a0023de:	f7ff ffeb 	bl	1a0023b8 <Chip_Clock_GetBaseClock>
1a0023e2:	f7ff fee5 	bl	1a0021b0 <Chip_Clock_GetClockInputHz>
}
1a0023e6:	bd08      	pop	{r3, pc}

1a0023e8 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0023e8:	b909      	cbnz	r1, 1a0023ee <Chip_Clock_EnableOpts+0x6>
}

/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;
1a0023ea:	2101      	movs	r1, #1
1a0023ec:	e000      	b.n	1a0023f0 <Chip_Clock_EnableOpts+0x8>

	if (autoen) {
		reg |= (1 << 1);
1a0023ee:	2103      	movs	r1, #3
	}
	if (wakeupen) {
1a0023f0:	b10a      	cbz	r2, 1a0023f6 <Chip_Clock_EnableOpts+0xe>
		reg |= (1 << 2);
1a0023f2:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0023f6:	2b02      	cmp	r3, #2
1a0023f8:	d101      	bne.n	1a0023fe <Chip_Clock_EnableOpts+0x16>
		reg |= (1 << 5);
1a0023fa:	f041 0120 	orr.w	r1, r1, #32
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0023fe:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002402:	d305      	bcc.n	1a002410 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a002404:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002408:	4b04      	ldr	r3, [pc, #16]	; (1a00241c <Chip_Clock_EnableOpts+0x34>)
1a00240a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a00240e:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a002410:	3020      	adds	r0, #32
1a002412:	4b03      	ldr	r3, [pc, #12]	; (1a002420 <Chip_Clock_EnableOpts+0x38>)
1a002414:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a002418:	4770      	bx	lr
1a00241a:	bf00      	nop
1a00241c:	40052000 	.word	0x40052000
1a002420:	40051000 	.word	0x40051000

1a002424 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a002424:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002428:	d309      	bcc.n	1a00243e <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a00242a:	4a09      	ldr	r2, [pc, #36]	; (1a002450 <Chip_Clock_Enable+0x2c>)
1a00242c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002430:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002434:	f043 0301 	orr.w	r3, r3, #1
1a002438:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00243c:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a00243e:	4a05      	ldr	r2, [pc, #20]	; (1a002454 <Chip_Clock_Enable+0x30>)
1a002440:	3020      	adds	r0, #32
1a002442:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002446:	f043 0301 	orr.w	r3, r3, #1
1a00244a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00244e:	4770      	bx	lr
1a002450:	40052000 	.word	0x40052000
1a002454:	40051000 	.word	0x40051000

1a002458 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a002458:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a00245a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00245e:	d305      	bcc.n	1a00246c <Chip_Clock_GetRate+0x14>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a002460:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a002464:	4a0d      	ldr	r2, [pc, #52]	; (1a00249c <Chip_Clock_GetRate+0x44>)
1a002466:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00246a:	e004      	b.n	1a002476 <Chip_Clock_GetRate+0x1e>
	}
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a00246c:	f100 0320 	add.w	r3, r0, #32
1a002470:	4a0b      	ldr	r2, [pc, #44]	; (1a0024a0 <Chip_Clock_GetRate+0x48>)
1a002472:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a002476:	f014 0f01 	tst.w	r4, #1
1a00247a:	d00c      	beq.n	1a002496 <Chip_Clock_GetRate+0x3e>
		/* Get base clock for this peripheral clock */
		baseclk = Chip_Clock_FindBaseClock(clk);
1a00247c:	f7ff fe32 	bl	1a0020e4 <Chip_Clock_FindBaseClock>

		/* Get base clock rate */
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a002480:	f7ff ffac 	bl	1a0023dc <Chip_Clock_GetBaseClocktHz>

		/* Get divider for this clock */
		if (((reg >> 5) & 0x7) == 0) {
1a002484:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a002488:	d101      	bne.n	1a00248e <Chip_Clock_GetRate+0x36>
			div = 1;
1a00248a:	2301      	movs	r3, #1
1a00248c:	e000      	b.n	1a002490 <Chip_Clock_GetRate+0x38>
		}
		else {
			div = 2;/* No other dividers supported */
1a00248e:	2302      	movs	r3, #2

		}
		rate = rate / div;
1a002490:	fbb0 f0f3 	udiv	r0, r0, r3
1a002494:	bd10      	pop	{r4, pc}
	}
	else {
		rate = 0;
1a002496:	2000      	movs	r0, #0
	}

	return rate;
}
1a002498:	bd10      	pop	{r4, pc}
1a00249a:	bf00      	nop
1a00249c:	40052000 	.word	0x40052000
1a0024a0:	40051000 	.word	0x40051000

1a0024a4 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0024a4:	b570      	push	{r4, r5, r6, lr}
1a0024a6:	b08a      	sub	sp, #40	; 0x28
1a0024a8:	4605      	mov	r5, r0
1a0024aa:	460e      	mov	r6, r1
1a0024ac:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0024ae:	f242 7310 	movw	r3, #10000	; 0x2710
1a0024b2:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0024b4:	2806      	cmp	r0, #6
1a0024b6:	d101      	bne.n	1a0024bc <Chip_SetupCoreClock+0x18>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
1a0024b8:	f7ff fe38 	bl	1a00212c <Chip_Clock_EnableCrystal>
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0024bc:	2004      	movs	r0, #4
1a0024be:	4629      	mov	r1, r5
1a0024c0:	2201      	movs	r2, #1
1a0024c2:	2300      	movs	r3, #0
1a0024c4:	f7ff ff56 	bl	1a002374 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0024c8:	4a47      	ldr	r2, [pc, #284]	; (1a0025e8 <Chip_SetupCoreClock+0x144>)
1a0024ca:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0024cc:	f043 0301 	orr.w	r3, r3, #1
1a0024d0:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0024d2:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0024d6:	4630      	mov	r0, r6
1a0024d8:	a901      	add	r1, sp, #4
1a0024da:	f7ff fec5 	bl	1a002268 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0024de:	4b43      	ldr	r3, [pc, #268]	; (1a0025ec <Chip_SetupCoreClock+0x148>)
1a0024e0:	429e      	cmp	r6, r3
1a0024e2:	d913      	bls.n	1a00250c <Chip_SetupCoreClock+0x68>
		if (ppll.ctrl & (1 << 6)) {
1a0024e4:	9b01      	ldr	r3, [sp, #4]
1a0024e6:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0024ea:	d000      	beq.n	1a0024ee <Chip_SetupCoreClock+0x4a>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a0024ec:	e7fe      	b.n	1a0024ec <Chip_SetupCoreClock+0x48>
		} else if (ppll.ctrl & (1 << 7)){
1a0024ee:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0024f2:	d005      	beq.n	1a002500 <Chip_SetupCoreClock+0x5c>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0024f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0024f8:	9301      	str	r3, [sp, #4]
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a0024fa:	2500      	movs	r5, #0

	if (core_freq > 110000000UL) {
		if (ppll.ctrl & (1 << 6)) {
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
1a0024fc:	2601      	movs	r6, #1
1a0024fe:	e007      	b.n	1a002510 <Chip_SetupCoreClock+0x6c>
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
			ppll.psel++;
1a002500:	9b04      	ldr	r3, [sp, #16]
1a002502:	3301      	adds	r3, #1
1a002504:	9304      	str	r3, [sp, #16]
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
1a002506:	2501      	movs	r5, #1
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a002508:	2600      	movs	r6, #0
1a00250a:	e001      	b.n	1a002510 <Chip_SetupCoreClock+0x6c>
1a00250c:	2500      	movs	r5, #0
1a00250e:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002510:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002514:	9b01      	ldr	r3, [sp, #4]
1a002516:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00251a:	9a05      	ldr	r2, [sp, #20]
1a00251c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002520:	9a03      	ldr	r2, [sp, #12]
1a002522:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002526:	9a04      	ldr	r2, [sp, #16]
1a002528:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00252c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002530:	4a2d      	ldr	r2, [pc, #180]	; (1a0025e8 <Chip_SetupCoreClock+0x144>)
1a002532:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a002534:	4b2c      	ldr	r3, [pc, #176]	; (1a0025e8 <Chip_SetupCoreClock+0x144>)
1a002536:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a002538:	f013 0f01 	tst.w	r3, #1
1a00253c:	d0fa      	beq.n	1a002534 <Chip_SetupCoreClock+0x90>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a00253e:	2004      	movs	r0, #4
1a002540:	2109      	movs	r1, #9
1a002542:	2201      	movs	r2, #1
1a002544:	2300      	movs	r3, #0
1a002546:	f7ff ff15 	bl	1a002374 <Chip_Clock_SetBaseClock>

	if (direct) {
1a00254a:	b1ee      	cbz	r6, 1a002588 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00254c:	f242 7310 	movw	r3, #10000	; 0x2710
1a002550:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a002552:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002554:	1e5a      	subs	r2, r3, #1
1a002556:	9209      	str	r2, [sp, #36]	; 0x24
1a002558:	2b00      	cmp	r3, #0
1a00255a:	d1fa      	bne.n	1a002552 <Chip_SetupCoreClock+0xae>
		ppll.ctrl |= 1 << 7;
1a00255c:	9b01      	ldr	r3, [sp, #4]
1a00255e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002562:	9301      	str	r3, [sp, #4]
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002564:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002568:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00256c:	9a05      	ldr	r2, [sp, #20]
1a00256e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002572:	9a03      	ldr	r2, [sp, #12]
1a002574:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002578:	9a04      	ldr	r2, [sp, #16]
1a00257a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00257e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002582:	4a19      	ldr	r2, [pc, #100]	; (1a0025e8 <Chip_SetupCoreClock+0x144>)
1a002584:	6453      	str	r3, [r2, #68]	; 0x44
1a002586:	e01c      	b.n	1a0025c2 <Chip_SetupCoreClock+0x11e>
		Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
	} else if (pdivide) {
1a002588:	b1dd      	cbz	r5, 1a0025c2 <Chip_SetupCoreClock+0x11e>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00258a:	f242 7310 	movw	r3, #10000	; 0x2710
1a00258e:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a002590:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002592:	1e5a      	subs	r2, r3, #1
1a002594:	9209      	str	r2, [sp, #36]	; 0x24
1a002596:	2b00      	cmp	r3, #0
1a002598:	d1fa      	bne.n	1a002590 <Chip_SetupCoreClock+0xec>
		ppll.psel--;
1a00259a:	9b04      	ldr	r3, [sp, #16]
1a00259c:	1e59      	subs	r1, r3, #1
1a00259e:	9104      	str	r1, [sp, #16]
1a0025a0:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0025a4:	9b01      	ldr	r3, [sp, #4]
1a0025a6:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
1a0025aa:	9b05      	ldr	r3, [sp, #20]
1a0025ac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a0025b0:	9b03      	ldr	r3, [sp, #12]
1a0025b2:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
1a0025b6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
1a0025ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0025be:	4a0a      	ldr	r2, [pc, #40]	; (1a0025e8 <Chip_SetupCoreClock+0x144>)
1a0025c0:	6453      	str	r3, [r2, #68]	; 0x44
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0025c2:	b964      	cbnz	r4, 1a0025de <Chip_SetupCoreClock+0x13a>
1a0025c4:	e00e      	b.n	1a0025e4 <Chip_SetupCoreClock+0x140>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0025c6:	4a0a      	ldr	r2, [pc, #40]	; (1a0025f0 <Chip_SetupCoreClock+0x14c>)
1a0025c8:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a0025cc:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a0025d0:	7859      	ldrb	r1, [r3, #1]
1a0025d2:	789a      	ldrb	r2, [r3, #2]
1a0025d4:	78db      	ldrb	r3, [r3, #3]
1a0025d6:	f7ff fecd 	bl	1a002374 <Chip_Clock_SetBaseClock>

	if (setbase) {
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0025da:	3401      	adds	r4, #1
1a0025dc:	e000      	b.n	1a0025e0 <Chip_SetupCoreClock+0x13c>
1a0025de:	2400      	movs	r4, #0
1a0025e0:	2c11      	cmp	r4, #17
1a0025e2:	d9f0      	bls.n	1a0025c6 <Chip_SetupCoreClock+0x122>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a0025e4:	b00a      	add	sp, #40	; 0x28
1a0025e6:	bd70      	pop	{r4, r5, r6, pc}
1a0025e8:	40050000 	.word	0x40050000
1a0025ec:	068e7780 	.word	0x068e7780
1a0025f0:	1a007b88 	.word	0x1a007b88

1a0025f4 <Chip_I2CM_XferHandler>:
	Chip_I2CM_SetDutyCycle(pI2C, (clockDiv >> 1), (clockDiv - (clockDiv >> 1)));
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a0025f4:	b410      	push	{r4}
 * @note	I2C controller clears STO bit when it sees STOP
 *          condition after a START condition on the bus.
 */
static INLINE uint32_t Chip_I2CM_GetCurState(LPC_I2C_T *pI2C)
{
	return pI2C->STAT & I2C_STAT_CODE_BITMASK;
1a0025f6:	6843      	ldr	r3, [r0, #4]
1a0025f8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	uint32_t cclr = I2C_CON_FLAGS;

	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0025fc:	2b30      	cmp	r3, #48	; 0x30
1a0025fe:	d028      	beq.n	1a002652 <Chip_I2CM_XferHandler+0x5e>
1a002600:	d80e      	bhi.n	1a002620 <Chip_I2CM_XferHandler+0x2c>
1a002602:	2b10      	cmp	r3, #16
1a002604:	d01b      	beq.n	1a00263e <Chip_I2CM_XferHandler+0x4a>
1a002606:	d804      	bhi.n	1a002612 <Chip_I2CM_XferHandler+0x1e>
1a002608:	2b00      	cmp	r3, #0
1a00260a:	d05d      	beq.n	1a0026c8 <Chip_I2CM_XferHandler+0xd4>
1a00260c:	2b08      	cmp	r3, #8
1a00260e:	d016      	beq.n	1a00263e <Chip_I2CM_XferHandler+0x4a>
1a002610:	e05e      	b.n	1a0026d0 <Chip_I2CM_XferHandler+0xdc>
1a002612:	2b20      	cmp	r3, #32
1a002614:	d01d      	beq.n	1a002652 <Chip_I2CM_XferHandler+0x5e>
1a002616:	2b28      	cmp	r3, #40	; 0x28
1a002618:	d023      	beq.n	1a002662 <Chip_I2CM_XferHandler+0x6e>
1a00261a:	2b18      	cmp	r3, #24
1a00261c:	d158      	bne.n	1a0026d0 <Chip_I2CM_XferHandler+0xdc>
1a00261e:	e020      	b.n	1a002662 <Chip_I2CM_XferHandler+0x6e>
1a002620:	2b48      	cmp	r3, #72	; 0x48
1a002622:	d049      	beq.n	1a0026b8 <Chip_I2CM_XferHandler+0xc4>
1a002624:	d804      	bhi.n	1a002630 <Chip_I2CM_XferHandler+0x3c>
1a002626:	2b38      	cmp	r3, #56	; 0x38
1a002628:	d04a      	beq.n	1a0026c0 <Chip_I2CM_XferHandler+0xcc>
1a00262a:	2b40      	cmp	r3, #64	; 0x40
1a00262c:	d033      	beq.n	1a002696 <Chip_I2CM_XferHandler+0xa2>
1a00262e:	e04f      	b.n	1a0026d0 <Chip_I2CM_XferHandler+0xdc>
1a002630:	2b58      	cmp	r3, #88	; 0x58
1a002632:	d028      	beq.n	1a002686 <Chip_I2CM_XferHandler+0x92>
1a002634:	2bf8      	cmp	r3, #248	; 0xf8
1a002636:	d05b      	beq.n	1a0026f0 <Chip_I2CM_XferHandler+0xfc>
1a002638:	2b50      	cmp	r3, #80	; 0x50
1a00263a:	d149      	bne.n	1a0026d0 <Chip_I2CM_XferHandler+0xdc>
1a00263c:	e023      	b.n	1a002686 <Chip_I2CM_XferHandler+0x92>
	case 0x08:		/* Start condition on bus */
	case 0x10:		/* Repeated start condition */
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a00263e:	780c      	ldrb	r4, [r1, #0]
1a002640:	888a      	ldrh	r2, [r1, #4]
1a002642:	fab2 f382 	clz	r3, r2
1a002646:	095b      	lsrs	r3, r3, #5
1a002648:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
1a00264c:	6083      	str	r3, [r0, #8]
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
1a00264e:	233c      	movs	r3, #60	; 0x3c

	switch (Chip_I2CM_GetCurState(pI2C)) {
	case 0x08:		/* Start condition on bus */
	case 0x10:		/* Repeated start condition */
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
		break;
1a002650:	e043      	b.n	1a0026da <Chip_I2CM_XferHandler+0xe6>

	/* Tx handling */
	case 0x20:		/* SLA+W sent NAK received */
	case 0x30:		/* DATA sent NAK received */
		if ((xfer->options & I2CM_XFER_OPTION_IGNORE_NACK) == 0) {
1a002652:	784b      	ldrb	r3, [r1, #1]
1a002654:	f013 0f01 	tst.w	r3, #1
1a002658:	d103      	bne.n	1a002662 <Chip_I2CM_XferHandler+0x6e>
			xfer->status = I2CM_STATUS_NAK;
1a00265a:	2302      	movs	r3, #2
1a00265c:	804b      	strh	r3, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a00265e:	232c      	movs	r3, #44	; 0x2c
			break;
1a002660:	e03b      	b.n	1a0026da <Chip_I2CM_XferHandler+0xe6>
		}

	case 0x18:		/* SLA+W sent and ACK received */
	case 0x28:		/* DATA sent and ACK received */
		if (!xfer->txSz) {
1a002662:	888b      	ldrh	r3, [r1, #4]
1a002664:	b92b      	cbnz	r3, 1a002672 <Chip_I2CM_XferHandler+0x7e>
			if (xfer->rxSz) {
1a002666:	88cb      	ldrh	r3, [r1, #6]
1a002668:	2b00      	cmp	r3, #0
1a00266a:	d135      	bne.n	1a0026d8 <Chip_I2CM_XferHandler+0xe4>
				cclr &= ~I2C_CON_STA;
			}
			else {
				xfer->status = I2CM_STATUS_OK;
1a00266c:	804b      	strh	r3, [r1, #2]
				cclr &= ~I2C_CON_STO;
1a00266e:	232c      	movs	r3, #44	; 0x2c
1a002670:	e033      	b.n	1a0026da <Chip_I2CM_XferHandler+0xe6>
			}

		}
		else {
			pI2C->DAT = *xfer->txBuff++;
1a002672:	688b      	ldr	r3, [r1, #8]
1a002674:	1c5a      	adds	r2, r3, #1
1a002676:	608a      	str	r2, [r1, #8]
1a002678:	781b      	ldrb	r3, [r3, #0]
1a00267a:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a00267c:	888b      	ldrh	r3, [r1, #4]
1a00267e:	3b01      	subs	r3, #1
1a002680:	808b      	strh	r3, [r1, #4]
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
1a002682:	233c      	movs	r3, #60	; 0x3c
1a002684:	e029      	b.n	1a0026da <Chip_I2CM_XferHandler+0xe6>
		break;

	/* Rx handling */
	case 0x58:		/* Data Received and NACK sent */
	case 0x50:		/* Data Received and ACK sent */
		*xfer->rxBuff++ = pI2C->DAT;
1a002686:	68cb      	ldr	r3, [r1, #12]
1a002688:	1c5a      	adds	r2, r3, #1
1a00268a:	60ca      	str	r2, [r1, #12]
1a00268c:	6882      	ldr	r2, [r0, #8]
1a00268e:	701a      	strb	r2, [r3, #0]
		xfer->rxSz--;
1a002690:	88cb      	ldrh	r3, [r1, #6]
1a002692:	3b01      	subs	r3, #1
1a002694:	80cb      	strh	r3, [r1, #6]

	case 0x40:		/* SLA+R sent and ACK received */
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a002696:	88ca      	ldrh	r2, [r1, #6]
1a002698:	2a01      	cmp	r2, #1
1a00269a:	d805      	bhi.n	1a0026a8 <Chip_I2CM_XferHandler+0xb4>
1a00269c:	784b      	ldrb	r3, [r1, #1]
1a00269e:	f013 0f02 	tst.w	r3, #2
1a0026a2:	d103      	bne.n	1a0026ac <Chip_I2CM_XferHandler+0xb8>
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
1a0026a4:	233c      	movs	r3, #60	; 0x3c
1a0026a6:	e002      	b.n	1a0026ae <Chip_I2CM_XferHandler+0xba>
		*xfer->rxBuff++ = pI2C->DAT;
		xfer->rxSz--;

	case 0x40:		/* SLA+R sent and ACK received */
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
			cclr &= ~I2C_CON_AA;
1a0026a8:	2338      	movs	r3, #56	; 0x38
1a0026aa:	e000      	b.n	1a0026ae <Chip_I2CM_XferHandler+0xba>
1a0026ac:	2338      	movs	r3, #56	; 0x38
		}
		if (xfer->rxSz == 0) {
1a0026ae:	b9a2      	cbnz	r2, 1a0026da <Chip_I2CM_XferHandler+0xe6>
			xfer->status = I2CM_STATUS_OK;
1a0026b0:	804a      	strh	r2, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a0026b2:	f023 0310 	bic.w	r3, r3, #16
1a0026b6:	e010      	b.n	1a0026da <Chip_I2CM_XferHandler+0xe6>
		}
		break;

	/* NAK Handling */
	case 0x48:		/* SLA+R sent NAK received */
		xfer->status = I2CM_STATUS_SLAVE_NAK;
1a0026b8:	2304      	movs	r3, #4
1a0026ba:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a0026bc:	232c      	movs	r3, #44	; 0x2c
		break;
1a0026be:	e00c      	b.n	1a0026da <Chip_I2CM_XferHandler+0xe6>

	case 0x38:		/* Arbitration lost */
		xfer->status = I2CM_STATUS_ARBLOST;
1a0026c0:	2305      	movs	r3, #5
1a0026c2:	804b      	strh	r3, [r1, #2]
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
1a0026c4:	233c      	movs	r3, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
		break;

	case 0x38:		/* Arbitration lost */
		xfer->status = I2CM_STATUS_ARBLOST;
		break;
1a0026c6:	e008      	b.n	1a0026da <Chip_I2CM_XferHandler+0xe6>

	case 0x00:		/* Bus Error */
		xfer->status = I2CM_STATUS_BUS_ERROR;
1a0026c8:	2303      	movs	r3, #3
1a0026ca:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a0026cc:	232c      	movs	r3, #44	; 0x2c
        break;
1a0026ce:	e004      	b.n	1a0026da <Chip_I2CM_XferHandler+0xe6>
    case 0xF8:
      return 0;
      
    default:
		xfer->status = I2CM_STATUS_ERROR;
1a0026d0:	2301      	movs	r3, #1
1a0026d2:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a0026d4:	232c      	movs	r3, #44	; 0x2c
        break;
1a0026d6:	e000      	b.n	1a0026da <Chip_I2CM_XferHandler+0xe6>

	case 0x18:		/* SLA+W sent and ACK received */
	case 0x28:		/* DATA sent and ACK received */
		if (!xfer->txSz) {
			if (xfer->rxSz) {
				cclr &= ~I2C_CON_STA;
1a0026d8:	231c      	movs	r3, #28
		cclr &= ~I2C_CON_STO;
        break;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a0026da:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a0026de:	6002      	str	r2, [r0, #0]
	/* Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);
1a0026e0:	f003 032c 	and.w	r3, r3, #44	; 0x2c
1a0026e4:	6183      	str	r3, [r0, #24]

	return xfer->status != I2CM_STATUS_BUSY;
1a0026e6:	8848      	ldrh	r0, [r1, #2]
1a0026e8:	38ff      	subs	r0, #255	; 0xff
1a0026ea:	bf18      	it	ne
1a0026ec:	2001      	movne	r0, #1
1a0026ee:	e000      	b.n	1a0026f2 <Chip_I2CM_XferHandler+0xfe>
	case 0x00:		/* Bus Error */
		xfer->status = I2CM_STATUS_BUS_ERROR;
		cclr &= ~I2C_CON_STO;
        break;
    case 0xF8:
      return 0;
1a0026f0:	2000      	movs	r0, #0
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
	/* Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);

	return xfer->status != I2CM_STATUS_BUSY;
}
1a0026f2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0026f6:	4770      	bx	lr

1a0026f8 <Chip_I2CM_Xfer>:

/* Transmit and Receive data in master mode */
void Chip_I2CM_Xfer(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	/* set the transfer status as busy */
	xfer->status = I2CM_STATUS_BUSY;
1a0026f8:	23ff      	movs	r3, #255	; 0xff
1a0026fa:	804b      	strh	r3, [r1, #2]
 * @note	This function clears all control/status flags.
 */
static INLINE void Chip_I2CM_ResetControl(LPC_I2C_T *pI2C)
{
	/* Reset STA, AA and SI. Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a0026fc:	232c      	movs	r3, #44	; 0x2c
1a0026fe:	6183      	str	r3, [r0, #24]
 * @note	This function sets the controller to transmit START condition when
 *          the bus becomes free.
 */
static INLINE void Chip_I2CM_SendStart(LPC_I2C_T *pI2C)
{
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a002700:	2360      	movs	r3, #96	; 0x60
1a002702:	6003      	str	r3, [r0, #0]
1a002704:	4770      	bx	lr
1a002706:	bf00      	nop

1a002708 <Chip_I2CM_XferBlocking>:
	Chip_I2CM_SendStart(pI2C);
}

/* Transmit and Receive data in master mode */
uint32_t Chip_I2CM_XferBlocking(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a002708:	b538      	push	{r3, r4, r5, lr}
1a00270a:	4604      	mov	r4, r0
1a00270c:	460d      	mov	r5, r1
	uint32_t ret = 0;
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);
1a00270e:	f7ff fff3 	bl	1a0026f8 <Chip_I2CM_Xfer>
}

/* Transmit and Receive data in master mode */
uint32_t Chip_I2CM_XferBlocking(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	uint32_t ret = 0;
1a002712:	2000      	movs	r0, #0
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);

	while (ret == 0) {
1a002714:	e007      	b.n	1a002726 <Chip_I2CM_XferBlocking+0x1e>
 * @return	Returns 0 if state didn't change
 * @note
 */
static INLINE uint32_t Chip_I2CM_StateChanged(LPC_I2C_T *pI2C)
{
	return pI2C->CONSET & I2C_CON_SI;
1a002716:	6823      	ldr	r3, [r4, #0]
		/* wait for status change interrupt */
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
1a002718:	f013 0f08 	tst.w	r3, #8
1a00271c:	d0fb      	beq.n	1a002716 <Chip_I2CM_XferBlocking+0xe>
		/* call state change handler */
		ret = Chip_I2CM_XferHandler(pI2C, xfer);
1a00271e:	4620      	mov	r0, r4
1a002720:	4629      	mov	r1, r5
1a002722:	f7ff ff67 	bl	1a0025f4 <Chip_I2CM_XferHandler>
{
	uint32_t ret = 0;
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);

	while (ret == 0) {
1a002726:	2800      	cmp	r0, #0
1a002728:	d0f5      	beq.n	1a002716 <Chip_I2CM_XferBlocking+0xe>
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
		/* call state change handler */
		ret = Chip_I2CM_XferHandler(pI2C, xfer);
	}
	return ret;
}
1a00272a:	bd38      	pop	{r3, r4, r5, pc}

1a00272c <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a00272c:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a00272e:	4b10      	ldr	r3, [pc, #64]	; (1a002770 <fpuInit+0x44>)
1a002730:	681b      	ldr	r3, [r3, #0]
1a002732:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a002734:	4b0f      	ldr	r3, [pc, #60]	; (1a002774 <fpuInit+0x48>)
1a002736:	681b      	ldr	r3, [r3, #0]
1a002738:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a00273a:	9a02      	ldr	r2, [sp, #8]
1a00273c:	4b0e      	ldr	r3, [pc, #56]	; (1a002778 <fpuInit+0x4c>)
1a00273e:	429a      	cmp	r2, r3
1a002740:	d105      	bne.n	1a00274e <fpuInit+0x22>
1a002742:	9a01      	ldr	r2, [sp, #4]
1a002744:	4b0d      	ldr	r3, [pc, #52]	; (1a00277c <fpuInit+0x50>)
1a002746:	429a      	cmp	r2, r3
1a002748:	d003      	beq.n	1a002752 <fpuInit+0x26>
1a00274a:	2300      	movs	r3, #0
1a00274c:	e002      	b.n	1a002754 <fpuInit+0x28>
1a00274e:	2300      	movs	r3, #0
1a002750:	e000      	b.n	1a002754 <fpuInit+0x28>
1a002752:	2301      	movs	r3, #1

	if (vfpPresent) {
1a002754:	f013 0fff 	tst.w	r3, #255	; 0xff
1a002758:	d008      	beq.n	1a00276c <fpuInit+0x40>
		Cpacr = *regCpacr;
1a00275a:	4a09      	ldr	r2, [pc, #36]	; (1a002780 <fpuInit+0x54>)
1a00275c:	6813      	ldr	r3, [r2, #0]
1a00275e:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a002760:	9b03      	ldr	r3, [sp, #12]
1a002762:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a002766:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a002768:	9b03      	ldr	r3, [sp, #12]
1a00276a:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a00276c:	b004      	add	sp, #16
1a00276e:	4770      	bx	lr
1a002770:	e000ef40 	.word	0xe000ef40
1a002774:	e000ef44 	.word	0xe000ef44
1a002778:	10110021 	.word	0x10110021
1a00277c:	11000011 	.word	0x11000011
1a002780:	e000ed88 	.word	0xe000ed88

1a002784 <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a002784:	4770      	bx	lr
1a002786:	bf00      	nop

1a002788 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a002788:	4b03      	ldr	r3, [pc, #12]	; (1a002798 <Chip_SSP_GetClockIndex+0x10>)
1a00278a:	4298      	cmp	r0, r3
1a00278c:	d101      	bne.n	1a002792 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
1a00278e:	20a5      	movs	r0, #165	; 0xa5
1a002790:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a002792:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a002794:	4770      	bx	lr
1a002796:	bf00      	nop
1a002798:	400c5000 	.word	0x400c5000

1a00279c <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a00279c:	4b04      	ldr	r3, [pc, #16]	; (1a0027b0 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a00279e:	4298      	cmp	r0, r3
1a0027a0:	d102      	bne.n	1a0027a8 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
1a0027a2:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0027a6:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0027a8:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0027ac:	4770      	bx	lr
1a0027ae:	bf00      	nop
1a0027b0:	400c5000 	.word	0x400c5000

1a0027b4 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0027b4:	6803      	ldr	r3, [r0, #0]
1a0027b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0027ba:	0209      	lsls	r1, r1, #8
1a0027bc:	b289      	uxth	r1, r1
1a0027be:	430b      	orrs	r3, r1
1a0027c0:	6003      	str	r3, [r0, #0]
	pSSP->CPSR = prescale;
1a0027c2:	6102      	str	r2, [r0, #16]
1a0027c4:	4770      	bx	lr
1a0027c6:	bf00      	nop

1a0027c8 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0027c8:	b570      	push	{r4, r5, r6, lr}
1a0027ca:	4606      	mov	r6, r0
1a0027cc:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0027ce:	f7ff ffe5 	bl	1a00279c <Chip_SSP_GetPeriphClockIndex>
1a0027d2:	f7ff fe41 	bl	1a002458 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0027d6:	2202      	movs	r2, #2
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
1a0027d8:	f04f 33ff 	mov.w	r3, #4294967295
{
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
1a0027dc:	2100      	movs	r1, #0
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a0027de:	e00c      	b.n	1a0027fa <Chip_SSP_SetBitRate+0x32>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0027e0:	1c4c      	adds	r4, r1, #1
1a0027e2:	fb02 f304 	mul.w	r3, r2, r4
1a0027e6:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0027ea:	42ab      	cmp	r3, r5
1a0027ec:	d905      	bls.n	1a0027fa <Chip_SSP_SetBitRate+0x32>
			cr0_div++;
			if (cr0_div > 0xFF) {
1a0027ee:	2cff      	cmp	r4, #255	; 0xff
1a0027f0:	d902      	bls.n	1a0027f8 <Chip_SSP_SetBitRate+0x30>
				cr0_div = 0;
				prescale += 2;
1a0027f2:	3202      	adds	r2, #2
	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
			if (cr0_div > 0xFF) {
				cr0_div = 0;
1a0027f4:	2100      	movs	r1, #0
1a0027f6:	e000      	b.n	1a0027fa <Chip_SSP_SetBitRate+0x32>
	prescale = 2;

	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0027f8:	4621      	mov	r1, r4

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a0027fa:	42ab      	cmp	r3, r5
1a0027fc:	d8f0      	bhi.n	1a0027e0 <Chip_SSP_SetBitRate+0x18>
				prescale += 2;
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0027fe:	4630      	mov	r0, r6
1a002800:	f7ff ffd8 	bl	1a0027b4 <Chip_SSP_SetClockRate>
1a002804:	bd70      	pop	{r4, r5, r6, pc}
1a002806:	bf00      	nop

1a002808 <Chip_SSP_Init>:
}

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a002808:	b510      	push	{r4, lr}
1a00280a:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a00280c:	f7ff ffbc 	bl	1a002788 <Chip_SSP_GetClockIndex>
1a002810:	f7ff fe08 	bl	1a002424 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a002814:	4620      	mov	r0, r4
1a002816:	f7ff ffc1 	bl	1a00279c <Chip_SSP_GetPeriphClockIndex>
1a00281a:	f7ff fe03 	bl	1a002424 <Chip_Clock_Enable>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00281e:	6863      	ldr	r3, [r4, #4]
1a002820:	f023 0304 	bic.w	r3, r3, #4
1a002824:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a002826:	6823      	ldr	r3, [r4, #0]
1a002828:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a00282c:	f043 0307 	orr.w	r3, r3, #7
1a002830:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a002832:	4620      	mov	r0, r4
1a002834:	4901      	ldr	r1, [pc, #4]	; (1a00283c <Chip_SSP_Init+0x34>)
1a002836:	f7ff ffc7 	bl	1a0027c8 <Chip_SSP_SetBitRate>
1a00283a:	bd10      	pop	{r4, pc}
1a00283c:	000186a0 	.word	0x000186a0

1a002840 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a002840:	2901      	cmp	r1, #1
1a002842:	d109      	bne.n	1a002858 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a002844:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a002848:	0080      	lsls	r0, r0, #2
1a00284a:	4b04      	ldr	r3, [pc, #16]	; (1a00285c <Chip_I2C_EventHandler+0x1c>)
1a00284c:	4418      	add	r0, r3
1a00284e:	6902      	ldr	r2, [r0, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a002850:	7d13      	ldrb	r3, [r2, #20]
1a002852:	b2db      	uxtb	r3, r3
1a002854:	2b04      	cmp	r3, #4
1a002856:	d0fb      	beq.n	1a002850 <Chip_I2C_EventHandler+0x10>
1a002858:	4770      	bx	lr
1a00285a:	bf00      	nop
1a00285c:	10000094 	.word	0x10000094

1a002860 <handleMasterXferState>:
	return I2C_SLAVE_GENERAL;
}

/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
1a002860:	b410      	push	{r4}
}

/* Get current state of the I2C peripheral */
STATIC INLINE int getCurState(LPC_I2C_T *pI2C)
{
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a002862:	6843      	ldr	r3, [r0, #4]
1a002864:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;

	switch (getCurState(pI2C)) {
1a002868:	2b58      	cmp	r3, #88	; 0x58
1a00286a:	d871      	bhi.n	1a002950 <handleMasterXferState+0xf0>
1a00286c:	e8df f003 	tbb	[pc, r3]
1a002870:	7070706c 	.word	0x7070706c
1a002874:	70707070 	.word	0x70707070
1a002878:	7070702f 	.word	0x7070702f
1a00287c:	70707070 	.word	0x70707070
1a002880:	7070702f 	.word	0x7070702f
1a002884:	70707070 	.word	0x70707070
1a002888:	70707039 	.word	0x70707039
1a00288c:	70707070 	.word	0x70707070
1a002890:	70707060 	.word	0x70707060
1a002894:	70707070 	.word	0x70707070
1a002898:	70707039 	.word	0x70707039
1a00289c:	70707070 	.word	0x70707070
1a0028a0:	70707064 	.word	0x70707064
1a0028a4:	70707070 	.word	0x70707070
1a0028a8:	70707068 	.word	0x70707068
1a0028ac:	70707070 	.word	0x70707070
1a0028b0:	70707059 	.word	0x70707059
1a0028b4:	70707070 	.word	0x70707070
1a0028b8:	70707060 	.word	0x70707060
1a0028bc:	70707070 	.word	0x70707070
1a0028c0:	7070702d 	.word	0x7070702d
1a0028c4:	70707070 	.word	0x70707070
1a0028c8:	4f          	.byte	0x4f
1a0028c9:	00          	.byte	0x00
}

/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
1a0028ca:	233c      	movs	r3, #60	; 0x3c
1a0028cc:	e020      	b.n	1a002910 <handleMasterXferState+0xb0>

	switch (getCurState(pI2C)) {
	case 0x08:		/* Start condition on bus */
	case 0x10:		/* Repeated start condition */
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a0028ce:	780a      	ldrb	r2, [r1, #0]
1a0028d0:	688b      	ldr	r3, [r1, #8]
1a0028d2:	fab3 f383 	clz	r3, r3
1a0028d6:	095b      	lsrs	r3, r3, #5
1a0028d8:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a0028dc:	6083      	str	r3, [r0, #8]
}

/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
1a0028de:	233c      	movs	r3, #60	; 0x3c

	switch (getCurState(pI2C)) {
	case 0x08:		/* Start condition on bus */
	case 0x10:		/* Repeated start condition */
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
		break;
1a0028e0:	e037      	b.n	1a002952 <handleMasterXferState+0xf2>

	/* Tx handling */
	case 0x18:		/* SLA+W sent and ACK received */
	case 0x28:		/* DATA sent and ACK received */
		if (!xfer->txSz) {
1a0028e2:	688b      	ldr	r3, [r1, #8]
1a0028e4:	b94b      	cbnz	r3, 1a0028fa <handleMasterXferState+0x9a>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a0028e6:	690b      	ldr	r3, [r1, #16]
1a0028e8:	b113      	cbz	r3, 1a0028f0 <handleMasterXferState+0x90>
1a0028ea:	f06f 0320 	mvn.w	r3, #32
1a0028ee:	e001      	b.n	1a0028f4 <handleMasterXferState+0x94>
1a0028f0:	f06f 0310 	mvn.w	r3, #16
1a0028f4:	f003 033c 	and.w	r3, r3, #60	; 0x3c
1a0028f8:	e02b      	b.n	1a002952 <handleMasterXferState+0xf2>
		}
		else {
			pI2C->DAT = *xfer->txBuff++;
1a0028fa:	684b      	ldr	r3, [r1, #4]
1a0028fc:	1c5a      	adds	r2, r3, #1
1a0028fe:	604a      	str	r2, [r1, #4]
1a002900:	781b      	ldrb	r3, [r3, #0]
1a002902:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a002904:	688b      	ldr	r3, [r1, #8]
1a002906:	3b01      	subs	r3, #1
1a002908:	608b      	str	r3, [r1, #8]
}

/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
1a00290a:	233c      	movs	r3, #60	; 0x3c
1a00290c:	e021      	b.n	1a002952 <handleMasterXferState+0xf2>
		}
		break;

	/* Rx handling */
	case 0x58:		/* Data Received and NACK sent */
		cclr &= ~I2C_CON_STO;
1a00290e:	232c      	movs	r3, #44	; 0x2c

	case 0x50:		/* Data Received and ACK sent */
		*xfer->rxBuff++ = pI2C->DAT;
1a002910:	68ca      	ldr	r2, [r1, #12]
1a002912:	1c54      	adds	r4, r2, #1
1a002914:	60cc      	str	r4, [r1, #12]
1a002916:	6884      	ldr	r4, [r0, #8]
1a002918:	7014      	strb	r4, [r2, #0]
		xfer->rxSz--;
1a00291a:	690a      	ldr	r2, [r1, #16]
1a00291c:	3a01      	subs	r2, #1
1a00291e:	610a      	str	r2, [r1, #16]
1a002920:	e000      	b.n	1a002924 <handleMasterXferState+0xc4>
}

/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
1a002922:	233c      	movs	r3, #60	; 0x3c
	case 0x50:		/* Data Received and ACK sent */
		*xfer->rxBuff++ = pI2C->DAT;
		xfer->rxSz--;

	case 0x40:		/* SLA+R sent and ACK received */
		if (xfer->rxSz > 1) {
1a002924:	690a      	ldr	r2, [r1, #16]
1a002926:	2a01      	cmp	r2, #1
1a002928:	dd13      	ble.n	1a002952 <handleMasterXferState+0xf2>
			cclr &= ~I2C_CON_AA;
1a00292a:	f023 0304 	bic.w	r3, r3, #4
1a00292e:	e010      	b.n	1a002952 <handleMasterXferState+0xf2>
		break;

	/* NAK Handling */
	case 0x20:		/* SLA+W sent NAK received */
	case 0x48:		/* SLA+R sent NAK received */
		xfer->status = I2C_STATUS_SLAVENAK;
1a002930:	2305      	movs	r3, #5
1a002932:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a002934:	232c      	movs	r3, #44	; 0x2c
		break;
1a002936:	e00c      	b.n	1a002952 <handleMasterXferState+0xf2>

	case 0x30:		/* DATA sent NAK received */
		xfer->status = I2C_STATUS_NAK;
1a002938:	2301      	movs	r3, #1
1a00293a:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a00293c:	232c      	movs	r3, #44	; 0x2c
		break;
1a00293e:	e008      	b.n	1a002952 <handleMasterXferState+0xf2>

	case 0x38:		/* Arbitration lost */
		xfer->status = I2C_STATUS_ARBLOST;
1a002940:	2302      	movs	r3, #2
1a002942:	750b      	strb	r3, [r1, #20]
}

/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
1a002944:	233c      	movs	r3, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
		break;

	case 0x38:		/* Arbitration lost */
		xfer->status = I2C_STATUS_ARBLOST;
		break;
1a002946:	e004      	b.n	1a002952 <handleMasterXferState+0xf2>

	/* Bus Error */
	case 0x00:
		xfer->status = I2C_STATUS_BUSERR;
1a002948:	2303      	movs	r3, #3
1a00294a:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a00294c:	232c      	movs	r3, #44	; 0x2c
1a00294e:	e000      	b.n	1a002952 <handleMasterXferState+0xf2>
}

/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
1a002950:	233c      	movs	r3, #60	; 0x3c
		xfer->status = I2C_STATUS_BUSERR;
		cclr &= ~I2C_CON_STO;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a002952:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a002956:	6002      	str	r2, [r0, #0]
	pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a002958:	f023 0210 	bic.w	r2, r3, #16
1a00295c:	6182      	str	r2, [r0, #24]

	/* If stopped return 0 */
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a00295e:	f013 0f10 	tst.w	r3, #16
1a002962:	d002      	beq.n	1a00296a <handleMasterXferState+0x10a>
1a002964:	7d0b      	ldrb	r3, [r1, #20]
1a002966:	2b02      	cmp	r3, #2
1a002968:	d105      	bne.n	1a002976 <handleMasterXferState+0x116>
		if (xfer->status == I2C_STATUS_BUSY) {
1a00296a:	7d0b      	ldrb	r3, [r1, #20]
1a00296c:	2b04      	cmp	r3, #4
1a00296e:	d104      	bne.n	1a00297a <handleMasterXferState+0x11a>
			xfer->status = I2C_STATUS_DONE;
1a002970:	2000      	movs	r0, #0
1a002972:	7508      	strb	r0, [r1, #20]
1a002974:	e002      	b.n	1a00297c <handleMasterXferState+0x11c>
		}
		return 0;
	}
	return 1;
1a002976:	2001      	movs	r0, #1
1a002978:	e000      	b.n	1a00297c <handleMasterXferState+0x11c>
	/* If stopped return 0 */
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
		if (xfer->status == I2C_STATUS_BUSY) {
			xfer->status = I2C_STATUS_DONE;
		}
		return 0;
1a00297a:	2000      	movs	r0, #0
	}
	return 1;
}
1a00297c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002980:	4770      	bx	lr
1a002982:	bf00      	nop

1a002984 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a002984:	b570      	push	{r4, r5, r6, lr}
1a002986:	4605      	mov	r5, r0
 * Private functions
 ****************************************************************************/

STATIC INLINE void enableClk(I2C_ID_T id)
{
	Chip_Clock_Enable(i2c[id].clk);
1a002988:	4e06      	ldr	r6, [pc, #24]	; (1a0029a4 <Chip_I2C_Init+0x20>)
1a00298a:	00c4      	lsls	r4, r0, #3
1a00298c:	1a23      	subs	r3, r4, r0
1a00298e:	009b      	lsls	r3, r3, #2
1a002990:	4433      	add	r3, r6
1a002992:	8898      	ldrh	r0, [r3, #4]
1a002994:	f7ff fd46 	bl	1a002424 <Chip_Clock_Enable>
void Chip_I2C_Init(I2C_ID_T id)
{
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a002998:	1b60      	subs	r0, r4, r5
1a00299a:	0080      	lsls	r0, r0, #2
1a00299c:	5833      	ldr	r3, [r6, r0]
1a00299e:	226c      	movs	r2, #108	; 0x6c
1a0029a0:	619a      	str	r2, [r3, #24]
1a0029a2:	bd70      	pop	{r4, r5, r6, pc}
1a0029a4:	10000094 	.word	0x10000094

1a0029a8 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0029a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0029ac:	460c      	mov	r4, r1
}

/* Get the ADC Clock Rate */
STATIC INLINE uint32_t getClkRate(I2C_ID_T id)
{
	return Chip_Clock_GetRate(i2c[id].clk);
1a0029ae:	4f09      	ldr	r7, [pc, #36]	; (1a0029d4 <Chip_I2C_SetClockRate+0x2c>)
1a0029b0:	00c5      	lsls	r5, r0, #3
1a0029b2:	1a2e      	subs	r6, r5, r0
1a0029b4:	00b6      	lsls	r6, r6, #2
1a0029b6:	19bb      	adds	r3, r7, r6
1a0029b8:	8898      	ldrh	r0, [r3, #4]
1a0029ba:	f7ff fd4d 	bl	1a002458 <Chip_Clock_GetRate>
/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0029be:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0029c2:	59bb      	ldr	r3, [r7, r6]
1a0029c4:	0842      	lsrs	r2, r0, #1
1a0029c6:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0029c8:	59bb      	ldr	r3, [r7, r6]
1a0029ca:	691a      	ldr	r2, [r3, #16]
1a0029cc:	1a80      	subs	r0, r0, r2
1a0029ce:	6158      	str	r0, [r3, #20]
1a0029d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0029d4:	10000094 	.word	0x10000094

1a0029d8 <Chip_I2C_SetMasterEventHandler>:

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
	struct i2c_interface *iic = &i2c[id];
	if (!iic->mXfer) {
1a0029d8:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a0029dc:	009b      	lsls	r3, r3, #2
1a0029de:	4a0a      	ldr	r2, [pc, #40]	; (1a002a08 <Chip_I2C_SetMasterEventHandler+0x30>)
1a0029e0:	4413      	add	r3, r2
1a0029e2:	691b      	ldr	r3, [r3, #16]
1a0029e4:	b923      	cbnz	r3, 1a0029f0 <Chip_I2C_SetMasterEventHandler+0x18>
		iic->mEvent = event;
1a0029e6:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a0029ea:	009b      	lsls	r3, r3, #2
1a0029ec:	4413      	add	r3, r2
1a0029ee:	6099      	str	r1, [r3, #8]
	}
	return iic->mEvent == event;
1a0029f0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0029f4:	0080      	lsls	r0, r0, #2
1a0029f6:	4b04      	ldr	r3, [pc, #16]	; (1a002a08 <Chip_I2C_SetMasterEventHandler+0x30>)
1a0029f8:	4418      	add	r0, r3
1a0029fa:	6880      	ldr	r0, [r0, #8]
}
1a0029fc:	4288      	cmp	r0, r1
1a0029fe:	bf14      	ite	ne
1a002a00:	2000      	movne	r0, #0
1a002a02:	2001      	moveq	r0, #1
1a002a04:	4770      	bx	lr
1a002a06:	bf00      	nop
1a002a08:	10000094 	.word	0x10000094

1a002a0c <Chip_I2C_MasterStateHandler>:
	return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a002a0c:	b510      	push	{r4, lr}
1a002a0e:	4604      	mov	r4, r0
	if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a002a10:	4a09      	ldr	r2, [pc, #36]	; (1a002a38 <Chip_I2C_MasterStateHandler+0x2c>)
1a002a12:	00c3      	lsls	r3, r0, #3
1a002a14:	1a1b      	subs	r3, r3, r0
1a002a16:	009b      	lsls	r3, r3, #2
1a002a18:	18d1      	adds	r1, r2, r3
1a002a1a:	58d0      	ldr	r0, [r2, r3]
1a002a1c:	6909      	ldr	r1, [r1, #16]
1a002a1e:	f7ff ff1f 	bl	1a002860 <handleMasterXferState>
1a002a22:	b940      	cbnz	r0, 1a002a36 <Chip_I2C_MasterStateHandler+0x2a>
		i2c[id].mEvent(id, I2C_EVENT_DONE);
1a002a24:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
1a002a28:	009b      	lsls	r3, r3, #2
1a002a2a:	4a03      	ldr	r2, [pc, #12]	; (1a002a38 <Chip_I2C_MasterStateHandler+0x2c>)
1a002a2c:	4413      	add	r3, r2
1a002a2e:	689b      	ldr	r3, [r3, #8]
1a002a30:	4620      	mov	r0, r4
1a002a32:	2102      	movs	r1, #2
1a002a34:	4798      	blx	r3
1a002a36:	bd10      	pop	{r4, pc}
1a002a38:	10000094 	.word	0x10000094

1a002a3c <Chip_I2C_IsStateChanged>:
}

/* State change checking */
int Chip_I2C_IsStateChanged(I2C_ID_T id)
{
	return (LPC_I2Cx(id)->CONSET & I2C_CON_SI) != 0;
1a002a3c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a002a40:	0080      	lsls	r0, r0, #2
1a002a42:	4b03      	ldr	r3, [pc, #12]	; (1a002a50 <Chip_I2C_IsStateChanged+0x14>)
1a002a44:	581b      	ldr	r3, [r3, r0]
1a002a46:	6818      	ldr	r0, [r3, #0]
}
1a002a48:	f3c0 00c0 	ubfx	r0, r0, #3, #1
1a002a4c:	4770      	bx	lr
1a002a4e:	bf00      	nop
1a002a50:	10000094 	.word	0x10000094

1a002a54 <Chip_I2C_EventHandlerPolling>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a002a54:	2901      	cmp	r1, #1
1a002a56:	d114      	bne.n	1a002a82 <Chip_I2C_EventHandlerPolling+0x2e>
	while (*stat == I2C_STATUS_BUSY) {}
}

/* Chip polling event handler */
void Chip_I2C_EventHandlerPolling(I2C_ID_T id, I2C_EVENT_T event)
{
1a002a58:	b538      	push	{r3, r4, r5, lr}
1a002a5a:	4604      	mov	r4, r0
	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
		return;
	}

	stat = &iic->mXfer->status;
1a002a5c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a002a60:	009b      	lsls	r3, r3, #2
1a002a62:	4a08      	ldr	r2, [pc, #32]	; (1a002a84 <Chip_I2C_EventHandlerPolling+0x30>)
1a002a64:	4413      	add	r3, r2
1a002a66:	691d      	ldr	r5, [r3, #16]
	/* Call the state change handler till xfer is done */
	while (*stat == I2C_STATUS_BUSY) {
1a002a68:	e006      	b.n	1a002a78 <Chip_I2C_EventHandlerPolling+0x24>
		if (Chip_I2C_IsStateChanged(id)) {
1a002a6a:	4620      	mov	r0, r4
1a002a6c:	f7ff ffe6 	bl	1a002a3c <Chip_I2C_IsStateChanged>
1a002a70:	b110      	cbz	r0, 1a002a78 <Chip_I2C_EventHandlerPolling+0x24>
			Chip_I2C_MasterStateHandler(id);
1a002a72:	4620      	mov	r0, r4
1a002a74:	f7ff ffca 	bl	1a002a0c <Chip_I2C_MasterStateHandler>
		return;
	}

	stat = &iic->mXfer->status;
	/* Call the state change handler till xfer is done */
	while (*stat == I2C_STATUS_BUSY) {
1a002a78:	7d2b      	ldrb	r3, [r5, #20]
1a002a7a:	b2db      	uxtb	r3, r3
1a002a7c:	2b04      	cmp	r3, #4
1a002a7e:	d0f4      	beq.n	1a002a6a <Chip_I2C_EventHandlerPolling+0x16>
1a002a80:	bd38      	pop	{r3, r4, r5, pc}
1a002a82:	4770      	bx	lr
1a002a84:	10000094 	.word	0x10000094

1a002a88 <ResetISR>:
// not debug) by setting the define 'DONT_RESET_ON_RESTART'.
//
#ifndef DONT_RESET_ON_RESTART

    // Disable interrupts
    __asm volatile ("cpsid i");
1a002a88:	b672      	cpsid	i
    // Note that we do not use the CMSIS register access mechanism,
    // as there is no guarantee that the project has been configured
    // to use CMSIS.

    // Write to LPC_RGU->RESET_CTRL0
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a002a8a:	4a19      	ldr	r2, [pc, #100]	; (1a002af0 <ResetISR+0x68>)
1a002a8c:	4b19      	ldr	r3, [pc, #100]	; (1a002af4 <ResetISR+0x6c>)
1a002a8e:	601a      	str	r2, [r3, #0]
    // GPIO_RST|AES_RST|ETHERNET_RST|SDIO_RST|DMA_RST|
    // USB1_RST|USB0_RST|LCD_RST|M0_SUB_RST

    // Write to LPC_RGU->RESET_CTRL1
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a002a90:	4a19      	ldr	r2, [pc, #100]	; (1a002af8 <ResetISR+0x70>)
1a002a92:	3304      	adds	r3, #4
1a002a94:	601a      	str	r2, [r3, #0]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a002a96:	2300      	movs	r3, #0
1a002a98:	e005      	b.n	1a002aa6 <ResetISR+0x1e>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a002a9a:	f04f 31ff 	mov.w	r1, #4294967295
1a002a9e:	4a17      	ldr	r2, [pc, #92]	; (1a002afc <ResetISR+0x74>)
1a002aa0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a002aa4:	3301      	adds	r3, #1
1a002aa6:	2b07      	cmp	r3, #7
1a002aa8:	d9f7      	bls.n	1a002a9a <ResetISR+0x12>
// Reset entry point for your code.
// Sets up a simple runtime environment and initializes the C/C++
// library.
//
//*****************************************************************************
void ResetISR(void) {
1a002aaa:	b510      	push	{r4, lr}
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
    }

    // Reenable interrupts
    __asm volatile ("cpsie i");
1a002aac:	b662      	cpsie	i

#endif  // ifndef DONT_RESET_ON_RESTART
// *************************************************************

#if defined (__USE_LPCOPEN)
    SystemInit();
1a002aae:	f7ff f8a1 	bl	1a001bf4 <SystemInit>
    //
    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;
1a002ab2:	4b13      	ldr	r3, [pc, #76]	; (1a002b00 <ResetISR+0x78>)

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a002ab4:	e007      	b.n	1a002ac6 <ResetISR+0x3e>
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a002ab6:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a002aba:	6818      	ldr	r0, [r3, #0]
1a002abc:	6859      	ldr	r1, [r3, #4]
1a002abe:	689a      	ldr	r2, [r3, #8]
1a002ac0:	f7fd fb74 	bl	1a0001ac <data_init>

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a002ac4:	4623      	mov	r3, r4

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a002ac6:	4a0f      	ldr	r2, [pc, #60]	; (1a002b04 <ResetISR+0x7c>)
1a002ac8:	4293      	cmp	r3, r2
1a002aca:	d3f4      	bcc.n	1a002ab6 <ResetISR+0x2e>
1a002acc:	e006      	b.n	1a002adc <ResetISR+0x54>
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
1a002ace:	461c      	mov	r4, r3
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
1a002ad0:	f854 0b08 	ldr.w	r0, [r4], #8
1a002ad4:	6859      	ldr	r1, [r3, #4]
1a002ad6:	f7fd fb77 	bl	1a0001c8 <bss_init>
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a002ada:	4623      	mov	r3, r4
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
1a002adc:	4a0a      	ldr	r2, [pc, #40]	; (1a002b08 <ResetISR+0x80>)
1a002ade:	4293      	cmp	r3, r2
1a002ae0:	d3f5      	bcc.n	1a002ace <ResetISR+0x46>

#if defined (__USE_CMSIS)
    SystemInit();
#endif

    __libc_init_array();
1a002ae2:	f000 fefd 	bl	1a0038e0 <__libc_init_array>

#if defined (__REDLIB__)
    // Call the Redlib library, which in turn calls main()
    __main();
#else
    Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a002ae6:	f7ff f857 	bl	1a001b98 <Board_Init>
    main();
1a002aea:	f7fd fc1f 	bl	1a00032c <main>
    //
    // main() shouldn't return, but if it does, we'll just enter an infinite loop
    //
    while (1) {
        ;
    }
1a002aee:	e7fe      	b.n	1a002aee <ResetISR+0x66>
1a002af0:	10df1000 	.word	0x10df1000
1a002af4:	40053100 	.word	0x40053100
1a002af8:	01dff7ff 	.word	0x01dff7ff
1a002afc:	e000e280 	.word	0xe000e280
1a002b00:	1a000114 	.word	0x1a000114
1a002b04:	1a000150 	.word	0x1a000150
1a002b08:	1a000178 	.word	0x1a000178

1a002b0c <_init>:
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
        *pulDest++ = 0;
}

void _init(void) {}
1a002b0c:	4770      	bx	lr
1a002b0e:	bf00      	nop

1a002b10 <__aeabi_drsub>:
1a002b10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a002b14:	e002      	b.n	1a002b1c <__adddf3>
1a002b16:	bf00      	nop

1a002b18 <__aeabi_dsub>:
1a002b18:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a002b1c <__adddf3>:
1a002b1c:	b530      	push	{r4, r5, lr}
1a002b1e:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a002b22:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a002b26:	ea94 0f05 	teq	r4, r5
1a002b2a:	bf08      	it	eq
1a002b2c:	ea90 0f02 	teqeq	r0, r2
1a002b30:	bf1f      	itttt	ne
1a002b32:	ea54 0c00 	orrsne.w	ip, r4, r0
1a002b36:	ea55 0c02 	orrsne.w	ip, r5, r2
1a002b3a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a002b3e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a002b42:	f000 80e2 	beq.w	1a002d0a <__adddf3+0x1ee>
1a002b46:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a002b4a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a002b4e:	bfb8      	it	lt
1a002b50:	426d      	neglt	r5, r5
1a002b52:	dd0c      	ble.n	1a002b6e <__adddf3+0x52>
1a002b54:	442c      	add	r4, r5
1a002b56:	ea80 0202 	eor.w	r2, r0, r2
1a002b5a:	ea81 0303 	eor.w	r3, r1, r3
1a002b5e:	ea82 0000 	eor.w	r0, r2, r0
1a002b62:	ea83 0101 	eor.w	r1, r3, r1
1a002b66:	ea80 0202 	eor.w	r2, r0, r2
1a002b6a:	ea81 0303 	eor.w	r3, r1, r3
1a002b6e:	2d36      	cmp	r5, #54	; 0x36
1a002b70:	bf88      	it	hi
1a002b72:	bd30      	pophi	{r4, r5, pc}
1a002b74:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a002b78:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a002b7c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a002b80:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a002b84:	d002      	beq.n	1a002b8c <__adddf3+0x70>
1a002b86:	4240      	negs	r0, r0
1a002b88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a002b8c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a002b90:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a002b94:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a002b98:	d002      	beq.n	1a002ba0 <__adddf3+0x84>
1a002b9a:	4252      	negs	r2, r2
1a002b9c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a002ba0:	ea94 0f05 	teq	r4, r5
1a002ba4:	f000 80a7 	beq.w	1a002cf6 <__adddf3+0x1da>
1a002ba8:	f1a4 0401 	sub.w	r4, r4, #1
1a002bac:	f1d5 0e20 	rsbs	lr, r5, #32
1a002bb0:	db0d      	blt.n	1a002bce <__adddf3+0xb2>
1a002bb2:	fa02 fc0e 	lsl.w	ip, r2, lr
1a002bb6:	fa22 f205 	lsr.w	r2, r2, r5
1a002bba:	1880      	adds	r0, r0, r2
1a002bbc:	f141 0100 	adc.w	r1, r1, #0
1a002bc0:	fa03 f20e 	lsl.w	r2, r3, lr
1a002bc4:	1880      	adds	r0, r0, r2
1a002bc6:	fa43 f305 	asr.w	r3, r3, r5
1a002bca:	4159      	adcs	r1, r3
1a002bcc:	e00e      	b.n	1a002bec <__adddf3+0xd0>
1a002bce:	f1a5 0520 	sub.w	r5, r5, #32
1a002bd2:	f10e 0e20 	add.w	lr, lr, #32
1a002bd6:	2a01      	cmp	r2, #1
1a002bd8:	fa03 fc0e 	lsl.w	ip, r3, lr
1a002bdc:	bf28      	it	cs
1a002bde:	f04c 0c02 	orrcs.w	ip, ip, #2
1a002be2:	fa43 f305 	asr.w	r3, r3, r5
1a002be6:	18c0      	adds	r0, r0, r3
1a002be8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a002bec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002bf0:	d507      	bpl.n	1a002c02 <__adddf3+0xe6>
1a002bf2:	f04f 0e00 	mov.w	lr, #0
1a002bf6:	f1dc 0c00 	rsbs	ip, ip, #0
1a002bfa:	eb7e 0000 	sbcs.w	r0, lr, r0
1a002bfe:	eb6e 0101 	sbc.w	r1, lr, r1
1a002c02:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a002c06:	d31b      	bcc.n	1a002c40 <__adddf3+0x124>
1a002c08:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a002c0c:	d30c      	bcc.n	1a002c28 <__adddf3+0x10c>
1a002c0e:	0849      	lsrs	r1, r1, #1
1a002c10:	ea5f 0030 	movs.w	r0, r0, rrx
1a002c14:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a002c18:	f104 0401 	add.w	r4, r4, #1
1a002c1c:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a002c20:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a002c24:	f080 809a 	bcs.w	1a002d5c <__adddf3+0x240>
1a002c28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a002c2c:	bf08      	it	eq
1a002c2e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a002c32:	f150 0000 	adcs.w	r0, r0, #0
1a002c36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002c3a:	ea41 0105 	orr.w	r1, r1, r5
1a002c3e:	bd30      	pop	{r4, r5, pc}
1a002c40:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a002c44:	4140      	adcs	r0, r0
1a002c46:	eb41 0101 	adc.w	r1, r1, r1
1a002c4a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002c4e:	f1a4 0401 	sub.w	r4, r4, #1
1a002c52:	d1e9      	bne.n	1a002c28 <__adddf3+0x10c>
1a002c54:	f091 0f00 	teq	r1, #0
1a002c58:	bf04      	itt	eq
1a002c5a:	4601      	moveq	r1, r0
1a002c5c:	2000      	moveq	r0, #0
1a002c5e:	fab1 f381 	clz	r3, r1
1a002c62:	bf08      	it	eq
1a002c64:	3320      	addeq	r3, #32
1a002c66:	f1a3 030b 	sub.w	r3, r3, #11
1a002c6a:	f1b3 0220 	subs.w	r2, r3, #32
1a002c6e:	da0c      	bge.n	1a002c8a <__adddf3+0x16e>
1a002c70:	320c      	adds	r2, #12
1a002c72:	dd08      	ble.n	1a002c86 <__adddf3+0x16a>
1a002c74:	f102 0c14 	add.w	ip, r2, #20
1a002c78:	f1c2 020c 	rsb	r2, r2, #12
1a002c7c:	fa01 f00c 	lsl.w	r0, r1, ip
1a002c80:	fa21 f102 	lsr.w	r1, r1, r2
1a002c84:	e00c      	b.n	1a002ca0 <__adddf3+0x184>
1a002c86:	f102 0214 	add.w	r2, r2, #20
1a002c8a:	bfd8      	it	le
1a002c8c:	f1c2 0c20 	rsble	ip, r2, #32
1a002c90:	fa01 f102 	lsl.w	r1, r1, r2
1a002c94:	fa20 fc0c 	lsr.w	ip, r0, ip
1a002c98:	bfdc      	itt	le
1a002c9a:	ea41 010c 	orrle.w	r1, r1, ip
1a002c9e:	4090      	lslle	r0, r2
1a002ca0:	1ae4      	subs	r4, r4, r3
1a002ca2:	bfa2      	ittt	ge
1a002ca4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a002ca8:	4329      	orrge	r1, r5
1a002caa:	bd30      	popge	{r4, r5, pc}
1a002cac:	ea6f 0404 	mvn.w	r4, r4
1a002cb0:	3c1f      	subs	r4, #31
1a002cb2:	da1c      	bge.n	1a002cee <__adddf3+0x1d2>
1a002cb4:	340c      	adds	r4, #12
1a002cb6:	dc0e      	bgt.n	1a002cd6 <__adddf3+0x1ba>
1a002cb8:	f104 0414 	add.w	r4, r4, #20
1a002cbc:	f1c4 0220 	rsb	r2, r4, #32
1a002cc0:	fa20 f004 	lsr.w	r0, r0, r4
1a002cc4:	fa01 f302 	lsl.w	r3, r1, r2
1a002cc8:	ea40 0003 	orr.w	r0, r0, r3
1a002ccc:	fa21 f304 	lsr.w	r3, r1, r4
1a002cd0:	ea45 0103 	orr.w	r1, r5, r3
1a002cd4:	bd30      	pop	{r4, r5, pc}
1a002cd6:	f1c4 040c 	rsb	r4, r4, #12
1a002cda:	f1c4 0220 	rsb	r2, r4, #32
1a002cde:	fa20 f002 	lsr.w	r0, r0, r2
1a002ce2:	fa01 f304 	lsl.w	r3, r1, r4
1a002ce6:	ea40 0003 	orr.w	r0, r0, r3
1a002cea:	4629      	mov	r1, r5
1a002cec:	bd30      	pop	{r4, r5, pc}
1a002cee:	fa21 f004 	lsr.w	r0, r1, r4
1a002cf2:	4629      	mov	r1, r5
1a002cf4:	bd30      	pop	{r4, r5, pc}
1a002cf6:	f094 0f00 	teq	r4, #0
1a002cfa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a002cfe:	bf06      	itte	eq
1a002d00:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a002d04:	3401      	addeq	r4, #1
1a002d06:	3d01      	subne	r5, #1
1a002d08:	e74e      	b.n	1a002ba8 <__adddf3+0x8c>
1a002d0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a002d0e:	bf18      	it	ne
1a002d10:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a002d14:	d029      	beq.n	1a002d6a <__adddf3+0x24e>
1a002d16:	ea94 0f05 	teq	r4, r5
1a002d1a:	bf08      	it	eq
1a002d1c:	ea90 0f02 	teqeq	r0, r2
1a002d20:	d005      	beq.n	1a002d2e <__adddf3+0x212>
1a002d22:	ea54 0c00 	orrs.w	ip, r4, r0
1a002d26:	bf04      	itt	eq
1a002d28:	4619      	moveq	r1, r3
1a002d2a:	4610      	moveq	r0, r2
1a002d2c:	bd30      	pop	{r4, r5, pc}
1a002d2e:	ea91 0f03 	teq	r1, r3
1a002d32:	bf1e      	ittt	ne
1a002d34:	2100      	movne	r1, #0
1a002d36:	2000      	movne	r0, #0
1a002d38:	bd30      	popne	{r4, r5, pc}
1a002d3a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a002d3e:	d105      	bne.n	1a002d4c <__adddf3+0x230>
1a002d40:	0040      	lsls	r0, r0, #1
1a002d42:	4149      	adcs	r1, r1
1a002d44:	bf28      	it	cs
1a002d46:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a002d4a:	bd30      	pop	{r4, r5, pc}
1a002d4c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a002d50:	bf3c      	itt	cc
1a002d52:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a002d56:	bd30      	popcc	{r4, r5, pc}
1a002d58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002d5c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a002d60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002d64:	f04f 0000 	mov.w	r0, #0
1a002d68:	bd30      	pop	{r4, r5, pc}
1a002d6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a002d6e:	bf1a      	itte	ne
1a002d70:	4619      	movne	r1, r3
1a002d72:	4610      	movne	r0, r2
1a002d74:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a002d78:	bf1c      	itt	ne
1a002d7a:	460b      	movne	r3, r1
1a002d7c:	4602      	movne	r2, r0
1a002d7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a002d82:	bf06      	itte	eq
1a002d84:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a002d88:	ea91 0f03 	teqeq	r1, r3
1a002d8c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a002d90:	bd30      	pop	{r4, r5, pc}
1a002d92:	bf00      	nop

1a002d94 <__aeabi_ui2d>:
1a002d94:	f090 0f00 	teq	r0, #0
1a002d98:	bf04      	itt	eq
1a002d9a:	2100      	moveq	r1, #0
1a002d9c:	4770      	bxeq	lr
1a002d9e:	b530      	push	{r4, r5, lr}
1a002da0:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002da4:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002da8:	f04f 0500 	mov.w	r5, #0
1a002dac:	f04f 0100 	mov.w	r1, #0
1a002db0:	e750      	b.n	1a002c54 <__adddf3+0x138>
1a002db2:	bf00      	nop

1a002db4 <__aeabi_i2d>:
1a002db4:	f090 0f00 	teq	r0, #0
1a002db8:	bf04      	itt	eq
1a002dba:	2100      	moveq	r1, #0
1a002dbc:	4770      	bxeq	lr
1a002dbe:	b530      	push	{r4, r5, lr}
1a002dc0:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002dc4:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002dc8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a002dcc:	bf48      	it	mi
1a002dce:	4240      	negmi	r0, r0
1a002dd0:	f04f 0100 	mov.w	r1, #0
1a002dd4:	e73e      	b.n	1a002c54 <__adddf3+0x138>
1a002dd6:	bf00      	nop

1a002dd8 <__aeabi_f2d>:
1a002dd8:	0042      	lsls	r2, r0, #1
1a002dda:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a002dde:	ea4f 0131 	mov.w	r1, r1, rrx
1a002de2:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a002de6:	bf1f      	itttt	ne
1a002de8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a002dec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a002df0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a002df4:	4770      	bxne	lr
1a002df6:	f092 0f00 	teq	r2, #0
1a002dfa:	bf14      	ite	ne
1a002dfc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a002e00:	4770      	bxeq	lr
1a002e02:	b530      	push	{r4, r5, lr}
1a002e04:	f44f 7460 	mov.w	r4, #896	; 0x380
1a002e08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002e0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a002e10:	e720      	b.n	1a002c54 <__adddf3+0x138>
1a002e12:	bf00      	nop

1a002e14 <__aeabi_ul2d>:
1a002e14:	ea50 0201 	orrs.w	r2, r0, r1
1a002e18:	bf08      	it	eq
1a002e1a:	4770      	bxeq	lr
1a002e1c:	b530      	push	{r4, r5, lr}
1a002e1e:	f04f 0500 	mov.w	r5, #0
1a002e22:	e00a      	b.n	1a002e3a <__aeabi_l2d+0x16>

1a002e24 <__aeabi_l2d>:
1a002e24:	ea50 0201 	orrs.w	r2, r0, r1
1a002e28:	bf08      	it	eq
1a002e2a:	4770      	bxeq	lr
1a002e2c:	b530      	push	{r4, r5, lr}
1a002e2e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a002e32:	d502      	bpl.n	1a002e3a <__aeabi_l2d+0x16>
1a002e34:	4240      	negs	r0, r0
1a002e36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a002e3a:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002e3e:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002e42:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a002e46:	f43f aedc 	beq.w	1a002c02 <__adddf3+0xe6>
1a002e4a:	f04f 0203 	mov.w	r2, #3
1a002e4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a002e52:	bf18      	it	ne
1a002e54:	3203      	addne	r2, #3
1a002e56:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a002e5a:	bf18      	it	ne
1a002e5c:	3203      	addne	r2, #3
1a002e5e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a002e62:	f1c2 0320 	rsb	r3, r2, #32
1a002e66:	fa00 fc03 	lsl.w	ip, r0, r3
1a002e6a:	fa20 f002 	lsr.w	r0, r0, r2
1a002e6e:	fa01 fe03 	lsl.w	lr, r1, r3
1a002e72:	ea40 000e 	orr.w	r0, r0, lr
1a002e76:	fa21 f102 	lsr.w	r1, r1, r2
1a002e7a:	4414      	add	r4, r2
1a002e7c:	e6c1      	b.n	1a002c02 <__adddf3+0xe6>
1a002e7e:	bf00      	nop

1a002e80 <__aeabi_d2f>:
1a002e80:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a002e84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
1a002e88:	bf24      	itt	cs
1a002e8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
1a002e8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
1a002e92:	d90d      	bls.n	1a002eb0 <__aeabi_d2f+0x30>
1a002e94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a002e98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
1a002e9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
1a002ea0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
1a002ea4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
1a002ea8:	bf08      	it	eq
1a002eaa:	f020 0001 	biceq.w	r0, r0, #1
1a002eae:	4770      	bx	lr
1a002eb0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
1a002eb4:	d121      	bne.n	1a002efa <__aeabi_d2f+0x7a>
1a002eb6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
1a002eba:	bfbc      	itt	lt
1a002ebc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
1a002ec0:	4770      	bxlt	lr
1a002ec2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002ec6:	ea4f 5252 	mov.w	r2, r2, lsr #21
1a002eca:	f1c2 0218 	rsb	r2, r2, #24
1a002ece:	f1c2 0c20 	rsb	ip, r2, #32
1a002ed2:	fa10 f30c 	lsls.w	r3, r0, ip
1a002ed6:	fa20 f002 	lsr.w	r0, r0, r2
1a002eda:	bf18      	it	ne
1a002edc:	f040 0001 	orrne.w	r0, r0, #1
1a002ee0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a002ee4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
1a002ee8:	fa03 fc0c 	lsl.w	ip, r3, ip
1a002eec:	ea40 000c 	orr.w	r0, r0, ip
1a002ef0:	fa23 f302 	lsr.w	r3, r3, r2
1a002ef4:	ea4f 0343 	mov.w	r3, r3, lsl #1
1a002ef8:	e7cc      	b.n	1a002e94 <__aeabi_d2f+0x14>
1a002efa:	ea7f 5362 	mvns.w	r3, r2, asr #21
1a002efe:	d107      	bne.n	1a002f10 <__aeabi_d2f+0x90>
1a002f00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
1a002f04:	bf1e      	ittt	ne
1a002f06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
1a002f0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
1a002f0e:	4770      	bxne	lr
1a002f10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
1a002f14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a002f18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a002f1c:	4770      	bx	lr
1a002f1e:	bf00      	nop

1a002f20 <__aeabi_uldivmod>:
1a002f20:	b953      	cbnz	r3, 1a002f38 <__aeabi_uldivmod+0x18>
1a002f22:	b94a      	cbnz	r2, 1a002f38 <__aeabi_uldivmod+0x18>
1a002f24:	2900      	cmp	r1, #0
1a002f26:	bf08      	it	eq
1a002f28:	2800      	cmpeq	r0, #0
1a002f2a:	bf1c      	itt	ne
1a002f2c:	f04f 31ff 	movne.w	r1, #4294967295
1a002f30:	f04f 30ff 	movne.w	r0, #4294967295
1a002f34:	f000 b83c 	b.w	1a002fb0 <__aeabi_idiv0>
1a002f38:	b082      	sub	sp, #8
1a002f3a:	46ec      	mov	ip, sp
1a002f3c:	e92d 5000 	stmdb	sp!, {ip, lr}
1a002f40:	f000 f81e 	bl	1a002f80 <__gnu_uldivmod_helper>
1a002f44:	f8dd e004 	ldr.w	lr, [sp, #4]
1a002f48:	b002      	add	sp, #8
1a002f4a:	bc0c      	pop	{r2, r3}
1a002f4c:	4770      	bx	lr
1a002f4e:	bf00      	nop

1a002f50 <__gnu_ldivmod_helper>:
1a002f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002f54:	9c06      	ldr	r4, [sp, #24]
1a002f56:	4615      	mov	r5, r2
1a002f58:	4606      	mov	r6, r0
1a002f5a:	460f      	mov	r7, r1
1a002f5c:	4698      	mov	r8, r3
1a002f5e:	f000 fa3b 	bl	1a0033d8 <__divdi3>
1a002f62:	fb05 f301 	mul.w	r3, r5, r1
1a002f66:	fb00 3808 	mla	r8, r0, r8, r3
1a002f6a:	fba5 2300 	umull	r2, r3, r5, r0
1a002f6e:	1ab2      	subs	r2, r6, r2
1a002f70:	4443      	add	r3, r8
1a002f72:	eb67 0303 	sbc.w	r3, r7, r3
1a002f76:	e9c4 2300 	strd	r2, r3, [r4]
1a002f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002f7e:	bf00      	nop

1a002f80 <__gnu_uldivmod_helper>:
1a002f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002f84:	9c06      	ldr	r4, [sp, #24]
1a002f86:	4690      	mov	r8, r2
1a002f88:	4606      	mov	r6, r0
1a002f8a:	460f      	mov	r7, r1
1a002f8c:	461d      	mov	r5, r3
1a002f8e:	f000 fb71 	bl	1a003674 <__udivdi3>
1a002f92:	fb00 f505 	mul.w	r5, r0, r5
1a002f96:	fba0 2308 	umull	r2, r3, r0, r8
1a002f9a:	fb08 5501 	mla	r5, r8, r1, r5
1a002f9e:	1ab2      	subs	r2, r6, r2
1a002fa0:	442b      	add	r3, r5
1a002fa2:	eb67 0303 	sbc.w	r3, r7, r3
1a002fa6:	e9c4 2300 	strd	r2, r3, [r4]
1a002faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002fae:	bf00      	nop

1a002fb0 <__aeabi_idiv0>:
1a002fb0:	4770      	bx	lr
1a002fb2:	bf00      	nop

1a002fb4 <__aeabi_dmul>:
1a002fb4:	b570      	push	{r4, r5, r6, lr}
1a002fb6:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a002fba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a002fbe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a002fc2:	bf1d      	ittte	ne
1a002fc4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a002fc8:	ea94 0f0c 	teqne	r4, ip
1a002fcc:	ea95 0f0c 	teqne	r5, ip
1a002fd0:	f000 f8de 	bleq	1a003190 <__aeabi_dmul+0x1dc>
1a002fd4:	442c      	add	r4, r5
1a002fd6:	ea81 0603 	eor.w	r6, r1, r3
1a002fda:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a002fde:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a002fe2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a002fe6:	bf18      	it	ne
1a002fe8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a002fec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002ff0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a002ff4:	d038      	beq.n	1a003068 <__aeabi_dmul+0xb4>
1a002ff6:	fba0 ce02 	umull	ip, lr, r0, r2
1a002ffa:	f04f 0500 	mov.w	r5, #0
1a002ffe:	fbe1 e502 	umlal	lr, r5, r1, r2
1a003002:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a003006:	fbe0 e503 	umlal	lr, r5, r0, r3
1a00300a:	f04f 0600 	mov.w	r6, #0
1a00300e:	fbe1 5603 	umlal	r5, r6, r1, r3
1a003012:	f09c 0f00 	teq	ip, #0
1a003016:	bf18      	it	ne
1a003018:	f04e 0e01 	orrne.w	lr, lr, #1
1a00301c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a003020:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a003024:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a003028:	d204      	bcs.n	1a003034 <__aeabi_dmul+0x80>
1a00302a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a00302e:	416d      	adcs	r5, r5
1a003030:	eb46 0606 	adc.w	r6, r6, r6
1a003034:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a003038:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a00303c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a003040:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a003044:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a003048:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a00304c:	bf88      	it	hi
1a00304e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a003052:	d81e      	bhi.n	1a003092 <__aeabi_dmul+0xde>
1a003054:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a003058:	bf08      	it	eq
1a00305a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a00305e:	f150 0000 	adcs.w	r0, r0, #0
1a003062:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a003066:	bd70      	pop	{r4, r5, r6, pc}
1a003068:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a00306c:	ea46 0101 	orr.w	r1, r6, r1
1a003070:	ea40 0002 	orr.w	r0, r0, r2
1a003074:	ea81 0103 	eor.w	r1, r1, r3
1a003078:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a00307c:	bfc2      	ittt	gt
1a00307e:	ebd4 050c 	rsbsgt	r5, r4, ip
1a003082:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a003086:	bd70      	popgt	{r4, r5, r6, pc}
1a003088:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a00308c:	f04f 0e00 	mov.w	lr, #0
1a003090:	3c01      	subs	r4, #1
1a003092:	f300 80ab 	bgt.w	1a0031ec <__aeabi_dmul+0x238>
1a003096:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a00309a:	bfde      	ittt	le
1a00309c:	2000      	movle	r0, #0
1a00309e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a0030a2:	bd70      	pople	{r4, r5, r6, pc}
1a0030a4:	f1c4 0400 	rsb	r4, r4, #0
1a0030a8:	3c20      	subs	r4, #32
1a0030aa:	da35      	bge.n	1a003118 <__aeabi_dmul+0x164>
1a0030ac:	340c      	adds	r4, #12
1a0030ae:	dc1b      	bgt.n	1a0030e8 <__aeabi_dmul+0x134>
1a0030b0:	f104 0414 	add.w	r4, r4, #20
1a0030b4:	f1c4 0520 	rsb	r5, r4, #32
1a0030b8:	fa00 f305 	lsl.w	r3, r0, r5
1a0030bc:	fa20 f004 	lsr.w	r0, r0, r4
1a0030c0:	fa01 f205 	lsl.w	r2, r1, r5
1a0030c4:	ea40 0002 	orr.w	r0, r0, r2
1a0030c8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a0030cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a0030d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a0030d4:	fa21 f604 	lsr.w	r6, r1, r4
1a0030d8:	eb42 0106 	adc.w	r1, r2, r6
1a0030dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a0030e0:	bf08      	it	eq
1a0030e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a0030e6:	bd70      	pop	{r4, r5, r6, pc}
1a0030e8:	f1c4 040c 	rsb	r4, r4, #12
1a0030ec:	f1c4 0520 	rsb	r5, r4, #32
1a0030f0:	fa00 f304 	lsl.w	r3, r0, r4
1a0030f4:	fa20 f005 	lsr.w	r0, r0, r5
1a0030f8:	fa01 f204 	lsl.w	r2, r1, r4
1a0030fc:	ea40 0002 	orr.w	r0, r0, r2
1a003100:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a003104:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a003108:	f141 0100 	adc.w	r1, r1, #0
1a00310c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a003110:	bf08      	it	eq
1a003112:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a003116:	bd70      	pop	{r4, r5, r6, pc}
1a003118:	f1c4 0520 	rsb	r5, r4, #32
1a00311c:	fa00 f205 	lsl.w	r2, r0, r5
1a003120:	ea4e 0e02 	orr.w	lr, lr, r2
1a003124:	fa20 f304 	lsr.w	r3, r0, r4
1a003128:	fa01 f205 	lsl.w	r2, r1, r5
1a00312c:	ea43 0302 	orr.w	r3, r3, r2
1a003130:	fa21 f004 	lsr.w	r0, r1, r4
1a003134:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a003138:	fa21 f204 	lsr.w	r2, r1, r4
1a00313c:	ea20 0002 	bic.w	r0, r0, r2
1a003140:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a003144:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a003148:	bf08      	it	eq
1a00314a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a00314e:	bd70      	pop	{r4, r5, r6, pc}
1a003150:	f094 0f00 	teq	r4, #0
1a003154:	d10f      	bne.n	1a003176 <__aeabi_dmul+0x1c2>
1a003156:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a00315a:	0040      	lsls	r0, r0, #1
1a00315c:	eb41 0101 	adc.w	r1, r1, r1
1a003160:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a003164:	bf08      	it	eq
1a003166:	3c01      	subeq	r4, #1
1a003168:	d0f7      	beq.n	1a00315a <__aeabi_dmul+0x1a6>
1a00316a:	ea41 0106 	orr.w	r1, r1, r6
1a00316e:	f095 0f00 	teq	r5, #0
1a003172:	bf18      	it	ne
1a003174:	4770      	bxne	lr
1a003176:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a00317a:	0052      	lsls	r2, r2, #1
1a00317c:	eb43 0303 	adc.w	r3, r3, r3
1a003180:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a003184:	bf08      	it	eq
1a003186:	3d01      	subeq	r5, #1
1a003188:	d0f7      	beq.n	1a00317a <__aeabi_dmul+0x1c6>
1a00318a:	ea43 0306 	orr.w	r3, r3, r6
1a00318e:	4770      	bx	lr
1a003190:	ea94 0f0c 	teq	r4, ip
1a003194:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a003198:	bf18      	it	ne
1a00319a:	ea95 0f0c 	teqne	r5, ip
1a00319e:	d00c      	beq.n	1a0031ba <__aeabi_dmul+0x206>
1a0031a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a0031a4:	bf18      	it	ne
1a0031a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a0031aa:	d1d1      	bne.n	1a003150 <__aeabi_dmul+0x19c>
1a0031ac:	ea81 0103 	eor.w	r1, r1, r3
1a0031b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0031b4:	f04f 0000 	mov.w	r0, #0
1a0031b8:	bd70      	pop	{r4, r5, r6, pc}
1a0031ba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a0031be:	bf06      	itte	eq
1a0031c0:	4610      	moveq	r0, r2
1a0031c2:	4619      	moveq	r1, r3
1a0031c4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a0031c8:	d019      	beq.n	1a0031fe <__aeabi_dmul+0x24a>
1a0031ca:	ea94 0f0c 	teq	r4, ip
1a0031ce:	d102      	bne.n	1a0031d6 <__aeabi_dmul+0x222>
1a0031d0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a0031d4:	d113      	bne.n	1a0031fe <__aeabi_dmul+0x24a>
1a0031d6:	ea95 0f0c 	teq	r5, ip
1a0031da:	d105      	bne.n	1a0031e8 <__aeabi_dmul+0x234>
1a0031dc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a0031e0:	bf1c      	itt	ne
1a0031e2:	4610      	movne	r0, r2
1a0031e4:	4619      	movne	r1, r3
1a0031e6:	d10a      	bne.n	1a0031fe <__aeabi_dmul+0x24a>
1a0031e8:	ea81 0103 	eor.w	r1, r1, r3
1a0031ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0031f0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a0031f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0031f8:	f04f 0000 	mov.w	r0, #0
1a0031fc:	bd70      	pop	{r4, r5, r6, pc}
1a0031fe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a003202:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a003206:	bd70      	pop	{r4, r5, r6, pc}

1a003208 <__aeabi_ddiv>:
1a003208:	b570      	push	{r4, r5, r6, lr}
1a00320a:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a00320e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a003212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a003216:	bf1d      	ittte	ne
1a003218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a00321c:	ea94 0f0c 	teqne	r4, ip
1a003220:	ea95 0f0c 	teqne	r5, ip
1a003224:	f000 f8a7 	bleq	1a003376 <__aeabi_ddiv+0x16e>
1a003228:	eba4 0405 	sub.w	r4, r4, r5
1a00322c:	ea81 0e03 	eor.w	lr, r1, r3
1a003230:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a003234:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a003238:	f000 8088 	beq.w	1a00334c <__aeabi_ddiv+0x144>
1a00323c:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a003240:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a003244:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a003248:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a00324c:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a003250:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a003254:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a003258:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a00325c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a003260:	429d      	cmp	r5, r3
1a003262:	bf08      	it	eq
1a003264:	4296      	cmpeq	r6, r2
1a003266:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a00326a:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a00326e:	d202      	bcs.n	1a003276 <__aeabi_ddiv+0x6e>
1a003270:	085b      	lsrs	r3, r3, #1
1a003272:	ea4f 0232 	mov.w	r2, r2, rrx
1a003276:	1ab6      	subs	r6, r6, r2
1a003278:	eb65 0503 	sbc.w	r5, r5, r3
1a00327c:	085b      	lsrs	r3, r3, #1
1a00327e:	ea4f 0232 	mov.w	r2, r2, rrx
1a003282:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a003286:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a00328a:	ebb6 0e02 	subs.w	lr, r6, r2
1a00328e:	eb75 0e03 	sbcs.w	lr, r5, r3
1a003292:	bf22      	ittt	cs
1a003294:	1ab6      	subcs	r6, r6, r2
1a003296:	4675      	movcs	r5, lr
1a003298:	ea40 000c 	orrcs.w	r0, r0, ip
1a00329c:	085b      	lsrs	r3, r3, #1
1a00329e:	ea4f 0232 	mov.w	r2, r2, rrx
1a0032a2:	ebb6 0e02 	subs.w	lr, r6, r2
1a0032a6:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0032aa:	bf22      	ittt	cs
1a0032ac:	1ab6      	subcs	r6, r6, r2
1a0032ae:	4675      	movcs	r5, lr
1a0032b0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a0032b4:	085b      	lsrs	r3, r3, #1
1a0032b6:	ea4f 0232 	mov.w	r2, r2, rrx
1a0032ba:	ebb6 0e02 	subs.w	lr, r6, r2
1a0032be:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0032c2:	bf22      	ittt	cs
1a0032c4:	1ab6      	subcs	r6, r6, r2
1a0032c6:	4675      	movcs	r5, lr
1a0032c8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a0032cc:	085b      	lsrs	r3, r3, #1
1a0032ce:	ea4f 0232 	mov.w	r2, r2, rrx
1a0032d2:	ebb6 0e02 	subs.w	lr, r6, r2
1a0032d6:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0032da:	bf22      	ittt	cs
1a0032dc:	1ab6      	subcs	r6, r6, r2
1a0032de:	4675      	movcs	r5, lr
1a0032e0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a0032e4:	ea55 0e06 	orrs.w	lr, r5, r6
1a0032e8:	d018      	beq.n	1a00331c <__aeabi_ddiv+0x114>
1a0032ea:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a0032ee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a0032f2:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a0032f6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a0032fa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a0032fe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a003302:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a003306:	d1c0      	bne.n	1a00328a <__aeabi_ddiv+0x82>
1a003308:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a00330c:	d10b      	bne.n	1a003326 <__aeabi_ddiv+0x11e>
1a00330e:	ea41 0100 	orr.w	r1, r1, r0
1a003312:	f04f 0000 	mov.w	r0, #0
1a003316:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a00331a:	e7b6      	b.n	1a00328a <__aeabi_ddiv+0x82>
1a00331c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a003320:	bf04      	itt	eq
1a003322:	4301      	orreq	r1, r0
1a003324:	2000      	moveq	r0, #0
1a003326:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a00332a:	bf88      	it	hi
1a00332c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a003330:	f63f aeaf 	bhi.w	1a003092 <__aeabi_dmul+0xde>
1a003334:	ebb5 0c03 	subs.w	ip, r5, r3
1a003338:	bf04      	itt	eq
1a00333a:	ebb6 0c02 	subseq.w	ip, r6, r2
1a00333e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a003342:	f150 0000 	adcs.w	r0, r0, #0
1a003346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a00334a:	bd70      	pop	{r4, r5, r6, pc}
1a00334c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a003350:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a003354:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a003358:	bfc2      	ittt	gt
1a00335a:	ebd4 050c 	rsbsgt	r5, r4, ip
1a00335e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a003362:	bd70      	popgt	{r4, r5, r6, pc}
1a003364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a003368:	f04f 0e00 	mov.w	lr, #0
1a00336c:	3c01      	subs	r4, #1
1a00336e:	e690      	b.n	1a003092 <__aeabi_dmul+0xde>
1a003370:	ea45 0e06 	orr.w	lr, r5, r6
1a003374:	e68d      	b.n	1a003092 <__aeabi_dmul+0xde>
1a003376:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a00337a:	ea94 0f0c 	teq	r4, ip
1a00337e:	bf08      	it	eq
1a003380:	ea95 0f0c 	teqeq	r5, ip
1a003384:	f43f af3b 	beq.w	1a0031fe <__aeabi_dmul+0x24a>
1a003388:	ea94 0f0c 	teq	r4, ip
1a00338c:	d10a      	bne.n	1a0033a4 <__aeabi_ddiv+0x19c>
1a00338e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a003392:	f47f af34 	bne.w	1a0031fe <__aeabi_dmul+0x24a>
1a003396:	ea95 0f0c 	teq	r5, ip
1a00339a:	f47f af25 	bne.w	1a0031e8 <__aeabi_dmul+0x234>
1a00339e:	4610      	mov	r0, r2
1a0033a0:	4619      	mov	r1, r3
1a0033a2:	e72c      	b.n	1a0031fe <__aeabi_dmul+0x24a>
1a0033a4:	ea95 0f0c 	teq	r5, ip
1a0033a8:	d106      	bne.n	1a0033b8 <__aeabi_ddiv+0x1b0>
1a0033aa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a0033ae:	f43f aefd 	beq.w	1a0031ac <__aeabi_dmul+0x1f8>
1a0033b2:	4610      	mov	r0, r2
1a0033b4:	4619      	mov	r1, r3
1a0033b6:	e722      	b.n	1a0031fe <__aeabi_dmul+0x24a>
1a0033b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a0033bc:	bf18      	it	ne
1a0033be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a0033c2:	f47f aec5 	bne.w	1a003150 <__aeabi_dmul+0x19c>
1a0033c6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a0033ca:	f47f af0d 	bne.w	1a0031e8 <__aeabi_dmul+0x234>
1a0033ce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a0033d2:	f47f aeeb 	bne.w	1a0031ac <__aeabi_dmul+0x1f8>
1a0033d6:	e712      	b.n	1a0031fe <__aeabi_dmul+0x24a>

1a0033d8 <__divdi3>:
1a0033d8:	2900      	cmp	r1, #0
1a0033da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0033de:	f2c0 80a6 	blt.w	1a00352e <__divdi3+0x156>
1a0033e2:	2600      	movs	r6, #0
1a0033e4:	2b00      	cmp	r3, #0
1a0033e6:	f2c0 809c 	blt.w	1a003522 <__divdi3+0x14a>
1a0033ea:	4688      	mov	r8, r1
1a0033ec:	4694      	mov	ip, r2
1a0033ee:	469e      	mov	lr, r3
1a0033f0:	4615      	mov	r5, r2
1a0033f2:	4604      	mov	r4, r0
1a0033f4:	460f      	mov	r7, r1
1a0033f6:	2b00      	cmp	r3, #0
1a0033f8:	d13d      	bne.n	1a003476 <__divdi3+0x9e>
1a0033fa:	428a      	cmp	r2, r1
1a0033fc:	d959      	bls.n	1a0034b2 <__divdi3+0xda>
1a0033fe:	fab2 f382 	clz	r3, r2
1a003402:	b13b      	cbz	r3, 1a003414 <__divdi3+0x3c>
1a003404:	f1c3 0220 	rsb	r2, r3, #32
1a003408:	409f      	lsls	r7, r3
1a00340a:	fa20 f202 	lsr.w	r2, r0, r2
1a00340e:	409d      	lsls	r5, r3
1a003410:	4317      	orrs	r7, r2
1a003412:	409c      	lsls	r4, r3
1a003414:	0c29      	lsrs	r1, r5, #16
1a003416:	0c22      	lsrs	r2, r4, #16
1a003418:	fbb7 fef1 	udiv	lr, r7, r1
1a00341c:	b2a8      	uxth	r0, r5
1a00341e:	fb01 771e 	mls	r7, r1, lr, r7
1a003422:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
1a003426:	fb00 f30e 	mul.w	r3, r0, lr
1a00342a:	42bb      	cmp	r3, r7
1a00342c:	d90a      	bls.n	1a003444 <__divdi3+0x6c>
1a00342e:	197f      	adds	r7, r7, r5
1a003430:	f10e 32ff 	add.w	r2, lr, #4294967295
1a003434:	f080 8105 	bcs.w	1a003642 <__divdi3+0x26a>
1a003438:	42bb      	cmp	r3, r7
1a00343a:	f240 8102 	bls.w	1a003642 <__divdi3+0x26a>
1a00343e:	f1ae 0e02 	sub.w	lr, lr, #2
1a003442:	442f      	add	r7, r5
1a003444:	1aff      	subs	r7, r7, r3
1a003446:	b2a4      	uxth	r4, r4
1a003448:	fbb7 f3f1 	udiv	r3, r7, r1
1a00344c:	fb01 7713 	mls	r7, r1, r3, r7
1a003450:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a003454:	fb00 f003 	mul.w	r0, r0, r3
1a003458:	42b8      	cmp	r0, r7
1a00345a:	d908      	bls.n	1a00346e <__divdi3+0x96>
1a00345c:	197f      	adds	r7, r7, r5
1a00345e:	f103 32ff 	add.w	r2, r3, #4294967295
1a003462:	f080 80f0 	bcs.w	1a003646 <__divdi3+0x26e>
1a003466:	42b8      	cmp	r0, r7
1a003468:	f240 80ed 	bls.w	1a003646 <__divdi3+0x26e>
1a00346c:	3b02      	subs	r3, #2
1a00346e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
1a003472:	2200      	movs	r2, #0
1a003474:	e003      	b.n	1a00347e <__divdi3+0xa6>
1a003476:	428b      	cmp	r3, r1
1a003478:	d90f      	bls.n	1a00349a <__divdi3+0xc2>
1a00347a:	2200      	movs	r2, #0
1a00347c:	4613      	mov	r3, r2
1a00347e:	1c34      	adds	r4, r6, #0
1a003480:	bf18      	it	ne
1a003482:	2401      	movne	r4, #1
1a003484:	4260      	negs	r0, r4
1a003486:	f04f 0500 	mov.w	r5, #0
1a00348a:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
1a00348e:	4058      	eors	r0, r3
1a003490:	4051      	eors	r1, r2
1a003492:	1900      	adds	r0, r0, r4
1a003494:	4169      	adcs	r1, r5
1a003496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00349a:	fab3 f283 	clz	r2, r3
1a00349e:	2a00      	cmp	r2, #0
1a0034a0:	f040 8086 	bne.w	1a0035b0 <__divdi3+0x1d8>
1a0034a4:	428b      	cmp	r3, r1
1a0034a6:	d302      	bcc.n	1a0034ae <__divdi3+0xd6>
1a0034a8:	4584      	cmp	ip, r0
1a0034aa:	f200 80db 	bhi.w	1a003664 <__divdi3+0x28c>
1a0034ae:	2301      	movs	r3, #1
1a0034b0:	e7e5      	b.n	1a00347e <__divdi3+0xa6>
1a0034b2:	b912      	cbnz	r2, 1a0034ba <__divdi3+0xe2>
1a0034b4:	2301      	movs	r3, #1
1a0034b6:	fbb3 f5f2 	udiv	r5, r3, r2
1a0034ba:	fab5 f085 	clz	r0, r5
1a0034be:	2800      	cmp	r0, #0
1a0034c0:	d13b      	bne.n	1a00353a <__divdi3+0x162>
1a0034c2:	1b78      	subs	r0, r7, r5
1a0034c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0034c8:	fa1f fc85 	uxth.w	ip, r5
1a0034cc:	2201      	movs	r2, #1
1a0034ce:	fbb0 f8fe 	udiv	r8, r0, lr
1a0034d2:	0c21      	lsrs	r1, r4, #16
1a0034d4:	fb0e 0718 	mls	r7, lr, r8, r0
1a0034d8:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
1a0034dc:	fb0c f308 	mul.w	r3, ip, r8
1a0034e0:	42bb      	cmp	r3, r7
1a0034e2:	d907      	bls.n	1a0034f4 <__divdi3+0x11c>
1a0034e4:	197f      	adds	r7, r7, r5
1a0034e6:	f108 31ff 	add.w	r1, r8, #4294967295
1a0034ea:	d202      	bcs.n	1a0034f2 <__divdi3+0x11a>
1a0034ec:	42bb      	cmp	r3, r7
1a0034ee:	f200 80bd 	bhi.w	1a00366c <__divdi3+0x294>
1a0034f2:	4688      	mov	r8, r1
1a0034f4:	1aff      	subs	r7, r7, r3
1a0034f6:	b2a4      	uxth	r4, r4
1a0034f8:	fbb7 f3fe 	udiv	r3, r7, lr
1a0034fc:	fb0e 7713 	mls	r7, lr, r3, r7
1a003500:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a003504:	fb0c fc03 	mul.w	ip, ip, r3
1a003508:	45bc      	cmp	ip, r7
1a00350a:	d907      	bls.n	1a00351c <__divdi3+0x144>
1a00350c:	197f      	adds	r7, r7, r5
1a00350e:	f103 31ff 	add.w	r1, r3, #4294967295
1a003512:	d202      	bcs.n	1a00351a <__divdi3+0x142>
1a003514:	45bc      	cmp	ip, r7
1a003516:	f200 80a7 	bhi.w	1a003668 <__divdi3+0x290>
1a00351a:	460b      	mov	r3, r1
1a00351c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003520:	e7ad      	b.n	1a00347e <__divdi3+0xa6>
1a003522:	4252      	negs	r2, r2
1a003524:	ea6f 0606 	mvn.w	r6, r6
1a003528:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a00352c:	e75d      	b.n	1a0033ea <__divdi3+0x12>
1a00352e:	4240      	negs	r0, r0
1a003530:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a003534:	f04f 36ff 	mov.w	r6, #4294967295
1a003538:	e754      	b.n	1a0033e4 <__divdi3+0xc>
1a00353a:	f1c0 0220 	rsb	r2, r0, #32
1a00353e:	fa24 f102 	lsr.w	r1, r4, r2
1a003542:	fa07 f300 	lsl.w	r3, r7, r0
1a003546:	4085      	lsls	r5, r0
1a003548:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00354c:	40d7      	lsrs	r7, r2
1a00354e:	4319      	orrs	r1, r3
1a003550:	fbb7 f2fe 	udiv	r2, r7, lr
1a003554:	0c0b      	lsrs	r3, r1, #16
1a003556:	fb0e 7712 	mls	r7, lr, r2, r7
1a00355a:	fa1f fc85 	uxth.w	ip, r5
1a00355e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
1a003562:	fb0c f702 	mul.w	r7, ip, r2
1a003566:	429f      	cmp	r7, r3
1a003568:	fa04 f400 	lsl.w	r4, r4, r0
1a00356c:	d907      	bls.n	1a00357e <__divdi3+0x1a6>
1a00356e:	195b      	adds	r3, r3, r5
1a003570:	f102 30ff 	add.w	r0, r2, #4294967295
1a003574:	d274      	bcs.n	1a003660 <__divdi3+0x288>
1a003576:	429f      	cmp	r7, r3
1a003578:	d972      	bls.n	1a003660 <__divdi3+0x288>
1a00357a:	3a02      	subs	r2, #2
1a00357c:	442b      	add	r3, r5
1a00357e:	1bdf      	subs	r7, r3, r7
1a003580:	b289      	uxth	r1, r1
1a003582:	fbb7 f8fe 	udiv	r8, r7, lr
1a003586:	fb0e 7318 	mls	r3, lr, r8, r7
1a00358a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a00358e:	fb0c f708 	mul.w	r7, ip, r8
1a003592:	429f      	cmp	r7, r3
1a003594:	d908      	bls.n	1a0035a8 <__divdi3+0x1d0>
1a003596:	195b      	adds	r3, r3, r5
1a003598:	f108 31ff 	add.w	r1, r8, #4294967295
1a00359c:	d25c      	bcs.n	1a003658 <__divdi3+0x280>
1a00359e:	429f      	cmp	r7, r3
1a0035a0:	d95a      	bls.n	1a003658 <__divdi3+0x280>
1a0035a2:	f1a8 0802 	sub.w	r8, r8, #2
1a0035a6:	442b      	add	r3, r5
1a0035a8:	1bd8      	subs	r0, r3, r7
1a0035aa:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
1a0035ae:	e78e      	b.n	1a0034ce <__divdi3+0xf6>
1a0035b0:	f1c2 0320 	rsb	r3, r2, #32
1a0035b4:	fa2c f103 	lsr.w	r1, ip, r3
1a0035b8:	fa0e fe02 	lsl.w	lr, lr, r2
1a0035bc:	fa20 f703 	lsr.w	r7, r0, r3
1a0035c0:	ea41 0e0e 	orr.w	lr, r1, lr
1a0035c4:	fa08 f002 	lsl.w	r0, r8, r2
1a0035c8:	fa28 f103 	lsr.w	r1, r8, r3
1a0035cc:	ea4f 451e 	mov.w	r5, lr, lsr #16
1a0035d0:	4338      	orrs	r0, r7
1a0035d2:	fbb1 f8f5 	udiv	r8, r1, r5
1a0035d6:	0c03      	lsrs	r3, r0, #16
1a0035d8:	fb05 1118 	mls	r1, r5, r8, r1
1a0035dc:	fa1f f78e 	uxth.w	r7, lr
1a0035e0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a0035e4:	fb07 f308 	mul.w	r3, r7, r8
1a0035e8:	428b      	cmp	r3, r1
1a0035ea:	fa0c fc02 	lsl.w	ip, ip, r2
1a0035ee:	d909      	bls.n	1a003604 <__divdi3+0x22c>
1a0035f0:	eb11 010e 	adds.w	r1, r1, lr
1a0035f4:	f108 39ff 	add.w	r9, r8, #4294967295
1a0035f8:	d230      	bcs.n	1a00365c <__divdi3+0x284>
1a0035fa:	428b      	cmp	r3, r1
1a0035fc:	d92e      	bls.n	1a00365c <__divdi3+0x284>
1a0035fe:	f1a8 0802 	sub.w	r8, r8, #2
1a003602:	4471      	add	r1, lr
1a003604:	1ac9      	subs	r1, r1, r3
1a003606:	b280      	uxth	r0, r0
1a003608:	fbb1 f3f5 	udiv	r3, r1, r5
1a00360c:	fb05 1113 	mls	r1, r5, r3, r1
1a003610:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a003614:	fb07 f703 	mul.w	r7, r7, r3
1a003618:	428f      	cmp	r7, r1
1a00361a:	d908      	bls.n	1a00362e <__divdi3+0x256>
1a00361c:	eb11 010e 	adds.w	r1, r1, lr
1a003620:	f103 30ff 	add.w	r0, r3, #4294967295
1a003624:	d216      	bcs.n	1a003654 <__divdi3+0x27c>
1a003626:	428f      	cmp	r7, r1
1a003628:	d914      	bls.n	1a003654 <__divdi3+0x27c>
1a00362a:	3b02      	subs	r3, #2
1a00362c:	4471      	add	r1, lr
1a00362e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003632:	1bc9      	subs	r1, r1, r7
1a003634:	fba3 890c 	umull	r8, r9, r3, ip
1a003638:	4549      	cmp	r1, r9
1a00363a:	d309      	bcc.n	1a003650 <__divdi3+0x278>
1a00363c:	d005      	beq.n	1a00364a <__divdi3+0x272>
1a00363e:	2200      	movs	r2, #0
1a003640:	e71d      	b.n	1a00347e <__divdi3+0xa6>
1a003642:	4696      	mov	lr, r2
1a003644:	e6fe      	b.n	1a003444 <__divdi3+0x6c>
1a003646:	4613      	mov	r3, r2
1a003648:	e711      	b.n	1a00346e <__divdi3+0x96>
1a00364a:	4094      	lsls	r4, r2
1a00364c:	4544      	cmp	r4, r8
1a00364e:	d2f6      	bcs.n	1a00363e <__divdi3+0x266>
1a003650:	3b01      	subs	r3, #1
1a003652:	e7f4      	b.n	1a00363e <__divdi3+0x266>
1a003654:	4603      	mov	r3, r0
1a003656:	e7ea      	b.n	1a00362e <__divdi3+0x256>
1a003658:	4688      	mov	r8, r1
1a00365a:	e7a5      	b.n	1a0035a8 <__divdi3+0x1d0>
1a00365c:	46c8      	mov	r8, r9
1a00365e:	e7d1      	b.n	1a003604 <__divdi3+0x22c>
1a003660:	4602      	mov	r2, r0
1a003662:	e78c      	b.n	1a00357e <__divdi3+0x1a6>
1a003664:	4613      	mov	r3, r2
1a003666:	e70a      	b.n	1a00347e <__divdi3+0xa6>
1a003668:	3b02      	subs	r3, #2
1a00366a:	e757      	b.n	1a00351c <__divdi3+0x144>
1a00366c:	f1a8 0802 	sub.w	r8, r8, #2
1a003670:	442f      	add	r7, r5
1a003672:	e73f      	b.n	1a0034f4 <__divdi3+0x11c>

1a003674 <__udivdi3>:
1a003674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003678:	2b00      	cmp	r3, #0
1a00367a:	d144      	bne.n	1a003706 <__udivdi3+0x92>
1a00367c:	428a      	cmp	r2, r1
1a00367e:	4615      	mov	r5, r2
1a003680:	4604      	mov	r4, r0
1a003682:	d94f      	bls.n	1a003724 <__udivdi3+0xb0>
1a003684:	fab2 f782 	clz	r7, r2
1a003688:	460e      	mov	r6, r1
1a00368a:	b14f      	cbz	r7, 1a0036a0 <__udivdi3+0x2c>
1a00368c:	f1c7 0320 	rsb	r3, r7, #32
1a003690:	40b9      	lsls	r1, r7
1a003692:	fa20 f603 	lsr.w	r6, r0, r3
1a003696:	fa02 f507 	lsl.w	r5, r2, r7
1a00369a:	430e      	orrs	r6, r1
1a00369c:	fa00 f407 	lsl.w	r4, r0, r7
1a0036a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0036a4:	0c23      	lsrs	r3, r4, #16
1a0036a6:	fbb6 f0fe 	udiv	r0, r6, lr
1a0036aa:	b2af      	uxth	r7, r5
1a0036ac:	fb0e 6110 	mls	r1, lr, r0, r6
1a0036b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0036b4:	fb07 f100 	mul.w	r1, r7, r0
1a0036b8:	4299      	cmp	r1, r3
1a0036ba:	d909      	bls.n	1a0036d0 <__udivdi3+0x5c>
1a0036bc:	195b      	adds	r3, r3, r5
1a0036be:	f100 32ff 	add.w	r2, r0, #4294967295
1a0036c2:	f080 80ec 	bcs.w	1a00389e <__udivdi3+0x22a>
1a0036c6:	4299      	cmp	r1, r3
1a0036c8:	f240 80e9 	bls.w	1a00389e <__udivdi3+0x22a>
1a0036cc:	3802      	subs	r0, #2
1a0036ce:	442b      	add	r3, r5
1a0036d0:	1a5a      	subs	r2, r3, r1
1a0036d2:	b2a4      	uxth	r4, r4
1a0036d4:	fbb2 f3fe 	udiv	r3, r2, lr
1a0036d8:	fb0e 2213 	mls	r2, lr, r3, r2
1a0036dc:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
1a0036e0:	fb07 f703 	mul.w	r7, r7, r3
1a0036e4:	4297      	cmp	r7, r2
1a0036e6:	d908      	bls.n	1a0036fa <__udivdi3+0x86>
1a0036e8:	1952      	adds	r2, r2, r5
1a0036ea:	f103 31ff 	add.w	r1, r3, #4294967295
1a0036ee:	f080 80d8 	bcs.w	1a0038a2 <__udivdi3+0x22e>
1a0036f2:	4297      	cmp	r7, r2
1a0036f4:	f240 80d5 	bls.w	1a0038a2 <__udivdi3+0x22e>
1a0036f8:	3b02      	subs	r3, #2
1a0036fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a0036fe:	2600      	movs	r6, #0
1a003700:	4631      	mov	r1, r6
1a003702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003706:	428b      	cmp	r3, r1
1a003708:	d847      	bhi.n	1a00379a <__udivdi3+0x126>
1a00370a:	fab3 f683 	clz	r6, r3
1a00370e:	2e00      	cmp	r6, #0
1a003710:	d148      	bne.n	1a0037a4 <__udivdi3+0x130>
1a003712:	428b      	cmp	r3, r1
1a003714:	d302      	bcc.n	1a00371c <__udivdi3+0xa8>
1a003716:	4282      	cmp	r2, r0
1a003718:	f200 80cd 	bhi.w	1a0038b6 <__udivdi3+0x242>
1a00371c:	2001      	movs	r0, #1
1a00371e:	4631      	mov	r1, r6
1a003720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003724:	b912      	cbnz	r2, 1a00372c <__udivdi3+0xb8>
1a003726:	2501      	movs	r5, #1
1a003728:	fbb5 f5f2 	udiv	r5, r5, r2
1a00372c:	fab5 f885 	clz	r8, r5
1a003730:	f1b8 0f00 	cmp.w	r8, #0
1a003734:	d177      	bne.n	1a003826 <__udivdi3+0x1b2>
1a003736:	1b4a      	subs	r2, r1, r5
1a003738:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00373c:	b2af      	uxth	r7, r5
1a00373e:	2601      	movs	r6, #1
1a003740:	fbb2 f0fe 	udiv	r0, r2, lr
1a003744:	0c23      	lsrs	r3, r4, #16
1a003746:	fb0e 2110 	mls	r1, lr, r0, r2
1a00374a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a00374e:	fb07 f300 	mul.w	r3, r7, r0
1a003752:	428b      	cmp	r3, r1
1a003754:	d907      	bls.n	1a003766 <__udivdi3+0xf2>
1a003756:	1949      	adds	r1, r1, r5
1a003758:	f100 32ff 	add.w	r2, r0, #4294967295
1a00375c:	d202      	bcs.n	1a003764 <__udivdi3+0xf0>
1a00375e:	428b      	cmp	r3, r1
1a003760:	f200 80ba 	bhi.w	1a0038d8 <__udivdi3+0x264>
1a003764:	4610      	mov	r0, r2
1a003766:	1ac9      	subs	r1, r1, r3
1a003768:	b2a4      	uxth	r4, r4
1a00376a:	fbb1 f3fe 	udiv	r3, r1, lr
1a00376e:	fb0e 1113 	mls	r1, lr, r3, r1
1a003772:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
1a003776:	fb07 f703 	mul.w	r7, r7, r3
1a00377a:	42a7      	cmp	r7, r4
1a00377c:	d908      	bls.n	1a003790 <__udivdi3+0x11c>
1a00377e:	1964      	adds	r4, r4, r5
1a003780:	f103 32ff 	add.w	r2, r3, #4294967295
1a003784:	f080 808f 	bcs.w	1a0038a6 <__udivdi3+0x232>
1a003788:	42a7      	cmp	r7, r4
1a00378a:	f240 808c 	bls.w	1a0038a6 <__udivdi3+0x232>
1a00378e:	3b02      	subs	r3, #2
1a003790:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a003794:	4631      	mov	r1, r6
1a003796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00379a:	2600      	movs	r6, #0
1a00379c:	4630      	mov	r0, r6
1a00379e:	4631      	mov	r1, r6
1a0037a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0037a4:	f1c6 0420 	rsb	r4, r6, #32
1a0037a8:	fa22 f504 	lsr.w	r5, r2, r4
1a0037ac:	40b3      	lsls	r3, r6
1a0037ae:	432b      	orrs	r3, r5
1a0037b0:	fa20 fc04 	lsr.w	ip, r0, r4
1a0037b4:	fa01 f706 	lsl.w	r7, r1, r6
1a0037b8:	fa21 f504 	lsr.w	r5, r1, r4
1a0037bc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
1a0037c0:	ea4c 0707 	orr.w	r7, ip, r7
1a0037c4:	fbb5 f8fe 	udiv	r8, r5, lr
1a0037c8:	0c39      	lsrs	r1, r7, #16
1a0037ca:	fb0e 5518 	mls	r5, lr, r8, r5
1a0037ce:	fa1f fc83 	uxth.w	ip, r3
1a0037d2:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
1a0037d6:	fb0c f108 	mul.w	r1, ip, r8
1a0037da:	42a9      	cmp	r1, r5
1a0037dc:	fa02 f206 	lsl.w	r2, r2, r6
1a0037e0:	d904      	bls.n	1a0037ec <__udivdi3+0x178>
1a0037e2:	18ed      	adds	r5, r5, r3
1a0037e4:	f108 34ff 	add.w	r4, r8, #4294967295
1a0037e8:	d367      	bcc.n	1a0038ba <__udivdi3+0x246>
1a0037ea:	46a0      	mov	r8, r4
1a0037ec:	1a6d      	subs	r5, r5, r1
1a0037ee:	b2bf      	uxth	r7, r7
1a0037f0:	fbb5 f4fe 	udiv	r4, r5, lr
1a0037f4:	fb0e 5514 	mls	r5, lr, r4, r5
1a0037f8:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
1a0037fc:	fb0c fc04 	mul.w	ip, ip, r4
1a003800:	458c      	cmp	ip, r1
1a003802:	d904      	bls.n	1a00380e <__udivdi3+0x19a>
1a003804:	18c9      	adds	r1, r1, r3
1a003806:	f104 35ff 	add.w	r5, r4, #4294967295
1a00380a:	d35c      	bcc.n	1a0038c6 <__udivdi3+0x252>
1a00380c:	462c      	mov	r4, r5
1a00380e:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
1a003812:	ebcc 0101 	rsb	r1, ip, r1
1a003816:	fba4 2302 	umull	r2, r3, r4, r2
1a00381a:	4299      	cmp	r1, r3
1a00381c:	d348      	bcc.n	1a0038b0 <__udivdi3+0x23c>
1a00381e:	d044      	beq.n	1a0038aa <__udivdi3+0x236>
1a003820:	4620      	mov	r0, r4
1a003822:	2600      	movs	r6, #0
1a003824:	e76c      	b.n	1a003700 <__udivdi3+0x8c>
1a003826:	f1c8 0420 	rsb	r4, r8, #32
1a00382a:	fa01 f308 	lsl.w	r3, r1, r8
1a00382e:	fa05 f508 	lsl.w	r5, r5, r8
1a003832:	fa20 f704 	lsr.w	r7, r0, r4
1a003836:	40e1      	lsrs	r1, r4
1a003838:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00383c:	431f      	orrs	r7, r3
1a00383e:	fbb1 f6fe 	udiv	r6, r1, lr
1a003842:	0c3a      	lsrs	r2, r7, #16
1a003844:	fb0e 1116 	mls	r1, lr, r6, r1
1a003848:	fa1f fc85 	uxth.w	ip, r5
1a00384c:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
1a003850:	fb0c f206 	mul.w	r2, ip, r6
1a003854:	429a      	cmp	r2, r3
1a003856:	fa00 f408 	lsl.w	r4, r0, r8
1a00385a:	d907      	bls.n	1a00386c <__udivdi3+0x1f8>
1a00385c:	195b      	adds	r3, r3, r5
1a00385e:	f106 31ff 	add.w	r1, r6, #4294967295
1a003862:	d237      	bcs.n	1a0038d4 <__udivdi3+0x260>
1a003864:	429a      	cmp	r2, r3
1a003866:	d935      	bls.n	1a0038d4 <__udivdi3+0x260>
1a003868:	3e02      	subs	r6, #2
1a00386a:	442b      	add	r3, r5
1a00386c:	1a9b      	subs	r3, r3, r2
1a00386e:	b2bf      	uxth	r7, r7
1a003870:	fbb3 f0fe 	udiv	r0, r3, lr
1a003874:	fb0e 3310 	mls	r3, lr, r0, r3
1a003878:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
1a00387c:	fb0c f100 	mul.w	r1, ip, r0
1a003880:	4299      	cmp	r1, r3
1a003882:	d907      	bls.n	1a003894 <__udivdi3+0x220>
1a003884:	195b      	adds	r3, r3, r5
1a003886:	f100 32ff 	add.w	r2, r0, #4294967295
1a00388a:	d221      	bcs.n	1a0038d0 <__udivdi3+0x25c>
1a00388c:	4299      	cmp	r1, r3
1a00388e:	d91f      	bls.n	1a0038d0 <__udivdi3+0x25c>
1a003890:	3802      	subs	r0, #2
1a003892:	442b      	add	r3, r5
1a003894:	1a5a      	subs	r2, r3, r1
1a003896:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
1a00389a:	4667      	mov	r7, ip
1a00389c:	e750      	b.n	1a003740 <__udivdi3+0xcc>
1a00389e:	4610      	mov	r0, r2
1a0038a0:	e716      	b.n	1a0036d0 <__udivdi3+0x5c>
1a0038a2:	460b      	mov	r3, r1
1a0038a4:	e729      	b.n	1a0036fa <__udivdi3+0x86>
1a0038a6:	4613      	mov	r3, r2
1a0038a8:	e772      	b.n	1a003790 <__udivdi3+0x11c>
1a0038aa:	40b0      	lsls	r0, r6
1a0038ac:	4290      	cmp	r0, r2
1a0038ae:	d2b7      	bcs.n	1a003820 <__udivdi3+0x1ac>
1a0038b0:	1e60      	subs	r0, r4, #1
1a0038b2:	2600      	movs	r6, #0
1a0038b4:	e724      	b.n	1a003700 <__udivdi3+0x8c>
1a0038b6:	4630      	mov	r0, r6
1a0038b8:	e722      	b.n	1a003700 <__udivdi3+0x8c>
1a0038ba:	42a9      	cmp	r1, r5
1a0038bc:	d995      	bls.n	1a0037ea <__udivdi3+0x176>
1a0038be:	f1a8 0802 	sub.w	r8, r8, #2
1a0038c2:	441d      	add	r5, r3
1a0038c4:	e792      	b.n	1a0037ec <__udivdi3+0x178>
1a0038c6:	458c      	cmp	ip, r1
1a0038c8:	d9a0      	bls.n	1a00380c <__udivdi3+0x198>
1a0038ca:	3c02      	subs	r4, #2
1a0038cc:	4419      	add	r1, r3
1a0038ce:	e79e      	b.n	1a00380e <__udivdi3+0x19a>
1a0038d0:	4610      	mov	r0, r2
1a0038d2:	e7df      	b.n	1a003894 <__udivdi3+0x220>
1a0038d4:	460e      	mov	r6, r1
1a0038d6:	e7c9      	b.n	1a00386c <__udivdi3+0x1f8>
1a0038d8:	3802      	subs	r0, #2
1a0038da:	4429      	add	r1, r5
1a0038dc:	e743      	b.n	1a003766 <__udivdi3+0xf2>
1a0038de:	bf00      	nop

1a0038e0 <__libc_init_array>:
1a0038e0:	b570      	push	{r4, r5, r6, lr}
1a0038e2:	4e0f      	ldr	r6, [pc, #60]	; (1a003920 <__libc_init_array+0x40>)
1a0038e4:	4d0f      	ldr	r5, [pc, #60]	; (1a003924 <__libc_init_array+0x44>)
1a0038e6:	1b76      	subs	r6, r6, r5
1a0038e8:	10b6      	asrs	r6, r6, #2
1a0038ea:	bf18      	it	ne
1a0038ec:	2400      	movne	r4, #0
1a0038ee:	d005      	beq.n	1a0038fc <__libc_init_array+0x1c>
1a0038f0:	3401      	adds	r4, #1
1a0038f2:	f855 3b04 	ldr.w	r3, [r5], #4
1a0038f6:	4798      	blx	r3
1a0038f8:	42a6      	cmp	r6, r4
1a0038fa:	d1f9      	bne.n	1a0038f0 <__libc_init_array+0x10>
1a0038fc:	4e0a      	ldr	r6, [pc, #40]	; (1a003928 <__libc_init_array+0x48>)
1a0038fe:	4d0b      	ldr	r5, [pc, #44]	; (1a00392c <__libc_init_array+0x4c>)
1a003900:	1b76      	subs	r6, r6, r5
1a003902:	f7ff f903 	bl	1a002b0c <_init>
1a003906:	10b6      	asrs	r6, r6, #2
1a003908:	bf18      	it	ne
1a00390a:	2400      	movne	r4, #0
1a00390c:	d006      	beq.n	1a00391c <__libc_init_array+0x3c>
1a00390e:	3401      	adds	r4, #1
1a003910:	f855 3b04 	ldr.w	r3, [r5], #4
1a003914:	4798      	blx	r3
1a003916:	42a6      	cmp	r6, r4
1a003918:	d1f9      	bne.n	1a00390e <__libc_init_array+0x2e>
1a00391a:	bd70      	pop	{r4, r5, r6, pc}
1a00391c:	bd70      	pop	{r4, r5, r6, pc}
1a00391e:	bf00      	nop
1a003920:	1a007d50 	.word	0x1a007d50
1a003924:	1a007d50 	.word	0x1a007d50
1a003928:	1a007d50 	.word	0x1a007d50
1a00392c:	1a007d50 	.word	0x1a007d50

1a003930 <memcpy>:
1a003930:	4684      	mov	ip, r0
1a003932:	ea41 0300 	orr.w	r3, r1, r0
1a003936:	f013 0303 	ands.w	r3, r3, #3
1a00393a:	d16d      	bne.n	1a003a18 <memcpy+0xe8>
1a00393c:	3a40      	subs	r2, #64	; 0x40
1a00393e:	d341      	bcc.n	1a0039c4 <memcpy+0x94>
1a003940:	f851 3b04 	ldr.w	r3, [r1], #4
1a003944:	f840 3b04 	str.w	r3, [r0], #4
1a003948:	f851 3b04 	ldr.w	r3, [r1], #4
1a00394c:	f840 3b04 	str.w	r3, [r0], #4
1a003950:	f851 3b04 	ldr.w	r3, [r1], #4
1a003954:	f840 3b04 	str.w	r3, [r0], #4
1a003958:	f851 3b04 	ldr.w	r3, [r1], #4
1a00395c:	f840 3b04 	str.w	r3, [r0], #4
1a003960:	f851 3b04 	ldr.w	r3, [r1], #4
1a003964:	f840 3b04 	str.w	r3, [r0], #4
1a003968:	f851 3b04 	ldr.w	r3, [r1], #4
1a00396c:	f840 3b04 	str.w	r3, [r0], #4
1a003970:	f851 3b04 	ldr.w	r3, [r1], #4
1a003974:	f840 3b04 	str.w	r3, [r0], #4
1a003978:	f851 3b04 	ldr.w	r3, [r1], #4
1a00397c:	f840 3b04 	str.w	r3, [r0], #4
1a003980:	f851 3b04 	ldr.w	r3, [r1], #4
1a003984:	f840 3b04 	str.w	r3, [r0], #4
1a003988:	f851 3b04 	ldr.w	r3, [r1], #4
1a00398c:	f840 3b04 	str.w	r3, [r0], #4
1a003990:	f851 3b04 	ldr.w	r3, [r1], #4
1a003994:	f840 3b04 	str.w	r3, [r0], #4
1a003998:	f851 3b04 	ldr.w	r3, [r1], #4
1a00399c:	f840 3b04 	str.w	r3, [r0], #4
1a0039a0:	f851 3b04 	ldr.w	r3, [r1], #4
1a0039a4:	f840 3b04 	str.w	r3, [r0], #4
1a0039a8:	f851 3b04 	ldr.w	r3, [r1], #4
1a0039ac:	f840 3b04 	str.w	r3, [r0], #4
1a0039b0:	f851 3b04 	ldr.w	r3, [r1], #4
1a0039b4:	f840 3b04 	str.w	r3, [r0], #4
1a0039b8:	f851 3b04 	ldr.w	r3, [r1], #4
1a0039bc:	f840 3b04 	str.w	r3, [r0], #4
1a0039c0:	3a40      	subs	r2, #64	; 0x40
1a0039c2:	d2bd      	bcs.n	1a003940 <memcpy+0x10>
1a0039c4:	3230      	adds	r2, #48	; 0x30
1a0039c6:	d311      	bcc.n	1a0039ec <memcpy+0xbc>
1a0039c8:	f851 3b04 	ldr.w	r3, [r1], #4
1a0039cc:	f840 3b04 	str.w	r3, [r0], #4
1a0039d0:	f851 3b04 	ldr.w	r3, [r1], #4
1a0039d4:	f840 3b04 	str.w	r3, [r0], #4
1a0039d8:	f851 3b04 	ldr.w	r3, [r1], #4
1a0039dc:	f840 3b04 	str.w	r3, [r0], #4
1a0039e0:	f851 3b04 	ldr.w	r3, [r1], #4
1a0039e4:	f840 3b04 	str.w	r3, [r0], #4
1a0039e8:	3a10      	subs	r2, #16
1a0039ea:	d2ed      	bcs.n	1a0039c8 <memcpy+0x98>
1a0039ec:	320c      	adds	r2, #12
1a0039ee:	d305      	bcc.n	1a0039fc <memcpy+0xcc>
1a0039f0:	f851 3b04 	ldr.w	r3, [r1], #4
1a0039f4:	f840 3b04 	str.w	r3, [r0], #4
1a0039f8:	3a04      	subs	r2, #4
1a0039fa:	d2f9      	bcs.n	1a0039f0 <memcpy+0xc0>
1a0039fc:	3204      	adds	r2, #4
1a0039fe:	d008      	beq.n	1a003a12 <memcpy+0xe2>
1a003a00:	07d2      	lsls	r2, r2, #31
1a003a02:	bf1c      	itt	ne
1a003a04:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a003a08:	f800 3b01 	strbne.w	r3, [r0], #1
1a003a0c:	d301      	bcc.n	1a003a12 <memcpy+0xe2>
1a003a0e:	880b      	ldrh	r3, [r1, #0]
1a003a10:	8003      	strh	r3, [r0, #0]
1a003a12:	4660      	mov	r0, ip
1a003a14:	4770      	bx	lr
1a003a16:	bf00      	nop
1a003a18:	2a08      	cmp	r2, #8
1a003a1a:	d313      	bcc.n	1a003a44 <memcpy+0x114>
1a003a1c:	078b      	lsls	r3, r1, #30
1a003a1e:	d08d      	beq.n	1a00393c <memcpy+0xc>
1a003a20:	f010 0303 	ands.w	r3, r0, #3
1a003a24:	d08a      	beq.n	1a00393c <memcpy+0xc>
1a003a26:	f1c3 0304 	rsb	r3, r3, #4
1a003a2a:	1ad2      	subs	r2, r2, r3
1a003a2c:	07db      	lsls	r3, r3, #31
1a003a2e:	bf1c      	itt	ne
1a003a30:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a003a34:	f800 3b01 	strbne.w	r3, [r0], #1
1a003a38:	d380      	bcc.n	1a00393c <memcpy+0xc>
1a003a3a:	f831 3b02 	ldrh.w	r3, [r1], #2
1a003a3e:	f820 3b02 	strh.w	r3, [r0], #2
1a003a42:	e77b      	b.n	1a00393c <memcpy+0xc>
1a003a44:	3a04      	subs	r2, #4
1a003a46:	d3d9      	bcc.n	1a0039fc <memcpy+0xcc>
1a003a48:	3a01      	subs	r2, #1
1a003a4a:	f811 3b01 	ldrb.w	r3, [r1], #1
1a003a4e:	f800 3b01 	strb.w	r3, [r0], #1
1a003a52:	d2f9      	bcs.n	1a003a48 <memcpy+0x118>
1a003a54:	780b      	ldrb	r3, [r1, #0]
1a003a56:	7003      	strb	r3, [r0, #0]
1a003a58:	784b      	ldrb	r3, [r1, #1]
1a003a5a:	7043      	strb	r3, [r0, #1]
1a003a5c:	788b      	ldrb	r3, [r1, #2]
1a003a5e:	7083      	strb	r3, [r0, #2]
1a003a60:	4660      	mov	r0, ip
1a003a62:	4770      	bx	lr

1a003a64 <memset>:
1a003a64:	b470      	push	{r4, r5, r6}
1a003a66:	0784      	lsls	r4, r0, #30
1a003a68:	d046      	beq.n	1a003af8 <memset+0x94>
1a003a6a:	1e54      	subs	r4, r2, #1
1a003a6c:	2a00      	cmp	r2, #0
1a003a6e:	d041      	beq.n	1a003af4 <memset+0x90>
1a003a70:	b2cd      	uxtb	r5, r1
1a003a72:	4603      	mov	r3, r0
1a003a74:	e002      	b.n	1a003a7c <memset+0x18>
1a003a76:	1e62      	subs	r2, r4, #1
1a003a78:	b3e4      	cbz	r4, 1a003af4 <memset+0x90>
1a003a7a:	4614      	mov	r4, r2
1a003a7c:	f803 5b01 	strb.w	r5, [r3], #1
1a003a80:	079a      	lsls	r2, r3, #30
1a003a82:	d1f8      	bne.n	1a003a76 <memset+0x12>
1a003a84:	2c03      	cmp	r4, #3
1a003a86:	d92e      	bls.n	1a003ae6 <memset+0x82>
1a003a88:	b2cd      	uxtb	r5, r1
1a003a8a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a003a8e:	2c0f      	cmp	r4, #15
1a003a90:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a003a94:	d919      	bls.n	1a003aca <memset+0x66>
1a003a96:	f103 0210 	add.w	r2, r3, #16
1a003a9a:	4626      	mov	r6, r4
1a003a9c:	3e10      	subs	r6, #16
1a003a9e:	2e0f      	cmp	r6, #15
1a003aa0:	f842 5c10 	str.w	r5, [r2, #-16]
1a003aa4:	f842 5c0c 	str.w	r5, [r2, #-12]
1a003aa8:	f842 5c08 	str.w	r5, [r2, #-8]
1a003aac:	f842 5c04 	str.w	r5, [r2, #-4]
1a003ab0:	f102 0210 	add.w	r2, r2, #16
1a003ab4:	d8f2      	bhi.n	1a003a9c <memset+0x38>
1a003ab6:	f1a4 0210 	sub.w	r2, r4, #16
1a003aba:	f022 020f 	bic.w	r2, r2, #15
1a003abe:	f004 040f 	and.w	r4, r4, #15
1a003ac2:	3210      	adds	r2, #16
1a003ac4:	2c03      	cmp	r4, #3
1a003ac6:	4413      	add	r3, r2
1a003ac8:	d90d      	bls.n	1a003ae6 <memset+0x82>
1a003aca:	461e      	mov	r6, r3
1a003acc:	4622      	mov	r2, r4
1a003ace:	3a04      	subs	r2, #4
1a003ad0:	2a03      	cmp	r2, #3
1a003ad2:	f846 5b04 	str.w	r5, [r6], #4
1a003ad6:	d8fa      	bhi.n	1a003ace <memset+0x6a>
1a003ad8:	1f22      	subs	r2, r4, #4
1a003ada:	f022 0203 	bic.w	r2, r2, #3
1a003ade:	3204      	adds	r2, #4
1a003ae0:	4413      	add	r3, r2
1a003ae2:	f004 0403 	and.w	r4, r4, #3
1a003ae6:	b12c      	cbz	r4, 1a003af4 <memset+0x90>
1a003ae8:	b2c9      	uxtb	r1, r1
1a003aea:	441c      	add	r4, r3
1a003aec:	f803 1b01 	strb.w	r1, [r3], #1
1a003af0:	42a3      	cmp	r3, r4
1a003af2:	d1fb      	bne.n	1a003aec <memset+0x88>
1a003af4:	bc70      	pop	{r4, r5, r6}
1a003af6:	4770      	bx	lr
1a003af8:	4614      	mov	r4, r2
1a003afa:	4603      	mov	r3, r0
1a003afc:	e7c2      	b.n	1a003a84 <memset+0x20>
1a003afe:	bf00      	nop

1a003b00 <sprintf>:
1a003b00:	b40e      	push	{r1, r2, r3}
1a003b02:	b5f0      	push	{r4, r5, r6, r7, lr}
1a003b04:	b09c      	sub	sp, #112	; 0x70
1a003b06:	ab21      	add	r3, sp, #132	; 0x84
1a003b08:	490f      	ldr	r1, [pc, #60]	; (1a003b48 <sprintf+0x48>)
1a003b0a:	f853 2b04 	ldr.w	r2, [r3], #4
1a003b0e:	9301      	str	r3, [sp, #4]
1a003b10:	4605      	mov	r5, r0
1a003b12:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
1a003b16:	6808      	ldr	r0, [r1, #0]
1a003b18:	9502      	str	r5, [sp, #8]
1a003b1a:	f44f 7702 	mov.w	r7, #520	; 0x208
1a003b1e:	f64f 76ff 	movw	r6, #65535	; 0xffff
1a003b22:	a902      	add	r1, sp, #8
1a003b24:	9506      	str	r5, [sp, #24]
1a003b26:	f8ad 7014 	strh.w	r7, [sp, #20]
1a003b2a:	9404      	str	r4, [sp, #16]
1a003b2c:	9407      	str	r4, [sp, #28]
1a003b2e:	f8ad 6016 	strh.w	r6, [sp, #22]
1a003b32:	f000 f839 	bl	1a003ba8 <_svfprintf_r>
1a003b36:	9b02      	ldr	r3, [sp, #8]
1a003b38:	2200      	movs	r2, #0
1a003b3a:	701a      	strb	r2, [r3, #0]
1a003b3c:	b01c      	add	sp, #112	; 0x70
1a003b3e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
1a003b42:	b003      	add	sp, #12
1a003b44:	4770      	bx	lr
1a003b46:	bf00      	nop
1a003b48:	100004f8 	.word	0x100004f8

1a003b4c <strlen>:
1a003b4c:	f020 0103 	bic.w	r1, r0, #3
1a003b50:	f010 0003 	ands.w	r0, r0, #3
1a003b54:	f1c0 0000 	rsb	r0, r0, #0
1a003b58:	f851 3b04 	ldr.w	r3, [r1], #4
1a003b5c:	f100 0c04 	add.w	ip, r0, #4
1a003b60:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
1a003b64:	f06f 0200 	mvn.w	r2, #0
1a003b68:	bf1c      	itt	ne
1a003b6a:	fa22 f20c 	lsrne.w	r2, r2, ip
1a003b6e:	4313      	orrne	r3, r2
1a003b70:	f04f 0c01 	mov.w	ip, #1
1a003b74:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
1a003b78:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
1a003b7c:	eba3 020c 	sub.w	r2, r3, ip
1a003b80:	ea22 0203 	bic.w	r2, r2, r3
1a003b84:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
1a003b88:	bf04      	itt	eq
1a003b8a:	f851 3b04 	ldreq.w	r3, [r1], #4
1a003b8e:	3004      	addeq	r0, #4
1a003b90:	d0f4      	beq.n	1a003b7c <strlen+0x30>
1a003b92:	f1c2 0100 	rsb	r1, r2, #0
1a003b96:	ea02 0201 	and.w	r2, r2, r1
1a003b9a:	fab2 f282 	clz	r2, r2
1a003b9e:	f1c2 021f 	rsb	r2, r2, #31
1a003ba2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
1a003ba6:	4770      	bx	lr

1a003ba8 <_svfprintf_r>:
1a003ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003bac:	b0bf      	sub	sp, #252	; 0xfc
1a003bae:	4689      	mov	r9, r1
1a003bb0:	9206      	str	r2, [sp, #24]
1a003bb2:	930a      	str	r3, [sp, #40]	; 0x28
1a003bb4:	9004      	str	r0, [sp, #16]
1a003bb6:	f002 fb71 	bl	1a00629c <_localeconv_r>
1a003bba:	6803      	ldr	r3, [r0, #0]
1a003bbc:	9313      	str	r3, [sp, #76]	; 0x4c
1a003bbe:	4618      	mov	r0, r3
1a003bc0:	f7ff ffc4 	bl	1a003b4c <strlen>
1a003bc4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a003bc8:	9014      	str	r0, [sp, #80]	; 0x50
1a003bca:	061a      	lsls	r2, r3, #24
1a003bcc:	d504      	bpl.n	1a003bd8 <_svfprintf_r+0x30>
1a003bce:	f8d9 3010 	ldr.w	r3, [r9, #16]
1a003bd2:	2b00      	cmp	r3, #0
1a003bd4:	f001 80a1 	beq.w	1a004d1a <_svfprintf_r+0x1172>
1a003bd8:	ed9f 7b99 	vldr	d7, [pc, #612]	; 1a003e40 <_svfprintf_r+0x298>
1a003bdc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a003be0:	2300      	movs	r3, #0
1a003be2:	af2e      	add	r7, sp, #184	; 0xb8
1a003be4:	930f      	str	r3, [sp, #60]	; 0x3c
1a003be6:	9323      	str	r3, [sp, #140]	; 0x8c
1a003be8:	9322      	str	r3, [sp, #136]	; 0x88
1a003bea:	9312      	str	r3, [sp, #72]	; 0x48
1a003bec:	9315      	str	r3, [sp, #84]	; 0x54
1a003bee:	9307      	str	r3, [sp, #28]
1a003bf0:	9721      	str	r7, [sp, #132]	; 0x84
1a003bf2:	463c      	mov	r4, r7
1a003bf4:	464e      	mov	r6, r9
1a003bf6:	9d06      	ldr	r5, [sp, #24]
1a003bf8:	782b      	ldrb	r3, [r5, #0]
1a003bfa:	2b00      	cmp	r3, #0
1a003bfc:	f000 80a9 	beq.w	1a003d52 <_svfprintf_r+0x1aa>
1a003c00:	2b25      	cmp	r3, #37	; 0x25
1a003c02:	d102      	bne.n	1a003c0a <_svfprintf_r+0x62>
1a003c04:	e0a5      	b.n	1a003d52 <_svfprintf_r+0x1aa>
1a003c06:	2b25      	cmp	r3, #37	; 0x25
1a003c08:	d003      	beq.n	1a003c12 <_svfprintf_r+0x6a>
1a003c0a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
1a003c0e:	2b00      	cmp	r3, #0
1a003c10:	d1f9      	bne.n	1a003c06 <_svfprintf_r+0x5e>
1a003c12:	9b06      	ldr	r3, [sp, #24]
1a003c14:	1aeb      	subs	r3, r5, r3
1a003c16:	b173      	cbz	r3, 1a003c36 <_svfprintf_r+0x8e>
1a003c18:	9a22      	ldr	r2, [sp, #136]	; 0x88
1a003c1a:	9923      	ldr	r1, [sp, #140]	; 0x8c
1a003c1c:	9806      	ldr	r0, [sp, #24]
1a003c1e:	6020      	str	r0, [r4, #0]
1a003c20:	3201      	adds	r2, #1
1a003c22:	4419      	add	r1, r3
1a003c24:	2a07      	cmp	r2, #7
1a003c26:	6063      	str	r3, [r4, #4]
1a003c28:	9123      	str	r1, [sp, #140]	; 0x8c
1a003c2a:	9222      	str	r2, [sp, #136]	; 0x88
1a003c2c:	dc72      	bgt.n	1a003d14 <_svfprintf_r+0x16c>
1a003c2e:	3408      	adds	r4, #8
1a003c30:	9a07      	ldr	r2, [sp, #28]
1a003c32:	441a      	add	r2, r3
1a003c34:	9207      	str	r2, [sp, #28]
1a003c36:	782b      	ldrb	r3, [r5, #0]
1a003c38:	2b00      	cmp	r3, #0
1a003c3a:	f000 87cb 	beq.w	1a004bd4 <_svfprintf_r+0x102c>
1a003c3e:	2300      	movs	r3, #0
1a003c40:	1c69      	adds	r1, r5, #1
1a003c42:	786d      	ldrb	r5, [r5, #1]
1a003c44:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
1a003c48:	461a      	mov	r2, r3
1a003c4a:	9308      	str	r3, [sp, #32]
1a003c4c:	9303      	str	r3, [sp, #12]
1a003c4e:	f04f 3aff 	mov.w	sl, #4294967295
1a003c52:	1c4b      	adds	r3, r1, #1
1a003c54:	f1a5 0120 	sub.w	r1, r5, #32
1a003c58:	2958      	cmp	r1, #88	; 0x58
1a003c5a:	f200 83e4 	bhi.w	1a004426 <_svfprintf_r+0x87e>
1a003c5e:	e8df f011 	tbh	[pc, r1, lsl #1]
1a003c62:	0277      	.short	0x0277
1a003c64:	03e203e2 	.word	0x03e203e2
1a003c68:	03e2037b 	.word	0x03e2037b
1a003c6c:	03e203e2 	.word	0x03e203e2
1a003c70:	03e203e2 	.word	0x03e203e2
1a003c74:	02f703e2 	.word	0x02f703e2
1a003c78:	03e20214 	.word	0x03e20214
1a003c7c:	021801fb 	.word	0x021801fb
1a003c80:	038203e2 	.word	0x038203e2
1a003c84:	02c102c1 	.word	0x02c102c1
1a003c88:	02c102c1 	.word	0x02c102c1
1a003c8c:	02c102c1 	.word	0x02c102c1
1a003c90:	02c102c1 	.word	0x02c102c1
1a003c94:	03e202c1 	.word	0x03e202c1
1a003c98:	03e203e2 	.word	0x03e203e2
1a003c9c:	03e203e2 	.word	0x03e203e2
1a003ca0:	03e203e2 	.word	0x03e203e2
1a003ca4:	03e203e2 	.word	0x03e203e2
1a003ca8:	02d003e2 	.word	0x02d003e2
1a003cac:	03e20391 	.word	0x03e20391
1a003cb0:	03e20391 	.word	0x03e20391
1a003cb4:	03e203e2 	.word	0x03e203e2
1a003cb8:	037403e2 	.word	0x037403e2
1a003cbc:	03e203e2 	.word	0x03e203e2
1a003cc0:	03e2030c 	.word	0x03e2030c
1a003cc4:	03e203e2 	.word	0x03e203e2
1a003cc8:	03e203e2 	.word	0x03e203e2
1a003ccc:	03e2032a 	.word	0x03e2032a
1a003cd0:	034403e2 	.word	0x034403e2
1a003cd4:	03e203e2 	.word	0x03e203e2
1a003cd8:	03e203e2 	.word	0x03e203e2
1a003cdc:	03e203e2 	.word	0x03e203e2
1a003ce0:	03e203e2 	.word	0x03e203e2
1a003ce4:	03e203e2 	.word	0x03e203e2
1a003ce8:	0233035f 	.word	0x0233035f
1a003cec:	03910391 	.word	0x03910391
1a003cf0:	03050391 	.word	0x03050391
1a003cf4:	03e20233 	.word	0x03e20233
1a003cf8:	02ed03e2 	.word	0x02ed03e2
1a003cfc:	028503e2 	.word	0x028503e2
1a003d00:	03cb0202 	.word	0x03cb0202
1a003d04:	03e2027e 	.word	0x03e2027e
1a003d08:	03e20299 	.word	0x03e20299
1a003d0c:	03e2007a 	.word	0x03e2007a
1a003d10:	025103e2 	.word	0x025103e2
1a003d14:	9804      	ldr	r0, [sp, #16]
1a003d16:	9303      	str	r3, [sp, #12]
1a003d18:	4631      	mov	r1, r6
1a003d1a:	aa21      	add	r2, sp, #132	; 0x84
1a003d1c:	f003 fb20 	bl	1a007360 <__ssprint_r>
1a003d20:	b950      	cbnz	r0, 1a003d38 <_svfprintf_r+0x190>
1a003d22:	463c      	mov	r4, r7
1a003d24:	9b03      	ldr	r3, [sp, #12]
1a003d26:	e783      	b.n	1a003c30 <_svfprintf_r+0x88>
1a003d28:	9804      	ldr	r0, [sp, #16]
1a003d2a:	4631      	mov	r1, r6
1a003d2c:	aa21      	add	r2, sp, #132	; 0x84
1a003d2e:	f003 fb17 	bl	1a007360 <__ssprint_r>
1a003d32:	2800      	cmp	r0, #0
1a003d34:	f000 818c 	beq.w	1a004050 <_svfprintf_r+0x4a8>
1a003d38:	46b1      	mov	r9, r6
1a003d3a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a003d3e:	f013 0f40 	tst.w	r3, #64	; 0x40
1a003d42:	9b07      	ldr	r3, [sp, #28]
1a003d44:	bf18      	it	ne
1a003d46:	f04f 33ff 	movne.w	r3, #4294967295
1a003d4a:	4618      	mov	r0, r3
1a003d4c:	b03f      	add	sp, #252	; 0xfc
1a003d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003d52:	9d06      	ldr	r5, [sp, #24]
1a003d54:	e76f      	b.n	1a003c36 <_svfprintf_r+0x8e>
1a003d56:	9306      	str	r3, [sp, #24]
1a003d58:	9b03      	ldr	r3, [sp, #12]
1a003d5a:	0698      	lsls	r0, r3, #26
1a003d5c:	f140 82b4 	bpl.w	1a0042c8 <_svfprintf_r+0x720>
1a003d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a003d62:	f103 0907 	add.w	r9, r3, #7
1a003d66:	f029 0307 	bic.w	r3, r9, #7
1a003d6a:	f103 0208 	add.w	r2, r3, #8
1a003d6e:	e9d3 8900 	ldrd	r8, r9, [r3]
1a003d72:	920a      	str	r2, [sp, #40]	; 0x28
1a003d74:	2301      	movs	r3, #1
1a003d76:	f04f 0c00 	mov.w	ip, #0
1a003d7a:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
1a003d7e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
1a003d82:	f1ba 0f00 	cmp.w	sl, #0
1a003d86:	db03      	blt.n	1a003d90 <_svfprintf_r+0x1e8>
1a003d88:	9a03      	ldr	r2, [sp, #12]
1a003d8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a003d8e:	9203      	str	r2, [sp, #12]
1a003d90:	ea58 0209 	orrs.w	r2, r8, r9
1a003d94:	f040 8357 	bne.w	1a004446 <_svfprintf_r+0x89e>
1a003d98:	f1ba 0f00 	cmp.w	sl, #0
1a003d9c:	f000 845c 	beq.w	1a004658 <_svfprintf_r+0xab0>
1a003da0:	2b01      	cmp	r3, #1
1a003da2:	f000 835a 	beq.w	1a00445a <_svfprintf_r+0x8b2>
1a003da6:	2b02      	cmp	r3, #2
1a003da8:	f000 849a 	beq.w	1a0046e0 <_svfprintf_r+0xb38>
1a003dac:	4639      	mov	r1, r7
1a003dae:	ea4f 02d8 	mov.w	r2, r8, lsr #3
1a003db2:	ea42 7249 	orr.w	r2, r2, r9, lsl #29
1a003db6:	ea4f 00d9 	mov.w	r0, r9, lsr #3
1a003dba:	f008 0307 	and.w	r3, r8, #7
1a003dbe:	4681      	mov	r9, r0
1a003dc0:	4690      	mov	r8, r2
1a003dc2:	3330      	adds	r3, #48	; 0x30
1a003dc4:	ea58 0209 	orrs.w	r2, r8, r9
1a003dc8:	f801 3d01 	strb.w	r3, [r1, #-1]!
1a003dcc:	d1ef      	bne.n	1a003dae <_svfprintf_r+0x206>
1a003dce:	9a03      	ldr	r2, [sp, #12]
1a003dd0:	910c      	str	r1, [sp, #48]	; 0x30
1a003dd2:	07d2      	lsls	r2, r2, #31
1a003dd4:	f100 856e 	bmi.w	1a0048b4 <_svfprintf_r+0xd0c>
1a003dd8:	1a7b      	subs	r3, r7, r1
1a003dda:	9309      	str	r3, [sp, #36]	; 0x24
1a003ddc:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a003dde:	4592      	cmp	sl, r2
1a003de0:	4653      	mov	r3, sl
1a003de2:	bfb8      	it	lt
1a003de4:	4613      	movlt	r3, r2
1a003de6:	9305      	str	r3, [sp, #20]
1a003de8:	2300      	movs	r3, #0
1a003dea:	930e      	str	r3, [sp, #56]	; 0x38
1a003dec:	f1bc 0f00 	cmp.w	ip, #0
1a003df0:	d002      	beq.n	1a003df8 <_svfprintf_r+0x250>
1a003df2:	9b05      	ldr	r3, [sp, #20]
1a003df4:	3301      	adds	r3, #1
1a003df6:	9305      	str	r3, [sp, #20]
1a003df8:	9b03      	ldr	r3, [sp, #12]
1a003dfa:	f013 0302 	ands.w	r3, r3, #2
1a003dfe:	930b      	str	r3, [sp, #44]	; 0x2c
1a003e00:	d002      	beq.n	1a003e08 <_svfprintf_r+0x260>
1a003e02:	9b05      	ldr	r3, [sp, #20]
1a003e04:	3302      	adds	r3, #2
1a003e06:	9305      	str	r3, [sp, #20]
1a003e08:	9b03      	ldr	r3, [sp, #12]
1a003e0a:	f013 0984 	ands.w	r9, r3, #132	; 0x84
1a003e0e:	f040 8317 	bne.w	1a004440 <_svfprintf_r+0x898>
1a003e12:	9b08      	ldr	r3, [sp, #32]
1a003e14:	9a05      	ldr	r2, [sp, #20]
1a003e16:	ebc2 0803 	rsb	r8, r2, r3
1a003e1a:	f1b8 0f00 	cmp.w	r8, #0
1a003e1e:	f340 830f 	ble.w	1a004440 <_svfprintf_r+0x898>
1a003e22:	f1b8 0f10 	cmp.w	r8, #16
1a003e26:	9923      	ldr	r1, [sp, #140]	; 0x8c
1a003e28:	9a22      	ldr	r2, [sp, #136]	; 0x88
1a003e2a:	f8df a01c 	ldr.w	sl, [pc, #28]	; 1a003e48 <_svfprintf_r+0x2a0>
1a003e2e:	dd30      	ble.n	1a003e92 <_svfprintf_r+0x2ea>
1a003e30:	4653      	mov	r3, sl
1a003e32:	f04f 0b10 	mov.w	fp, #16
1a003e36:	46c2      	mov	sl, r8
1a003e38:	46a8      	mov	r8, r5
1a003e3a:	461d      	mov	r5, r3
1a003e3c:	e00d      	b.n	1a003e5a <_svfprintf_r+0x2b2>
1a003e3e:	bf00      	nop
	...
1a003e48:	1a007c24 	.word	0x1a007c24
1a003e4c:	f1aa 0a10 	sub.w	sl, sl, #16
1a003e50:	f1ba 0f10 	cmp.w	sl, #16
1a003e54:	f104 0408 	add.w	r4, r4, #8
1a003e58:	dd17      	ble.n	1a003e8a <_svfprintf_r+0x2e2>
1a003e5a:	3201      	adds	r2, #1
1a003e5c:	3110      	adds	r1, #16
1a003e5e:	2a07      	cmp	r2, #7
1a003e60:	9123      	str	r1, [sp, #140]	; 0x8c
1a003e62:	9222      	str	r2, [sp, #136]	; 0x88
1a003e64:	e884 0820 	stmia.w	r4, {r5, fp}
1a003e68:	ddf0      	ble.n	1a003e4c <_svfprintf_r+0x2a4>
1a003e6a:	9804      	ldr	r0, [sp, #16]
1a003e6c:	4631      	mov	r1, r6
1a003e6e:	aa21      	add	r2, sp, #132	; 0x84
1a003e70:	f003 fa76 	bl	1a007360 <__ssprint_r>
1a003e74:	2800      	cmp	r0, #0
1a003e76:	f47f af5f 	bne.w	1a003d38 <_svfprintf_r+0x190>
1a003e7a:	f1aa 0a10 	sub.w	sl, sl, #16
1a003e7e:	f1ba 0f10 	cmp.w	sl, #16
1a003e82:	9923      	ldr	r1, [sp, #140]	; 0x8c
1a003e84:	9a22      	ldr	r2, [sp, #136]	; 0x88
1a003e86:	463c      	mov	r4, r7
1a003e88:	dce7      	bgt.n	1a003e5a <_svfprintf_r+0x2b2>
1a003e8a:	462b      	mov	r3, r5
1a003e8c:	4645      	mov	r5, r8
1a003e8e:	46d0      	mov	r8, sl
1a003e90:	469a      	mov	sl, r3
1a003e92:	3201      	adds	r2, #1
1a003e94:	eb08 0b01 	add.w	fp, r8, r1
1a003e98:	2a07      	cmp	r2, #7
1a003e9a:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a003e9e:	9222      	str	r2, [sp, #136]	; 0x88
1a003ea0:	f8c4 a000 	str.w	sl, [r4]
1a003ea4:	f8c4 8004 	str.w	r8, [r4, #4]
1a003ea8:	f300 847e 	bgt.w	1a0047a8 <_svfprintf_r+0xc00>
1a003eac:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
1a003eb0:	3408      	adds	r4, #8
1a003eb2:	f1bc 0f00 	cmp.w	ip, #0
1a003eb6:	d00f      	beq.n	1a003ed8 <_svfprintf_r+0x330>
1a003eb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a003eba:	3301      	adds	r3, #1
1a003ebc:	f10b 0b01 	add.w	fp, fp, #1
1a003ec0:	f10d 0167 	add.w	r1, sp, #103	; 0x67
1a003ec4:	2201      	movs	r2, #1
1a003ec6:	2b07      	cmp	r3, #7
1a003ec8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a003ecc:	9322      	str	r3, [sp, #136]	; 0x88
1a003ece:	e884 0006 	stmia.w	r4, {r1, r2}
1a003ed2:	f300 83ea 	bgt.w	1a0046aa <_svfprintf_r+0xb02>
1a003ed6:	3408      	adds	r4, #8
1a003ed8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a003eda:	b173      	cbz	r3, 1a003efa <_svfprintf_r+0x352>
1a003edc:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a003ede:	3301      	adds	r3, #1
1a003ee0:	f10b 0b02 	add.w	fp, fp, #2
1a003ee4:	a91a      	add	r1, sp, #104	; 0x68
1a003ee6:	2202      	movs	r2, #2
1a003ee8:	2b07      	cmp	r3, #7
1a003eea:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a003eee:	9322      	str	r3, [sp, #136]	; 0x88
1a003ef0:	e884 0006 	stmia.w	r4, {r1, r2}
1a003ef4:	f300 83cd 	bgt.w	1a004692 <_svfprintf_r+0xaea>
1a003ef8:	3408      	adds	r4, #8
1a003efa:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
1a003efe:	f000 8315 	beq.w	1a00452c <_svfprintf_r+0x984>
1a003f02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a003f04:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a003f06:	ebc2 0a03 	rsb	sl, r2, r3
1a003f0a:	f1ba 0f00 	cmp.w	sl, #0
1a003f0e:	dd3c      	ble.n	1a003f8a <_svfprintf_r+0x3e2>
1a003f10:	f1ba 0f10 	cmp.w	sl, #16
1a003f14:	9a22      	ldr	r2, [sp, #136]	; 0x88
1a003f16:	f8df 9464 	ldr.w	r9, [pc, #1124]	; 1a00437c <_svfprintf_r+0x7d4>
1a003f1a:	dd2b      	ble.n	1a003f74 <_svfprintf_r+0x3cc>
1a003f1c:	4649      	mov	r1, r9
1a003f1e:	465b      	mov	r3, fp
1a003f20:	46a9      	mov	r9, r5
1a003f22:	f04f 0810 	mov.w	r8, #16
1a003f26:	f8dd b010 	ldr.w	fp, [sp, #16]
1a003f2a:	460d      	mov	r5, r1
1a003f2c:	e006      	b.n	1a003f3c <_svfprintf_r+0x394>
1a003f2e:	f1aa 0a10 	sub.w	sl, sl, #16
1a003f32:	f1ba 0f10 	cmp.w	sl, #16
1a003f36:	f104 0408 	add.w	r4, r4, #8
1a003f3a:	dd17      	ble.n	1a003f6c <_svfprintf_r+0x3c4>
1a003f3c:	3201      	adds	r2, #1
1a003f3e:	3310      	adds	r3, #16
1a003f40:	2a07      	cmp	r2, #7
1a003f42:	9323      	str	r3, [sp, #140]	; 0x8c
1a003f44:	9222      	str	r2, [sp, #136]	; 0x88
1a003f46:	e884 0120 	stmia.w	r4, {r5, r8}
1a003f4a:	ddf0      	ble.n	1a003f2e <_svfprintf_r+0x386>
1a003f4c:	4658      	mov	r0, fp
1a003f4e:	4631      	mov	r1, r6
1a003f50:	aa21      	add	r2, sp, #132	; 0x84
1a003f52:	f003 fa05 	bl	1a007360 <__ssprint_r>
1a003f56:	2800      	cmp	r0, #0
1a003f58:	f47f aeee 	bne.w	1a003d38 <_svfprintf_r+0x190>
1a003f5c:	f1aa 0a10 	sub.w	sl, sl, #16
1a003f60:	f1ba 0f10 	cmp.w	sl, #16
1a003f64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
1a003f66:	9a22      	ldr	r2, [sp, #136]	; 0x88
1a003f68:	463c      	mov	r4, r7
1a003f6a:	dce7      	bgt.n	1a003f3c <_svfprintf_r+0x394>
1a003f6c:	469b      	mov	fp, r3
1a003f6e:	462b      	mov	r3, r5
1a003f70:	464d      	mov	r5, r9
1a003f72:	4699      	mov	r9, r3
1a003f74:	3201      	adds	r2, #1
1a003f76:	44d3      	add	fp, sl
1a003f78:	2a07      	cmp	r2, #7
1a003f7a:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a003f7e:	9222      	str	r2, [sp, #136]	; 0x88
1a003f80:	e884 0600 	stmia.w	r4, {r9, sl}
1a003f84:	f300 8379 	bgt.w	1a00467a <_svfprintf_r+0xad2>
1a003f88:	3408      	adds	r4, #8
1a003f8a:	9b03      	ldr	r3, [sp, #12]
1a003f8c:	05d9      	lsls	r1, r3, #23
1a003f8e:	f100 8270 	bmi.w	1a004472 <_svfprintf_r+0x8ca>
1a003f92:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a003f94:	9909      	ldr	r1, [sp, #36]	; 0x24
1a003f96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a003f98:	6022      	str	r2, [r4, #0]
1a003f9a:	3301      	adds	r3, #1
1a003f9c:	448b      	add	fp, r1
1a003f9e:	2b07      	cmp	r3, #7
1a003fa0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a003fa4:	6061      	str	r1, [r4, #4]
1a003fa6:	9322      	str	r3, [sp, #136]	; 0x88
1a003fa8:	f300 834a 	bgt.w	1a004640 <_svfprintf_r+0xa98>
1a003fac:	3408      	adds	r4, #8
1a003fae:	9b03      	ldr	r3, [sp, #12]
1a003fb0:	075a      	lsls	r2, r3, #29
1a003fb2:	d541      	bpl.n	1a004038 <_svfprintf_r+0x490>
1a003fb4:	9b08      	ldr	r3, [sp, #32]
1a003fb6:	9a05      	ldr	r2, [sp, #20]
1a003fb8:	1a9d      	subs	r5, r3, r2
1a003fba:	2d00      	cmp	r5, #0
1a003fbc:	dd3c      	ble.n	1a004038 <_svfprintf_r+0x490>
1a003fbe:	2d10      	cmp	r5, #16
1a003fc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a003fc2:	f8df a3bc 	ldr.w	sl, [pc, #956]	; 1a004380 <_svfprintf_r+0x7d8>
1a003fc6:	dd23      	ble.n	1a004010 <_svfprintf_r+0x468>
1a003fc8:	f04f 0810 	mov.w	r8, #16
1a003fcc:	465a      	mov	r2, fp
1a003fce:	f8dd 9010 	ldr.w	r9, [sp, #16]
1a003fd2:	e004      	b.n	1a003fde <_svfprintf_r+0x436>
1a003fd4:	3d10      	subs	r5, #16
1a003fd6:	2d10      	cmp	r5, #16
1a003fd8:	f104 0408 	add.w	r4, r4, #8
1a003fdc:	dd17      	ble.n	1a00400e <_svfprintf_r+0x466>
1a003fde:	3301      	adds	r3, #1
1a003fe0:	3210      	adds	r2, #16
1a003fe2:	2b07      	cmp	r3, #7
1a003fe4:	9223      	str	r2, [sp, #140]	; 0x8c
1a003fe6:	9322      	str	r3, [sp, #136]	; 0x88
1a003fe8:	f8c4 a000 	str.w	sl, [r4]
1a003fec:	f8c4 8004 	str.w	r8, [r4, #4]
1a003ff0:	ddf0      	ble.n	1a003fd4 <_svfprintf_r+0x42c>
1a003ff2:	4648      	mov	r0, r9
1a003ff4:	4631      	mov	r1, r6
1a003ff6:	aa21      	add	r2, sp, #132	; 0x84
1a003ff8:	f003 f9b2 	bl	1a007360 <__ssprint_r>
1a003ffc:	2800      	cmp	r0, #0
1a003ffe:	f47f ae9b 	bne.w	1a003d38 <_svfprintf_r+0x190>
1a004002:	3d10      	subs	r5, #16
1a004004:	2d10      	cmp	r5, #16
1a004006:	9a23      	ldr	r2, [sp, #140]	; 0x8c
1a004008:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a00400a:	463c      	mov	r4, r7
1a00400c:	dce7      	bgt.n	1a003fde <_svfprintf_r+0x436>
1a00400e:	4693      	mov	fp, r2
1a004010:	3301      	adds	r3, #1
1a004012:	44ab      	add	fp, r5
1a004014:	2b07      	cmp	r3, #7
1a004016:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a00401a:	9322      	str	r3, [sp, #136]	; 0x88
1a00401c:	f8c4 a000 	str.w	sl, [r4]
1a004020:	6065      	str	r5, [r4, #4]
1a004022:	dd09      	ble.n	1a004038 <_svfprintf_r+0x490>
1a004024:	9804      	ldr	r0, [sp, #16]
1a004026:	4631      	mov	r1, r6
1a004028:	aa21      	add	r2, sp, #132	; 0x84
1a00402a:	f003 f999 	bl	1a007360 <__ssprint_r>
1a00402e:	2800      	cmp	r0, #0
1a004030:	f47f ae82 	bne.w	1a003d38 <_svfprintf_r+0x190>
1a004034:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a004038:	9b07      	ldr	r3, [sp, #28]
1a00403a:	9a05      	ldr	r2, [sp, #20]
1a00403c:	9908      	ldr	r1, [sp, #32]
1a00403e:	428a      	cmp	r2, r1
1a004040:	bfac      	ite	ge
1a004042:	189b      	addge	r3, r3, r2
1a004044:	185b      	addlt	r3, r3, r1
1a004046:	9307      	str	r3, [sp, #28]
1a004048:	f1bb 0f00 	cmp.w	fp, #0
1a00404c:	f47f ae6c 	bne.w	1a003d28 <_svfprintf_r+0x180>
1a004050:	2300      	movs	r3, #0
1a004052:	9322      	str	r3, [sp, #136]	; 0x88
1a004054:	463c      	mov	r4, r7
1a004056:	e5ce      	b.n	1a003bf6 <_svfprintf_r+0x4e>
1a004058:	4619      	mov	r1, r3
1a00405a:	9803      	ldr	r0, [sp, #12]
1a00405c:	781d      	ldrb	r5, [r3, #0]
1a00405e:	f040 0004 	orr.w	r0, r0, #4
1a004062:	9003      	str	r0, [sp, #12]
1a004064:	e5f5      	b.n	1a003c52 <_svfprintf_r+0xaa>
1a004066:	9306      	str	r3, [sp, #24]
1a004068:	9b03      	ldr	r3, [sp, #12]
1a00406a:	f013 0320 	ands.w	r3, r3, #32
1a00406e:	f000 810e 	beq.w	1a00428e <_svfprintf_r+0x6e6>
1a004072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004074:	f103 0907 	add.w	r9, r3, #7
1a004078:	f029 0307 	bic.w	r3, r9, #7
1a00407c:	f103 0208 	add.w	r2, r3, #8
1a004080:	e9d3 8900 	ldrd	r8, r9, [r3]
1a004084:	920a      	str	r2, [sp, #40]	; 0x28
1a004086:	2300      	movs	r3, #0
1a004088:	e675      	b.n	1a003d76 <_svfprintf_r+0x1ce>
1a00408a:	781d      	ldrb	r5, [r3, #0]
1a00408c:	4619      	mov	r1, r3
1a00408e:	222b      	movs	r2, #43	; 0x2b
1a004090:	e5df      	b.n	1a003c52 <_svfprintf_r+0xaa>
1a004092:	781d      	ldrb	r5, [r3, #0]
1a004094:	2d2a      	cmp	r5, #42	; 0x2a
1a004096:	f103 0101 	add.w	r1, r3, #1
1a00409a:	f000 87b8 	beq.w	1a00500e <_svfprintf_r+0x1466>
1a00409e:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
1a0040a2:	2809      	cmp	r0, #9
1a0040a4:	460b      	mov	r3, r1
1a0040a6:	f04f 0a00 	mov.w	sl, #0
1a0040aa:	f63f add3 	bhi.w	1a003c54 <_svfprintf_r+0xac>
1a0040ae:	f813 5b01 	ldrb.w	r5, [r3], #1
1a0040b2:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
1a0040b6:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
1a0040ba:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
1a0040be:	2809      	cmp	r0, #9
1a0040c0:	d9f5      	bls.n	1a0040ae <_svfprintf_r+0x506>
1a0040c2:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
1a0040c6:	e5c5      	b.n	1a003c54 <_svfprintf_r+0xac>
1a0040c8:	9306      	str	r3, [sp, #24]
1a0040ca:	9b03      	ldr	r3, [sp, #12]
1a0040cc:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
1a0040d0:	069b      	lsls	r3, r3, #26
1a0040d2:	f140 80a1 	bpl.w	1a004218 <_svfprintf_r+0x670>
1a0040d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0040d8:	f103 0907 	add.w	r9, r3, #7
1a0040dc:	f029 0907 	bic.w	r9, r9, #7
1a0040e0:	e9d9 2300 	ldrd	r2, r3, [r9]
1a0040e4:	f109 0108 	add.w	r1, r9, #8
1a0040e8:	910a      	str	r1, [sp, #40]	; 0x28
1a0040ea:	4690      	mov	r8, r2
1a0040ec:	4699      	mov	r9, r3
1a0040ee:	2a00      	cmp	r2, #0
1a0040f0:	f173 0300 	sbcs.w	r3, r3, #0
1a0040f4:	f2c0 840e 	blt.w	1a004914 <_svfprintf_r+0xd6c>
1a0040f8:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
1a0040fc:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
1a004100:	2301      	movs	r3, #1
1a004102:	e63e      	b.n	1a003d82 <_svfprintf_r+0x1da>
1a004104:	9306      	str	r3, [sp, #24]
1a004106:	4b9b      	ldr	r3, [pc, #620]	; (1a004374 <_svfprintf_r+0x7cc>)
1a004108:	9312      	str	r3, [sp, #72]	; 0x48
1a00410a:	9b03      	ldr	r3, [sp, #12]
1a00410c:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
1a004110:	069b      	lsls	r3, r3, #26
1a004112:	f140 80f3 	bpl.w	1a0042fc <_svfprintf_r+0x754>
1a004116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004118:	f103 0907 	add.w	r9, r3, #7
1a00411c:	f029 0307 	bic.w	r3, r9, #7
1a004120:	e9d3 8900 	ldrd	r8, r9, [r3]
1a004124:	f103 0208 	add.w	r2, r3, #8
1a004128:	920a      	str	r2, [sp, #40]	; 0x28
1a00412a:	9b03      	ldr	r3, [sp, #12]
1a00412c:	07d9      	lsls	r1, r3, #31
1a00412e:	f140 80f5 	bpl.w	1a00431c <_svfprintf_r+0x774>
1a004132:	ea58 0309 	orrs.w	r3, r8, r9
1a004136:	f000 80f1 	beq.w	1a00431c <_svfprintf_r+0x774>
1a00413a:	9a03      	ldr	r2, [sp, #12]
1a00413c:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
1a004140:	2330      	movs	r3, #48	; 0x30
1a004142:	f042 0202 	orr.w	r2, r2, #2
1a004146:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
1a00414a:	9203      	str	r2, [sp, #12]
1a00414c:	2302      	movs	r3, #2
1a00414e:	e612      	b.n	1a003d76 <_svfprintf_r+0x1ce>
1a004150:	781d      	ldrb	r5, [r3, #0]
1a004152:	4619      	mov	r1, r3
1a004154:	2a00      	cmp	r2, #0
1a004156:	f47f ad7c 	bne.w	1a003c52 <_svfprintf_r+0xaa>
1a00415a:	2220      	movs	r2, #32
1a00415c:	e579      	b.n	1a003c52 <_svfprintf_r+0xaa>
1a00415e:	9903      	ldr	r1, [sp, #12]
1a004160:	f041 0120 	orr.w	r1, r1, #32
1a004164:	9103      	str	r1, [sp, #12]
1a004166:	781d      	ldrb	r5, [r3, #0]
1a004168:	4619      	mov	r1, r3
1a00416a:	e572      	b.n	1a003c52 <_svfprintf_r+0xaa>
1a00416c:	9306      	str	r3, [sp, #24]
1a00416e:	9b03      	ldr	r3, [sp, #12]
1a004170:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
1a004174:	069a      	lsls	r2, r3, #26
1a004176:	f140 84b0 	bpl.w	1a004ada <_svfprintf_r+0xf32>
1a00417a:	9907      	ldr	r1, [sp, #28]
1a00417c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a00417e:	ea4f 79e1 	mov.w	r9, r1, asr #31
1a004182:	6813      	ldr	r3, [r2, #0]
1a004184:	4608      	mov	r0, r1
1a004186:	4688      	mov	r8, r1
1a004188:	3204      	adds	r2, #4
1a00418a:	4649      	mov	r1, r9
1a00418c:	920a      	str	r2, [sp, #40]	; 0x28
1a00418e:	e9c3 0100 	strd	r0, r1, [r3]
1a004192:	e530      	b.n	1a003bf6 <_svfprintf_r+0x4e>
1a004194:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a004196:	9306      	str	r3, [sp, #24]
1a004198:	6813      	ldr	r3, [r2, #0]
1a00419a:	930c      	str	r3, [sp, #48]	; 0x30
1a00419c:	f04f 0b00 	mov.w	fp, #0
1a0041a0:	f88d b067 	strb.w	fp, [sp, #103]	; 0x67
1a0041a4:	f102 0904 	add.w	r9, r2, #4
1a0041a8:	2b00      	cmp	r3, #0
1a0041aa:	f000 8646 	beq.w	1a004e3a <_svfprintf_r+0x1292>
1a0041ae:	f1ba 0f00 	cmp.w	sl, #0
1a0041b2:	980c      	ldr	r0, [sp, #48]	; 0x30
1a0041b4:	f2c0 85f6 	blt.w	1a004da4 <_svfprintf_r+0x11fc>
1a0041b8:	4659      	mov	r1, fp
1a0041ba:	4652      	mov	r2, sl
1a0041bc:	f002 fb04 	bl	1a0067c8 <memchr>
1a0041c0:	2800      	cmp	r0, #0
1a0041c2:	f000 8677 	beq.w	1a004eb4 <_svfprintf_r+0x130c>
1a0041c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0041c8:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
1a0041cc:	1ac3      	subs	r3, r0, r3
1a0041ce:	9309      	str	r3, [sp, #36]	; 0x24
1a0041d0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
1a0041d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a0041d8:	9305      	str	r3, [sp, #20]
1a0041da:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
1a0041de:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
1a0041e2:	e603      	b.n	1a003dec <_svfprintf_r+0x244>
1a0041e4:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
1a0041e8:	2100      	movs	r1, #0
1a0041ea:	f813 5b01 	ldrb.w	r5, [r3], #1
1a0041ee:	eb01 0181 	add.w	r1, r1, r1, lsl #2
1a0041f2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
1a0041f6:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
1a0041fa:	2809      	cmp	r0, #9
1a0041fc:	d9f5      	bls.n	1a0041ea <_svfprintf_r+0x642>
1a0041fe:	9108      	str	r1, [sp, #32]
1a004200:	e528      	b.n	1a003c54 <_svfprintf_r+0xac>
1a004202:	9306      	str	r3, [sp, #24]
1a004204:	9b03      	ldr	r3, [sp, #12]
1a004206:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
1a00420a:	f043 0310 	orr.w	r3, r3, #16
1a00420e:	9303      	str	r3, [sp, #12]
1a004210:	9b03      	ldr	r3, [sp, #12]
1a004212:	069b      	lsls	r3, r3, #26
1a004214:	f53f af5f 	bmi.w	1a0040d6 <_svfprintf_r+0x52e>
1a004218:	9b03      	ldr	r3, [sp, #12]
1a00421a:	06d8      	lsls	r0, r3, #27
1a00421c:	f100 836b 	bmi.w	1a0048f6 <_svfprintf_r+0xd4e>
1a004220:	9b03      	ldr	r3, [sp, #12]
1a004222:	0659      	lsls	r1, r3, #25
1a004224:	f140 8367 	bpl.w	1a0048f6 <_svfprintf_r+0xd4e>
1a004228:	990a      	ldr	r1, [sp, #40]	; 0x28
1a00422a:	f9b1 8000 	ldrsh.w	r8, [r1]
1a00422e:	3104      	adds	r1, #4
1a004230:	ea4f 79e8 	mov.w	r9, r8, asr #31
1a004234:	4642      	mov	r2, r8
1a004236:	464b      	mov	r3, r9
1a004238:	910a      	str	r1, [sp, #40]	; 0x28
1a00423a:	e758      	b.n	1a0040ee <_svfprintf_r+0x546>
1a00423c:	781d      	ldrb	r5, [r3, #0]
1a00423e:	9903      	ldr	r1, [sp, #12]
1a004240:	2d6c      	cmp	r5, #108	; 0x6c
1a004242:	f000 84d3 	beq.w	1a004bec <_svfprintf_r+0x1044>
1a004246:	f041 0110 	orr.w	r1, r1, #16
1a00424a:	9103      	str	r1, [sp, #12]
1a00424c:	4619      	mov	r1, r3
1a00424e:	e500      	b.n	1a003c52 <_svfprintf_r+0xaa>
1a004250:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a004252:	6829      	ldr	r1, [r5, #0]
1a004254:	9108      	str	r1, [sp, #32]
1a004256:	4608      	mov	r0, r1
1a004258:	2800      	cmp	r0, #0
1a00425a:	4629      	mov	r1, r5
1a00425c:	f101 0104 	add.w	r1, r1, #4
1a004260:	f2c0 84cb 	blt.w	1a004bfa <_svfprintf_r+0x1052>
1a004264:	910a      	str	r1, [sp, #40]	; 0x28
1a004266:	781d      	ldrb	r5, [r3, #0]
1a004268:	4619      	mov	r1, r3
1a00426a:	e4f2      	b.n	1a003c52 <_svfprintf_r+0xaa>
1a00426c:	9903      	ldr	r1, [sp, #12]
1a00426e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
1a004272:	9103      	str	r1, [sp, #12]
1a004274:	781d      	ldrb	r5, [r3, #0]
1a004276:	4619      	mov	r1, r3
1a004278:	e4eb      	b.n	1a003c52 <_svfprintf_r+0xaa>
1a00427a:	9306      	str	r3, [sp, #24]
1a00427c:	9b03      	ldr	r3, [sp, #12]
1a00427e:	f043 0310 	orr.w	r3, r3, #16
1a004282:	9303      	str	r3, [sp, #12]
1a004284:	9b03      	ldr	r3, [sp, #12]
1a004286:	f013 0320 	ands.w	r3, r3, #32
1a00428a:	f47f aef2 	bne.w	1a004072 <_svfprintf_r+0x4ca>
1a00428e:	9a03      	ldr	r2, [sp, #12]
1a004290:	f012 0210 	ands.w	r2, r2, #16
1a004294:	f040 831c 	bne.w	1a0048d0 <_svfprintf_r+0xd28>
1a004298:	9b03      	ldr	r3, [sp, #12]
1a00429a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
1a00429e:	f000 8317 	beq.w	1a0048d0 <_svfprintf_r+0xd28>
1a0042a2:	990a      	ldr	r1, [sp, #40]	; 0x28
1a0042a4:	4613      	mov	r3, r2
1a0042a6:	460a      	mov	r2, r1
1a0042a8:	3204      	adds	r2, #4
1a0042aa:	f8b1 8000 	ldrh.w	r8, [r1]
1a0042ae:	920a      	str	r2, [sp, #40]	; 0x28
1a0042b0:	f04f 0900 	mov.w	r9, #0
1a0042b4:	e55f      	b.n	1a003d76 <_svfprintf_r+0x1ce>
1a0042b6:	9306      	str	r3, [sp, #24]
1a0042b8:	9b03      	ldr	r3, [sp, #12]
1a0042ba:	f043 0310 	orr.w	r3, r3, #16
1a0042be:	9303      	str	r3, [sp, #12]
1a0042c0:	9b03      	ldr	r3, [sp, #12]
1a0042c2:	0698      	lsls	r0, r3, #26
1a0042c4:	f53f ad4c 	bmi.w	1a003d60 <_svfprintf_r+0x1b8>
1a0042c8:	9b03      	ldr	r3, [sp, #12]
1a0042ca:	06d9      	lsls	r1, r3, #27
1a0042cc:	f100 8309 	bmi.w	1a0048e2 <_svfprintf_r+0xd3a>
1a0042d0:	9b03      	ldr	r3, [sp, #12]
1a0042d2:	065a      	lsls	r2, r3, #25
1a0042d4:	f140 8305 	bpl.w	1a0048e2 <_svfprintf_r+0xd3a>
1a0042d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a0042da:	f8b2 8000 	ldrh.w	r8, [r2]
1a0042de:	3204      	adds	r2, #4
1a0042e0:	f04f 0900 	mov.w	r9, #0
1a0042e4:	2301      	movs	r3, #1
1a0042e6:	920a      	str	r2, [sp, #40]	; 0x28
1a0042e8:	e545      	b.n	1a003d76 <_svfprintf_r+0x1ce>
1a0042ea:	9306      	str	r3, [sp, #24]
1a0042ec:	4b22      	ldr	r3, [pc, #136]	; (1a004378 <_svfprintf_r+0x7d0>)
1a0042ee:	9312      	str	r3, [sp, #72]	; 0x48
1a0042f0:	9b03      	ldr	r3, [sp, #12]
1a0042f2:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
1a0042f6:	069b      	lsls	r3, r3, #26
1a0042f8:	f53f af0d 	bmi.w	1a004116 <_svfprintf_r+0x56e>
1a0042fc:	9b03      	ldr	r3, [sp, #12]
1a0042fe:	06d8      	lsls	r0, r3, #27
1a004300:	f140 83dc 	bpl.w	1a004abc <_svfprintf_r+0xf14>
1a004304:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a004306:	4613      	mov	r3, r2
1a004308:	681b      	ldr	r3, [r3, #0]
1a00430a:	4698      	mov	r8, r3
1a00430c:	9b03      	ldr	r3, [sp, #12]
1a00430e:	3204      	adds	r2, #4
1a004310:	07d9      	lsls	r1, r3, #31
1a004312:	920a      	str	r2, [sp, #40]	; 0x28
1a004314:	f04f 0900 	mov.w	r9, #0
1a004318:	f53f af0b 	bmi.w	1a004132 <_svfprintf_r+0x58a>
1a00431c:	2302      	movs	r3, #2
1a00431e:	e52a      	b.n	1a003d76 <_svfprintf_r+0x1ce>
1a004320:	990a      	ldr	r1, [sp, #40]	; 0x28
1a004322:	9306      	str	r3, [sp, #24]
1a004324:	680a      	ldr	r2, [r1, #0]
1a004326:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
1a00432a:	2300      	movs	r3, #0
1a00432c:	2201      	movs	r2, #1
1a00432e:	3104      	adds	r1, #4
1a004330:	469c      	mov	ip, r3
1a004332:	9205      	str	r2, [sp, #20]
1a004334:	910a      	str	r1, [sp, #40]	; 0x28
1a004336:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
1a00433a:	ab24      	add	r3, sp, #144	; 0x90
1a00433c:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
1a004340:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
1a004344:	9209      	str	r2, [sp, #36]	; 0x24
1a004346:	930c      	str	r3, [sp, #48]	; 0x30
1a004348:	e556      	b.n	1a003df8 <_svfprintf_r+0x250>
1a00434a:	9903      	ldr	r1, [sp, #12]
1a00434c:	f041 0108 	orr.w	r1, r1, #8
1a004350:	9103      	str	r1, [sp, #12]
1a004352:	781d      	ldrb	r5, [r3, #0]
1a004354:	4619      	mov	r1, r3
1a004356:	e47c      	b.n	1a003c52 <_svfprintf_r+0xaa>
1a004358:	9903      	ldr	r1, [sp, #12]
1a00435a:	f041 0101 	orr.w	r1, r1, #1
1a00435e:	9103      	str	r1, [sp, #12]
1a004360:	781d      	ldrb	r5, [r3, #0]
1a004362:	4619      	mov	r1, r3
1a004364:	e475      	b.n	1a003c52 <_svfprintf_r+0xaa>
1a004366:	9903      	ldr	r1, [sp, #12]
1a004368:	f041 0180 	orr.w	r1, r1, #128	; 0x80
1a00436c:	9103      	str	r1, [sp, #12]
1a00436e:	781d      	ldrb	r5, [r3, #0]
1a004370:	4619      	mov	r1, r3
1a004372:	e46e      	b.n	1a003c52 <_svfprintf_r+0xaa>
1a004374:	1a007c04 	.word	0x1a007c04
1a004378:	1a007bf0 	.word	0x1a007bf0
1a00437c:	1a007bd0 	.word	0x1a007bd0
1a004380:	1a007c24 	.word	0x1a007c24
1a004384:	9306      	str	r3, [sp, #24]
1a004386:	9b03      	ldr	r3, [sp, #12]
1a004388:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
1a00438c:	f013 0f08 	tst.w	r3, #8
1a004390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004392:	46d3      	mov	fp, sl
1a004394:	f103 0907 	add.w	r9, r3, #7
1a004398:	f000 8386 	beq.w	1a004aa8 <_svfprintf_r+0xf00>
1a00439c:	f029 0307 	bic.w	r3, r9, #7
1a0043a0:	ed93 7b00 	vldr	d7, [r3]
1a0043a4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a0043a8:	f103 0208 	add.w	r2, r3, #8
1a0043ac:	920a      	str	r2, [sp, #40]	; 0x28
1a0043ae:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
1a0043b2:	f002 ffa7 	bl	1a007304 <__fpclassifyd>
1a0043b6:	2801      	cmp	r0, #1
1a0043b8:	f040 835a 	bne.w	1a004a70 <_svfprintf_r+0xec8>
1a0043bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a0043c0:	2200      	movs	r2, #0
1a0043c2:	2300      	movs	r3, #0
1a0043c4:	f003 f8de 	bl	1a007584 <__aeabi_dcmplt>
1a0043c8:	2800      	cmp	r0, #0
1a0043ca:	f040 856b 	bne.w	1a004ea4 <_svfprintf_r+0x12fc>
1a0043ce:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
1a0043d2:	9b03      	ldr	r3, [sp, #12]
1a0043d4:	4abd      	ldr	r2, [pc, #756]	; (1a0046cc <_svfprintf_r+0xb24>)
1a0043d6:	f8df e300 	ldr.w	lr, [pc, #768]	; 1a0046d8 <_svfprintf_r+0xb30>
1a0043da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0043de:	9303      	str	r3, [sp, #12]
1a0043e0:	4613      	mov	r3, r2
1a0043e2:	2103      	movs	r1, #3
1a0043e4:	2000      	movs	r0, #0
1a0043e6:	2d47      	cmp	r5, #71	; 0x47
1a0043e8:	bfd8      	it	le
1a0043ea:	4673      	movle	r3, lr
1a0043ec:	9105      	str	r1, [sp, #20]
1a0043ee:	900d      	str	r0, [sp, #52]	; 0x34
1a0043f0:	930c      	str	r3, [sp, #48]	; 0x30
1a0043f2:	9109      	str	r1, [sp, #36]	; 0x24
1a0043f4:	900e      	str	r0, [sp, #56]	; 0x38
1a0043f6:	e4f9      	b.n	1a003dec <_svfprintf_r+0x244>
1a0043f8:	980a      	ldr	r0, [sp, #40]	; 0x28
1a0043fa:	9903      	ldr	r1, [sp, #12]
1a0043fc:	9306      	str	r3, [sp, #24]
1a0043fe:	2230      	movs	r2, #48	; 0x30
1a004400:	6803      	ldr	r3, [r0, #0]
1a004402:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
1a004406:	4602      	mov	r2, r0
1a004408:	2578      	movs	r5, #120	; 0x78
1a00440a:	f041 0102 	orr.w	r1, r1, #2
1a00440e:	3204      	adds	r2, #4
1a004410:	4698      	mov	r8, r3
1a004412:	4baf      	ldr	r3, [pc, #700]	; (1a0046d0 <_svfprintf_r+0xb28>)
1a004414:	9312      	str	r3, [sp, #72]	; 0x48
1a004416:	9103      	str	r1, [sp, #12]
1a004418:	920a      	str	r2, [sp, #40]	; 0x28
1a00441a:	f04f 0900 	mov.w	r9, #0
1a00441e:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
1a004422:	2302      	movs	r3, #2
1a004424:	e4a7      	b.n	1a003d76 <_svfprintf_r+0x1ce>
1a004426:	9306      	str	r3, [sp, #24]
1a004428:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
1a00442c:	2d00      	cmp	r5, #0
1a00442e:	f000 83d1 	beq.w	1a004bd4 <_svfprintf_r+0x102c>
1a004432:	2300      	movs	r3, #0
1a004434:	2201      	movs	r2, #1
1a004436:	469c      	mov	ip, r3
1a004438:	9205      	str	r2, [sp, #20]
1a00443a:	f88d 5090 	strb.w	r5, [sp, #144]	; 0x90
1a00443e:	e77a      	b.n	1a004336 <_svfprintf_r+0x78e>
1a004440:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a004444:	e535      	b.n	1a003eb2 <_svfprintf_r+0x30a>
1a004446:	2b01      	cmp	r3, #1
1a004448:	f47f acad 	bne.w	1a003da6 <_svfprintf_r+0x1fe>
1a00444c:	f1b9 0f00 	cmp.w	r9, #0
1a004450:	bf08      	it	eq
1a004452:	f1b8 0f0a 	cmpeq.w	r8, #10
1a004456:	f080 820d 	bcs.w	1a004874 <_svfprintf_r+0xccc>
1a00445a:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
1a00445e:	f108 0830 	add.w	r8, r8, #48	; 0x30
1a004462:	f80b 8d41 	strb.w	r8, [fp, #-65]!
1a004466:	ebcb 0307 	rsb	r3, fp, r7
1a00446a:	9309      	str	r3, [sp, #36]	; 0x24
1a00446c:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
1a004470:	e4b4      	b.n	1a003ddc <_svfprintf_r+0x234>
1a004472:	2d65      	cmp	r5, #101	; 0x65
1a004474:	f340 80a0 	ble.w	1a0045b8 <_svfprintf_r+0xa10>
1a004478:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00447c:	2200      	movs	r2, #0
1a00447e:	2300      	movs	r3, #0
1a004480:	f003 f876 	bl	1a007570 <__aeabi_dcmpeq>
1a004484:	2800      	cmp	r0, #0
1a004486:	f000 8144 	beq.w	1a004712 <_svfprintf_r+0xb6a>
1a00448a:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a00448c:	4a91      	ldr	r2, [pc, #580]	; (1a0046d4 <_svfprintf_r+0xb2c>)
1a00448e:	6022      	str	r2, [r4, #0]
1a004490:	3301      	adds	r3, #1
1a004492:	f10b 0b01 	add.w	fp, fp, #1
1a004496:	2201      	movs	r2, #1
1a004498:	2b07      	cmp	r3, #7
1a00449a:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a00449e:	9322      	str	r3, [sp, #136]	; 0x88
1a0044a0:	6062      	str	r2, [r4, #4]
1a0044a2:	f300 833f 	bgt.w	1a004b24 <_svfprintf_r+0xf7c>
1a0044a6:	3408      	adds	r4, #8
1a0044a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a0044aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1a0044ac:	4293      	cmp	r3, r2
1a0044ae:	db03      	blt.n	1a0044b8 <_svfprintf_r+0x910>
1a0044b0:	9b03      	ldr	r3, [sp, #12]
1a0044b2:	07da      	lsls	r2, r3, #31
1a0044b4:	f57f ad7b 	bpl.w	1a003fae <_svfprintf_r+0x406>
1a0044b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0044ba:	9914      	ldr	r1, [sp, #80]	; 0x50
1a0044bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a0044be:	6022      	str	r2, [r4, #0]
1a0044c0:	3301      	adds	r3, #1
1a0044c2:	448b      	add	fp, r1
1a0044c4:	2b07      	cmp	r3, #7
1a0044c6:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a0044ca:	6061      	str	r1, [r4, #4]
1a0044cc:	9322      	str	r3, [sp, #136]	; 0x88
1a0044ce:	f300 839b 	bgt.w	1a004c08 <_svfprintf_r+0x1060>
1a0044d2:	3408      	adds	r4, #8
1a0044d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0044d6:	1e5d      	subs	r5, r3, #1
1a0044d8:	2d00      	cmp	r5, #0
1a0044da:	f77f ad68 	ble.w	1a003fae <_svfprintf_r+0x406>
1a0044de:	2d10      	cmp	r5, #16
1a0044e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0044e2:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 1a0046dc <_svfprintf_r+0xb34>
1a0044e6:	f340 81b9 	ble.w	1a00485c <_svfprintf_r+0xcb4>
1a0044ea:	f04f 0810 	mov.w	r8, #16
1a0044ee:	465a      	mov	r2, fp
1a0044f0:	f8dd a010 	ldr.w	sl, [sp, #16]
1a0044f4:	e004      	b.n	1a004500 <_svfprintf_r+0x958>
1a0044f6:	3408      	adds	r4, #8
1a0044f8:	3d10      	subs	r5, #16
1a0044fa:	2d10      	cmp	r5, #16
1a0044fc:	f340 81ad 	ble.w	1a00485a <_svfprintf_r+0xcb2>
1a004500:	3301      	adds	r3, #1
1a004502:	3210      	adds	r2, #16
1a004504:	2b07      	cmp	r3, #7
1a004506:	9223      	str	r2, [sp, #140]	; 0x8c
1a004508:	9322      	str	r3, [sp, #136]	; 0x88
1a00450a:	f8c4 9000 	str.w	r9, [r4]
1a00450e:	f8c4 8004 	str.w	r8, [r4, #4]
1a004512:	ddf0      	ble.n	1a0044f6 <_svfprintf_r+0x94e>
1a004514:	4650      	mov	r0, sl
1a004516:	4631      	mov	r1, r6
1a004518:	aa21      	add	r2, sp, #132	; 0x84
1a00451a:	f002 ff21 	bl	1a007360 <__ssprint_r>
1a00451e:	2800      	cmp	r0, #0
1a004520:	f47f ac0a 	bne.w	1a003d38 <_svfprintf_r+0x190>
1a004524:	9a23      	ldr	r2, [sp, #140]	; 0x8c
1a004526:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004528:	463c      	mov	r4, r7
1a00452a:	e7e5      	b.n	1a0044f8 <_svfprintf_r+0x950>
1a00452c:	9b08      	ldr	r3, [sp, #32]
1a00452e:	9a05      	ldr	r2, [sp, #20]
1a004530:	ebc2 0a03 	rsb	sl, r2, r3
1a004534:	f1ba 0f00 	cmp.w	sl, #0
1a004538:	f77f ace3 	ble.w	1a003f02 <_svfprintf_r+0x35a>
1a00453c:	f1ba 0f10 	cmp.w	sl, #16
1a004540:	9a22      	ldr	r2, [sp, #136]	; 0x88
1a004542:	f8df 9198 	ldr.w	r9, [pc, #408]	; 1a0046dc <_svfprintf_r+0xb34>
1a004546:	dd2b      	ble.n	1a0045a0 <_svfprintf_r+0x9f8>
1a004548:	4649      	mov	r1, r9
1a00454a:	465b      	mov	r3, fp
1a00454c:	46a9      	mov	r9, r5
1a00454e:	f04f 0810 	mov.w	r8, #16
1a004552:	f8dd b010 	ldr.w	fp, [sp, #16]
1a004556:	460d      	mov	r5, r1
1a004558:	e006      	b.n	1a004568 <_svfprintf_r+0x9c0>
1a00455a:	f1aa 0a10 	sub.w	sl, sl, #16
1a00455e:	f1ba 0f10 	cmp.w	sl, #16
1a004562:	f104 0408 	add.w	r4, r4, #8
1a004566:	dd17      	ble.n	1a004598 <_svfprintf_r+0x9f0>
1a004568:	3201      	adds	r2, #1
1a00456a:	3310      	adds	r3, #16
1a00456c:	2a07      	cmp	r2, #7
1a00456e:	9323      	str	r3, [sp, #140]	; 0x8c
1a004570:	9222      	str	r2, [sp, #136]	; 0x88
1a004572:	e884 0120 	stmia.w	r4, {r5, r8}
1a004576:	ddf0      	ble.n	1a00455a <_svfprintf_r+0x9b2>
1a004578:	4658      	mov	r0, fp
1a00457a:	4631      	mov	r1, r6
1a00457c:	aa21      	add	r2, sp, #132	; 0x84
1a00457e:	f002 feef 	bl	1a007360 <__ssprint_r>
1a004582:	2800      	cmp	r0, #0
1a004584:	f47f abd8 	bne.w	1a003d38 <_svfprintf_r+0x190>
1a004588:	f1aa 0a10 	sub.w	sl, sl, #16
1a00458c:	f1ba 0f10 	cmp.w	sl, #16
1a004590:	9b23      	ldr	r3, [sp, #140]	; 0x8c
1a004592:	9a22      	ldr	r2, [sp, #136]	; 0x88
1a004594:	463c      	mov	r4, r7
1a004596:	dce7      	bgt.n	1a004568 <_svfprintf_r+0x9c0>
1a004598:	469b      	mov	fp, r3
1a00459a:	462b      	mov	r3, r5
1a00459c:	464d      	mov	r5, r9
1a00459e:	4699      	mov	r9, r3
1a0045a0:	3201      	adds	r2, #1
1a0045a2:	44d3      	add	fp, sl
1a0045a4:	2a07      	cmp	r2, #7
1a0045a6:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a0045aa:	9222      	str	r2, [sp, #136]	; 0x88
1a0045ac:	e884 0600 	stmia.w	r4, {r9, sl}
1a0045b0:	f300 8251 	bgt.w	1a004a56 <_svfprintf_r+0xeae>
1a0045b4:	3408      	adds	r4, #8
1a0045b6:	e4a4      	b.n	1a003f02 <_svfprintf_r+0x35a>
1a0045b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0045ba:	9d22      	ldr	r5, [sp, #136]	; 0x88
1a0045bc:	2b01      	cmp	r3, #1
1a0045be:	f340 821f 	ble.w	1a004a00 <_svfprintf_r+0xe58>
1a0045c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0045c4:	6023      	str	r3, [r4, #0]
1a0045c6:	3501      	adds	r5, #1
1a0045c8:	f10b 0301 	add.w	r3, fp, #1
1a0045cc:	2201      	movs	r2, #1
1a0045ce:	2d07      	cmp	r5, #7
1a0045d0:	9323      	str	r3, [sp, #140]	; 0x8c
1a0045d2:	9522      	str	r5, [sp, #136]	; 0x88
1a0045d4:	6062      	str	r2, [r4, #4]
1a0045d6:	f300 8225 	bgt.w	1a004a24 <_svfprintf_r+0xe7c>
1a0045da:	3408      	adds	r4, #8
1a0045dc:	9914      	ldr	r1, [sp, #80]	; 0x50
1a0045de:	6061      	str	r1, [r4, #4]
1a0045e0:	3501      	adds	r5, #1
1a0045e2:	eb03 0b01 	add.w	fp, r3, r1
1a0045e6:	2d07      	cmp	r5, #7
1a0045e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a0045ea:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a0045ee:	9522      	str	r5, [sp, #136]	; 0x88
1a0045f0:	6023      	str	r3, [r4, #0]
1a0045f2:	f300 8223 	bgt.w	1a004a3c <_svfprintf_r+0xe94>
1a0045f6:	3408      	adds	r4, #8
1a0045f8:	2300      	movs	r3, #0
1a0045fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a0045fe:	2200      	movs	r2, #0
1a004600:	f002 ffb6 	bl	1a007570 <__aeabi_dcmpeq>
1a004604:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a004606:	2800      	cmp	r0, #0
1a004608:	f040 80dd 	bne.w	1a0047c6 <_svfprintf_r+0xc1e>
1a00460c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a00460e:	3b01      	subs	r3, #1
1a004610:	3501      	adds	r5, #1
1a004612:	3201      	adds	r2, #1
1a004614:	449b      	add	fp, r3
1a004616:	2d07      	cmp	r5, #7
1a004618:	9522      	str	r5, [sp, #136]	; 0x88
1a00461a:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a00461e:	6022      	str	r2, [r4, #0]
1a004620:	6063      	str	r3, [r4, #4]
1a004622:	f300 810d 	bgt.w	1a004840 <_svfprintf_r+0xc98>
1a004626:	3408      	adds	r4, #8
1a004628:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a00462a:	6062      	str	r2, [r4, #4]
1a00462c:	3501      	adds	r5, #1
1a00462e:	4493      	add	fp, r2
1a004630:	ab1d      	add	r3, sp, #116	; 0x74
1a004632:	2d07      	cmp	r5, #7
1a004634:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a004638:	9522      	str	r5, [sp, #136]	; 0x88
1a00463a:	6023      	str	r3, [r4, #0]
1a00463c:	f77f acb6 	ble.w	1a003fac <_svfprintf_r+0x404>
1a004640:	9804      	ldr	r0, [sp, #16]
1a004642:	4631      	mov	r1, r6
1a004644:	aa21      	add	r2, sp, #132	; 0x84
1a004646:	f002 fe8b 	bl	1a007360 <__ssprint_r>
1a00464a:	2800      	cmp	r0, #0
1a00464c:	f47f ab74 	bne.w	1a003d38 <_svfprintf_r+0x190>
1a004650:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a004654:	463c      	mov	r4, r7
1a004656:	e4aa      	b.n	1a003fae <_svfprintf_r+0x406>
1a004658:	2b00      	cmp	r3, #0
1a00465a:	d132      	bne.n	1a0046c2 <_svfprintf_r+0xb1a>
1a00465c:	9b03      	ldr	r3, [sp, #12]
1a00465e:	07d8      	lsls	r0, r3, #31
1a004660:	d52f      	bpl.n	1a0046c2 <_svfprintf_r+0xb1a>
1a004662:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
1a004666:	2330      	movs	r3, #48	; 0x30
1a004668:	f80b 3d41 	strb.w	r3, [fp, #-65]!
1a00466c:	ebcb 0307 	rsb	r3, fp, r7
1a004670:	9309      	str	r3, [sp, #36]	; 0x24
1a004672:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
1a004676:	f7ff bbb1 	b.w	1a003ddc <_svfprintf_r+0x234>
1a00467a:	9804      	ldr	r0, [sp, #16]
1a00467c:	4631      	mov	r1, r6
1a00467e:	aa21      	add	r2, sp, #132	; 0x84
1a004680:	f002 fe6e 	bl	1a007360 <__ssprint_r>
1a004684:	2800      	cmp	r0, #0
1a004686:	f47f ab57 	bne.w	1a003d38 <_svfprintf_r+0x190>
1a00468a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a00468e:	463c      	mov	r4, r7
1a004690:	e47b      	b.n	1a003f8a <_svfprintf_r+0x3e2>
1a004692:	9804      	ldr	r0, [sp, #16]
1a004694:	4631      	mov	r1, r6
1a004696:	aa21      	add	r2, sp, #132	; 0x84
1a004698:	f002 fe62 	bl	1a007360 <__ssprint_r>
1a00469c:	2800      	cmp	r0, #0
1a00469e:	f47f ab4b 	bne.w	1a003d38 <_svfprintf_r+0x190>
1a0046a2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a0046a6:	463c      	mov	r4, r7
1a0046a8:	e427      	b.n	1a003efa <_svfprintf_r+0x352>
1a0046aa:	9804      	ldr	r0, [sp, #16]
1a0046ac:	4631      	mov	r1, r6
1a0046ae:	aa21      	add	r2, sp, #132	; 0x84
1a0046b0:	f002 fe56 	bl	1a007360 <__ssprint_r>
1a0046b4:	2800      	cmp	r0, #0
1a0046b6:	f47f ab3f 	bne.w	1a003d38 <_svfprintf_r+0x190>
1a0046ba:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a0046be:	463c      	mov	r4, r7
1a0046c0:	e40a      	b.n	1a003ed8 <_svfprintf_r+0x330>
1a0046c2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
1a0046c6:	970c      	str	r7, [sp, #48]	; 0x30
1a0046c8:	f7ff bb88 	b.w	1a003ddc <_svfprintf_r+0x234>
1a0046cc:	1a007be4 	.word	0x1a007be4
1a0046d0:	1a007c04 	.word	0x1a007c04
1a0046d4:	1a007c20 	.word	0x1a007c20
1a0046d8:	1a007be0 	.word	0x1a007be0
1a0046dc:	1a007bd0 	.word	0x1a007bd0
1a0046e0:	9812      	ldr	r0, [sp, #72]	; 0x48
1a0046e2:	46bb      	mov	fp, r7
1a0046e4:	ea4f 1318 	mov.w	r3, r8, lsr #4
1a0046e8:	f008 010f 	and.w	r1, r8, #15
1a0046ec:	ea43 7309 	orr.w	r3, r3, r9, lsl #28
1a0046f0:	ea4f 1219 	mov.w	r2, r9, lsr #4
1a0046f4:	4698      	mov	r8, r3
1a0046f6:	4691      	mov	r9, r2
1a0046f8:	5c43      	ldrb	r3, [r0, r1]
1a0046fa:	f80b 3d01 	strb.w	r3, [fp, #-1]!
1a0046fe:	ea58 0309 	orrs.w	r3, r8, r9
1a004702:	d1ef      	bne.n	1a0046e4 <_svfprintf_r+0xb3c>
1a004704:	465b      	mov	r3, fp
1a004706:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
1a00470a:	1afb      	subs	r3, r7, r3
1a00470c:	9309      	str	r3, [sp, #36]	; 0x24
1a00470e:	f7ff bb65 	b.w	1a003ddc <_svfprintf_r+0x234>
1a004712:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
1a004714:	2d00      	cmp	r5, #0
1a004716:	f340 8211 	ble.w	1a004b3c <_svfprintf_r+0xf94>
1a00471a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1a00471c:	990e      	ldr	r1, [sp, #56]	; 0x38
1a00471e:	428a      	cmp	r2, r1
1a004720:	4613      	mov	r3, r2
1a004722:	bfa8      	it	ge
1a004724:	460b      	movge	r3, r1
1a004726:	461d      	mov	r5, r3
1a004728:	990c      	ldr	r1, [sp, #48]	; 0x30
1a00472a:	2d00      	cmp	r5, #0
1a00472c:	eb01 0a02 	add.w	sl, r1, r2
1a004730:	dd0b      	ble.n	1a00474a <_svfprintf_r+0xba2>
1a004732:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004734:	6021      	str	r1, [r4, #0]
1a004736:	3301      	adds	r3, #1
1a004738:	44ab      	add	fp, r5
1a00473a:	2b07      	cmp	r3, #7
1a00473c:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a004740:	6065      	str	r5, [r4, #4]
1a004742:	9322      	str	r3, [sp, #136]	; 0x88
1a004744:	f300 8355 	bgt.w	1a004df2 <_svfprintf_r+0x124a>
1a004748:	3408      	adds	r4, #8
1a00474a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00474c:	2d00      	cmp	r5, #0
1a00474e:	bfa8      	it	ge
1a004750:	1b5b      	subge	r3, r3, r5
1a004752:	2b00      	cmp	r3, #0
1a004754:	461d      	mov	r5, r3
1a004756:	f340 80f5 	ble.w	1a004944 <_svfprintf_r+0xd9c>
1a00475a:	2d10      	cmp	r5, #16
1a00475c:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a00475e:	f8df 9608 	ldr.w	r9, [pc, #1544]	; 1a004d68 <_svfprintf_r+0x11c0>
1a004762:	f340 81d2 	ble.w	1a004b0a <_svfprintf_r+0xf62>
1a004766:	465a      	mov	r2, fp
1a004768:	f04f 0810 	mov.w	r8, #16
1a00476c:	f8dd b010 	ldr.w	fp, [sp, #16]
1a004770:	e004      	b.n	1a00477c <_svfprintf_r+0xbd4>
1a004772:	3408      	adds	r4, #8
1a004774:	3d10      	subs	r5, #16
1a004776:	2d10      	cmp	r5, #16
1a004778:	f340 81c6 	ble.w	1a004b08 <_svfprintf_r+0xf60>
1a00477c:	3301      	adds	r3, #1
1a00477e:	3210      	adds	r2, #16
1a004780:	2b07      	cmp	r3, #7
1a004782:	9223      	str	r2, [sp, #140]	; 0x8c
1a004784:	9322      	str	r3, [sp, #136]	; 0x88
1a004786:	f8c4 9000 	str.w	r9, [r4]
1a00478a:	f8c4 8004 	str.w	r8, [r4, #4]
1a00478e:	ddf0      	ble.n	1a004772 <_svfprintf_r+0xbca>
1a004790:	4658      	mov	r0, fp
1a004792:	4631      	mov	r1, r6
1a004794:	aa21      	add	r2, sp, #132	; 0x84
1a004796:	f002 fde3 	bl	1a007360 <__ssprint_r>
1a00479a:	2800      	cmp	r0, #0
1a00479c:	f47f aacc 	bne.w	1a003d38 <_svfprintf_r+0x190>
1a0047a0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
1a0047a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0047a4:	463c      	mov	r4, r7
1a0047a6:	e7e5      	b.n	1a004774 <_svfprintf_r+0xbcc>
1a0047a8:	9804      	ldr	r0, [sp, #16]
1a0047aa:	4631      	mov	r1, r6
1a0047ac:	aa21      	add	r2, sp, #132	; 0x84
1a0047ae:	f002 fdd7 	bl	1a007360 <__ssprint_r>
1a0047b2:	2800      	cmp	r0, #0
1a0047b4:	f47f aac0 	bne.w	1a003d38 <_svfprintf_r+0x190>
1a0047b8:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
1a0047bc:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a0047c0:	463c      	mov	r4, r7
1a0047c2:	f7ff bb76 	b.w	1a003eb2 <_svfprintf_r+0x30a>
1a0047c6:	f103 38ff 	add.w	r8, r3, #4294967295
1a0047ca:	f1b8 0f00 	cmp.w	r8, #0
1a0047ce:	f77f af2b 	ble.w	1a004628 <_svfprintf_r+0xa80>
1a0047d2:	f1b8 0f10 	cmp.w	r8, #16
1a0047d6:	f8df 9590 	ldr.w	r9, [pc, #1424]	; 1a004d68 <_svfprintf_r+0x11c0>
1a0047da:	dd25      	ble.n	1a004828 <_svfprintf_r+0xc80>
1a0047dc:	465b      	mov	r3, fp
1a0047de:	f04f 0a10 	mov.w	sl, #16
1a0047e2:	f8dd b010 	ldr.w	fp, [sp, #16]
1a0047e6:	e006      	b.n	1a0047f6 <_svfprintf_r+0xc4e>
1a0047e8:	f1a8 0810 	sub.w	r8, r8, #16
1a0047ec:	f1b8 0f10 	cmp.w	r8, #16
1a0047f0:	f104 0408 	add.w	r4, r4, #8
1a0047f4:	dd17      	ble.n	1a004826 <_svfprintf_r+0xc7e>
1a0047f6:	3501      	adds	r5, #1
1a0047f8:	3310      	adds	r3, #16
1a0047fa:	2d07      	cmp	r5, #7
1a0047fc:	9323      	str	r3, [sp, #140]	; 0x8c
1a0047fe:	9522      	str	r5, [sp, #136]	; 0x88
1a004800:	e884 0600 	stmia.w	r4, {r9, sl}
1a004804:	ddf0      	ble.n	1a0047e8 <_svfprintf_r+0xc40>
1a004806:	4658      	mov	r0, fp
1a004808:	4631      	mov	r1, r6
1a00480a:	aa21      	add	r2, sp, #132	; 0x84
1a00480c:	f002 fda8 	bl	1a007360 <__ssprint_r>
1a004810:	2800      	cmp	r0, #0
1a004812:	f47f aa91 	bne.w	1a003d38 <_svfprintf_r+0x190>
1a004816:	f1a8 0810 	sub.w	r8, r8, #16
1a00481a:	f1b8 0f10 	cmp.w	r8, #16
1a00481e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
1a004820:	9d22      	ldr	r5, [sp, #136]	; 0x88
1a004822:	463c      	mov	r4, r7
1a004824:	dce7      	bgt.n	1a0047f6 <_svfprintf_r+0xc4e>
1a004826:	469b      	mov	fp, r3
1a004828:	3501      	adds	r5, #1
1a00482a:	44c3      	add	fp, r8
1a00482c:	2d07      	cmp	r5, #7
1a00482e:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a004832:	9522      	str	r5, [sp, #136]	; 0x88
1a004834:	f8c4 9000 	str.w	r9, [r4]
1a004838:	f8c4 8004 	str.w	r8, [r4, #4]
1a00483c:	f77f aef3 	ble.w	1a004626 <_svfprintf_r+0xa7e>
1a004840:	9804      	ldr	r0, [sp, #16]
1a004842:	4631      	mov	r1, r6
1a004844:	aa21      	add	r2, sp, #132	; 0x84
1a004846:	f002 fd8b 	bl	1a007360 <__ssprint_r>
1a00484a:	2800      	cmp	r0, #0
1a00484c:	f47f aa74 	bne.w	1a003d38 <_svfprintf_r+0x190>
1a004850:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a004854:	9d22      	ldr	r5, [sp, #136]	; 0x88
1a004856:	463c      	mov	r4, r7
1a004858:	e6e6      	b.n	1a004628 <_svfprintf_r+0xa80>
1a00485a:	4693      	mov	fp, r2
1a00485c:	3301      	adds	r3, #1
1a00485e:	44ab      	add	fp, r5
1a004860:	2b07      	cmp	r3, #7
1a004862:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a004866:	9322      	str	r3, [sp, #136]	; 0x88
1a004868:	f8c4 9000 	str.w	r9, [r4]
1a00486c:	6065      	str	r5, [r4, #4]
1a00486e:	f77f ab9d 	ble.w	1a003fac <_svfprintf_r+0x404>
1a004872:	e6e5      	b.n	1a004640 <_svfprintf_r+0xa98>
1a004874:	46bb      	mov	fp, r7
1a004876:	f8cd c014 	str.w	ip, [sp, #20]
1a00487a:	4640      	mov	r0, r8
1a00487c:	4649      	mov	r1, r9
1a00487e:	220a      	movs	r2, #10
1a004880:	2300      	movs	r3, #0
1a004882:	f7fe fb4d 	bl	1a002f20 <__aeabi_uldivmod>
1a004886:	3230      	adds	r2, #48	; 0x30
1a004888:	4640      	mov	r0, r8
1a00488a:	4649      	mov	r1, r9
1a00488c:	f80b 2d01 	strb.w	r2, [fp, #-1]!
1a004890:	2300      	movs	r3, #0
1a004892:	220a      	movs	r2, #10
1a004894:	f7fe fb44 	bl	1a002f20 <__aeabi_uldivmod>
1a004898:	4680      	mov	r8, r0
1a00489a:	4689      	mov	r9, r1
1a00489c:	ea58 0309 	orrs.w	r3, r8, r9
1a0048a0:	d1eb      	bne.n	1a00487a <_svfprintf_r+0xcd2>
1a0048a2:	465b      	mov	r3, fp
1a0048a4:	1afb      	subs	r3, r7, r3
1a0048a6:	f8dd c014 	ldr.w	ip, [sp, #20]
1a0048aa:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
1a0048ae:	9309      	str	r3, [sp, #36]	; 0x24
1a0048b0:	f7ff ba94 	b.w	1a003ddc <_svfprintf_r+0x234>
1a0048b4:	2b30      	cmp	r3, #48	; 0x30
1a0048b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0048b8:	f43f af27 	beq.w	1a00470a <_svfprintf_r+0xb62>
1a0048bc:	3b01      	subs	r3, #1
1a0048be:	461a      	mov	r2, r3
1a0048c0:	930c      	str	r3, [sp, #48]	; 0x30
1a0048c2:	1aba      	subs	r2, r7, r2
1a0048c4:	2330      	movs	r3, #48	; 0x30
1a0048c6:	9209      	str	r2, [sp, #36]	; 0x24
1a0048c8:	f801 3c01 	strb.w	r3, [r1, #-1]
1a0048cc:	f7ff ba86 	b.w	1a003ddc <_svfprintf_r+0x234>
1a0048d0:	990a      	ldr	r1, [sp, #40]	; 0x28
1a0048d2:	680a      	ldr	r2, [r1, #0]
1a0048d4:	3104      	adds	r1, #4
1a0048d6:	910a      	str	r1, [sp, #40]	; 0x28
1a0048d8:	4690      	mov	r8, r2
1a0048da:	f04f 0900 	mov.w	r9, #0
1a0048de:	f7ff ba4a 	b.w	1a003d76 <_svfprintf_r+0x1ce>
1a0048e2:	990a      	ldr	r1, [sp, #40]	; 0x28
1a0048e4:	680a      	ldr	r2, [r1, #0]
1a0048e6:	3104      	adds	r1, #4
1a0048e8:	2301      	movs	r3, #1
1a0048ea:	910a      	str	r1, [sp, #40]	; 0x28
1a0048ec:	4690      	mov	r8, r2
1a0048ee:	f04f 0900 	mov.w	r9, #0
1a0048f2:	f7ff ba40 	b.w	1a003d76 <_svfprintf_r+0x1ce>
1a0048f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a0048f8:	6813      	ldr	r3, [r2, #0]
1a0048fa:	4698      	mov	r8, r3
1a0048fc:	ea4f 79e3 	mov.w	r9, r3, asr #31
1a004900:	4613      	mov	r3, r2
1a004902:	3304      	adds	r3, #4
1a004904:	4642      	mov	r2, r8
1a004906:	930a      	str	r3, [sp, #40]	; 0x28
1a004908:	2a00      	cmp	r2, #0
1a00490a:	464b      	mov	r3, r9
1a00490c:	f173 0300 	sbcs.w	r3, r3, #0
1a004910:	f6bf abf2 	bge.w	1a0040f8 <_svfprintf_r+0x550>
1a004914:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
1a004918:	f1d8 0800 	rsbs	r8, r8, #0
1a00491c:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
1a004920:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
1a004924:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
1a004928:	2301      	movs	r3, #1
1a00492a:	f7ff ba2a 	b.w	1a003d82 <_svfprintf_r+0x1da>
1a00492e:	9804      	ldr	r0, [sp, #16]
1a004930:	4631      	mov	r1, r6
1a004932:	aa21      	add	r2, sp, #132	; 0x84
1a004934:	f002 fd14 	bl	1a007360 <__ssprint_r>
1a004938:	2800      	cmp	r0, #0
1a00493a:	f47f a9fd 	bne.w	1a003d38 <_svfprintf_r+0x190>
1a00493e:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a004942:	463c      	mov	r4, r7
1a004944:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a004946:	990e      	ldr	r1, [sp, #56]	; 0x38
1a004948:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a00494a:	440a      	add	r2, r1
1a00494c:	4690      	mov	r8, r2
1a00494e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1a004950:	4293      	cmp	r3, r2
1a004952:	db46      	blt.n	1a0049e2 <_svfprintf_r+0xe3a>
1a004954:	9a03      	ldr	r2, [sp, #12]
1a004956:	07d0      	lsls	r0, r2, #31
1a004958:	d443      	bmi.n	1a0049e2 <_svfprintf_r+0xe3a>
1a00495a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1a00495c:	ebc8 050a 	rsb	r5, r8, sl
1a004960:	1ad3      	subs	r3, r2, r3
1a004962:	429d      	cmp	r5, r3
1a004964:	bfa8      	it	ge
1a004966:	461d      	movge	r5, r3
1a004968:	2d00      	cmp	r5, #0
1a00496a:	dd0c      	ble.n	1a004986 <_svfprintf_r+0xdde>
1a00496c:	9a22      	ldr	r2, [sp, #136]	; 0x88
1a00496e:	f8c4 8000 	str.w	r8, [r4]
1a004972:	3201      	adds	r2, #1
1a004974:	44ab      	add	fp, r5
1a004976:	2a07      	cmp	r2, #7
1a004978:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a00497c:	6065      	str	r5, [r4, #4]
1a00497e:	9222      	str	r2, [sp, #136]	; 0x88
1a004980:	f300 826f 	bgt.w	1a004e62 <_svfprintf_r+0x12ba>
1a004984:	3408      	adds	r4, #8
1a004986:	2d00      	cmp	r5, #0
1a004988:	bfac      	ite	ge
1a00498a:	1b5d      	subge	r5, r3, r5
1a00498c:	461d      	movlt	r5, r3
1a00498e:	2d00      	cmp	r5, #0
1a004990:	f77f ab0d 	ble.w	1a003fae <_svfprintf_r+0x406>
1a004994:	2d10      	cmp	r5, #16
1a004996:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004998:	f8df 93cc 	ldr.w	r9, [pc, #972]	; 1a004d68 <_svfprintf_r+0x11c0>
1a00499c:	f77f af5e 	ble.w	1a00485c <_svfprintf_r+0xcb4>
1a0049a0:	f04f 0810 	mov.w	r8, #16
1a0049a4:	465a      	mov	r2, fp
1a0049a6:	f8dd a010 	ldr.w	sl, [sp, #16]
1a0049aa:	e004      	b.n	1a0049b6 <_svfprintf_r+0xe0e>
1a0049ac:	3408      	adds	r4, #8
1a0049ae:	3d10      	subs	r5, #16
1a0049b0:	2d10      	cmp	r5, #16
1a0049b2:	f77f af52 	ble.w	1a00485a <_svfprintf_r+0xcb2>
1a0049b6:	3301      	adds	r3, #1
1a0049b8:	3210      	adds	r2, #16
1a0049ba:	2b07      	cmp	r3, #7
1a0049bc:	9223      	str	r2, [sp, #140]	; 0x8c
1a0049be:	9322      	str	r3, [sp, #136]	; 0x88
1a0049c0:	f8c4 9000 	str.w	r9, [r4]
1a0049c4:	f8c4 8004 	str.w	r8, [r4, #4]
1a0049c8:	ddf0      	ble.n	1a0049ac <_svfprintf_r+0xe04>
1a0049ca:	4650      	mov	r0, sl
1a0049cc:	4631      	mov	r1, r6
1a0049ce:	aa21      	add	r2, sp, #132	; 0x84
1a0049d0:	f002 fcc6 	bl	1a007360 <__ssprint_r>
1a0049d4:	2800      	cmp	r0, #0
1a0049d6:	f47f a9af 	bne.w	1a003d38 <_svfprintf_r+0x190>
1a0049da:	9a23      	ldr	r2, [sp, #140]	; 0x8c
1a0049dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0049de:	463c      	mov	r4, r7
1a0049e0:	e7e5      	b.n	1a0049ae <_svfprintf_r+0xe06>
1a0049e2:	9a22      	ldr	r2, [sp, #136]	; 0x88
1a0049e4:	9814      	ldr	r0, [sp, #80]	; 0x50
1a0049e6:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a0049e8:	6021      	str	r1, [r4, #0]
1a0049ea:	3201      	adds	r2, #1
1a0049ec:	4483      	add	fp, r0
1a0049ee:	2a07      	cmp	r2, #7
1a0049f0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a0049f4:	6060      	str	r0, [r4, #4]
1a0049f6:	9222      	str	r2, [sp, #136]	; 0x88
1a0049f8:	f300 8207 	bgt.w	1a004e0a <_svfprintf_r+0x1262>
1a0049fc:	3408      	adds	r4, #8
1a0049fe:	e7ac      	b.n	1a00495a <_svfprintf_r+0xdb2>
1a004a00:	9b03      	ldr	r3, [sp, #12]
1a004a02:	07d9      	lsls	r1, r3, #31
1a004a04:	f53f addd 	bmi.w	1a0045c2 <_svfprintf_r+0xa1a>
1a004a08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a004a0a:	6023      	str	r3, [r4, #0]
1a004a0c:	3501      	adds	r5, #1
1a004a0e:	f10b 0b01 	add.w	fp, fp, #1
1a004a12:	2301      	movs	r3, #1
1a004a14:	2d07      	cmp	r5, #7
1a004a16:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a004a1a:	9522      	str	r5, [sp, #136]	; 0x88
1a004a1c:	6063      	str	r3, [r4, #4]
1a004a1e:	f77f ae02 	ble.w	1a004626 <_svfprintf_r+0xa7e>
1a004a22:	e70d      	b.n	1a004840 <_svfprintf_r+0xc98>
1a004a24:	9804      	ldr	r0, [sp, #16]
1a004a26:	4631      	mov	r1, r6
1a004a28:	aa21      	add	r2, sp, #132	; 0x84
1a004a2a:	f002 fc99 	bl	1a007360 <__ssprint_r>
1a004a2e:	2800      	cmp	r0, #0
1a004a30:	f47f a982 	bne.w	1a003d38 <_svfprintf_r+0x190>
1a004a34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
1a004a36:	9d22      	ldr	r5, [sp, #136]	; 0x88
1a004a38:	463c      	mov	r4, r7
1a004a3a:	e5cf      	b.n	1a0045dc <_svfprintf_r+0xa34>
1a004a3c:	9804      	ldr	r0, [sp, #16]
1a004a3e:	4631      	mov	r1, r6
1a004a40:	aa21      	add	r2, sp, #132	; 0x84
1a004a42:	f002 fc8d 	bl	1a007360 <__ssprint_r>
1a004a46:	2800      	cmp	r0, #0
1a004a48:	f47f a976 	bne.w	1a003d38 <_svfprintf_r+0x190>
1a004a4c:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a004a50:	9d22      	ldr	r5, [sp, #136]	; 0x88
1a004a52:	463c      	mov	r4, r7
1a004a54:	e5d0      	b.n	1a0045f8 <_svfprintf_r+0xa50>
1a004a56:	9804      	ldr	r0, [sp, #16]
1a004a58:	4631      	mov	r1, r6
1a004a5a:	aa21      	add	r2, sp, #132	; 0x84
1a004a5c:	f002 fc80 	bl	1a007360 <__ssprint_r>
1a004a60:	2800      	cmp	r0, #0
1a004a62:	f47f a969 	bne.w	1a003d38 <_svfprintf_r+0x190>
1a004a66:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a004a6a:	463c      	mov	r4, r7
1a004a6c:	f7ff ba49 	b.w	1a003f02 <_svfprintf_r+0x35a>
1a004a70:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
1a004a74:	f002 fc46 	bl	1a007304 <__fpclassifyd>
1a004a78:	2800      	cmp	r0, #0
1a004a7a:	f040 80d1 	bne.w	1a004c20 <_svfprintf_r+0x1078>
1a004a7e:	4686      	mov	lr, r0
1a004a80:	4ab6      	ldr	r2, [pc, #728]	; (1a004d5c <_svfprintf_r+0x11b4>)
1a004a82:	4bb7      	ldr	r3, [pc, #732]	; (1a004d60 <_svfprintf_r+0x11b8>)
1a004a84:	900d      	str	r0, [sp, #52]	; 0x34
1a004a86:	9803      	ldr	r0, [sp, #12]
1a004a88:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
1a004a8c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
1a004a90:	2103      	movs	r1, #3
1a004a92:	f020 0080 	bic.w	r0, r0, #128	; 0x80
1a004a96:	2d47      	cmp	r5, #71	; 0x47
1a004a98:	bfd8      	it	le
1a004a9a:	461a      	movle	r2, r3
1a004a9c:	9105      	str	r1, [sp, #20]
1a004a9e:	9003      	str	r0, [sp, #12]
1a004aa0:	920c      	str	r2, [sp, #48]	; 0x30
1a004aa2:	9109      	str	r1, [sp, #36]	; 0x24
1a004aa4:	f7ff b9a2 	b.w	1a003dec <_svfprintf_r+0x244>
1a004aa8:	f029 0907 	bic.w	r9, r9, #7
1a004aac:	ed99 7b00 	vldr	d7, [r9]
1a004ab0:	f109 0308 	add.w	r3, r9, #8
1a004ab4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a004ab8:	930a      	str	r3, [sp, #40]	; 0x28
1a004aba:	e478      	b.n	1a0043ae <_svfprintf_r+0x806>
1a004abc:	9b03      	ldr	r3, [sp, #12]
1a004abe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a004ac0:	f013 0f40 	tst.w	r3, #64	; 0x40
1a004ac4:	4613      	mov	r3, r2
1a004ac6:	f43f ac1f 	beq.w	1a004308 <_svfprintf_r+0x760>
1a004aca:	3304      	adds	r3, #4
1a004acc:	f8b2 8000 	ldrh.w	r8, [r2]
1a004ad0:	930a      	str	r3, [sp, #40]	; 0x28
1a004ad2:	f04f 0900 	mov.w	r9, #0
1a004ad6:	f7ff bb28 	b.w	1a00412a <_svfprintf_r+0x582>
1a004ada:	9b03      	ldr	r3, [sp, #12]
1a004adc:	06db      	lsls	r3, r3, #27
1a004ade:	d40b      	bmi.n	1a004af8 <_svfprintf_r+0xf50>
1a004ae0:	9b03      	ldr	r3, [sp, #12]
1a004ae2:	065d      	lsls	r5, r3, #25
1a004ae4:	d508      	bpl.n	1a004af8 <_svfprintf_r+0xf50>
1a004ae6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a004ae8:	6813      	ldr	r3, [r2, #0]
1a004aea:	3204      	adds	r2, #4
1a004aec:	920a      	str	r2, [sp, #40]	; 0x28
1a004aee:	f8bd 201c 	ldrh.w	r2, [sp, #28]
1a004af2:	801a      	strh	r2, [r3, #0]
1a004af4:	f7ff b87f 	b.w	1a003bf6 <_svfprintf_r+0x4e>
1a004af8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a004afa:	6813      	ldr	r3, [r2, #0]
1a004afc:	3204      	adds	r2, #4
1a004afe:	920a      	str	r2, [sp, #40]	; 0x28
1a004b00:	9a07      	ldr	r2, [sp, #28]
1a004b02:	601a      	str	r2, [r3, #0]
1a004b04:	f7ff b877 	b.w	1a003bf6 <_svfprintf_r+0x4e>
1a004b08:	4693      	mov	fp, r2
1a004b0a:	3301      	adds	r3, #1
1a004b0c:	44ab      	add	fp, r5
1a004b0e:	2b07      	cmp	r3, #7
1a004b10:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a004b14:	9322      	str	r3, [sp, #136]	; 0x88
1a004b16:	f8c4 9000 	str.w	r9, [r4]
1a004b1a:	6065      	str	r5, [r4, #4]
1a004b1c:	f73f af07 	bgt.w	1a00492e <_svfprintf_r+0xd86>
1a004b20:	3408      	adds	r4, #8
1a004b22:	e70f      	b.n	1a004944 <_svfprintf_r+0xd9c>
1a004b24:	9804      	ldr	r0, [sp, #16]
1a004b26:	4631      	mov	r1, r6
1a004b28:	aa21      	add	r2, sp, #132	; 0x84
1a004b2a:	f002 fc19 	bl	1a007360 <__ssprint_r>
1a004b2e:	2800      	cmp	r0, #0
1a004b30:	f47f a902 	bne.w	1a003d38 <_svfprintf_r+0x190>
1a004b34:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a004b38:	463c      	mov	r4, r7
1a004b3a:	e4b5      	b.n	1a0044a8 <_svfprintf_r+0x900>
1a004b3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004b3e:	4a89      	ldr	r2, [pc, #548]	; (1a004d64 <_svfprintf_r+0x11bc>)
1a004b40:	6022      	str	r2, [r4, #0]
1a004b42:	3301      	adds	r3, #1
1a004b44:	f10b 0b01 	add.w	fp, fp, #1
1a004b48:	2201      	movs	r2, #1
1a004b4a:	2b07      	cmp	r3, #7
1a004b4c:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a004b50:	9322      	str	r3, [sp, #136]	; 0x88
1a004b52:	6062      	str	r2, [r4, #4]
1a004b54:	f300 80f1 	bgt.w	1a004d3a <_svfprintf_r+0x1192>
1a004b58:	3408      	adds	r4, #8
1a004b5a:	b92d      	cbnz	r5, 1a004b68 <_svfprintf_r+0xfc0>
1a004b5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a004b5e:	b91b      	cbnz	r3, 1a004b68 <_svfprintf_r+0xfc0>
1a004b60:	9b03      	ldr	r3, [sp, #12]
1a004b62:	07db      	lsls	r3, r3, #31
1a004b64:	f57f aa23 	bpl.w	1a003fae <_svfprintf_r+0x406>
1a004b68:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004b6a:	9814      	ldr	r0, [sp, #80]	; 0x50
1a004b6c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a004b6e:	6022      	str	r2, [r4, #0]
1a004b70:	3301      	adds	r3, #1
1a004b72:	eb0b 0100 	add.w	r1, fp, r0
1a004b76:	2b07      	cmp	r3, #7
1a004b78:	9123      	str	r1, [sp, #140]	; 0x8c
1a004b7a:	6060      	str	r0, [r4, #4]
1a004b7c:	9322      	str	r3, [sp, #136]	; 0x88
1a004b7e:	f300 81ef 	bgt.w	1a004f60 <_svfprintf_r+0x13b8>
1a004b82:	f104 0208 	add.w	r2, r4, #8
1a004b86:	426d      	negs	r5, r5
1a004b88:	2d00      	cmp	r5, #0
1a004b8a:	f340 80fa 	ble.w	1a004d82 <_svfprintf_r+0x11da>
1a004b8e:	2d10      	cmp	r5, #16
1a004b90:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 1a004d68 <_svfprintf_r+0x11c0>
1a004b94:	f340 8146 	ble.w	1a004e24 <_svfprintf_r+0x127c>
1a004b98:	2410      	movs	r4, #16
1a004b9a:	f8dd 8010 	ldr.w	r8, [sp, #16]
1a004b9e:	e004      	b.n	1a004baa <_svfprintf_r+0x1002>
1a004ba0:	3208      	adds	r2, #8
1a004ba2:	3d10      	subs	r5, #16
1a004ba4:	2d10      	cmp	r5, #16
1a004ba6:	f340 813d 	ble.w	1a004e24 <_svfprintf_r+0x127c>
1a004baa:	3301      	adds	r3, #1
1a004bac:	3110      	adds	r1, #16
1a004bae:	2b07      	cmp	r3, #7
1a004bb0:	9123      	str	r1, [sp, #140]	; 0x8c
1a004bb2:	9322      	str	r3, [sp, #136]	; 0x88
1a004bb4:	f8c2 9000 	str.w	r9, [r2]
1a004bb8:	6054      	str	r4, [r2, #4]
1a004bba:	ddf1      	ble.n	1a004ba0 <_svfprintf_r+0xff8>
1a004bbc:	4640      	mov	r0, r8
1a004bbe:	4631      	mov	r1, r6
1a004bc0:	aa21      	add	r2, sp, #132	; 0x84
1a004bc2:	f002 fbcd 	bl	1a007360 <__ssprint_r>
1a004bc6:	2800      	cmp	r0, #0
1a004bc8:	f47f a8b6 	bne.w	1a003d38 <_svfprintf_r+0x190>
1a004bcc:	9923      	ldr	r1, [sp, #140]	; 0x8c
1a004bce:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004bd0:	463a      	mov	r2, r7
1a004bd2:	e7e6      	b.n	1a004ba2 <_svfprintf_r+0xffa>
1a004bd4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
1a004bd6:	46b1      	mov	r9, r6
1a004bd8:	2b00      	cmp	r3, #0
1a004bda:	f43f a8ae 	beq.w	1a003d3a <_svfprintf_r+0x192>
1a004bde:	9804      	ldr	r0, [sp, #16]
1a004be0:	4631      	mov	r1, r6
1a004be2:	aa21      	add	r2, sp, #132	; 0x84
1a004be4:	f002 fbbc 	bl	1a007360 <__ssprint_r>
1a004be8:	f7ff b8a7 	b.w	1a003d3a <_svfprintf_r+0x192>
1a004bec:	f041 0120 	orr.w	r1, r1, #32
1a004bf0:	9103      	str	r1, [sp, #12]
1a004bf2:	785d      	ldrb	r5, [r3, #1]
1a004bf4:	1c59      	adds	r1, r3, #1
1a004bf6:	f7ff b82c 	b.w	1a003c52 <_svfprintf_r+0xaa>
1a004bfa:	9808      	ldr	r0, [sp, #32]
1a004bfc:	910a      	str	r1, [sp, #40]	; 0x28
1a004bfe:	4240      	negs	r0, r0
1a004c00:	9008      	str	r0, [sp, #32]
1a004c02:	4619      	mov	r1, r3
1a004c04:	f7ff ba29 	b.w	1a00405a <_svfprintf_r+0x4b2>
1a004c08:	9804      	ldr	r0, [sp, #16]
1a004c0a:	4631      	mov	r1, r6
1a004c0c:	aa21      	add	r2, sp, #132	; 0x84
1a004c0e:	f002 fba7 	bl	1a007360 <__ssprint_r>
1a004c12:	2800      	cmp	r0, #0
1a004c14:	f47f a890 	bne.w	1a003d38 <_svfprintf_r+0x190>
1a004c18:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a004c1c:	463c      	mov	r4, r7
1a004c1e:	e459      	b.n	1a0044d4 <_svfprintf_r+0x92c>
1a004c20:	f025 0320 	bic.w	r3, r5, #32
1a004c24:	f1ba 3fff 	cmp.w	sl, #4294967295
1a004c28:	9305      	str	r3, [sp, #20]
1a004c2a:	f000 8093 	beq.w	1a004d54 <_svfprintf_r+0x11ac>
1a004c2e:	2b47      	cmp	r3, #71	; 0x47
1a004c30:	d105      	bne.n	1a004c3e <_svfprintf_r+0x1096>
1a004c32:	f1ba 0f00 	cmp.w	sl, #0
1a004c36:	bf14      	ite	ne
1a004c38:	46d3      	movne	fp, sl
1a004c3a:	f04f 0b01 	moveq.w	fp, #1
1a004c3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a004c40:	9a03      	ldr	r2, [sp, #12]
1a004c42:	2b00      	cmp	r3, #0
1a004c44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
1a004c48:	920b      	str	r2, [sp, #44]	; 0x2c
1a004c4a:	f2c0 81a4 	blt.w	1a004f96 <_svfprintf_r+0x13ee>
1a004c4e:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a004c52:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
1a004c56:	f04f 0a00 	mov.w	sl, #0
1a004c5a:	2d66      	cmp	r5, #102	; 0x66
1a004c5c:	f000 80ac 	beq.w	1a004db8 <_svfprintf_r+0x1210>
1a004c60:	2d46      	cmp	r5, #70	; 0x46
1a004c62:	f000 80a9 	beq.w	1a004db8 <_svfprintf_r+0x1210>
1a004c66:	9b05      	ldr	r3, [sp, #20]
1a004c68:	9804      	ldr	r0, [sp, #16]
1a004c6a:	2b45      	cmp	r3, #69	; 0x45
1a004c6c:	bf0c      	ite	eq
1a004c6e:	f10b 0901 	addeq.w	r9, fp, #1
1a004c72:	46d9      	movne	r9, fp
1a004c74:	aa1c      	add	r2, sp, #112	; 0x70
1a004c76:	ab1f      	add	r3, sp, #124	; 0x7c
1a004c78:	e88d 000c 	stmia.w	sp, {r2, r3}
1a004c7c:	ed9d 0b16 	vldr	d0, [sp, #88]	; 0x58
1a004c80:	2102      	movs	r1, #2
1a004c82:	464a      	mov	r2, r9
1a004c84:	ab1b      	add	r3, sp, #108	; 0x6c
1a004c86:	f000 fa8f 	bl	1a0051a8 <_dtoa_r>
1a004c8a:	2d67      	cmp	r5, #103	; 0x67
1a004c8c:	900c      	str	r0, [sp, #48]	; 0x30
1a004c8e:	d002      	beq.n	1a004c96 <_svfprintf_r+0x10ee>
1a004c90:	2d47      	cmp	r5, #71	; 0x47
1a004c92:	f040 809f 	bne.w	1a004dd4 <_svfprintf_r+0x122c>
1a004c96:	9b03      	ldr	r3, [sp, #12]
1a004c98:	07db      	lsls	r3, r3, #31
1a004c9a:	f140 8192 	bpl.w	1a004fc2 <_svfprintf_r+0x141a>
1a004c9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a004ca0:	eb03 0809 	add.w	r8, r3, r9
1a004ca4:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
1a004ca8:	2200      	movs	r2, #0
1a004caa:	2300      	movs	r3, #0
1a004cac:	f002 fc60 	bl	1a007570 <__aeabi_dcmpeq>
1a004cb0:	2800      	cmp	r0, #0
1a004cb2:	f040 80fd 	bne.w	1a004eb0 <_svfprintf_r+0x1308>
1a004cb6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
1a004cb8:	4598      	cmp	r8, r3
1a004cba:	d906      	bls.n	1a004cca <_svfprintf_r+0x1122>
1a004cbc:	2130      	movs	r1, #48	; 0x30
1a004cbe:	1c5a      	adds	r2, r3, #1
1a004cc0:	921f      	str	r2, [sp, #124]	; 0x7c
1a004cc2:	7019      	strb	r1, [r3, #0]
1a004cc4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
1a004cc6:	4598      	cmp	r8, r3
1a004cc8:	d8f9      	bhi.n	1a004cbe <_svfprintf_r+0x1116>
1a004cca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a004ccc:	1a9b      	subs	r3, r3, r2
1a004cce:	930f      	str	r3, [sp, #60]	; 0x3c
1a004cd0:	9b05      	ldr	r3, [sp, #20]
1a004cd2:	2b47      	cmp	r3, #71	; 0x47
1a004cd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a004cd6:	f000 80de 	beq.w	1a004e96 <_svfprintf_r+0x12ee>
1a004cda:	2d65      	cmp	r5, #101	; 0x65
1a004cdc:	f340 80f8 	ble.w	1a004ed0 <_svfprintf_r+0x1328>
1a004ce0:	2d66      	cmp	r5, #102	; 0x66
1a004ce2:	930e      	str	r3, [sp, #56]	; 0x38
1a004ce4:	f000 8160 	beq.w	1a004fa8 <_svfprintf_r+0x1400>
1a004ce8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a004cea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a004cec:	4293      	cmp	r3, r2
1a004cee:	f300 8144 	bgt.w	1a004f7a <_svfprintf_r+0x13d2>
1a004cf2:	9b03      	ldr	r3, [sp, #12]
1a004cf4:	07d9      	lsls	r1, r3, #31
1a004cf6:	f100 8166 	bmi.w	1a004fc6 <_svfprintf_r+0x141e>
1a004cfa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
1a004cfe:	9209      	str	r2, [sp, #36]	; 0x24
1a004d00:	f1ba 0f00 	cmp.w	sl, #0
1a004d04:	f040 80bc 	bne.w	1a004e80 <_svfprintf_r+0x12d8>
1a004d08:	9305      	str	r3, [sp, #20]
1a004d0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a004d0c:	9303      	str	r3, [sp, #12]
1a004d0e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
1a004d12:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
1a004d16:	f7ff b869 	b.w	1a003dec <_svfprintf_r+0x244>
1a004d1a:	9804      	ldr	r0, [sp, #16]
1a004d1c:	2140      	movs	r1, #64	; 0x40
1a004d1e:	f001 fac1 	bl	1a0062a4 <_malloc_r>
1a004d22:	f8c9 0000 	str.w	r0, [r9]
1a004d26:	f8c9 0010 	str.w	r0, [r9, #16]
1a004d2a:	2800      	cmp	r0, #0
1a004d2c:	f000 8197 	beq.w	1a00505e <_svfprintf_r+0x14b6>
1a004d30:	2340      	movs	r3, #64	; 0x40
1a004d32:	f8c9 3014 	str.w	r3, [r9, #20]
1a004d36:	f7fe bf4f 	b.w	1a003bd8 <_svfprintf_r+0x30>
1a004d3a:	9804      	ldr	r0, [sp, #16]
1a004d3c:	4631      	mov	r1, r6
1a004d3e:	aa21      	add	r2, sp, #132	; 0x84
1a004d40:	f002 fb0e 	bl	1a007360 <__ssprint_r>
1a004d44:	2800      	cmp	r0, #0
1a004d46:	f47e aff7 	bne.w	1a003d38 <_svfprintf_r+0x190>
1a004d4a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
1a004d4c:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a004d50:	463c      	mov	r4, r7
1a004d52:	e702      	b.n	1a004b5a <_svfprintf_r+0xfb2>
1a004d54:	f04f 0b06 	mov.w	fp, #6
1a004d58:	e771      	b.n	1a004c3e <_svfprintf_r+0x1096>
1a004d5a:	bf00      	nop
1a004d5c:	1a007bec 	.word	0x1a007bec
1a004d60:	1a007be8 	.word	0x1a007be8
1a004d64:	1a007c20 	.word	0x1a007c20
1a004d68:	1a007bd0 	.word	0x1a007bd0
1a004d6c:	9804      	ldr	r0, [sp, #16]
1a004d6e:	4631      	mov	r1, r6
1a004d70:	aa21      	add	r2, sp, #132	; 0x84
1a004d72:	f002 faf5 	bl	1a007360 <__ssprint_r>
1a004d76:	2800      	cmp	r0, #0
1a004d78:	f47e afde 	bne.w	1a003d38 <_svfprintf_r+0x190>
1a004d7c:	9923      	ldr	r1, [sp, #140]	; 0x8c
1a004d7e:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004d80:	463a      	mov	r2, r7
1a004d82:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
1a004d84:	6054      	str	r4, [r2, #4]
1a004d86:	3301      	adds	r3, #1
1a004d88:	eb01 0b04 	add.w	fp, r1, r4
1a004d8c:	2b07      	cmp	r3, #7
1a004d8e:	990c      	ldr	r1, [sp, #48]	; 0x30
1a004d90:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a004d94:	9322      	str	r3, [sp, #136]	; 0x88
1a004d96:	6011      	str	r1, [r2, #0]
1a004d98:	f73f ac52 	bgt.w	1a004640 <_svfprintf_r+0xa98>
1a004d9c:	f102 0408 	add.w	r4, r2, #8
1a004da0:	f7ff b905 	b.w	1a003fae <_svfprintf_r+0x406>
1a004da4:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
1a004da8:	f7fe fed0 	bl	1a003b4c <strlen>
1a004dac:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
1a004db0:	9009      	str	r0, [sp, #36]	; 0x24
1a004db2:	4603      	mov	r3, r0
1a004db4:	f7ff ba0e 	b.w	1a0041d4 <_svfprintf_r+0x62c>
1a004db8:	aa1c      	add	r2, sp, #112	; 0x70
1a004dba:	ab1f      	add	r3, sp, #124	; 0x7c
1a004dbc:	e88d 000c 	stmia.w	sp, {r2, r3}
1a004dc0:	9804      	ldr	r0, [sp, #16]
1a004dc2:	ed9d 0b16 	vldr	d0, [sp, #88]	; 0x58
1a004dc6:	2103      	movs	r1, #3
1a004dc8:	465a      	mov	r2, fp
1a004dca:	ab1b      	add	r3, sp, #108	; 0x6c
1a004dcc:	f000 f9ec 	bl	1a0051a8 <_dtoa_r>
1a004dd0:	46d9      	mov	r9, fp
1a004dd2:	900c      	str	r0, [sp, #48]	; 0x30
1a004dd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a004dd6:	eb03 0809 	add.w	r8, r3, r9
1a004dda:	9b05      	ldr	r3, [sp, #20]
1a004ddc:	2b46      	cmp	r3, #70	; 0x46
1a004dde:	f47f af61 	bne.w	1a004ca4 <_svfprintf_r+0x10fc>
1a004de2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a004de4:	781b      	ldrb	r3, [r3, #0]
1a004de6:	2b30      	cmp	r3, #48	; 0x30
1a004de8:	f000 8103 	beq.w	1a004ff2 <_svfprintf_r+0x144a>
1a004dec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a004dee:	4498      	add	r8, r3
1a004df0:	e758      	b.n	1a004ca4 <_svfprintf_r+0x10fc>
1a004df2:	9804      	ldr	r0, [sp, #16]
1a004df4:	4631      	mov	r1, r6
1a004df6:	aa21      	add	r2, sp, #132	; 0x84
1a004df8:	f002 fab2 	bl	1a007360 <__ssprint_r>
1a004dfc:	2800      	cmp	r0, #0
1a004dfe:	f47e af9b 	bne.w	1a003d38 <_svfprintf_r+0x190>
1a004e02:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a004e06:	463c      	mov	r4, r7
1a004e08:	e49f      	b.n	1a00474a <_svfprintf_r+0xba2>
1a004e0a:	9804      	ldr	r0, [sp, #16]
1a004e0c:	4631      	mov	r1, r6
1a004e0e:	aa21      	add	r2, sp, #132	; 0x84
1a004e10:	f002 faa6 	bl	1a007360 <__ssprint_r>
1a004e14:	2800      	cmp	r0, #0
1a004e16:	f47e af8f 	bne.w	1a003d38 <_svfprintf_r+0x190>
1a004e1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a004e1c:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a004e20:	463c      	mov	r4, r7
1a004e22:	e59a      	b.n	1a00495a <_svfprintf_r+0xdb2>
1a004e24:	3301      	adds	r3, #1
1a004e26:	4429      	add	r1, r5
1a004e28:	2b07      	cmp	r3, #7
1a004e2a:	9123      	str	r1, [sp, #140]	; 0x8c
1a004e2c:	9322      	str	r3, [sp, #136]	; 0x88
1a004e2e:	f8c2 9000 	str.w	r9, [r2]
1a004e32:	6055      	str	r5, [r2, #4]
1a004e34:	dc9a      	bgt.n	1a004d6c <_svfprintf_r+0x11c4>
1a004e36:	3208      	adds	r2, #8
1a004e38:	e7a3      	b.n	1a004d82 <_svfprintf_r+0x11da>
1a004e3a:	4653      	mov	r3, sl
1a004e3c:	2b06      	cmp	r3, #6
1a004e3e:	bf28      	it	cs
1a004e40:	2306      	movcs	r3, #6
1a004e42:	9309      	str	r3, [sp, #36]	; 0x24
1a004e44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a004e48:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
1a004e4c:	9305      	str	r3, [sp, #20]
1a004e4e:	4b87      	ldr	r3, [pc, #540]	; (1a00506c <_svfprintf_r+0x14c4>)
1a004e50:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
1a004e54:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
1a004e58:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
1a004e5c:	930c      	str	r3, [sp, #48]	; 0x30
1a004e5e:	f7fe bfc5 	b.w	1a003dec <_svfprintf_r+0x244>
1a004e62:	9804      	ldr	r0, [sp, #16]
1a004e64:	4631      	mov	r1, r6
1a004e66:	aa21      	add	r2, sp, #132	; 0x84
1a004e68:	f002 fa7a 	bl	1a007360 <__ssprint_r>
1a004e6c:	2800      	cmp	r0, #0
1a004e6e:	f47e af63 	bne.w	1a003d38 <_svfprintf_r+0x190>
1a004e72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a004e74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1a004e76:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a004e7a:	1ad3      	subs	r3, r2, r3
1a004e7c:	463c      	mov	r4, r7
1a004e7e:	e582      	b.n	1a004986 <_svfprintf_r+0xdde>
1a004e80:	9305      	str	r3, [sp, #20]
1a004e82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a004e84:	9303      	str	r3, [sp, #12]
1a004e86:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
1a004e8a:	2300      	movs	r3, #0
1a004e8c:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
1a004e90:	930d      	str	r3, [sp, #52]	; 0x34
1a004e92:	f7fe bfae 	b.w	1a003df2 <_svfprintf_r+0x24a>
1a004e96:	1cda      	adds	r2, r3, #3
1a004e98:	db19      	blt.n	1a004ece <_svfprintf_r+0x1326>
1a004e9a:	459b      	cmp	fp, r3
1a004e9c:	db17      	blt.n	1a004ece <_svfprintf_r+0x1326>
1a004e9e:	930e      	str	r3, [sp, #56]	; 0x38
1a004ea0:	2567      	movs	r5, #103	; 0x67
1a004ea2:	e721      	b.n	1a004ce8 <_svfprintf_r+0x1140>
1a004ea4:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
1a004ea8:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
1a004eac:	f7ff ba91 	b.w	1a0043d2 <_svfprintf_r+0x82a>
1a004eb0:	4643      	mov	r3, r8
1a004eb2:	e70a      	b.n	1a004cca <_svfprintf_r+0x1122>
1a004eb4:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
1a004eb8:	900d      	str	r0, [sp, #52]	; 0x34
1a004eba:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
1a004ebe:	900e      	str	r0, [sp, #56]	; 0x38
1a004ec0:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
1a004ec4:	9305      	str	r3, [sp, #20]
1a004ec6:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
1a004eca:	f7fe bf8f 	b.w	1a003dec <_svfprintf_r+0x244>
1a004ece:	3d02      	subs	r5, #2
1a004ed0:	3b01      	subs	r3, #1
1a004ed2:	2b00      	cmp	r3, #0
1a004ed4:	931b      	str	r3, [sp, #108]	; 0x6c
1a004ed6:	bfba      	itte	lt
1a004ed8:	425b      	neglt	r3, r3
1a004eda:	222d      	movlt	r2, #45	; 0x2d
1a004edc:	222b      	movge	r2, #43	; 0x2b
1a004ede:	2b09      	cmp	r3, #9
1a004ee0:	f88d 5074 	strb.w	r5, [sp, #116]	; 0x74
1a004ee4:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
1a004ee8:	dd7b      	ble.n	1a004fe2 <_svfprintf_r+0x143a>
1a004eea:	f10d 0e83 	add.w	lr, sp, #131	; 0x83
1a004eee:	4670      	mov	r0, lr
1a004ef0:	4a5f      	ldr	r2, [pc, #380]	; (1a005070 <_svfprintf_r+0x14c8>)
1a004ef2:	fb82 2103 	smull	r2, r1, r2, r3
1a004ef6:	17da      	asrs	r2, r3, #31
1a004ef8:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
1a004efc:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a004f00:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
1a004f04:	f103 0130 	add.w	r1, r3, #48	; 0x30
1a004f08:	2a09      	cmp	r2, #9
1a004f0a:	4613      	mov	r3, r2
1a004f0c:	f800 1d01 	strb.w	r1, [r0, #-1]!
1a004f10:	dcee      	bgt.n	1a004ef0 <_svfprintf_r+0x1348>
1a004f12:	4602      	mov	r2, r0
1a004f14:	3330      	adds	r3, #48	; 0x30
1a004f16:	b2d9      	uxtb	r1, r3
1a004f18:	f802 1d01 	strb.w	r1, [r2, #-1]!
1a004f1c:	4596      	cmp	lr, r2
1a004f1e:	f240 809b 	bls.w	1a005058 <_svfprintf_r+0x14b0>
1a004f22:	f10d 0276 	add.w	r2, sp, #118	; 0x76
1a004f26:	4603      	mov	r3, r0
1a004f28:	e001      	b.n	1a004f2e <_svfprintf_r+0x1386>
1a004f2a:	f813 1b01 	ldrb.w	r1, [r3], #1
1a004f2e:	f802 1b01 	strb.w	r1, [r2], #1
1a004f32:	4573      	cmp	r3, lr
1a004f34:	d1f9      	bne.n	1a004f2a <_svfprintf_r+0x1382>
1a004f36:	ab21      	add	r3, sp, #132	; 0x84
1a004f38:	1a1b      	subs	r3, r3, r0
1a004f3a:	f10d 0276 	add.w	r2, sp, #118	; 0x76
1a004f3e:	4413      	add	r3, r2
1a004f40:	aa1d      	add	r2, sp, #116	; 0x74
1a004f42:	1a9b      	subs	r3, r3, r2
1a004f44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1a004f46:	9315      	str	r3, [sp, #84]	; 0x54
1a004f48:	2a01      	cmp	r2, #1
1a004f4a:	4413      	add	r3, r2
1a004f4c:	9309      	str	r3, [sp, #36]	; 0x24
1a004f4e:	dd74      	ble.n	1a00503a <_svfprintf_r+0x1492>
1a004f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004f52:	2200      	movs	r2, #0
1a004f54:	3301      	adds	r3, #1
1a004f56:	9309      	str	r3, [sp, #36]	; 0x24
1a004f58:	920e      	str	r2, [sp, #56]	; 0x38
1a004f5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a004f5e:	e6cf      	b.n	1a004d00 <_svfprintf_r+0x1158>
1a004f60:	9804      	ldr	r0, [sp, #16]
1a004f62:	4631      	mov	r1, r6
1a004f64:	aa21      	add	r2, sp, #132	; 0x84
1a004f66:	f002 f9fb 	bl	1a007360 <__ssprint_r>
1a004f6a:	2800      	cmp	r0, #0
1a004f6c:	f47e aee4 	bne.w	1a003d38 <_svfprintf_r+0x190>
1a004f70:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
1a004f72:	9923      	ldr	r1, [sp, #140]	; 0x8c
1a004f74:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004f76:	463a      	mov	r2, r7
1a004f78:	e605      	b.n	1a004b86 <_svfprintf_r+0xfde>
1a004f7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004f7c:	2b00      	cmp	r3, #0
1a004f7e:	bfd8      	it	le
1a004f80:	f1c3 0802 	rsble	r8, r3, #2
1a004f84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a004f86:	bfc8      	it	gt
1a004f88:	f04f 0801 	movgt.w	r8, #1
1a004f8c:	4443      	add	r3, r8
1a004f8e:	9309      	str	r3, [sp, #36]	; 0x24
1a004f90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a004f94:	e6b4      	b.n	1a004d00 <_svfprintf_r+0x1158>
1a004f96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a004f9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
1a004f9e:	9016      	str	r0, [sp, #88]	; 0x58
1a004fa0:	9317      	str	r3, [sp, #92]	; 0x5c
1a004fa2:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
1a004fa6:	e658      	b.n	1a004c5a <_svfprintf_r+0x10b2>
1a004fa8:	2b00      	cmp	r3, #0
1a004faa:	dd3d      	ble.n	1a005028 <_svfprintf_r+0x1480>
1a004fac:	f1bb 0f00 	cmp.w	fp, #0
1a004fb0:	d10f      	bne.n	1a004fd2 <_svfprintf_r+0x142a>
1a004fb2:	9b03      	ldr	r3, [sp, #12]
1a004fb4:	07db      	lsls	r3, r3, #31
1a004fb6:	d40c      	bmi.n	1a004fd2 <_svfprintf_r+0x142a>
1a004fb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a004fba:	9209      	str	r2, [sp, #36]	; 0x24
1a004fbc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
1a004fc0:	e69e      	b.n	1a004d00 <_svfprintf_r+0x1158>
1a004fc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
1a004fc4:	e681      	b.n	1a004cca <_svfprintf_r+0x1122>
1a004fc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004fc8:	3301      	adds	r3, #1
1a004fca:	9309      	str	r3, [sp, #36]	; 0x24
1a004fcc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a004fd0:	e696      	b.n	1a004d00 <_svfprintf_r+0x1158>
1a004fd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004fd4:	f10b 0801 	add.w	r8, fp, #1
1a004fd8:	4443      	add	r3, r8
1a004fda:	9309      	str	r3, [sp, #36]	; 0x24
1a004fdc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a004fe0:	e68e      	b.n	1a004d00 <_svfprintf_r+0x1158>
1a004fe2:	3330      	adds	r3, #48	; 0x30
1a004fe4:	2230      	movs	r2, #48	; 0x30
1a004fe6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
1a004fea:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
1a004fee:	ab1e      	add	r3, sp, #120	; 0x78
1a004ff0:	e7a6      	b.n	1a004f40 <_svfprintf_r+0x1398>
1a004ff2:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
1a004ff6:	2200      	movs	r2, #0
1a004ff8:	2300      	movs	r3, #0
1a004ffa:	f002 fab9 	bl	1a007570 <__aeabi_dcmpeq>
1a004ffe:	2800      	cmp	r0, #0
1a005000:	f47f aef4 	bne.w	1a004dec <_svfprintf_r+0x1244>
1a005004:	f1c9 0301 	rsb	r3, r9, #1
1a005008:	931b      	str	r3, [sp, #108]	; 0x6c
1a00500a:	4498      	add	r8, r3
1a00500c:	e64a      	b.n	1a004ca4 <_svfprintf_r+0x10fc>
1a00500e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a005010:	f8d5 a000 	ldr.w	sl, [r5]
1a005014:	4628      	mov	r0, r5
1a005016:	3004      	adds	r0, #4
1a005018:	f1ba 0f00 	cmp.w	sl, #0
1a00501c:	785d      	ldrb	r5, [r3, #1]
1a00501e:	900a      	str	r0, [sp, #40]	; 0x28
1a005020:	f6be ae17 	bge.w	1a003c52 <_svfprintf_r+0xaa>
1a005024:	f7fe be13 	b.w	1a003c4e <_svfprintf_r+0xa6>
1a005028:	f1bb 0f00 	cmp.w	fp, #0
1a00502c:	d10e      	bne.n	1a00504c <_svfprintf_r+0x14a4>
1a00502e:	9b03      	ldr	r3, [sp, #12]
1a005030:	07d8      	lsls	r0, r3, #31
1a005032:	d40b      	bmi.n	1a00504c <_svfprintf_r+0x14a4>
1a005034:	2301      	movs	r3, #1
1a005036:	9309      	str	r3, [sp, #36]	; 0x24
1a005038:	e662      	b.n	1a004d00 <_svfprintf_r+0x1158>
1a00503a:	9b03      	ldr	r3, [sp, #12]
1a00503c:	f013 0301 	ands.w	r3, r3, #1
1a005040:	d186      	bne.n	1a004f50 <_svfprintf_r+0x13a8>
1a005042:	930e      	str	r3, [sp, #56]	; 0x38
1a005044:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005046:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a00504a:	e659      	b.n	1a004d00 <_svfprintf_r+0x1158>
1a00504c:	f10b 0302 	add.w	r3, fp, #2
1a005050:	9309      	str	r3, [sp, #36]	; 0x24
1a005052:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a005056:	e653      	b.n	1a004d00 <_svfprintf_r+0x1158>
1a005058:	f10d 0376 	add.w	r3, sp, #118	; 0x76
1a00505c:	e770      	b.n	1a004f40 <_svfprintf_r+0x1398>
1a00505e:	9a04      	ldr	r2, [sp, #16]
1a005060:	230c      	movs	r3, #12
1a005062:	6013      	str	r3, [r2, #0]
1a005064:	f04f 30ff 	mov.w	r0, #4294967295
1a005068:	f7fe be70 	b.w	1a003d4c <_svfprintf_r+0x1a4>
1a00506c:	1a007c18 	.word	0x1a007c18
1a005070:	66666667 	.word	0x66666667
1a005074:	f3af 8000 	nop.w

1a005078 <quorem>:
1a005078:	6902      	ldr	r2, [r0, #16]
1a00507a:	690b      	ldr	r3, [r1, #16]
1a00507c:	4293      	cmp	r3, r2
1a00507e:	f300 808f 	bgt.w	1a0051a0 <quorem+0x128>
1a005082:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a005086:	f103 38ff 	add.w	r8, r3, #4294967295
1a00508a:	f101 0714 	add.w	r7, r1, #20
1a00508e:	f100 0b14 	add.w	fp, r0, #20
1a005092:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
1a005096:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
1a00509a:	ea4f 0488 	mov.w	r4, r8, lsl #2
1a00509e:	b083      	sub	sp, #12
1a0050a0:	3201      	adds	r2, #1
1a0050a2:	fbb3 f9f2 	udiv	r9, r3, r2
1a0050a6:	eb0b 0304 	add.w	r3, fp, r4
1a0050aa:	9400      	str	r4, [sp, #0]
1a0050ac:	eb07 0a04 	add.w	sl, r7, r4
1a0050b0:	9301      	str	r3, [sp, #4]
1a0050b2:	f1b9 0f00 	cmp.w	r9, #0
1a0050b6:	d03b      	beq.n	1a005130 <quorem+0xb8>
1a0050b8:	2600      	movs	r6, #0
1a0050ba:	4632      	mov	r2, r6
1a0050bc:	46bc      	mov	ip, r7
1a0050be:	46de      	mov	lr, fp
1a0050c0:	4634      	mov	r4, r6
1a0050c2:	f85c 6b04 	ldr.w	r6, [ip], #4
1a0050c6:	f8de 5000 	ldr.w	r5, [lr]
1a0050ca:	b2b3      	uxth	r3, r6
1a0050cc:	0c36      	lsrs	r6, r6, #16
1a0050ce:	fb03 4409 	mla	r4, r3, r9, r4
1a0050d2:	fb06 f609 	mul.w	r6, r6, r9
1a0050d6:	eb06 4614 	add.w	r6, r6, r4, lsr #16
1a0050da:	b2a3      	uxth	r3, r4
1a0050dc:	1ad3      	subs	r3, r2, r3
1a0050de:	b2b4      	uxth	r4, r6
1a0050e0:	fa13 f385 	uxtah	r3, r3, r5
1a0050e4:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
1a0050e8:	eb04 4423 	add.w	r4, r4, r3, asr #16
1a0050ec:	b29b      	uxth	r3, r3
1a0050ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
1a0050f2:	45e2      	cmp	sl, ip
1a0050f4:	ea4f 4224 	mov.w	r2, r4, asr #16
1a0050f8:	f84e 3b04 	str.w	r3, [lr], #4
1a0050fc:	ea4f 4416 	mov.w	r4, r6, lsr #16
1a005100:	d2df      	bcs.n	1a0050c2 <quorem+0x4a>
1a005102:	9b00      	ldr	r3, [sp, #0]
1a005104:	f85b 3003 	ldr.w	r3, [fp, r3]
1a005108:	b993      	cbnz	r3, 1a005130 <quorem+0xb8>
1a00510a:	9c01      	ldr	r4, [sp, #4]
1a00510c:	1f23      	subs	r3, r4, #4
1a00510e:	459b      	cmp	fp, r3
1a005110:	d20c      	bcs.n	1a00512c <quorem+0xb4>
1a005112:	f854 3c04 	ldr.w	r3, [r4, #-4]
1a005116:	b94b      	cbnz	r3, 1a00512c <quorem+0xb4>
1a005118:	f1a4 0308 	sub.w	r3, r4, #8
1a00511c:	e002      	b.n	1a005124 <quorem+0xac>
1a00511e:	681a      	ldr	r2, [r3, #0]
1a005120:	3b04      	subs	r3, #4
1a005122:	b91a      	cbnz	r2, 1a00512c <quorem+0xb4>
1a005124:	459b      	cmp	fp, r3
1a005126:	f108 38ff 	add.w	r8, r8, #4294967295
1a00512a:	d3f8      	bcc.n	1a00511e <quorem+0xa6>
1a00512c:	f8c0 8010 	str.w	r8, [r0, #16]
1a005130:	4604      	mov	r4, r0
1a005132:	f001 fe05 	bl	1a006d40 <__mcmp>
1a005136:	2800      	cmp	r0, #0
1a005138:	db2e      	blt.n	1a005198 <quorem+0x120>
1a00513a:	f109 0901 	add.w	r9, r9, #1
1a00513e:	465d      	mov	r5, fp
1a005140:	2300      	movs	r3, #0
1a005142:	f857 1b04 	ldr.w	r1, [r7], #4
1a005146:	6828      	ldr	r0, [r5, #0]
1a005148:	b28a      	uxth	r2, r1
1a00514a:	1a9a      	subs	r2, r3, r2
1a00514c:	0c09      	lsrs	r1, r1, #16
1a00514e:	fa12 f280 	uxtah	r2, r2, r0
1a005152:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
1a005156:	eb03 4322 	add.w	r3, r3, r2, asr #16
1a00515a:	b291      	uxth	r1, r2
1a00515c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a005160:	45ba      	cmp	sl, r7
1a005162:	f845 1b04 	str.w	r1, [r5], #4
1a005166:	ea4f 4323 	mov.w	r3, r3, asr #16
1a00516a:	d2ea      	bcs.n	1a005142 <quorem+0xca>
1a00516c:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
1a005170:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
1a005174:	b982      	cbnz	r2, 1a005198 <quorem+0x120>
1a005176:	1f1a      	subs	r2, r3, #4
1a005178:	4593      	cmp	fp, r2
1a00517a:	d20b      	bcs.n	1a005194 <quorem+0x11c>
1a00517c:	f853 2c04 	ldr.w	r2, [r3, #-4]
1a005180:	b942      	cbnz	r2, 1a005194 <quorem+0x11c>
1a005182:	3b08      	subs	r3, #8
1a005184:	e002      	b.n	1a00518c <quorem+0x114>
1a005186:	681a      	ldr	r2, [r3, #0]
1a005188:	3b04      	subs	r3, #4
1a00518a:	b91a      	cbnz	r2, 1a005194 <quorem+0x11c>
1a00518c:	459b      	cmp	fp, r3
1a00518e:	f108 38ff 	add.w	r8, r8, #4294967295
1a005192:	d3f8      	bcc.n	1a005186 <quorem+0x10e>
1a005194:	f8c4 8010 	str.w	r8, [r4, #16]
1a005198:	4648      	mov	r0, r9
1a00519a:	b003      	add	sp, #12
1a00519c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0051a0:	2000      	movs	r0, #0
1a0051a2:	4770      	bx	lr
1a0051a4:	0000      	movs	r0, r0
	...

1a0051a8 <_dtoa_r>:
1a0051a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0051ac:	b099      	sub	sp, #100	; 0x64
1a0051ae:	4604      	mov	r4, r0
1a0051b0:	9103      	str	r1, [sp, #12]
1a0051b2:	6c01      	ldr	r1, [r0, #64]	; 0x40
1a0051b4:	9d22      	ldr	r5, [sp, #136]	; 0x88
1a0051b6:	9304      	str	r3, [sp, #16]
1a0051b8:	4692      	mov	sl, r2
1a0051ba:	ed8d 0b00 	vstr	d0, [sp]
1a0051be:	b141      	cbz	r1, 1a0051d2 <_dtoa_r+0x2a>
1a0051c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
1a0051c2:	604a      	str	r2, [r1, #4]
1a0051c4:	2301      	movs	r3, #1
1a0051c6:	4093      	lsls	r3, r2
1a0051c8:	608b      	str	r3, [r1, #8]
1a0051ca:	f001 fbd5 	bl	1a006978 <_Bfree>
1a0051ce:	2300      	movs	r3, #0
1a0051d0:	6423      	str	r3, [r4, #64]	; 0x40
1a0051d2:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0051d6:	2b00      	cmp	r3, #0
1a0051d8:	4699      	mov	r9, r3
1a0051da:	db36      	blt.n	1a00524a <_dtoa_r+0xa2>
1a0051dc:	2300      	movs	r3, #0
1a0051de:	602b      	str	r3, [r5, #0]
1a0051e0:	4ba5      	ldr	r3, [pc, #660]	; (1a005478 <_dtoa_r+0x2d0>)
1a0051e2:	461a      	mov	r2, r3
1a0051e4:	ea09 0303 	and.w	r3, r9, r3
1a0051e8:	4293      	cmp	r3, r2
1a0051ea:	d017      	beq.n	1a00521c <_dtoa_r+0x74>
1a0051ec:	e9dd 6700 	ldrd	r6, r7, [sp]
1a0051f0:	2200      	movs	r2, #0
1a0051f2:	2300      	movs	r3, #0
1a0051f4:	4630      	mov	r0, r6
1a0051f6:	4639      	mov	r1, r7
1a0051f8:	f002 f9ba 	bl	1a007570 <__aeabi_dcmpeq>
1a0051fc:	4680      	mov	r8, r0
1a0051fe:	2800      	cmp	r0, #0
1a005200:	d02b      	beq.n	1a00525a <_dtoa_r+0xb2>
1a005202:	9a04      	ldr	r2, [sp, #16]
1a005204:	2301      	movs	r3, #1
1a005206:	6013      	str	r3, [r2, #0]
1a005208:	9b23      	ldr	r3, [sp, #140]	; 0x8c
1a00520a:	2b00      	cmp	r3, #0
1a00520c:	f000 80cc 	beq.w	1a0053a8 <_dtoa_r+0x200>
1a005210:	489a      	ldr	r0, [pc, #616]	; (1a00547c <_dtoa_r+0x2d4>)
1a005212:	6018      	str	r0, [r3, #0]
1a005214:	3801      	subs	r0, #1
1a005216:	b019      	add	sp, #100	; 0x64
1a005218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00521c:	9a04      	ldr	r2, [sp, #16]
1a00521e:	f242 730f 	movw	r3, #9999	; 0x270f
1a005222:	6013      	str	r3, [r2, #0]
1a005224:	9b00      	ldr	r3, [sp, #0]
1a005226:	2b00      	cmp	r3, #0
1a005228:	f000 80a7 	beq.w	1a00537a <_dtoa_r+0x1d2>
1a00522c:	4894      	ldr	r0, [pc, #592]	; (1a005480 <_dtoa_r+0x2d8>)
1a00522e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
1a005230:	2b00      	cmp	r3, #0
1a005232:	d0f0      	beq.n	1a005216 <_dtoa_r+0x6e>
1a005234:	78c3      	ldrb	r3, [r0, #3]
1a005236:	2b00      	cmp	r3, #0
1a005238:	f000 80b8 	beq.w	1a0053ac <_dtoa_r+0x204>
1a00523c:	f100 0308 	add.w	r3, r0, #8
1a005240:	9a23      	ldr	r2, [sp, #140]	; 0x8c
1a005242:	6013      	str	r3, [r2, #0]
1a005244:	b019      	add	sp, #100	; 0x64
1a005246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00524a:	9a01      	ldr	r2, [sp, #4]
1a00524c:	2301      	movs	r3, #1
1a00524e:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
1a005252:	602b      	str	r3, [r5, #0]
1a005254:	f8cd 9004 	str.w	r9, [sp, #4]
1a005258:	e7c2      	b.n	1a0051e0 <_dtoa_r+0x38>
1a00525a:	4620      	mov	r0, r4
1a00525c:	ec47 6b10 	vmov	d0, r6, r7
1a005260:	a917      	add	r1, sp, #92	; 0x5c
1a005262:	aa16      	add	r2, sp, #88	; 0x58
1a005264:	f001 fdfa 	bl	1a006e5c <__d2b>
1a005268:	ea5f 5519 	movs.w	r5, r9, lsr #20
1a00526c:	4683      	mov	fp, r0
1a00526e:	f040 808d 	bne.w	1a00538c <_dtoa_r+0x1e4>
1a005272:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
1a005276:	9d17      	ldr	r5, [sp, #92]	; 0x5c
1a005278:	f46f 6382 	mvn.w	r3, #1040	; 0x410
1a00527c:	4445      	add	r5, r8
1a00527e:	429d      	cmp	r5, r3
1a005280:	f2c0 829e 	blt.w	1a0057c0 <_dtoa_r+0x618>
1a005284:	4a7f      	ldr	r2, [pc, #508]	; (1a005484 <_dtoa_r+0x2dc>)
1a005286:	1b52      	subs	r2, r2, r5
1a005288:	fa09 f902 	lsl.w	r9, r9, r2
1a00528c:	9a00      	ldr	r2, [sp, #0]
1a00528e:	f205 4312 	addw	r3, r5, #1042	; 0x412
1a005292:	fa22 f003 	lsr.w	r0, r2, r3
1a005296:	ea49 0000 	orr.w	r0, r9, r0
1a00529a:	f7fd fd7b 	bl	1a002d94 <__aeabi_ui2d>
1a00529e:	2301      	movs	r3, #1
1a0052a0:	3d01      	subs	r5, #1
1a0052a2:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
1a0052a6:	930f      	str	r3, [sp, #60]	; 0x3c
1a0052a8:	2200      	movs	r2, #0
1a0052aa:	4b77      	ldr	r3, [pc, #476]	; (1a005488 <_dtoa_r+0x2e0>)
1a0052ac:	f7fd fc34 	bl	1a002b18 <__aeabi_dsub>
1a0052b0:	a36b      	add	r3, pc, #428	; (adr r3, 1a005460 <_dtoa_r+0x2b8>)
1a0052b2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0052b6:	f7fd fe7d 	bl	1a002fb4 <__aeabi_dmul>
1a0052ba:	a36b      	add	r3, pc, #428	; (adr r3, 1a005468 <_dtoa_r+0x2c0>)
1a0052bc:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0052c0:	f7fd fc2c 	bl	1a002b1c <__adddf3>
1a0052c4:	4606      	mov	r6, r0
1a0052c6:	4628      	mov	r0, r5
1a0052c8:	460f      	mov	r7, r1
1a0052ca:	f7fd fd73 	bl	1a002db4 <__aeabi_i2d>
1a0052ce:	a368      	add	r3, pc, #416	; (adr r3, 1a005470 <_dtoa_r+0x2c8>)
1a0052d0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0052d4:	f7fd fe6e 	bl	1a002fb4 <__aeabi_dmul>
1a0052d8:	4602      	mov	r2, r0
1a0052da:	460b      	mov	r3, r1
1a0052dc:	4630      	mov	r0, r6
1a0052de:	4639      	mov	r1, r7
1a0052e0:	f7fd fc1c 	bl	1a002b1c <__adddf3>
1a0052e4:	4606      	mov	r6, r0
1a0052e6:	460f      	mov	r7, r1
1a0052e8:	f002 f974 	bl	1a0075d4 <__aeabi_d2iz>
1a0052ec:	4639      	mov	r1, r7
1a0052ee:	9005      	str	r0, [sp, #20]
1a0052f0:	2200      	movs	r2, #0
1a0052f2:	4630      	mov	r0, r6
1a0052f4:	2300      	movs	r3, #0
1a0052f6:	f002 f945 	bl	1a007584 <__aeabi_dcmplt>
1a0052fa:	2800      	cmp	r0, #0
1a0052fc:	f040 81ab 	bne.w	1a005656 <_dtoa_r+0x4ae>
1a005300:	9b05      	ldr	r3, [sp, #20]
1a005302:	2b16      	cmp	r3, #22
1a005304:	f200 81a4 	bhi.w	1a005650 <_dtoa_r+0x4a8>
1a005308:	9a05      	ldr	r2, [sp, #20]
1a00530a:	4b60      	ldr	r3, [pc, #384]	; (1a00548c <_dtoa_r+0x2e4>)
1a00530c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a005310:	e9d3 0100 	ldrd	r0, r1, [r3]
1a005314:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005318:	f002 f952 	bl	1a0075c0 <__aeabi_dcmpgt>
1a00531c:	2800      	cmp	r0, #0
1a00531e:	f000 8255 	beq.w	1a0057cc <_dtoa_r+0x624>
1a005322:	9b05      	ldr	r3, [sp, #20]
1a005324:	3b01      	subs	r3, #1
1a005326:	9305      	str	r3, [sp, #20]
1a005328:	2300      	movs	r3, #0
1a00532a:	930d      	str	r3, [sp, #52]	; 0x34
1a00532c:	ebc5 0508 	rsb	r5, r5, r8
1a005330:	1e6b      	subs	r3, r5, #1
1a005332:	9306      	str	r3, [sp, #24]
1a005334:	f100 81a6 	bmi.w	1a005684 <_dtoa_r+0x4dc>
1a005338:	2300      	movs	r3, #0
1a00533a:	9307      	str	r3, [sp, #28]
1a00533c:	9b05      	ldr	r3, [sp, #20]
1a00533e:	2b00      	cmp	r3, #0
1a005340:	f2c0 8197 	blt.w	1a005672 <_dtoa_r+0x4ca>
1a005344:	9a06      	ldr	r2, [sp, #24]
1a005346:	930c      	str	r3, [sp, #48]	; 0x30
1a005348:	4611      	mov	r1, r2
1a00534a:	4419      	add	r1, r3
1a00534c:	2300      	movs	r3, #0
1a00534e:	9106      	str	r1, [sp, #24]
1a005350:	930a      	str	r3, [sp, #40]	; 0x28
1a005352:	9b03      	ldr	r3, [sp, #12]
1a005354:	2b09      	cmp	r3, #9
1a005356:	d82b      	bhi.n	1a0053b0 <_dtoa_r+0x208>
1a005358:	2b05      	cmp	r3, #5
1a00535a:	f340 8673 	ble.w	1a006044 <_dtoa_r+0xe9c>
1a00535e:	3b04      	subs	r3, #4
1a005360:	9303      	str	r3, [sp, #12]
1a005362:	2700      	movs	r7, #0
1a005364:	9b03      	ldr	r3, [sp, #12]
1a005366:	3b02      	subs	r3, #2
1a005368:	2b03      	cmp	r3, #3
1a00536a:	f200 8651 	bhi.w	1a006010 <_dtoa_r+0xe68>
1a00536e:	e8df f013 	tbh	[pc, r3, lsl #1]
1a005372:	03d1      	.short	0x03d1
1a005374:	02b603c4 	.word	0x02b603c4
1a005378:	0666      	.short	0x0666
1a00537a:	4b41      	ldr	r3, [pc, #260]	; (1a005480 <_dtoa_r+0x2d8>)
1a00537c:	4a44      	ldr	r2, [pc, #272]	; (1a005490 <_dtoa_r+0x2e8>)
1a00537e:	f3c9 0013 	ubfx	r0, r9, #0, #20
1a005382:	2800      	cmp	r0, #0
1a005384:	bf14      	ite	ne
1a005386:	4618      	movne	r0, r3
1a005388:	4610      	moveq	r0, r2
1a00538a:	e750      	b.n	1a00522e <_dtoa_r+0x86>
1a00538c:	f3c7 0313 	ubfx	r3, r7, #0, #20
1a005390:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
1a005394:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
1a005398:	4630      	mov	r0, r6
1a00539a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
1a00539e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
1a0053a2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
1a0053a6:	e77f      	b.n	1a0052a8 <_dtoa_r+0x100>
1a0053a8:	483a      	ldr	r0, [pc, #232]	; (1a005494 <_dtoa_r+0x2ec>)
1a0053aa:	e734      	b.n	1a005216 <_dtoa_r+0x6e>
1a0053ac:	1cc3      	adds	r3, r0, #3
1a0053ae:	e747      	b.n	1a005240 <_dtoa_r+0x98>
1a0053b0:	2100      	movs	r1, #0
1a0053b2:	6461      	str	r1, [r4, #68]	; 0x44
1a0053b4:	4620      	mov	r0, r4
1a0053b6:	468a      	mov	sl, r1
1a0053b8:	9103      	str	r1, [sp, #12]
1a0053ba:	f001 fab7 	bl	1a00692c <_Balloc>
1a0053be:	f04f 33ff 	mov.w	r3, #4294967295
1a0053c2:	9308      	str	r3, [sp, #32]
1a0053c4:	930e      	str	r3, [sp, #56]	; 0x38
1a0053c6:	2301      	movs	r3, #1
1a0053c8:	9009      	str	r0, [sp, #36]	; 0x24
1a0053ca:	6420      	str	r0, [r4, #64]	; 0x40
1a0053cc:	930b      	str	r3, [sp, #44]	; 0x2c
1a0053ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1a0053d0:	2b00      	cmp	r3, #0
1a0053d2:	f2c0 80d3 	blt.w	1a00557c <_dtoa_r+0x3d4>
1a0053d6:	9a05      	ldr	r2, [sp, #20]
1a0053d8:	2a0e      	cmp	r2, #14
1a0053da:	f300 80cf 	bgt.w	1a00557c <_dtoa_r+0x3d4>
1a0053de:	4b2b      	ldr	r3, [pc, #172]	; (1a00548c <_dtoa_r+0x2e4>)
1a0053e0:	f1ba 0f00 	cmp.w	sl, #0
1a0053e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a0053e8:	e9d3 8900 	ldrd	r8, r9, [r3]
1a0053ec:	f2c0 8395 	blt.w	1a005b1a <_dtoa_r+0x972>
1a0053f0:	e9dd 6700 	ldrd	r6, r7, [sp]
1a0053f4:	4642      	mov	r2, r8
1a0053f6:	464b      	mov	r3, r9
1a0053f8:	4630      	mov	r0, r6
1a0053fa:	4639      	mov	r1, r7
1a0053fc:	f7fd ff04 	bl	1a003208 <__aeabi_ddiv>
1a005400:	f002 f8e8 	bl	1a0075d4 <__aeabi_d2iz>
1a005404:	4682      	mov	sl, r0
1a005406:	f7fd fcd5 	bl	1a002db4 <__aeabi_i2d>
1a00540a:	4642      	mov	r2, r8
1a00540c:	464b      	mov	r3, r9
1a00540e:	f7fd fdd1 	bl	1a002fb4 <__aeabi_dmul>
1a005412:	460b      	mov	r3, r1
1a005414:	4602      	mov	r2, r0
1a005416:	4639      	mov	r1, r7
1a005418:	4630      	mov	r0, r6
1a00541a:	f7fd fb7d 	bl	1a002b18 <__aeabi_dsub>
1a00541e:	9d09      	ldr	r5, [sp, #36]	; 0x24
1a005420:	f10a 0330 	add.w	r3, sl, #48	; 0x30
1a005424:	702b      	strb	r3, [r5, #0]
1a005426:	9b08      	ldr	r3, [sp, #32]
1a005428:	2b01      	cmp	r3, #1
1a00542a:	4606      	mov	r6, r0
1a00542c:	460f      	mov	r7, r1
1a00542e:	f105 0501 	add.w	r5, r5, #1
1a005432:	d063      	beq.n	1a0054fc <_dtoa_r+0x354>
1a005434:	2200      	movs	r2, #0
1a005436:	4b18      	ldr	r3, [pc, #96]	; (1a005498 <_dtoa_r+0x2f0>)
1a005438:	f7fd fdbc 	bl	1a002fb4 <__aeabi_dmul>
1a00543c:	2200      	movs	r2, #0
1a00543e:	2300      	movs	r3, #0
1a005440:	4606      	mov	r6, r0
1a005442:	460f      	mov	r7, r1
1a005444:	f002 f894 	bl	1a007570 <__aeabi_dcmpeq>
1a005448:	2800      	cmp	r0, #0
1a00544a:	f040 8084 	bne.w	1a005556 <_dtoa_r+0x3ae>
1a00544e:	f8cd b000 	str.w	fp, [sp]
1a005452:	9403      	str	r4, [sp, #12]
1a005454:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
1a005458:	9c08      	ldr	r4, [sp, #32]
1a00545a:	e02a      	b.n	1a0054b2 <_dtoa_r+0x30a>
1a00545c:	f3af 8000 	nop.w
1a005460:	636f4361 	.word	0x636f4361
1a005464:	3fd287a7 	.word	0x3fd287a7
1a005468:	8b60c8b3 	.word	0x8b60c8b3
1a00546c:	3fc68a28 	.word	0x3fc68a28
1a005470:	509f79fb 	.word	0x509f79fb
1a005474:	3fd34413 	.word	0x3fd34413
1a005478:	7ff00000 	.word	0x7ff00000
1a00547c:	1a007c21 	.word	0x1a007c21
1a005480:	1a007c40 	.word	0x1a007c40
1a005484:	fffffc0e 	.word	0xfffffc0e
1a005488:	3ff80000 	.word	0x3ff80000
1a00548c:	1a007c60 	.word	0x1a007c60
1a005490:	1a007c34 	.word	0x1a007c34
1a005494:	1a007c20 	.word	0x1a007c20
1a005498:	40240000 	.word	0x40240000
1a00549c:	f7fd fd8a 	bl	1a002fb4 <__aeabi_dmul>
1a0054a0:	2200      	movs	r2, #0
1a0054a2:	2300      	movs	r3, #0
1a0054a4:	4606      	mov	r6, r0
1a0054a6:	460f      	mov	r7, r1
1a0054a8:	f002 f862 	bl	1a007570 <__aeabi_dcmpeq>
1a0054ac:	2800      	cmp	r0, #0
1a0054ae:	f040 83e4 	bne.w	1a005c7a <_dtoa_r+0xad2>
1a0054b2:	4642      	mov	r2, r8
1a0054b4:	464b      	mov	r3, r9
1a0054b6:	4630      	mov	r0, r6
1a0054b8:	4639      	mov	r1, r7
1a0054ba:	f7fd fea5 	bl	1a003208 <__aeabi_ddiv>
1a0054be:	f002 f889 	bl	1a0075d4 <__aeabi_d2iz>
1a0054c2:	4682      	mov	sl, r0
1a0054c4:	f7fd fc76 	bl	1a002db4 <__aeabi_i2d>
1a0054c8:	4642      	mov	r2, r8
1a0054ca:	464b      	mov	r3, r9
1a0054cc:	f7fd fd72 	bl	1a002fb4 <__aeabi_dmul>
1a0054d0:	4602      	mov	r2, r0
1a0054d2:	460b      	mov	r3, r1
1a0054d4:	4630      	mov	r0, r6
1a0054d6:	4639      	mov	r1, r7
1a0054d8:	f7fd fb1e 	bl	1a002b18 <__aeabi_dsub>
1a0054dc:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
1a0054e0:	f805 eb01 	strb.w	lr, [r5], #1
1a0054e4:	ebcb 0e05 	rsb	lr, fp, r5
1a0054e8:	4574      	cmp	r4, lr
1a0054ea:	4606      	mov	r6, r0
1a0054ec:	460f      	mov	r7, r1
1a0054ee:	f04f 0200 	mov.w	r2, #0
1a0054f2:	4bb7      	ldr	r3, [pc, #732]	; (1a0057d0 <_dtoa_r+0x628>)
1a0054f4:	d1d2      	bne.n	1a00549c <_dtoa_r+0x2f4>
1a0054f6:	f8dd b000 	ldr.w	fp, [sp]
1a0054fa:	9c03      	ldr	r4, [sp, #12]
1a0054fc:	4632      	mov	r2, r6
1a0054fe:	463b      	mov	r3, r7
1a005500:	4630      	mov	r0, r6
1a005502:	4639      	mov	r1, r7
1a005504:	f7fd fb0a 	bl	1a002b1c <__adddf3>
1a005508:	4606      	mov	r6, r0
1a00550a:	460f      	mov	r7, r1
1a00550c:	4640      	mov	r0, r8
1a00550e:	4649      	mov	r1, r9
1a005510:	4632      	mov	r2, r6
1a005512:	463b      	mov	r3, r7
1a005514:	f002 f836 	bl	1a007584 <__aeabi_dcmplt>
1a005518:	b948      	cbnz	r0, 1a00552e <_dtoa_r+0x386>
1a00551a:	4640      	mov	r0, r8
1a00551c:	4649      	mov	r1, r9
1a00551e:	4632      	mov	r2, r6
1a005520:	463b      	mov	r3, r7
1a005522:	f002 f825 	bl	1a007570 <__aeabi_dcmpeq>
1a005526:	b1b0      	cbz	r0, 1a005556 <_dtoa_r+0x3ae>
1a005528:	f01a 0f01 	tst.w	sl, #1
1a00552c:	d013      	beq.n	1a005556 <_dtoa_r+0x3ae>
1a00552e:	f815 8c01 	ldrb.w	r8, [r5, #-1]
1a005532:	9909      	ldr	r1, [sp, #36]	; 0x24
1a005534:	1e6b      	subs	r3, r5, #1
1a005536:	e004      	b.n	1a005542 <_dtoa_r+0x39a>
1a005538:	428b      	cmp	r3, r1
1a00553a:	f000 8448 	beq.w	1a005dce <_dtoa_r+0xc26>
1a00553e:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
1a005542:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
1a005546:	f103 0501 	add.w	r5, r3, #1
1a00554a:	461a      	mov	r2, r3
1a00554c:	d0f4      	beq.n	1a005538 <_dtoa_r+0x390>
1a00554e:	f108 0301 	add.w	r3, r8, #1
1a005552:	b2db      	uxtb	r3, r3
1a005554:	7013      	strb	r3, [r2, #0]
1a005556:	4620      	mov	r0, r4
1a005558:	4659      	mov	r1, fp
1a00555a:	f001 fa0d 	bl	1a006978 <_Bfree>
1a00555e:	2200      	movs	r2, #0
1a005560:	9b05      	ldr	r3, [sp, #20]
1a005562:	702a      	strb	r2, [r5, #0]
1a005564:	9a04      	ldr	r2, [sp, #16]
1a005566:	3301      	adds	r3, #1
1a005568:	6013      	str	r3, [r2, #0]
1a00556a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
1a00556c:	2b00      	cmp	r3, #0
1a00556e:	f000 834b 	beq.w	1a005c08 <_dtoa_r+0xa60>
1a005572:	9809      	ldr	r0, [sp, #36]	; 0x24
1a005574:	601d      	str	r5, [r3, #0]
1a005576:	b019      	add	sp, #100	; 0x64
1a005578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00557c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a00557e:	2a00      	cmp	r2, #0
1a005580:	f000 8085 	beq.w	1a00568e <_dtoa_r+0x4e6>
1a005584:	9a03      	ldr	r2, [sp, #12]
1a005586:	2a01      	cmp	r2, #1
1a005588:	f340 830a 	ble.w	1a005ba0 <_dtoa_r+0x9f8>
1a00558c:	9b08      	ldr	r3, [sp, #32]
1a00558e:	1e5f      	subs	r7, r3, #1
1a005590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005592:	42bb      	cmp	r3, r7
1a005594:	f2c0 83a6 	blt.w	1a005ce4 <_dtoa_r+0xb3c>
1a005598:	1bdf      	subs	r7, r3, r7
1a00559a:	9b08      	ldr	r3, [sp, #32]
1a00559c:	2b00      	cmp	r3, #0
1a00559e:	f2c0 84a4 	blt.w	1a005eea <_dtoa_r+0xd42>
1a0055a2:	9d07      	ldr	r5, [sp, #28]
1a0055a4:	9b08      	ldr	r3, [sp, #32]
1a0055a6:	9a07      	ldr	r2, [sp, #28]
1a0055a8:	441a      	add	r2, r3
1a0055aa:	9207      	str	r2, [sp, #28]
1a0055ac:	9a06      	ldr	r2, [sp, #24]
1a0055ae:	4620      	mov	r0, r4
1a0055b0:	441a      	add	r2, r3
1a0055b2:	2101      	movs	r1, #1
1a0055b4:	9206      	str	r2, [sp, #24]
1a0055b6:	f001 fa79 	bl	1a006aac <__i2b>
1a0055ba:	4606      	mov	r6, r0
1a0055bc:	b165      	cbz	r5, 1a0055d8 <_dtoa_r+0x430>
1a0055be:	9906      	ldr	r1, [sp, #24]
1a0055c0:	2900      	cmp	r1, #0
1a0055c2:	460b      	mov	r3, r1
1a0055c4:	dd08      	ble.n	1a0055d8 <_dtoa_r+0x430>
1a0055c6:	42a9      	cmp	r1, r5
1a0055c8:	9a07      	ldr	r2, [sp, #28]
1a0055ca:	bfa8      	it	ge
1a0055cc:	462b      	movge	r3, r5
1a0055ce:	1ad2      	subs	r2, r2, r3
1a0055d0:	1aed      	subs	r5, r5, r3
1a0055d2:	1acb      	subs	r3, r1, r3
1a0055d4:	9207      	str	r2, [sp, #28]
1a0055d6:	9306      	str	r3, [sp, #24]
1a0055d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0055da:	2b00      	cmp	r3, #0
1a0055dc:	dd1a      	ble.n	1a005614 <_dtoa_r+0x46c>
1a0055de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0055e0:	2b00      	cmp	r3, #0
1a0055e2:	f000 8378 	beq.w	1a005cd6 <_dtoa_r+0xb2e>
1a0055e6:	2f00      	cmp	r7, #0
1a0055e8:	dd10      	ble.n	1a00560c <_dtoa_r+0x464>
1a0055ea:	4631      	mov	r1, r6
1a0055ec:	463a      	mov	r2, r7
1a0055ee:	4620      	mov	r0, r4
1a0055f0:	f001 fb00 	bl	1a006bf4 <__pow5mult>
1a0055f4:	4606      	mov	r6, r0
1a0055f6:	465a      	mov	r2, fp
1a0055f8:	4631      	mov	r1, r6
1a0055fa:	4620      	mov	r0, r4
1a0055fc:	f001 fa60 	bl	1a006ac0 <__multiply>
1a005600:	4659      	mov	r1, fp
1a005602:	4680      	mov	r8, r0
1a005604:	4620      	mov	r0, r4
1a005606:	f001 f9b7 	bl	1a006978 <_Bfree>
1a00560a:	46c3      	mov	fp, r8
1a00560c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00560e:	1bda      	subs	r2, r3, r7
1a005610:	f040 82a5 	bne.w	1a005b5e <_dtoa_r+0x9b6>
1a005614:	4620      	mov	r0, r4
1a005616:	2101      	movs	r1, #1
1a005618:	f001 fa48 	bl	1a006aac <__i2b>
1a00561c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00561e:	2b00      	cmp	r3, #0
1a005620:	4680      	mov	r8, r0
1a005622:	dd38      	ble.n	1a005696 <_dtoa_r+0x4ee>
1a005624:	4601      	mov	r1, r0
1a005626:	461a      	mov	r2, r3
1a005628:	4620      	mov	r0, r4
1a00562a:	f001 fae3 	bl	1a006bf4 <__pow5mult>
1a00562e:	9b03      	ldr	r3, [sp, #12]
1a005630:	2b01      	cmp	r3, #1
1a005632:	4680      	mov	r8, r0
1a005634:	f340 8299 	ble.w	1a005b6a <_dtoa_r+0x9c2>
1a005638:	f04f 0900 	mov.w	r9, #0
1a00563c:	f8d8 3010 	ldr.w	r3, [r8, #16]
1a005640:	eb08 0383 	add.w	r3, r8, r3, lsl #2
1a005644:	6918      	ldr	r0, [r3, #16]
1a005646:	f001 f9e3 	bl	1a006a10 <__hi0bits>
1a00564a:	f1c0 0020 	rsb	r0, r0, #32
1a00564e:	e02c      	b.n	1a0056aa <_dtoa_r+0x502>
1a005650:	2301      	movs	r3, #1
1a005652:	930d      	str	r3, [sp, #52]	; 0x34
1a005654:	e66a      	b.n	1a00532c <_dtoa_r+0x184>
1a005656:	9805      	ldr	r0, [sp, #20]
1a005658:	f7fd fbac 	bl	1a002db4 <__aeabi_i2d>
1a00565c:	4632      	mov	r2, r6
1a00565e:	463b      	mov	r3, r7
1a005660:	f001 ff86 	bl	1a007570 <__aeabi_dcmpeq>
1a005664:	2800      	cmp	r0, #0
1a005666:	f47f ae4b 	bne.w	1a005300 <_dtoa_r+0x158>
1a00566a:	9b05      	ldr	r3, [sp, #20]
1a00566c:	3b01      	subs	r3, #1
1a00566e:	9305      	str	r3, [sp, #20]
1a005670:	e646      	b.n	1a005300 <_dtoa_r+0x158>
1a005672:	9a07      	ldr	r2, [sp, #28]
1a005674:	9b05      	ldr	r3, [sp, #20]
1a005676:	1ad2      	subs	r2, r2, r3
1a005678:	425b      	negs	r3, r3
1a00567a:	930a      	str	r3, [sp, #40]	; 0x28
1a00567c:	2300      	movs	r3, #0
1a00567e:	9207      	str	r2, [sp, #28]
1a005680:	930c      	str	r3, [sp, #48]	; 0x30
1a005682:	e666      	b.n	1a005352 <_dtoa_r+0x1aa>
1a005684:	425b      	negs	r3, r3
1a005686:	9307      	str	r3, [sp, #28]
1a005688:	2300      	movs	r3, #0
1a00568a:	9306      	str	r3, [sp, #24]
1a00568c:	e656      	b.n	1a00533c <_dtoa_r+0x194>
1a00568e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
1a005690:	9d07      	ldr	r5, [sp, #28]
1a005692:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
1a005694:	e792      	b.n	1a0055bc <_dtoa_r+0x414>
1a005696:	9b03      	ldr	r3, [sp, #12]
1a005698:	2b01      	cmp	r3, #1
1a00569a:	f340 82b8 	ble.w	1a005c0e <_dtoa_r+0xa66>
1a00569e:	f04f 0900 	mov.w	r9, #0
1a0056a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0056a4:	2b00      	cmp	r3, #0
1a0056a6:	d1c9      	bne.n	1a00563c <_dtoa_r+0x494>
1a0056a8:	2001      	movs	r0, #1
1a0056aa:	9b06      	ldr	r3, [sp, #24]
1a0056ac:	4418      	add	r0, r3
1a0056ae:	f010 001f 	ands.w	r0, r0, #31
1a0056b2:	f000 8083 	beq.w	1a0057bc <_dtoa_r+0x614>
1a0056b6:	f1c0 0320 	rsb	r3, r0, #32
1a0056ba:	2b04      	cmp	r3, #4
1a0056bc:	f340 84b9 	ble.w	1a006032 <_dtoa_r+0xe8a>
1a0056c0:	f1c0 001c 	rsb	r0, r0, #28
1a0056c4:	9b07      	ldr	r3, [sp, #28]
1a0056c6:	4403      	add	r3, r0
1a0056c8:	9307      	str	r3, [sp, #28]
1a0056ca:	9b06      	ldr	r3, [sp, #24]
1a0056cc:	4403      	add	r3, r0
1a0056ce:	4405      	add	r5, r0
1a0056d0:	9306      	str	r3, [sp, #24]
1a0056d2:	9b07      	ldr	r3, [sp, #28]
1a0056d4:	2b00      	cmp	r3, #0
1a0056d6:	dd05      	ble.n	1a0056e4 <_dtoa_r+0x53c>
1a0056d8:	4659      	mov	r1, fp
1a0056da:	461a      	mov	r2, r3
1a0056dc:	4620      	mov	r0, r4
1a0056de:	f001 fad9 	bl	1a006c94 <__lshift>
1a0056e2:	4683      	mov	fp, r0
1a0056e4:	9b06      	ldr	r3, [sp, #24]
1a0056e6:	2b00      	cmp	r3, #0
1a0056e8:	dd05      	ble.n	1a0056f6 <_dtoa_r+0x54e>
1a0056ea:	4641      	mov	r1, r8
1a0056ec:	461a      	mov	r2, r3
1a0056ee:	4620      	mov	r0, r4
1a0056f0:	f001 fad0 	bl	1a006c94 <__lshift>
1a0056f4:	4680      	mov	r8, r0
1a0056f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0056f8:	2b00      	cmp	r3, #0
1a0056fa:	f040 826a 	bne.w	1a005bd2 <_dtoa_r+0xa2a>
1a0056fe:	9b08      	ldr	r3, [sp, #32]
1a005700:	2b00      	cmp	r3, #0
1a005702:	f340 8297 	ble.w	1a005c34 <_dtoa_r+0xa8c>
1a005706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a005708:	2b00      	cmp	r3, #0
1a00570a:	d171      	bne.n	1a0057f0 <_dtoa_r+0x648>
1a00570c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
1a005710:	9f08      	ldr	r7, [sp, #32]
1a005712:	464d      	mov	r5, r9
1a005714:	e002      	b.n	1a00571c <_dtoa_r+0x574>
1a005716:	f001 f939 	bl	1a00698c <__multadd>
1a00571a:	4683      	mov	fp, r0
1a00571c:	4641      	mov	r1, r8
1a00571e:	4658      	mov	r0, fp
1a005720:	f7ff fcaa 	bl	1a005078 <quorem>
1a005724:	f100 0c30 	add.w	ip, r0, #48	; 0x30
1a005728:	f805 cb01 	strb.w	ip, [r5], #1
1a00572c:	ebc9 0305 	rsb	r3, r9, r5
1a005730:	42bb      	cmp	r3, r7
1a005732:	4620      	mov	r0, r4
1a005734:	4659      	mov	r1, fp
1a005736:	f04f 020a 	mov.w	r2, #10
1a00573a:	f04f 0300 	mov.w	r3, #0
1a00573e:	dbea      	blt.n	1a005716 <_dtoa_r+0x56e>
1a005740:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005742:	9a08      	ldr	r2, [sp, #32]
1a005744:	2a01      	cmp	r2, #1
1a005746:	bfac      	ite	ge
1a005748:	189b      	addge	r3, r3, r2
1a00574a:	3301      	addlt	r3, #1
1a00574c:	461d      	mov	r5, r3
1a00574e:	f04f 0a00 	mov.w	sl, #0
1a005752:	4659      	mov	r1, fp
1a005754:	2201      	movs	r2, #1
1a005756:	4620      	mov	r0, r4
1a005758:	f8cd c000 	str.w	ip, [sp]
1a00575c:	f001 fa9a 	bl	1a006c94 <__lshift>
1a005760:	4641      	mov	r1, r8
1a005762:	4683      	mov	fp, r0
1a005764:	f001 faec 	bl	1a006d40 <__mcmp>
1a005768:	2800      	cmp	r0, #0
1a00576a:	f8dd c000 	ldr.w	ip, [sp]
1a00576e:	f340 82ef 	ble.w	1a005d50 <_dtoa_r+0xba8>
1a005772:	f815 2c01 	ldrb.w	r2, [r5, #-1]
1a005776:	9909      	ldr	r1, [sp, #36]	; 0x24
1a005778:	1e6b      	subs	r3, r5, #1
1a00577a:	e004      	b.n	1a005786 <_dtoa_r+0x5de>
1a00577c:	428b      	cmp	r3, r1
1a00577e:	f000 8275 	beq.w	1a005c6c <_dtoa_r+0xac4>
1a005782:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1a005786:	2a39      	cmp	r2, #57	; 0x39
1a005788:	f103 0501 	add.w	r5, r3, #1
1a00578c:	d0f6      	beq.n	1a00577c <_dtoa_r+0x5d4>
1a00578e:	3201      	adds	r2, #1
1a005790:	701a      	strb	r2, [r3, #0]
1a005792:	4641      	mov	r1, r8
1a005794:	4620      	mov	r0, r4
1a005796:	f001 f8ef 	bl	1a006978 <_Bfree>
1a00579a:	2e00      	cmp	r6, #0
1a00579c:	f43f aedb 	beq.w	1a005556 <_dtoa_r+0x3ae>
1a0057a0:	f1ba 0f00 	cmp.w	sl, #0
1a0057a4:	d005      	beq.n	1a0057b2 <_dtoa_r+0x60a>
1a0057a6:	45b2      	cmp	sl, r6
1a0057a8:	d003      	beq.n	1a0057b2 <_dtoa_r+0x60a>
1a0057aa:	4651      	mov	r1, sl
1a0057ac:	4620      	mov	r0, r4
1a0057ae:	f001 f8e3 	bl	1a006978 <_Bfree>
1a0057b2:	4631      	mov	r1, r6
1a0057b4:	4620      	mov	r0, r4
1a0057b6:	f001 f8df 	bl	1a006978 <_Bfree>
1a0057ba:	e6cc      	b.n	1a005556 <_dtoa_r+0x3ae>
1a0057bc:	201c      	movs	r0, #28
1a0057be:	e781      	b.n	1a0056c4 <_dtoa_r+0x51c>
1a0057c0:	4b04      	ldr	r3, [pc, #16]	; (1a0057d4 <_dtoa_r+0x62c>)
1a0057c2:	9a00      	ldr	r2, [sp, #0]
1a0057c4:	1b5b      	subs	r3, r3, r5
1a0057c6:	fa02 f003 	lsl.w	r0, r2, r3
1a0057ca:	e566      	b.n	1a00529a <_dtoa_r+0xf2>
1a0057cc:	900d      	str	r0, [sp, #52]	; 0x34
1a0057ce:	e5ad      	b.n	1a00532c <_dtoa_r+0x184>
1a0057d0:	40240000 	.word	0x40240000
1a0057d4:	fffffbee 	.word	0xfffffbee
1a0057d8:	4631      	mov	r1, r6
1a0057da:	2300      	movs	r3, #0
1a0057dc:	4620      	mov	r0, r4
1a0057de:	220a      	movs	r2, #10
1a0057e0:	f001 f8d4 	bl	1a00698c <__multadd>
1a0057e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0057e6:	2b00      	cmp	r3, #0
1a0057e8:	4606      	mov	r6, r0
1a0057ea:	f340 840b 	ble.w	1a006004 <_dtoa_r+0xe5c>
1a0057ee:	9308      	str	r3, [sp, #32]
1a0057f0:	2d00      	cmp	r5, #0
1a0057f2:	dd05      	ble.n	1a005800 <_dtoa_r+0x658>
1a0057f4:	4631      	mov	r1, r6
1a0057f6:	462a      	mov	r2, r5
1a0057f8:	4620      	mov	r0, r4
1a0057fa:	f001 fa4b 	bl	1a006c94 <__lshift>
1a0057fe:	4606      	mov	r6, r0
1a005800:	f1b9 0f00 	cmp.w	r9, #0
1a005804:	f040 82ed 	bne.w	1a005de2 <_dtoa_r+0xc3a>
1a005808:	46b1      	mov	r9, r6
1a00580a:	9b08      	ldr	r3, [sp, #32]
1a00580c:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a00580e:	3b01      	subs	r3, #1
1a005810:	18d3      	adds	r3, r2, r3
1a005812:	9308      	str	r3, [sp, #32]
1a005814:	9b00      	ldr	r3, [sp, #0]
1a005816:	f003 0301 	and.w	r3, r3, #1
1a00581a:	930a      	str	r3, [sp, #40]	; 0x28
1a00581c:	4617      	mov	r7, r2
1a00581e:	4641      	mov	r1, r8
1a005820:	4658      	mov	r0, fp
1a005822:	f7ff fc29 	bl	1a005078 <quorem>
1a005826:	4631      	mov	r1, r6
1a005828:	4605      	mov	r5, r0
1a00582a:	4658      	mov	r0, fp
1a00582c:	f001 fa88 	bl	1a006d40 <__mcmp>
1a005830:	464a      	mov	r2, r9
1a005832:	4682      	mov	sl, r0
1a005834:	4641      	mov	r1, r8
1a005836:	4620      	mov	r0, r4
1a005838:	f001 faa6 	bl	1a006d88 <__mdiff>
1a00583c:	68c2      	ldr	r2, [r0, #12]
1a00583e:	4603      	mov	r3, r0
1a005840:	f105 0c30 	add.w	ip, r5, #48	; 0x30
1a005844:	2a00      	cmp	r2, #0
1a005846:	f040 81ba 	bne.w	1a005bbe <_dtoa_r+0xa16>
1a00584a:	4619      	mov	r1, r3
1a00584c:	4658      	mov	r0, fp
1a00584e:	f8cd c01c 	str.w	ip, [sp, #28]
1a005852:	9306      	str	r3, [sp, #24]
1a005854:	f001 fa74 	bl	1a006d40 <__mcmp>
1a005858:	9b06      	ldr	r3, [sp, #24]
1a00585a:	9000      	str	r0, [sp, #0]
1a00585c:	4619      	mov	r1, r3
1a00585e:	4620      	mov	r0, r4
1a005860:	f001 f88a 	bl	1a006978 <_Bfree>
1a005864:	9a00      	ldr	r2, [sp, #0]
1a005866:	f8dd c01c 	ldr.w	ip, [sp, #28]
1a00586a:	b92a      	cbnz	r2, 1a005878 <_dtoa_r+0x6d0>
1a00586c:	9b03      	ldr	r3, [sp, #12]
1a00586e:	b91b      	cbnz	r3, 1a005878 <_dtoa_r+0x6d0>
1a005870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005872:	2b00      	cmp	r3, #0
1a005874:	f000 83aa 	beq.w	1a005fcc <_dtoa_r+0xe24>
1a005878:	f1ba 0f00 	cmp.w	sl, #0
1a00587c:	f2c0 824a 	blt.w	1a005d14 <_dtoa_r+0xb6c>
1a005880:	d105      	bne.n	1a00588e <_dtoa_r+0x6e6>
1a005882:	9b03      	ldr	r3, [sp, #12]
1a005884:	b91b      	cbnz	r3, 1a00588e <_dtoa_r+0x6e6>
1a005886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005888:	2b00      	cmp	r3, #0
1a00588a:	f000 8243 	beq.w	1a005d14 <_dtoa_r+0xb6c>
1a00588e:	2a00      	cmp	r2, #0
1a005890:	f300 82bb 	bgt.w	1a005e0a <_dtoa_r+0xc62>
1a005894:	9b08      	ldr	r3, [sp, #32]
1a005896:	f887 c000 	strb.w	ip, [r7]
1a00589a:	f107 0a01 	add.w	sl, r7, #1
1a00589e:	429f      	cmp	r7, r3
1a0058a0:	4655      	mov	r5, sl
1a0058a2:	f000 82be 	beq.w	1a005e22 <_dtoa_r+0xc7a>
1a0058a6:	4659      	mov	r1, fp
1a0058a8:	220a      	movs	r2, #10
1a0058aa:	2300      	movs	r3, #0
1a0058ac:	4620      	mov	r0, r4
1a0058ae:	f001 f86d 	bl	1a00698c <__multadd>
1a0058b2:	454e      	cmp	r6, r9
1a0058b4:	4683      	mov	fp, r0
1a0058b6:	4631      	mov	r1, r6
1a0058b8:	4620      	mov	r0, r4
1a0058ba:	f04f 020a 	mov.w	r2, #10
1a0058be:	f04f 0300 	mov.w	r3, #0
1a0058c2:	f000 8176 	beq.w	1a005bb2 <_dtoa_r+0xa0a>
1a0058c6:	f001 f861 	bl	1a00698c <__multadd>
1a0058ca:	4649      	mov	r1, r9
1a0058cc:	4606      	mov	r6, r0
1a0058ce:	220a      	movs	r2, #10
1a0058d0:	4620      	mov	r0, r4
1a0058d2:	2300      	movs	r3, #0
1a0058d4:	f001 f85a 	bl	1a00698c <__multadd>
1a0058d8:	4657      	mov	r7, sl
1a0058da:	4681      	mov	r9, r0
1a0058dc:	e79f      	b.n	1a00581e <_dtoa_r+0x676>
1a0058de:	2301      	movs	r3, #1
1a0058e0:	930b      	str	r3, [sp, #44]	; 0x2c
1a0058e2:	f1ba 0f00 	cmp.w	sl, #0
1a0058e6:	f340 820c 	ble.w	1a005d02 <_dtoa_r+0xb5a>
1a0058ea:	4656      	mov	r6, sl
1a0058ec:	4655      	mov	r5, sl
1a0058ee:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
1a0058f2:	f8cd a020 	str.w	sl, [sp, #32]
1a0058f6:	2100      	movs	r1, #0
1a0058f8:	2e17      	cmp	r6, #23
1a0058fa:	6461      	str	r1, [r4, #68]	; 0x44
1a0058fc:	d90a      	bls.n	1a005914 <_dtoa_r+0x76c>
1a0058fe:	2201      	movs	r2, #1
1a005900:	2304      	movs	r3, #4
1a005902:	005b      	lsls	r3, r3, #1
1a005904:	f103 0014 	add.w	r0, r3, #20
1a005908:	4286      	cmp	r6, r0
1a00590a:	4611      	mov	r1, r2
1a00590c:	f102 0201 	add.w	r2, r2, #1
1a005910:	d2f7      	bcs.n	1a005902 <_dtoa_r+0x75a>
1a005912:	6461      	str	r1, [r4, #68]	; 0x44
1a005914:	4620      	mov	r0, r4
1a005916:	f001 f809 	bl	1a00692c <_Balloc>
1a00591a:	2d0e      	cmp	r5, #14
1a00591c:	9009      	str	r0, [sp, #36]	; 0x24
1a00591e:	6420      	str	r0, [r4, #64]	; 0x40
1a005920:	f63f ad55 	bhi.w	1a0053ce <_dtoa_r+0x226>
1a005924:	2f00      	cmp	r7, #0
1a005926:	f43f ad52 	beq.w	1a0053ce <_dtoa_r+0x226>
1a00592a:	ed9d 7b00 	vldr	d7, [sp]
1a00592e:	9905      	ldr	r1, [sp, #20]
1a005930:	2900      	cmp	r1, #0
1a005932:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a005936:	f340 8223 	ble.w	1a005d80 <_dtoa_r+0xbd8>
1a00593a:	4bb7      	ldr	r3, [pc, #732]	; (1a005c18 <_dtoa_r+0xa70>)
1a00593c:	f001 020f 	and.w	r2, r1, #15
1a005940:	110d      	asrs	r5, r1, #4
1a005942:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a005946:	06e9      	lsls	r1, r5, #27
1a005948:	e9d3 6700 	ldrd	r6, r7, [r3]
1a00594c:	f140 81d2 	bpl.w	1a005cf4 <_dtoa_r+0xb4c>
1a005950:	4bb2      	ldr	r3, [pc, #712]	; (1a005c1c <_dtoa_r+0xa74>)
1a005952:	ec51 0b17 	vmov	r0, r1, d7
1a005956:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
1a00595a:	f7fd fc55 	bl	1a003208 <__aeabi_ddiv>
1a00595e:	e9cd 0100 	strd	r0, r1, [sp]
1a005962:	f005 050f 	and.w	r5, r5, #15
1a005966:	f04f 0803 	mov.w	r8, #3
1a00596a:	b18d      	cbz	r5, 1a005990 <_dtoa_r+0x7e8>
1a00596c:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 1a005c1c <_dtoa_r+0xa74>
1a005970:	4630      	mov	r0, r6
1a005972:	4639      	mov	r1, r7
1a005974:	07ea      	lsls	r2, r5, #31
1a005976:	d505      	bpl.n	1a005984 <_dtoa_r+0x7dc>
1a005978:	e9d9 2300 	ldrd	r2, r3, [r9]
1a00597c:	f7fd fb1a 	bl	1a002fb4 <__aeabi_dmul>
1a005980:	f108 0801 	add.w	r8, r8, #1
1a005984:	106d      	asrs	r5, r5, #1
1a005986:	f109 0908 	add.w	r9, r9, #8
1a00598a:	d1f3      	bne.n	1a005974 <_dtoa_r+0x7cc>
1a00598c:	4606      	mov	r6, r0
1a00598e:	460f      	mov	r7, r1
1a005990:	e9dd 0100 	ldrd	r0, r1, [sp]
1a005994:	4632      	mov	r2, r6
1a005996:	463b      	mov	r3, r7
1a005998:	f7fd fc36 	bl	1a003208 <__aeabi_ddiv>
1a00599c:	e9cd 0100 	strd	r0, r1, [sp]
1a0059a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0059a2:	b143      	cbz	r3, 1a0059b6 <_dtoa_r+0x80e>
1a0059a4:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0059a8:	2200      	movs	r2, #0
1a0059aa:	4b9d      	ldr	r3, [pc, #628]	; (1a005c20 <_dtoa_r+0xa78>)
1a0059ac:	f001 fdea 	bl	1a007584 <__aeabi_dcmplt>
1a0059b0:	2800      	cmp	r0, #0
1a0059b2:	f040 82ae 	bne.w	1a005f12 <_dtoa_r+0xd6a>
1a0059b6:	4640      	mov	r0, r8
1a0059b8:	f7fd f9fc 	bl	1a002db4 <__aeabi_i2d>
1a0059bc:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0059c0:	f7fd faf8 	bl	1a002fb4 <__aeabi_dmul>
1a0059c4:	4b97      	ldr	r3, [pc, #604]	; (1a005c24 <_dtoa_r+0xa7c>)
1a0059c6:	2200      	movs	r2, #0
1a0059c8:	f7fd f8a8 	bl	1a002b1c <__adddf3>
1a0059cc:	9b08      	ldr	r3, [sp, #32]
1a0059ce:	4606      	mov	r6, r0
1a0059d0:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
1a0059d4:	2b00      	cmp	r3, #0
1a0059d6:	f000 8162 	beq.w	1a005c9e <_dtoa_r+0xaf6>
1a0059da:	9b05      	ldr	r3, [sp, #20]
1a0059dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
1a0059e0:	9314      	str	r3, [sp, #80]	; 0x50
1a0059e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0059e4:	2b00      	cmp	r3, #0
1a0059e6:	f000 8223 	beq.w	1a005e30 <_dtoa_r+0xc88>
1a0059ea:	4b8b      	ldr	r3, [pc, #556]	; (1a005c18 <_dtoa_r+0xa70>)
1a0059ec:	498e      	ldr	r1, [pc, #568]	; (1a005c28 <_dtoa_r+0xa80>)
1a0059ee:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
1a0059f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
1a0059f6:	2000      	movs	r0, #0
1a0059f8:	f7fd fc06 	bl	1a003208 <__aeabi_ddiv>
1a0059fc:	4632      	mov	r2, r6
1a0059fe:	463b      	mov	r3, r7
1a005a00:	f7fd f88a 	bl	1a002b18 <__aeabi_dsub>
1a005a04:	e9dd 6700 	ldrd	r6, r7, [sp]
1a005a08:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
1a005a0c:	4639      	mov	r1, r7
1a005a0e:	4630      	mov	r0, r6
1a005a10:	f001 fde0 	bl	1a0075d4 <__aeabi_d2iz>
1a005a14:	4605      	mov	r5, r0
1a005a16:	f7fd f9cd 	bl	1a002db4 <__aeabi_i2d>
1a005a1a:	3530      	adds	r5, #48	; 0x30
1a005a1c:	4602      	mov	r2, r0
1a005a1e:	460b      	mov	r3, r1
1a005a20:	4630      	mov	r0, r6
1a005a22:	4639      	mov	r1, r7
1a005a24:	f7fd f878 	bl	1a002b18 <__aeabi_dsub>
1a005a28:	fa5f f885 	uxtb.w	r8, r5
1a005a2c:	9d09      	ldr	r5, [sp, #36]	; 0x24
1a005a2e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
1a005a32:	f885 8000 	strb.w	r8, [r5]
1a005a36:	4606      	mov	r6, r0
1a005a38:	460f      	mov	r7, r1
1a005a3a:	3501      	adds	r5, #1
1a005a3c:	f001 fda2 	bl	1a007584 <__aeabi_dcmplt>
1a005a40:	2800      	cmp	r0, #0
1a005a42:	f040 82a7 	bne.w	1a005f94 <_dtoa_r+0xdec>
1a005a46:	4632      	mov	r2, r6
1a005a48:	463b      	mov	r3, r7
1a005a4a:	2000      	movs	r0, #0
1a005a4c:	4974      	ldr	r1, [pc, #464]	; (1a005c20 <_dtoa_r+0xa78>)
1a005a4e:	f7fd f863 	bl	1a002b18 <__aeabi_dsub>
1a005a52:	4602      	mov	r2, r0
1a005a54:	460b      	mov	r3, r1
1a005a56:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a005a5a:	f001 fdb1 	bl	1a0075c0 <__aeabi_dcmpgt>
1a005a5e:	2800      	cmp	r0, #0
1a005a60:	f040 82ad 	bne.w	1a005fbe <_dtoa_r+0xe16>
1a005a64:	f1b9 0f01 	cmp.w	r9, #1
1a005a68:	f340 8184 	ble.w	1a005d74 <_dtoa_r+0xbcc>
1a005a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005a6e:	f8cd b000 	str.w	fp, [sp]
1a005a72:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
1a005a76:	4499      	add	r9, r3
1a005a78:	46a0      	mov	r8, r4
1a005a7a:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
1a005a7e:	e00d      	b.n	1a005a9c <_dtoa_r+0x8f4>
1a005a80:	2000      	movs	r0, #0
1a005a82:	4967      	ldr	r1, [pc, #412]	; (1a005c20 <_dtoa_r+0xa78>)
1a005a84:	f7fd f848 	bl	1a002b18 <__aeabi_dsub>
1a005a88:	4652      	mov	r2, sl
1a005a8a:	465b      	mov	r3, fp
1a005a8c:	f001 fd7a 	bl	1a007584 <__aeabi_dcmplt>
1a005a90:	2800      	cmp	r0, #0
1a005a92:	f040 828f 	bne.w	1a005fb4 <_dtoa_r+0xe0c>
1a005a96:	454d      	cmp	r5, r9
1a005a98:	f000 8167 	beq.w	1a005d6a <_dtoa_r+0xbc2>
1a005a9c:	4650      	mov	r0, sl
1a005a9e:	4659      	mov	r1, fp
1a005aa0:	2200      	movs	r2, #0
1a005aa2:	4b62      	ldr	r3, [pc, #392]	; (1a005c2c <_dtoa_r+0xa84>)
1a005aa4:	f7fd fa86 	bl	1a002fb4 <__aeabi_dmul>
1a005aa8:	2200      	movs	r2, #0
1a005aaa:	4b60      	ldr	r3, [pc, #384]	; (1a005c2c <_dtoa_r+0xa84>)
1a005aac:	4682      	mov	sl, r0
1a005aae:	468b      	mov	fp, r1
1a005ab0:	4630      	mov	r0, r6
1a005ab2:	4639      	mov	r1, r7
1a005ab4:	f7fd fa7e 	bl	1a002fb4 <__aeabi_dmul>
1a005ab8:	460f      	mov	r7, r1
1a005aba:	4606      	mov	r6, r0
1a005abc:	f001 fd8a 	bl	1a0075d4 <__aeabi_d2iz>
1a005ac0:	4604      	mov	r4, r0
1a005ac2:	f7fd f977 	bl	1a002db4 <__aeabi_i2d>
1a005ac6:	4602      	mov	r2, r0
1a005ac8:	460b      	mov	r3, r1
1a005aca:	4630      	mov	r0, r6
1a005acc:	4639      	mov	r1, r7
1a005ace:	f7fd f823 	bl	1a002b18 <__aeabi_dsub>
1a005ad2:	3430      	adds	r4, #48	; 0x30
1a005ad4:	b2e4      	uxtb	r4, r4
1a005ad6:	4652      	mov	r2, sl
1a005ad8:	465b      	mov	r3, fp
1a005ada:	f805 4b01 	strb.w	r4, [r5], #1
1a005ade:	4606      	mov	r6, r0
1a005ae0:	460f      	mov	r7, r1
1a005ae2:	f001 fd4f 	bl	1a007584 <__aeabi_dcmplt>
1a005ae6:	4632      	mov	r2, r6
1a005ae8:	463b      	mov	r3, r7
1a005aea:	2800      	cmp	r0, #0
1a005aec:	d0c8      	beq.n	1a005a80 <_dtoa_r+0x8d8>
1a005aee:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a005af0:	f8dd b000 	ldr.w	fp, [sp]
1a005af4:	9305      	str	r3, [sp, #20]
1a005af6:	4644      	mov	r4, r8
1a005af8:	e52d      	b.n	1a005556 <_dtoa_r+0x3ae>
1a005afa:	2300      	movs	r3, #0
1a005afc:	930b      	str	r3, [sp, #44]	; 0x2c
1a005afe:	9b05      	ldr	r3, [sp, #20]
1a005b00:	4453      	add	r3, sl
1a005b02:	930e      	str	r3, [sp, #56]	; 0x38
1a005b04:	3301      	adds	r3, #1
1a005b06:	2b00      	cmp	r3, #0
1a005b08:	9308      	str	r3, [sp, #32]
1a005b0a:	f340 8101 	ble.w	1a005d10 <_dtoa_r+0xb68>
1a005b0e:	9d08      	ldr	r5, [sp, #32]
1a005b10:	462e      	mov	r6, r5
1a005b12:	e6f0      	b.n	1a0058f6 <_dtoa_r+0x74e>
1a005b14:	2300      	movs	r3, #0
1a005b16:	930b      	str	r3, [sp, #44]	; 0x2c
1a005b18:	e6e3      	b.n	1a0058e2 <_dtoa_r+0x73a>
1a005b1a:	9b08      	ldr	r3, [sp, #32]
1a005b1c:	2b00      	cmp	r3, #0
1a005b1e:	f73f ac67 	bgt.w	1a0053f0 <_dtoa_r+0x248>
1a005b22:	f040 80d4 	bne.w	1a005cce <_dtoa_r+0xb26>
1a005b26:	4640      	mov	r0, r8
1a005b28:	2200      	movs	r2, #0
1a005b2a:	4b41      	ldr	r3, [pc, #260]	; (1a005c30 <_dtoa_r+0xa88>)
1a005b2c:	4649      	mov	r1, r9
1a005b2e:	f7fd fa41 	bl	1a002fb4 <__aeabi_dmul>
1a005b32:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005b36:	f001 fd39 	bl	1a0075ac <__aeabi_dcmpge>
1a005b3a:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a005b3e:	4646      	mov	r6, r8
1a005b40:	2800      	cmp	r0, #0
1a005b42:	f000 808b 	beq.w	1a005c5c <_dtoa_r+0xab4>
1a005b46:	ea6f 030a 	mvn.w	r3, sl
1a005b4a:	9d09      	ldr	r5, [sp, #36]	; 0x24
1a005b4c:	9305      	str	r3, [sp, #20]
1a005b4e:	4641      	mov	r1, r8
1a005b50:	4620      	mov	r0, r4
1a005b52:	f000 ff11 	bl	1a006978 <_Bfree>
1a005b56:	2e00      	cmp	r6, #0
1a005b58:	f47f ae2b 	bne.w	1a0057b2 <_dtoa_r+0x60a>
1a005b5c:	e4fb      	b.n	1a005556 <_dtoa_r+0x3ae>
1a005b5e:	4659      	mov	r1, fp
1a005b60:	4620      	mov	r0, r4
1a005b62:	f001 f847 	bl	1a006bf4 <__pow5mult>
1a005b66:	4683      	mov	fp, r0
1a005b68:	e554      	b.n	1a005614 <_dtoa_r+0x46c>
1a005b6a:	9b00      	ldr	r3, [sp, #0]
1a005b6c:	2b00      	cmp	r3, #0
1a005b6e:	f47f ad63 	bne.w	1a005638 <_dtoa_r+0x490>
1a005b72:	9b01      	ldr	r3, [sp, #4]
1a005b74:	f3c3 0313 	ubfx	r3, r3, #0, #20
1a005b78:	2b00      	cmp	r3, #0
1a005b7a:	f47f ad90 	bne.w	1a00569e <_dtoa_r+0x4f6>
1a005b7e:	9b01      	ldr	r3, [sp, #4]
1a005b80:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
1a005b84:	0d3f      	lsrs	r7, r7, #20
1a005b86:	053f      	lsls	r7, r7, #20
1a005b88:	2f00      	cmp	r7, #0
1a005b8a:	f000 821c 	beq.w	1a005fc6 <_dtoa_r+0xe1e>
1a005b8e:	9b07      	ldr	r3, [sp, #28]
1a005b90:	3301      	adds	r3, #1
1a005b92:	9307      	str	r3, [sp, #28]
1a005b94:	9b06      	ldr	r3, [sp, #24]
1a005b96:	3301      	adds	r3, #1
1a005b98:	9306      	str	r3, [sp, #24]
1a005b9a:	f04f 0901 	mov.w	r9, #1
1a005b9e:	e580      	b.n	1a0056a2 <_dtoa_r+0x4fa>
1a005ba0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1a005ba2:	2a00      	cmp	r2, #0
1a005ba4:	f000 81a7 	beq.w	1a005ef6 <_dtoa_r+0xd4e>
1a005ba8:	f203 4333 	addw	r3, r3, #1075	; 0x433
1a005bac:	9f0a      	ldr	r7, [sp, #40]	; 0x28
1a005bae:	9d07      	ldr	r5, [sp, #28]
1a005bb0:	e4f9      	b.n	1a0055a6 <_dtoa_r+0x3fe>
1a005bb2:	f000 feeb 	bl	1a00698c <__multadd>
1a005bb6:	4657      	mov	r7, sl
1a005bb8:	4606      	mov	r6, r0
1a005bba:	4681      	mov	r9, r0
1a005bbc:	e62f      	b.n	1a00581e <_dtoa_r+0x676>
1a005bbe:	4601      	mov	r1, r0
1a005bc0:	4620      	mov	r0, r4
1a005bc2:	f8cd c000 	str.w	ip, [sp]
1a005bc6:	f000 fed7 	bl	1a006978 <_Bfree>
1a005bca:	2201      	movs	r2, #1
1a005bcc:	f8dd c000 	ldr.w	ip, [sp]
1a005bd0:	e652      	b.n	1a005878 <_dtoa_r+0x6d0>
1a005bd2:	4658      	mov	r0, fp
1a005bd4:	4641      	mov	r1, r8
1a005bd6:	f001 f8b3 	bl	1a006d40 <__mcmp>
1a005bda:	2800      	cmp	r0, #0
1a005bdc:	f6bf ad8f 	bge.w	1a0056fe <_dtoa_r+0x556>
1a005be0:	9f05      	ldr	r7, [sp, #20]
1a005be2:	4659      	mov	r1, fp
1a005be4:	2300      	movs	r3, #0
1a005be6:	4620      	mov	r0, r4
1a005be8:	220a      	movs	r2, #10
1a005bea:	3f01      	subs	r7, #1
1a005bec:	9705      	str	r7, [sp, #20]
1a005bee:	f000 fecd 	bl	1a00698c <__multadd>
1a005bf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a005bf4:	4683      	mov	fp, r0
1a005bf6:	2b00      	cmp	r3, #0
1a005bf8:	f47f adee 	bne.w	1a0057d8 <_dtoa_r+0x630>
1a005bfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005bfe:	2b00      	cmp	r3, #0
1a005c00:	f340 81f5 	ble.w	1a005fee <_dtoa_r+0xe46>
1a005c04:	9308      	str	r3, [sp, #32]
1a005c06:	e581      	b.n	1a00570c <_dtoa_r+0x564>
1a005c08:	9809      	ldr	r0, [sp, #36]	; 0x24
1a005c0a:	f7ff bb04 	b.w	1a005216 <_dtoa_r+0x6e>
1a005c0e:	9b00      	ldr	r3, [sp, #0]
1a005c10:	2b00      	cmp	r3, #0
1a005c12:	f47f ad44 	bne.w	1a00569e <_dtoa_r+0x4f6>
1a005c16:	e7ac      	b.n	1a005b72 <_dtoa_r+0x9ca>
1a005c18:	1a007c60 	.word	0x1a007c60
1a005c1c:	1a007d28 	.word	0x1a007d28
1a005c20:	3ff00000 	.word	0x3ff00000
1a005c24:	401c0000 	.word	0x401c0000
1a005c28:	3fe00000 	.word	0x3fe00000
1a005c2c:	40240000 	.word	0x40240000
1a005c30:	40140000 	.word	0x40140000
1a005c34:	9b03      	ldr	r3, [sp, #12]
1a005c36:	2b02      	cmp	r3, #2
1a005c38:	f77f ad65 	ble.w	1a005706 <_dtoa_r+0x55e>
1a005c3c:	9b08      	ldr	r3, [sp, #32]
1a005c3e:	2b00      	cmp	r3, #0
1a005c40:	d181      	bne.n	1a005b46 <_dtoa_r+0x99e>
1a005c42:	4641      	mov	r1, r8
1a005c44:	2205      	movs	r2, #5
1a005c46:	4620      	mov	r0, r4
1a005c48:	f000 fea0 	bl	1a00698c <__multadd>
1a005c4c:	4680      	mov	r8, r0
1a005c4e:	4641      	mov	r1, r8
1a005c50:	4658      	mov	r0, fp
1a005c52:	f001 f875 	bl	1a006d40 <__mcmp>
1a005c56:	2800      	cmp	r0, #0
1a005c58:	f77f af75 	ble.w	1a005b46 <_dtoa_r+0x99e>
1a005c5c:	9a05      	ldr	r2, [sp, #20]
1a005c5e:	9909      	ldr	r1, [sp, #36]	; 0x24
1a005c60:	2331      	movs	r3, #49	; 0x31
1a005c62:	3201      	adds	r2, #1
1a005c64:	9205      	str	r2, [sp, #20]
1a005c66:	700b      	strb	r3, [r1, #0]
1a005c68:	1c4d      	adds	r5, r1, #1
1a005c6a:	e770      	b.n	1a005b4e <_dtoa_r+0x9a6>
1a005c6c:	9a05      	ldr	r2, [sp, #20]
1a005c6e:	3201      	adds	r2, #1
1a005c70:	9205      	str	r2, [sp, #20]
1a005c72:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a005c74:	2331      	movs	r3, #49	; 0x31
1a005c76:	7013      	strb	r3, [r2, #0]
1a005c78:	e58b      	b.n	1a005792 <_dtoa_r+0x5ea>
1a005c7a:	f8dd b000 	ldr.w	fp, [sp]
1a005c7e:	9c03      	ldr	r4, [sp, #12]
1a005c80:	e469      	b.n	1a005556 <_dtoa_r+0x3ae>
1a005c82:	4640      	mov	r0, r8
1a005c84:	f7fd f896 	bl	1a002db4 <__aeabi_i2d>
1a005c88:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005c8c:	f7fd f992 	bl	1a002fb4 <__aeabi_dmul>
1a005c90:	2200      	movs	r2, #0
1a005c92:	4bc2      	ldr	r3, [pc, #776]	; (1a005f9c <_dtoa_r+0xdf4>)
1a005c94:	f7fc ff42 	bl	1a002b1c <__adddf3>
1a005c98:	4606      	mov	r6, r0
1a005c9a:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
1a005c9e:	2200      	movs	r2, #0
1a005ca0:	4bbf      	ldr	r3, [pc, #764]	; (1a005fa0 <_dtoa_r+0xdf8>)
1a005ca2:	e9dd 0100 	ldrd	r0, r1, [sp]
1a005ca6:	f7fc ff37 	bl	1a002b18 <__aeabi_dsub>
1a005caa:	4632      	mov	r2, r6
1a005cac:	463b      	mov	r3, r7
1a005cae:	4680      	mov	r8, r0
1a005cb0:	4689      	mov	r9, r1
1a005cb2:	f001 fc85 	bl	1a0075c0 <__aeabi_dcmpgt>
1a005cb6:	2800      	cmp	r0, #0
1a005cb8:	f040 80b6 	bne.w	1a005e28 <_dtoa_r+0xc80>
1a005cbc:	4632      	mov	r2, r6
1a005cbe:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
1a005cc2:	4640      	mov	r0, r8
1a005cc4:	4649      	mov	r1, r9
1a005cc6:	f001 fc5d 	bl	1a007584 <__aeabi_dcmplt>
1a005cca:	2800      	cmp	r0, #0
1a005ccc:	d052      	beq.n	1a005d74 <_dtoa_r+0xbcc>
1a005cce:	f04f 0800 	mov.w	r8, #0
1a005cd2:	4646      	mov	r6, r8
1a005cd4:	e737      	b.n	1a005b46 <_dtoa_r+0x99e>
1a005cd6:	4659      	mov	r1, fp
1a005cd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a005cda:	4620      	mov	r0, r4
1a005cdc:	f000 ff8a 	bl	1a006bf4 <__pow5mult>
1a005ce0:	4683      	mov	fp, r0
1a005ce2:	e497      	b.n	1a005614 <_dtoa_r+0x46c>
1a005ce4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005ce6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a005ce8:	970a      	str	r7, [sp, #40]	; 0x28
1a005cea:	1afb      	subs	r3, r7, r3
1a005cec:	441a      	add	r2, r3
1a005cee:	920c      	str	r2, [sp, #48]	; 0x30
1a005cf0:	2700      	movs	r7, #0
1a005cf2:	e452      	b.n	1a00559a <_dtoa_r+0x3f2>
1a005cf4:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a005cf8:	f04f 0802 	mov.w	r8, #2
1a005cfc:	ed8d 7b00 	vstr	d7, [sp]
1a005d00:	e633      	b.n	1a00596a <_dtoa_r+0x7c2>
1a005d02:	2501      	movs	r5, #1
1a005d04:	950e      	str	r5, [sp, #56]	; 0x38
1a005d06:	9508      	str	r5, [sp, #32]
1a005d08:	46aa      	mov	sl, r5
1a005d0a:	2100      	movs	r1, #0
1a005d0c:	6461      	str	r1, [r4, #68]	; 0x44
1a005d0e:	e601      	b.n	1a005914 <_dtoa_r+0x76c>
1a005d10:	461d      	mov	r5, r3
1a005d12:	e7fa      	b.n	1a005d0a <_dtoa_r+0xb62>
1a005d14:	2a00      	cmp	r2, #0
1a005d16:	dd15      	ble.n	1a005d44 <_dtoa_r+0xb9c>
1a005d18:	4659      	mov	r1, fp
1a005d1a:	2201      	movs	r2, #1
1a005d1c:	4620      	mov	r0, r4
1a005d1e:	f8cd c000 	str.w	ip, [sp]
1a005d22:	f000 ffb7 	bl	1a006c94 <__lshift>
1a005d26:	4641      	mov	r1, r8
1a005d28:	4683      	mov	fp, r0
1a005d2a:	f001 f809 	bl	1a006d40 <__mcmp>
1a005d2e:	2800      	cmp	r0, #0
1a005d30:	f8dd c000 	ldr.w	ip, [sp]
1a005d34:	f340 8154 	ble.w	1a005fe0 <_dtoa_r+0xe38>
1a005d38:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
1a005d3c:	f000 8111 	beq.w	1a005f62 <_dtoa_r+0xdba>
1a005d40:	f10c 0c01 	add.w	ip, ip, #1
1a005d44:	46b2      	mov	sl, r6
1a005d46:	f887 c000 	strb.w	ip, [r7]
1a005d4a:	1c7d      	adds	r5, r7, #1
1a005d4c:	464e      	mov	r6, r9
1a005d4e:	e520      	b.n	1a005792 <_dtoa_r+0x5ea>
1a005d50:	d104      	bne.n	1a005d5c <_dtoa_r+0xbb4>
1a005d52:	f01c 0f01 	tst.w	ip, #1
1a005d56:	d001      	beq.n	1a005d5c <_dtoa_r+0xbb4>
1a005d58:	e50b      	b.n	1a005772 <_dtoa_r+0x5ca>
1a005d5a:	4615      	mov	r5, r2
1a005d5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
1a005d60:	2b30      	cmp	r3, #48	; 0x30
1a005d62:	f105 32ff 	add.w	r2, r5, #4294967295
1a005d66:	d0f8      	beq.n	1a005d5a <_dtoa_r+0xbb2>
1a005d68:	e513      	b.n	1a005792 <_dtoa_r+0x5ea>
1a005d6a:	f8dd b000 	ldr.w	fp, [sp]
1a005d6e:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
1a005d72:	4644      	mov	r4, r8
1a005d74:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
1a005d78:	e9cd 2300 	strd	r2, r3, [sp]
1a005d7c:	f7ff bb27 	b.w	1a0053ce <_dtoa_r+0x226>
1a005d80:	9b05      	ldr	r3, [sp, #20]
1a005d82:	425d      	negs	r5, r3
1a005d84:	2d00      	cmp	r5, #0
1a005d86:	f000 80bd 	beq.w	1a005f04 <_dtoa_r+0xd5c>
1a005d8a:	4b86      	ldr	r3, [pc, #536]	; (1a005fa4 <_dtoa_r+0xdfc>)
1a005d8c:	f005 020f 	and.w	r2, r5, #15
1a005d90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a005d94:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005d98:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a005d9c:	f7fd f90a 	bl	1a002fb4 <__aeabi_dmul>
1a005da0:	112d      	asrs	r5, r5, #4
1a005da2:	e9cd 0100 	strd	r0, r1, [sp]
1a005da6:	f000 8127 	beq.w	1a005ff8 <_dtoa_r+0xe50>
1a005daa:	4e7f      	ldr	r6, [pc, #508]	; (1a005fa8 <_dtoa_r+0xe00>)
1a005dac:	f04f 0802 	mov.w	r8, #2
1a005db0:	07eb      	lsls	r3, r5, #31
1a005db2:	d505      	bpl.n	1a005dc0 <_dtoa_r+0xc18>
1a005db4:	e9d6 2300 	ldrd	r2, r3, [r6]
1a005db8:	f7fd f8fc 	bl	1a002fb4 <__aeabi_dmul>
1a005dbc:	f108 0801 	add.w	r8, r8, #1
1a005dc0:	106d      	asrs	r5, r5, #1
1a005dc2:	f106 0608 	add.w	r6, r6, #8
1a005dc6:	d1f3      	bne.n	1a005db0 <_dtoa_r+0xc08>
1a005dc8:	e9cd 0100 	strd	r0, r1, [sp]
1a005dcc:	e5e8      	b.n	1a0059a0 <_dtoa_r+0x7f8>
1a005dce:	9a05      	ldr	r2, [sp, #20]
1a005dd0:	3201      	adds	r2, #1
1a005dd2:	9205      	str	r2, [sp, #20]
1a005dd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a005dd6:	2330      	movs	r3, #48	; 0x30
1a005dd8:	7013      	strb	r3, [r2, #0]
1a005dda:	2331      	movs	r3, #49	; 0x31
1a005ddc:	7013      	strb	r3, [r2, #0]
1a005dde:	f7ff bbba 	b.w	1a005556 <_dtoa_r+0x3ae>
1a005de2:	6871      	ldr	r1, [r6, #4]
1a005de4:	4620      	mov	r0, r4
1a005de6:	f000 fda1 	bl	1a00692c <_Balloc>
1a005dea:	6933      	ldr	r3, [r6, #16]
1a005dec:	1c9a      	adds	r2, r3, #2
1a005dee:	4605      	mov	r5, r0
1a005df0:	0092      	lsls	r2, r2, #2
1a005df2:	f106 010c 	add.w	r1, r6, #12
1a005df6:	300c      	adds	r0, #12
1a005df8:	f7fd fd9a 	bl	1a003930 <memcpy>
1a005dfc:	4620      	mov	r0, r4
1a005dfe:	4629      	mov	r1, r5
1a005e00:	2201      	movs	r2, #1
1a005e02:	f000 ff47 	bl	1a006c94 <__lshift>
1a005e06:	4681      	mov	r9, r0
1a005e08:	e4ff      	b.n	1a00580a <_dtoa_r+0x662>
1a005e0a:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
1a005e0e:	f000 80a8 	beq.w	1a005f62 <_dtoa_r+0xdba>
1a005e12:	f10c 0c01 	add.w	ip, ip, #1
1a005e16:	46b2      	mov	sl, r6
1a005e18:	f887 c000 	strb.w	ip, [r7]
1a005e1c:	1c7d      	adds	r5, r7, #1
1a005e1e:	464e      	mov	r6, r9
1a005e20:	e4b7      	b.n	1a005792 <_dtoa_r+0x5ea>
1a005e22:	46b2      	mov	sl, r6
1a005e24:	464e      	mov	r6, r9
1a005e26:	e494      	b.n	1a005752 <_dtoa_r+0x5aa>
1a005e28:	f04f 0800 	mov.w	r8, #0
1a005e2c:	4646      	mov	r6, r8
1a005e2e:	e715      	b.n	1a005c5c <_dtoa_r+0xab4>
1a005e30:	495c      	ldr	r1, [pc, #368]	; (1a005fa4 <_dtoa_r+0xdfc>)
1a005e32:	f109 33ff 	add.w	r3, r9, #4294967295
1a005e36:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
1a005e3a:	4632      	mov	r2, r6
1a005e3c:	9315      	str	r3, [sp, #84]	; 0x54
1a005e3e:	e9d1 0100 	ldrd	r0, r1, [r1]
1a005e42:	463b      	mov	r3, r7
1a005e44:	f7fd f8b6 	bl	1a002fb4 <__aeabi_dmul>
1a005e48:	e9dd 6700 	ldrd	r6, r7, [sp]
1a005e4c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
1a005e50:	4639      	mov	r1, r7
1a005e52:	4630      	mov	r0, r6
1a005e54:	f001 fbbe 	bl	1a0075d4 <__aeabi_d2iz>
1a005e58:	4605      	mov	r5, r0
1a005e5a:	f7fc ffab 	bl	1a002db4 <__aeabi_i2d>
1a005e5e:	4602      	mov	r2, r0
1a005e60:	460b      	mov	r3, r1
1a005e62:	4630      	mov	r0, r6
1a005e64:	4639      	mov	r1, r7
1a005e66:	f7fc fe57 	bl	1a002b18 <__aeabi_dsub>
1a005e6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a005e6c:	3530      	adds	r5, #48	; 0x30
1a005e6e:	f1b9 0f01 	cmp.w	r9, #1
1a005e72:	7015      	strb	r5, [r2, #0]
1a005e74:	4606      	mov	r6, r0
1a005e76:	460f      	mov	r7, r1
1a005e78:	f102 0501 	add.w	r5, r2, #1
1a005e7c:	d023      	beq.n	1a005ec6 <_dtoa_r+0xd1e>
1a005e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005e80:	f8cd b000 	str.w	fp, [sp]
1a005e84:	444b      	add	r3, r9
1a005e86:	4698      	mov	r8, r3
1a005e88:	46a9      	mov	r9, r5
1a005e8a:	46ab      	mov	fp, r5
1a005e8c:	2200      	movs	r2, #0
1a005e8e:	4b47      	ldr	r3, [pc, #284]	; (1a005fac <_dtoa_r+0xe04>)
1a005e90:	f7fd f890 	bl	1a002fb4 <__aeabi_dmul>
1a005e94:	460f      	mov	r7, r1
1a005e96:	4606      	mov	r6, r0
1a005e98:	f001 fb9c 	bl	1a0075d4 <__aeabi_d2iz>
1a005e9c:	4605      	mov	r5, r0
1a005e9e:	f7fc ff89 	bl	1a002db4 <__aeabi_i2d>
1a005ea2:	3530      	adds	r5, #48	; 0x30
1a005ea4:	4602      	mov	r2, r0
1a005ea6:	460b      	mov	r3, r1
1a005ea8:	4630      	mov	r0, r6
1a005eaa:	4639      	mov	r1, r7
1a005eac:	f7fc fe34 	bl	1a002b18 <__aeabi_dsub>
1a005eb0:	f809 5b01 	strb.w	r5, [r9], #1
1a005eb4:	45c1      	cmp	r9, r8
1a005eb6:	d1e9      	bne.n	1a005e8c <_dtoa_r+0xce4>
1a005eb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a005eba:	465d      	mov	r5, fp
1a005ebc:	f8dd b000 	ldr.w	fp, [sp]
1a005ec0:	4606      	mov	r6, r0
1a005ec2:	460f      	mov	r7, r1
1a005ec4:	441d      	add	r5, r3
1a005ec6:	2200      	movs	r2, #0
1a005ec8:	4b39      	ldr	r3, [pc, #228]	; (1a005fb0 <_dtoa_r+0xe08>)
1a005eca:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a005ece:	f7fc fe25 	bl	1a002b1c <__adddf3>
1a005ed2:	4632      	mov	r2, r6
1a005ed4:	463b      	mov	r3, r7
1a005ed6:	f001 fb55 	bl	1a007584 <__aeabi_dcmplt>
1a005eda:	2800      	cmp	r0, #0
1a005edc:	d047      	beq.n	1a005f6e <_dtoa_r+0xdc6>
1a005ede:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a005ee0:	9305      	str	r3, [sp, #20]
1a005ee2:	f815 8c01 	ldrb.w	r8, [r5, #-1]
1a005ee6:	f7ff bb24 	b.w	1a005532 <_dtoa_r+0x38a>
1a005eea:	9b07      	ldr	r3, [sp, #28]
1a005eec:	9a08      	ldr	r2, [sp, #32]
1a005eee:	1a9d      	subs	r5, r3, r2
1a005ef0:	2300      	movs	r3, #0
1a005ef2:	f7ff bb58 	b.w	1a0055a6 <_dtoa_r+0x3fe>
1a005ef6:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a005ef8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
1a005efa:	9d07      	ldr	r5, [sp, #28]
1a005efc:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
1a005f00:	f7ff bb51 	b.w	1a0055a6 <_dtoa_r+0x3fe>
1a005f04:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a005f08:	f04f 0802 	mov.w	r8, #2
1a005f0c:	ed8d 7b00 	vstr	d7, [sp]
1a005f10:	e546      	b.n	1a0059a0 <_dtoa_r+0x7f8>
1a005f12:	9b08      	ldr	r3, [sp, #32]
1a005f14:	2b00      	cmp	r3, #0
1a005f16:	f43f aeb4 	beq.w	1a005c82 <_dtoa_r+0xada>
1a005f1a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
1a005f1c:	2d00      	cmp	r5, #0
1a005f1e:	f77f af29 	ble.w	1a005d74 <_dtoa_r+0xbcc>
1a005f22:	2200      	movs	r2, #0
1a005f24:	4b21      	ldr	r3, [pc, #132]	; (1a005fac <_dtoa_r+0xe04>)
1a005f26:	e9dd 0100 	ldrd	r0, r1, [sp]
1a005f2a:	f7fd f843 	bl	1a002fb4 <__aeabi_dmul>
1a005f2e:	4606      	mov	r6, r0
1a005f30:	460f      	mov	r7, r1
1a005f32:	f108 0001 	add.w	r0, r8, #1
1a005f36:	e9cd 6700 	strd	r6, r7, [sp]
1a005f3a:	f7fc ff3b 	bl	1a002db4 <__aeabi_i2d>
1a005f3e:	4602      	mov	r2, r0
1a005f40:	460b      	mov	r3, r1
1a005f42:	4630      	mov	r0, r6
1a005f44:	4639      	mov	r1, r7
1a005f46:	f7fd f835 	bl	1a002fb4 <__aeabi_dmul>
1a005f4a:	4b14      	ldr	r3, [pc, #80]	; (1a005f9c <_dtoa_r+0xdf4>)
1a005f4c:	2200      	movs	r2, #0
1a005f4e:	f7fc fde5 	bl	1a002b1c <__adddf3>
1a005f52:	9b05      	ldr	r3, [sp, #20]
1a005f54:	3b01      	subs	r3, #1
1a005f56:	4606      	mov	r6, r0
1a005f58:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
1a005f5c:	9314      	str	r3, [sp, #80]	; 0x50
1a005f5e:	46a9      	mov	r9, r5
1a005f60:	e53f      	b.n	1a0059e2 <_dtoa_r+0x83a>
1a005f62:	2239      	movs	r2, #57	; 0x39
1a005f64:	46b2      	mov	sl, r6
1a005f66:	703a      	strb	r2, [r7, #0]
1a005f68:	464e      	mov	r6, r9
1a005f6a:	1c7d      	adds	r5, r7, #1
1a005f6c:	e403      	b.n	1a005776 <_dtoa_r+0x5ce>
1a005f6e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
1a005f72:	2000      	movs	r0, #0
1a005f74:	490e      	ldr	r1, [pc, #56]	; (1a005fb0 <_dtoa_r+0xe08>)
1a005f76:	f7fc fdcf 	bl	1a002b18 <__aeabi_dsub>
1a005f7a:	4632      	mov	r2, r6
1a005f7c:	463b      	mov	r3, r7
1a005f7e:	f001 fb1f 	bl	1a0075c0 <__aeabi_dcmpgt>
1a005f82:	b908      	cbnz	r0, 1a005f88 <_dtoa_r+0xde0>
1a005f84:	e6f6      	b.n	1a005d74 <_dtoa_r+0xbcc>
1a005f86:	4615      	mov	r5, r2
1a005f88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
1a005f8c:	2b30      	cmp	r3, #48	; 0x30
1a005f8e:	f105 32ff 	add.w	r2, r5, #4294967295
1a005f92:	d0f8      	beq.n	1a005f86 <_dtoa_r+0xdde>
1a005f94:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a005f96:	9305      	str	r3, [sp, #20]
1a005f98:	f7ff badd 	b.w	1a005556 <_dtoa_r+0x3ae>
1a005f9c:	401c0000 	.word	0x401c0000
1a005fa0:	40140000 	.word	0x40140000
1a005fa4:	1a007c60 	.word	0x1a007c60
1a005fa8:	1a007d28 	.word	0x1a007d28
1a005fac:	40240000 	.word	0x40240000
1a005fb0:	3fe00000 	.word	0x3fe00000
1a005fb4:	4643      	mov	r3, r8
1a005fb6:	f8dd b000 	ldr.w	fp, [sp]
1a005fba:	46a0      	mov	r8, r4
1a005fbc:	461c      	mov	r4, r3
1a005fbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a005fc0:	9305      	str	r3, [sp, #20]
1a005fc2:	f7ff bab6 	b.w	1a005532 <_dtoa_r+0x38a>
1a005fc6:	46b9      	mov	r9, r7
1a005fc8:	f7ff bb6b 	b.w	1a0056a2 <_dtoa_r+0x4fa>
1a005fcc:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
1a005fd0:	d0c7      	beq.n	1a005f62 <_dtoa_r+0xdba>
1a005fd2:	f1ba 0f00 	cmp.w	sl, #0
1a005fd6:	f77f aeb5 	ble.w	1a005d44 <_dtoa_r+0xb9c>
1a005fda:	f105 0c31 	add.w	ip, r5, #49	; 0x31
1a005fde:	e6b1      	b.n	1a005d44 <_dtoa_r+0xb9c>
1a005fe0:	f47f aeb0 	bne.w	1a005d44 <_dtoa_r+0xb9c>
1a005fe4:	f01c 0f01 	tst.w	ip, #1
1a005fe8:	f43f aeac 	beq.w	1a005d44 <_dtoa_r+0xb9c>
1a005fec:	e6a4      	b.n	1a005d38 <_dtoa_r+0xb90>
1a005fee:	9b03      	ldr	r3, [sp, #12]
1a005ff0:	2b02      	cmp	r3, #2
1a005ff2:	dc04      	bgt.n	1a005ffe <_dtoa_r+0xe56>
1a005ff4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005ff6:	e605      	b.n	1a005c04 <_dtoa_r+0xa5c>
1a005ff8:	f04f 0802 	mov.w	r8, #2
1a005ffc:	e4d0      	b.n	1a0059a0 <_dtoa_r+0x7f8>
1a005ffe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a006000:	9308      	str	r3, [sp, #32]
1a006002:	e61b      	b.n	1a005c3c <_dtoa_r+0xa94>
1a006004:	9b03      	ldr	r3, [sp, #12]
1a006006:	2b02      	cmp	r3, #2
1a006008:	dcf9      	bgt.n	1a005ffe <_dtoa_r+0xe56>
1a00600a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00600c:	f7ff bbef 	b.w	1a0057ee <_dtoa_r+0x646>
1a006010:	2500      	movs	r5, #0
1a006012:	6465      	str	r5, [r4, #68]	; 0x44
1a006014:	4629      	mov	r1, r5
1a006016:	4620      	mov	r0, r4
1a006018:	f000 fc88 	bl	1a00692c <_Balloc>
1a00601c:	f04f 33ff 	mov.w	r3, #4294967295
1a006020:	9308      	str	r3, [sp, #32]
1a006022:	930e      	str	r3, [sp, #56]	; 0x38
1a006024:	2301      	movs	r3, #1
1a006026:	9009      	str	r0, [sp, #36]	; 0x24
1a006028:	46aa      	mov	sl, r5
1a00602a:	6420      	str	r0, [r4, #64]	; 0x40
1a00602c:	930b      	str	r3, [sp, #44]	; 0x2c
1a00602e:	f7ff b9ce 	b.w	1a0053ce <_dtoa_r+0x226>
1a006032:	f43f ab4e 	beq.w	1a0056d2 <_dtoa_r+0x52a>
1a006036:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
1a00603a:	f7ff bb43 	b.w	1a0056c4 <_dtoa_r+0x51c>
1a00603e:	2301      	movs	r3, #1
1a006040:	930b      	str	r3, [sp, #44]	; 0x2c
1a006042:	e55c      	b.n	1a005afe <_dtoa_r+0x956>
1a006044:	2701      	movs	r7, #1
1a006046:	f7ff b98d 	b.w	1a005364 <_dtoa_r+0x1bc>
1a00604a:	bf00      	nop
1a00604c:	f3af 8000 	nop.w

1a006050 <_malloc_trim_r>:
1a006050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a006052:	4f23      	ldr	r7, [pc, #140]	; (1a0060e0 <_malloc_trim_r+0x90>)
1a006054:	460c      	mov	r4, r1
1a006056:	4606      	mov	r6, r0
1a006058:	f000 fc64 	bl	1a006924 <__malloc_lock>
1a00605c:	68bb      	ldr	r3, [r7, #8]
1a00605e:	685d      	ldr	r5, [r3, #4]
1a006060:	f025 0503 	bic.w	r5, r5, #3
1a006064:	1b29      	subs	r1, r5, r4
1a006066:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
1a00606a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
1a00606e:	f021 010f 	bic.w	r1, r1, #15
1a006072:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
1a006076:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
1a00607a:	db07      	blt.n	1a00608c <_malloc_trim_r+0x3c>
1a00607c:	4630      	mov	r0, r6
1a00607e:	2100      	movs	r1, #0
1a006080:	f7fb fda8 	bl	1a001bd4 <_sbrk_r>
1a006084:	68bb      	ldr	r3, [r7, #8]
1a006086:	442b      	add	r3, r5
1a006088:	4298      	cmp	r0, r3
1a00608a:	d004      	beq.n	1a006096 <_malloc_trim_r+0x46>
1a00608c:	4630      	mov	r0, r6
1a00608e:	f000 fc4b 	bl	1a006928 <__malloc_unlock>
1a006092:	2000      	movs	r0, #0
1a006094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a006096:	4630      	mov	r0, r6
1a006098:	4261      	negs	r1, r4
1a00609a:	f7fb fd9b 	bl	1a001bd4 <_sbrk_r>
1a00609e:	3001      	adds	r0, #1
1a0060a0:	d00d      	beq.n	1a0060be <_malloc_trim_r+0x6e>
1a0060a2:	4b10      	ldr	r3, [pc, #64]	; (1a0060e4 <_malloc_trim_r+0x94>)
1a0060a4:	68ba      	ldr	r2, [r7, #8]
1a0060a6:	6819      	ldr	r1, [r3, #0]
1a0060a8:	1b2d      	subs	r5, r5, r4
1a0060aa:	f045 0501 	orr.w	r5, r5, #1
1a0060ae:	4630      	mov	r0, r6
1a0060b0:	1b09      	subs	r1, r1, r4
1a0060b2:	6055      	str	r5, [r2, #4]
1a0060b4:	6019      	str	r1, [r3, #0]
1a0060b6:	f000 fc37 	bl	1a006928 <__malloc_unlock>
1a0060ba:	2001      	movs	r0, #1
1a0060bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0060be:	4630      	mov	r0, r6
1a0060c0:	2100      	movs	r1, #0
1a0060c2:	f7fb fd87 	bl	1a001bd4 <_sbrk_r>
1a0060c6:	68ba      	ldr	r2, [r7, #8]
1a0060c8:	1a83      	subs	r3, r0, r2
1a0060ca:	2b0f      	cmp	r3, #15
1a0060cc:	ddde      	ble.n	1a00608c <_malloc_trim_r+0x3c>
1a0060ce:	4c06      	ldr	r4, [pc, #24]	; (1a0060e8 <_malloc_trim_r+0x98>)
1a0060d0:	4904      	ldr	r1, [pc, #16]	; (1a0060e4 <_malloc_trim_r+0x94>)
1a0060d2:	6824      	ldr	r4, [r4, #0]
1a0060d4:	f043 0301 	orr.w	r3, r3, #1
1a0060d8:	1b00      	subs	r0, r0, r4
1a0060da:	6053      	str	r3, [r2, #4]
1a0060dc:	6008      	str	r0, [r1, #0]
1a0060de:	e7d5      	b.n	1a00608c <_malloc_trim_r+0x3c>
1a0060e0:	10000534 	.word	0x10000534
1a0060e4:	10000ae0 	.word	0x10000ae0
1a0060e8:	10000940 	.word	0x10000940

1a0060ec <_free_r>:
1a0060ec:	2900      	cmp	r1, #0
1a0060ee:	d04e      	beq.n	1a00618e <_free_r+0xa2>
1a0060f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0060f4:	460c      	mov	r4, r1
1a0060f6:	4680      	mov	r8, r0
1a0060f8:	f000 fc14 	bl	1a006924 <__malloc_lock>
1a0060fc:	f854 7c04 	ldr.w	r7, [r4, #-4]
1a006100:	4962      	ldr	r1, [pc, #392]	; (1a00628c <_free_r+0x1a0>)
1a006102:	f027 0201 	bic.w	r2, r7, #1
1a006106:	f1a4 0508 	sub.w	r5, r4, #8
1a00610a:	18ab      	adds	r3, r5, r2
1a00610c:	688e      	ldr	r6, [r1, #8]
1a00610e:	6858      	ldr	r0, [r3, #4]
1a006110:	429e      	cmp	r6, r3
1a006112:	f020 0003 	bic.w	r0, r0, #3
1a006116:	d05a      	beq.n	1a0061ce <_free_r+0xe2>
1a006118:	07fe      	lsls	r6, r7, #31
1a00611a:	6058      	str	r0, [r3, #4]
1a00611c:	d40b      	bmi.n	1a006136 <_free_r+0x4a>
1a00611e:	f854 7c08 	ldr.w	r7, [r4, #-8]
1a006122:	1bed      	subs	r5, r5, r7
1a006124:	f101 0e08 	add.w	lr, r1, #8
1a006128:	68ac      	ldr	r4, [r5, #8]
1a00612a:	4574      	cmp	r4, lr
1a00612c:	443a      	add	r2, r7
1a00612e:	d067      	beq.n	1a006200 <_free_r+0x114>
1a006130:	68ef      	ldr	r7, [r5, #12]
1a006132:	60e7      	str	r7, [r4, #12]
1a006134:	60bc      	str	r4, [r7, #8]
1a006136:	181c      	adds	r4, r3, r0
1a006138:	6864      	ldr	r4, [r4, #4]
1a00613a:	07e4      	lsls	r4, r4, #31
1a00613c:	d40c      	bmi.n	1a006158 <_free_r+0x6c>
1a00613e:	4f54      	ldr	r7, [pc, #336]	; (1a006290 <_free_r+0x1a4>)
1a006140:	689c      	ldr	r4, [r3, #8]
1a006142:	42bc      	cmp	r4, r7
1a006144:	4402      	add	r2, r0
1a006146:	d07c      	beq.n	1a006242 <_free_r+0x156>
1a006148:	68d8      	ldr	r0, [r3, #12]
1a00614a:	60e0      	str	r0, [r4, #12]
1a00614c:	f042 0301 	orr.w	r3, r2, #1
1a006150:	6084      	str	r4, [r0, #8]
1a006152:	606b      	str	r3, [r5, #4]
1a006154:	50aa      	str	r2, [r5, r2]
1a006156:	e003      	b.n	1a006160 <_free_r+0x74>
1a006158:	f042 0301 	orr.w	r3, r2, #1
1a00615c:	606b      	str	r3, [r5, #4]
1a00615e:	50aa      	str	r2, [r5, r2]
1a006160:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
1a006164:	d214      	bcs.n	1a006190 <_free_r+0xa4>
1a006166:	08d2      	lsrs	r2, r2, #3
1a006168:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
1a00616c:	6848      	ldr	r0, [r1, #4]
1a00616e:	689f      	ldr	r7, [r3, #8]
1a006170:	60af      	str	r7, [r5, #8]
1a006172:	1092      	asrs	r2, r2, #2
1a006174:	2401      	movs	r4, #1
1a006176:	fa04 f202 	lsl.w	r2, r4, r2
1a00617a:	4310      	orrs	r0, r2
1a00617c:	60eb      	str	r3, [r5, #12]
1a00617e:	6048      	str	r0, [r1, #4]
1a006180:	609d      	str	r5, [r3, #8]
1a006182:	60fd      	str	r5, [r7, #12]
1a006184:	4640      	mov	r0, r8
1a006186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a00618a:	f000 bbcd 	b.w	1a006928 <__malloc_unlock>
1a00618e:	4770      	bx	lr
1a006190:	0a53      	lsrs	r3, r2, #9
1a006192:	2b04      	cmp	r3, #4
1a006194:	d847      	bhi.n	1a006226 <_free_r+0x13a>
1a006196:	0993      	lsrs	r3, r2, #6
1a006198:	f103 0438 	add.w	r4, r3, #56	; 0x38
1a00619c:	0060      	lsls	r0, r4, #1
1a00619e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
1a0061a2:	493a      	ldr	r1, [pc, #232]	; (1a00628c <_free_r+0x1a0>)
1a0061a4:	6883      	ldr	r3, [r0, #8]
1a0061a6:	4283      	cmp	r3, r0
1a0061a8:	d043      	beq.n	1a006232 <_free_r+0x146>
1a0061aa:	6859      	ldr	r1, [r3, #4]
1a0061ac:	f021 0103 	bic.w	r1, r1, #3
1a0061b0:	4291      	cmp	r1, r2
1a0061b2:	d902      	bls.n	1a0061ba <_free_r+0xce>
1a0061b4:	689b      	ldr	r3, [r3, #8]
1a0061b6:	4298      	cmp	r0, r3
1a0061b8:	d1f7      	bne.n	1a0061aa <_free_r+0xbe>
1a0061ba:	68da      	ldr	r2, [r3, #12]
1a0061bc:	60ea      	str	r2, [r5, #12]
1a0061be:	60ab      	str	r3, [r5, #8]
1a0061c0:	4640      	mov	r0, r8
1a0061c2:	6095      	str	r5, [r2, #8]
1a0061c4:	60dd      	str	r5, [r3, #12]
1a0061c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a0061ca:	f000 bbad 	b.w	1a006928 <__malloc_unlock>
1a0061ce:	07ff      	lsls	r7, r7, #31
1a0061d0:	4402      	add	r2, r0
1a0061d2:	d407      	bmi.n	1a0061e4 <_free_r+0xf8>
1a0061d4:	f854 3c08 	ldr.w	r3, [r4, #-8]
1a0061d8:	1aed      	subs	r5, r5, r3
1a0061da:	441a      	add	r2, r3
1a0061dc:	68a8      	ldr	r0, [r5, #8]
1a0061de:	68eb      	ldr	r3, [r5, #12]
1a0061e0:	60c3      	str	r3, [r0, #12]
1a0061e2:	6098      	str	r0, [r3, #8]
1a0061e4:	4b2b      	ldr	r3, [pc, #172]	; (1a006294 <_free_r+0x1a8>)
1a0061e6:	681b      	ldr	r3, [r3, #0]
1a0061e8:	f042 0001 	orr.w	r0, r2, #1
1a0061ec:	429a      	cmp	r2, r3
1a0061ee:	6068      	str	r0, [r5, #4]
1a0061f0:	608d      	str	r5, [r1, #8]
1a0061f2:	d3c7      	bcc.n	1a006184 <_free_r+0x98>
1a0061f4:	4b28      	ldr	r3, [pc, #160]	; (1a006298 <_free_r+0x1ac>)
1a0061f6:	4640      	mov	r0, r8
1a0061f8:	6819      	ldr	r1, [r3, #0]
1a0061fa:	f7ff ff29 	bl	1a006050 <_malloc_trim_r>
1a0061fe:	e7c1      	b.n	1a006184 <_free_r+0x98>
1a006200:	1819      	adds	r1, r3, r0
1a006202:	6849      	ldr	r1, [r1, #4]
1a006204:	07c9      	lsls	r1, r1, #31
1a006206:	d409      	bmi.n	1a00621c <_free_r+0x130>
1a006208:	68d9      	ldr	r1, [r3, #12]
1a00620a:	689b      	ldr	r3, [r3, #8]
1a00620c:	4402      	add	r2, r0
1a00620e:	f042 0001 	orr.w	r0, r2, #1
1a006212:	60d9      	str	r1, [r3, #12]
1a006214:	608b      	str	r3, [r1, #8]
1a006216:	6068      	str	r0, [r5, #4]
1a006218:	50aa      	str	r2, [r5, r2]
1a00621a:	e7b3      	b.n	1a006184 <_free_r+0x98>
1a00621c:	f042 0301 	orr.w	r3, r2, #1
1a006220:	606b      	str	r3, [r5, #4]
1a006222:	50aa      	str	r2, [r5, r2]
1a006224:	e7ae      	b.n	1a006184 <_free_r+0x98>
1a006226:	2b14      	cmp	r3, #20
1a006228:	d814      	bhi.n	1a006254 <_free_r+0x168>
1a00622a:	f103 045b 	add.w	r4, r3, #91	; 0x5b
1a00622e:	0060      	lsls	r0, r4, #1
1a006230:	e7b5      	b.n	1a00619e <_free_r+0xb2>
1a006232:	684a      	ldr	r2, [r1, #4]
1a006234:	10a4      	asrs	r4, r4, #2
1a006236:	2001      	movs	r0, #1
1a006238:	40a0      	lsls	r0, r4
1a00623a:	4302      	orrs	r2, r0
1a00623c:	604a      	str	r2, [r1, #4]
1a00623e:	461a      	mov	r2, r3
1a006240:	e7bc      	b.n	1a0061bc <_free_r+0xd0>
1a006242:	f042 0301 	orr.w	r3, r2, #1
1a006246:	614d      	str	r5, [r1, #20]
1a006248:	610d      	str	r5, [r1, #16]
1a00624a:	60ec      	str	r4, [r5, #12]
1a00624c:	60ac      	str	r4, [r5, #8]
1a00624e:	606b      	str	r3, [r5, #4]
1a006250:	50aa      	str	r2, [r5, r2]
1a006252:	e797      	b.n	1a006184 <_free_r+0x98>
1a006254:	2b54      	cmp	r3, #84	; 0x54
1a006256:	d804      	bhi.n	1a006262 <_free_r+0x176>
1a006258:	0b13      	lsrs	r3, r2, #12
1a00625a:	f103 046e 	add.w	r4, r3, #110	; 0x6e
1a00625e:	0060      	lsls	r0, r4, #1
1a006260:	e79d      	b.n	1a00619e <_free_r+0xb2>
1a006262:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
1a006266:	d804      	bhi.n	1a006272 <_free_r+0x186>
1a006268:	0bd3      	lsrs	r3, r2, #15
1a00626a:	f103 0477 	add.w	r4, r3, #119	; 0x77
1a00626e:	0060      	lsls	r0, r4, #1
1a006270:	e795      	b.n	1a00619e <_free_r+0xb2>
1a006272:	f240 5054 	movw	r0, #1364	; 0x554
1a006276:	4283      	cmp	r3, r0
1a006278:	d804      	bhi.n	1a006284 <_free_r+0x198>
1a00627a:	0c93      	lsrs	r3, r2, #18
1a00627c:	f103 047c 	add.w	r4, r3, #124	; 0x7c
1a006280:	0060      	lsls	r0, r4, #1
1a006282:	e78c      	b.n	1a00619e <_free_r+0xb2>
1a006284:	20fc      	movs	r0, #252	; 0xfc
1a006286:	247e      	movs	r4, #126	; 0x7e
1a006288:	e789      	b.n	1a00619e <_free_r+0xb2>
1a00628a:	bf00      	nop
1a00628c:	10000534 	.word	0x10000534
1a006290:	1000053c 	.word	0x1000053c
1a006294:	1000093c 	.word	0x1000093c
1a006298:	10000adc 	.word	0x10000adc

1a00629c <_localeconv_r>:
1a00629c:	4800      	ldr	r0, [pc, #0]	; (1a0062a0 <_localeconv_r+0x4>)
1a00629e:	4770      	bx	lr
1a0062a0:	100004fc 	.word	0x100004fc

1a0062a4 <_malloc_r>:
1a0062a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0062a8:	f101 050b 	add.w	r5, r1, #11
1a0062ac:	2d16      	cmp	r5, #22
1a0062ae:	b083      	sub	sp, #12
1a0062b0:	4606      	mov	r6, r0
1a0062b2:	d927      	bls.n	1a006304 <_malloc_r+0x60>
1a0062b4:	f035 0507 	bics.w	r5, r5, #7
1a0062b8:	f100 80b6 	bmi.w	1a006428 <_malloc_r+0x184>
1a0062bc:	42a9      	cmp	r1, r5
1a0062be:	f200 80b3 	bhi.w	1a006428 <_malloc_r+0x184>
1a0062c2:	f000 fb2f 	bl	1a006924 <__malloc_lock>
1a0062c6:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
1a0062ca:	d222      	bcs.n	1a006312 <_malloc_r+0x6e>
1a0062cc:	4fc2      	ldr	r7, [pc, #776]	; (1a0065d8 <_malloc_r+0x334>)
1a0062ce:	08e8      	lsrs	r0, r5, #3
1a0062d0:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
1a0062d4:	68dc      	ldr	r4, [r3, #12]
1a0062d6:	429c      	cmp	r4, r3
1a0062d8:	f000 81c8 	beq.w	1a00666c <_malloc_r+0x3c8>
1a0062dc:	6863      	ldr	r3, [r4, #4]
1a0062de:	68e1      	ldr	r1, [r4, #12]
1a0062e0:	68a5      	ldr	r5, [r4, #8]
1a0062e2:	f023 0303 	bic.w	r3, r3, #3
1a0062e6:	4423      	add	r3, r4
1a0062e8:	4630      	mov	r0, r6
1a0062ea:	685a      	ldr	r2, [r3, #4]
1a0062ec:	60e9      	str	r1, [r5, #12]
1a0062ee:	f042 0201 	orr.w	r2, r2, #1
1a0062f2:	608d      	str	r5, [r1, #8]
1a0062f4:	605a      	str	r2, [r3, #4]
1a0062f6:	f000 fb17 	bl	1a006928 <__malloc_unlock>
1a0062fa:	3408      	adds	r4, #8
1a0062fc:	4620      	mov	r0, r4
1a0062fe:	b003      	add	sp, #12
1a006300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006304:	2910      	cmp	r1, #16
1a006306:	f200 808f 	bhi.w	1a006428 <_malloc_r+0x184>
1a00630a:	f000 fb0b 	bl	1a006924 <__malloc_lock>
1a00630e:	2510      	movs	r5, #16
1a006310:	e7dc      	b.n	1a0062cc <_malloc_r+0x28>
1a006312:	0a68      	lsrs	r0, r5, #9
1a006314:	f000 808f 	beq.w	1a006436 <_malloc_r+0x192>
1a006318:	2804      	cmp	r0, #4
1a00631a:	f200 8154 	bhi.w	1a0065c6 <_malloc_r+0x322>
1a00631e:	09a8      	lsrs	r0, r5, #6
1a006320:	3038      	adds	r0, #56	; 0x38
1a006322:	0041      	lsls	r1, r0, #1
1a006324:	4fac      	ldr	r7, [pc, #688]	; (1a0065d8 <_malloc_r+0x334>)
1a006326:	eb07 0181 	add.w	r1, r7, r1, lsl #2
1a00632a:	68cc      	ldr	r4, [r1, #12]
1a00632c:	42a1      	cmp	r1, r4
1a00632e:	d106      	bne.n	1a00633e <_malloc_r+0x9a>
1a006330:	e00c      	b.n	1a00634c <_malloc_r+0xa8>
1a006332:	2a00      	cmp	r2, #0
1a006334:	f280 8082 	bge.w	1a00643c <_malloc_r+0x198>
1a006338:	68e4      	ldr	r4, [r4, #12]
1a00633a:	42a1      	cmp	r1, r4
1a00633c:	d006      	beq.n	1a00634c <_malloc_r+0xa8>
1a00633e:	6863      	ldr	r3, [r4, #4]
1a006340:	f023 0303 	bic.w	r3, r3, #3
1a006344:	1b5a      	subs	r2, r3, r5
1a006346:	2a0f      	cmp	r2, #15
1a006348:	ddf3      	ble.n	1a006332 <_malloc_r+0x8e>
1a00634a:	3801      	subs	r0, #1
1a00634c:	3001      	adds	r0, #1
1a00634e:	49a2      	ldr	r1, [pc, #648]	; (1a0065d8 <_malloc_r+0x334>)
1a006350:	693c      	ldr	r4, [r7, #16]
1a006352:	f101 0e08 	add.w	lr, r1, #8
1a006356:	4574      	cmp	r4, lr
1a006358:	f000 817d 	beq.w	1a006656 <_malloc_r+0x3b2>
1a00635c:	6863      	ldr	r3, [r4, #4]
1a00635e:	f023 0303 	bic.w	r3, r3, #3
1a006362:	1b5a      	subs	r2, r3, r5
1a006364:	2a0f      	cmp	r2, #15
1a006366:	f300 8163 	bgt.w	1a006630 <_malloc_r+0x38c>
1a00636a:	2a00      	cmp	r2, #0
1a00636c:	f8c1 e014 	str.w	lr, [r1, #20]
1a006370:	f8c1 e010 	str.w	lr, [r1, #16]
1a006374:	da73      	bge.n	1a00645e <_malloc_r+0x1ba>
1a006376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a00637a:	f080 8139 	bcs.w	1a0065f0 <_malloc_r+0x34c>
1a00637e:	08db      	lsrs	r3, r3, #3
1a006380:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
1a006384:	ea4f 0ca3 	mov.w	ip, r3, asr #2
1a006388:	684a      	ldr	r2, [r1, #4]
1a00638a:	f8d8 9008 	ldr.w	r9, [r8, #8]
1a00638e:	f8c4 9008 	str.w	r9, [r4, #8]
1a006392:	2301      	movs	r3, #1
1a006394:	fa03 f30c 	lsl.w	r3, r3, ip
1a006398:	4313      	orrs	r3, r2
1a00639a:	f8c4 800c 	str.w	r8, [r4, #12]
1a00639e:	604b      	str	r3, [r1, #4]
1a0063a0:	f8c8 4008 	str.w	r4, [r8, #8]
1a0063a4:	f8c9 400c 	str.w	r4, [r9, #12]
1a0063a8:	1082      	asrs	r2, r0, #2
1a0063aa:	2401      	movs	r4, #1
1a0063ac:	4094      	lsls	r4, r2
1a0063ae:	429c      	cmp	r4, r3
1a0063b0:	d862      	bhi.n	1a006478 <_malloc_r+0x1d4>
1a0063b2:	4223      	tst	r3, r4
1a0063b4:	d106      	bne.n	1a0063c4 <_malloc_r+0x120>
1a0063b6:	f020 0003 	bic.w	r0, r0, #3
1a0063ba:	0064      	lsls	r4, r4, #1
1a0063bc:	4223      	tst	r3, r4
1a0063be:	f100 0004 	add.w	r0, r0, #4
1a0063c2:	d0fa      	beq.n	1a0063ba <_malloc_r+0x116>
1a0063c4:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
1a0063c8:	46c4      	mov	ip, r8
1a0063ca:	4681      	mov	r9, r0
1a0063cc:	f8dc 300c 	ldr.w	r3, [ip, #12]
1a0063d0:	459c      	cmp	ip, r3
1a0063d2:	d107      	bne.n	1a0063e4 <_malloc_r+0x140>
1a0063d4:	e141      	b.n	1a00665a <_malloc_r+0x3b6>
1a0063d6:	2900      	cmp	r1, #0
1a0063d8:	f280 8151 	bge.w	1a00667e <_malloc_r+0x3da>
1a0063dc:	68db      	ldr	r3, [r3, #12]
1a0063de:	459c      	cmp	ip, r3
1a0063e0:	f000 813b 	beq.w	1a00665a <_malloc_r+0x3b6>
1a0063e4:	685a      	ldr	r2, [r3, #4]
1a0063e6:	f022 0203 	bic.w	r2, r2, #3
1a0063ea:	1b51      	subs	r1, r2, r5
1a0063ec:	290f      	cmp	r1, #15
1a0063ee:	ddf2      	ble.n	1a0063d6 <_malloc_r+0x132>
1a0063f0:	461c      	mov	r4, r3
1a0063f2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
1a0063f6:	f854 8f08 	ldr.w	r8, [r4, #8]!
1a0063fa:	195a      	adds	r2, r3, r5
1a0063fc:	f045 0901 	orr.w	r9, r5, #1
1a006400:	f041 0501 	orr.w	r5, r1, #1
1a006404:	f8c3 9004 	str.w	r9, [r3, #4]
1a006408:	4630      	mov	r0, r6
1a00640a:	f8c8 c00c 	str.w	ip, [r8, #12]
1a00640e:	f8cc 8008 	str.w	r8, [ip, #8]
1a006412:	617a      	str	r2, [r7, #20]
1a006414:	613a      	str	r2, [r7, #16]
1a006416:	f8c2 e00c 	str.w	lr, [r2, #12]
1a00641a:	f8c2 e008 	str.w	lr, [r2, #8]
1a00641e:	6055      	str	r5, [r2, #4]
1a006420:	5051      	str	r1, [r2, r1]
1a006422:	f000 fa81 	bl	1a006928 <__malloc_unlock>
1a006426:	e769      	b.n	1a0062fc <_malloc_r+0x58>
1a006428:	2400      	movs	r4, #0
1a00642a:	230c      	movs	r3, #12
1a00642c:	4620      	mov	r0, r4
1a00642e:	6033      	str	r3, [r6, #0]
1a006430:	b003      	add	sp, #12
1a006432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006436:	217e      	movs	r1, #126	; 0x7e
1a006438:	203f      	movs	r0, #63	; 0x3f
1a00643a:	e773      	b.n	1a006324 <_malloc_r+0x80>
1a00643c:	4423      	add	r3, r4
1a00643e:	68e1      	ldr	r1, [r4, #12]
1a006440:	685a      	ldr	r2, [r3, #4]
1a006442:	68a5      	ldr	r5, [r4, #8]
1a006444:	f042 0201 	orr.w	r2, r2, #1
1a006448:	60e9      	str	r1, [r5, #12]
1a00644a:	4630      	mov	r0, r6
1a00644c:	608d      	str	r5, [r1, #8]
1a00644e:	605a      	str	r2, [r3, #4]
1a006450:	f000 fa6a 	bl	1a006928 <__malloc_unlock>
1a006454:	3408      	adds	r4, #8
1a006456:	4620      	mov	r0, r4
1a006458:	b003      	add	sp, #12
1a00645a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00645e:	4423      	add	r3, r4
1a006460:	4630      	mov	r0, r6
1a006462:	685a      	ldr	r2, [r3, #4]
1a006464:	f042 0201 	orr.w	r2, r2, #1
1a006468:	605a      	str	r2, [r3, #4]
1a00646a:	f000 fa5d 	bl	1a006928 <__malloc_unlock>
1a00646e:	3408      	adds	r4, #8
1a006470:	4620      	mov	r0, r4
1a006472:	b003      	add	sp, #12
1a006474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006478:	68bc      	ldr	r4, [r7, #8]
1a00647a:	6863      	ldr	r3, [r4, #4]
1a00647c:	f023 0803 	bic.w	r8, r3, #3
1a006480:	4545      	cmp	r5, r8
1a006482:	d804      	bhi.n	1a00648e <_malloc_r+0x1ea>
1a006484:	ebc5 0308 	rsb	r3, r5, r8
1a006488:	2b0f      	cmp	r3, #15
1a00648a:	f300 808c 	bgt.w	1a0065a6 <_malloc_r+0x302>
1a00648e:	4b53      	ldr	r3, [pc, #332]	; (1a0065dc <_malloc_r+0x338>)
1a006490:	f8df a158 	ldr.w	sl, [pc, #344]	; 1a0065ec <_malloc_r+0x348>
1a006494:	681a      	ldr	r2, [r3, #0]
1a006496:	f8da 3000 	ldr.w	r3, [sl]
1a00649a:	3301      	adds	r3, #1
1a00649c:	442a      	add	r2, r5
1a00649e:	eb04 0b08 	add.w	fp, r4, r8
1a0064a2:	f000 8150 	beq.w	1a006746 <_malloc_r+0x4a2>
1a0064a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
1a0064aa:	320f      	adds	r2, #15
1a0064ac:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
1a0064b0:	f022 020f 	bic.w	r2, r2, #15
1a0064b4:	4611      	mov	r1, r2
1a0064b6:	4630      	mov	r0, r6
1a0064b8:	9201      	str	r2, [sp, #4]
1a0064ba:	f7fb fb8b 	bl	1a001bd4 <_sbrk_r>
1a0064be:	f1b0 3fff 	cmp.w	r0, #4294967295
1a0064c2:	4681      	mov	r9, r0
1a0064c4:	9a01      	ldr	r2, [sp, #4]
1a0064c6:	f000 8147 	beq.w	1a006758 <_malloc_r+0x4b4>
1a0064ca:	4583      	cmp	fp, r0
1a0064cc:	f200 80ee 	bhi.w	1a0066ac <_malloc_r+0x408>
1a0064d0:	4b43      	ldr	r3, [pc, #268]	; (1a0065e0 <_malloc_r+0x33c>)
1a0064d2:	6819      	ldr	r1, [r3, #0]
1a0064d4:	45cb      	cmp	fp, r9
1a0064d6:	4411      	add	r1, r2
1a0064d8:	6019      	str	r1, [r3, #0]
1a0064da:	f000 8142 	beq.w	1a006762 <_malloc_r+0x4be>
1a0064de:	f8da 0000 	ldr.w	r0, [sl]
1a0064e2:	f8df e108 	ldr.w	lr, [pc, #264]	; 1a0065ec <_malloc_r+0x348>
1a0064e6:	3001      	adds	r0, #1
1a0064e8:	bf1b      	ittet	ne
1a0064ea:	ebcb 0b09 	rsbne	fp, fp, r9
1a0064ee:	4459      	addne	r1, fp
1a0064f0:	f8ce 9000 	streq.w	r9, [lr]
1a0064f4:	6019      	strne	r1, [r3, #0]
1a0064f6:	f019 0107 	ands.w	r1, r9, #7
1a0064fa:	f000 8107 	beq.w	1a00670c <_malloc_r+0x468>
1a0064fe:	f1c1 0008 	rsb	r0, r1, #8
1a006502:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
1a006506:	4481      	add	r9, r0
1a006508:	3108      	adds	r1, #8
1a00650a:	444a      	add	r2, r9
1a00650c:	f3c2 020b 	ubfx	r2, r2, #0, #12
1a006510:	ebc2 0a01 	rsb	sl, r2, r1
1a006514:	4651      	mov	r1, sl
1a006516:	4630      	mov	r0, r6
1a006518:	9301      	str	r3, [sp, #4]
1a00651a:	f7fb fb5b 	bl	1a001bd4 <_sbrk_r>
1a00651e:	1c43      	adds	r3, r0, #1
1a006520:	9b01      	ldr	r3, [sp, #4]
1a006522:	f000 812c 	beq.w	1a00677e <_malloc_r+0x4da>
1a006526:	ebc9 0200 	rsb	r2, r9, r0
1a00652a:	4452      	add	r2, sl
1a00652c:	f042 0201 	orr.w	r2, r2, #1
1a006530:	6819      	ldr	r1, [r3, #0]
1a006532:	f8c7 9008 	str.w	r9, [r7, #8]
1a006536:	4451      	add	r1, sl
1a006538:	42bc      	cmp	r4, r7
1a00653a:	f8c9 2004 	str.w	r2, [r9, #4]
1a00653e:	6019      	str	r1, [r3, #0]
1a006540:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1a0065e0 <_malloc_r+0x33c>
1a006544:	d016      	beq.n	1a006574 <_malloc_r+0x2d0>
1a006546:	f1b8 0f0f 	cmp.w	r8, #15
1a00654a:	f240 80ee 	bls.w	1a00672a <_malloc_r+0x486>
1a00654e:	6862      	ldr	r2, [r4, #4]
1a006550:	f1a8 030c 	sub.w	r3, r8, #12
1a006554:	f023 0307 	bic.w	r3, r3, #7
1a006558:	18e0      	adds	r0, r4, r3
1a00655a:	f002 0201 	and.w	r2, r2, #1
1a00655e:	f04f 0e05 	mov.w	lr, #5
1a006562:	431a      	orrs	r2, r3
1a006564:	2b0f      	cmp	r3, #15
1a006566:	6062      	str	r2, [r4, #4]
1a006568:	f8c0 e004 	str.w	lr, [r0, #4]
1a00656c:	f8c0 e008 	str.w	lr, [r0, #8]
1a006570:	f200 8109 	bhi.w	1a006786 <_malloc_r+0x4e2>
1a006574:	4b1b      	ldr	r3, [pc, #108]	; (1a0065e4 <_malloc_r+0x340>)
1a006576:	68bc      	ldr	r4, [r7, #8]
1a006578:	681a      	ldr	r2, [r3, #0]
1a00657a:	4291      	cmp	r1, r2
1a00657c:	bf88      	it	hi
1a00657e:	6019      	strhi	r1, [r3, #0]
1a006580:	4b19      	ldr	r3, [pc, #100]	; (1a0065e8 <_malloc_r+0x344>)
1a006582:	681a      	ldr	r2, [r3, #0]
1a006584:	4291      	cmp	r1, r2
1a006586:	6862      	ldr	r2, [r4, #4]
1a006588:	bf88      	it	hi
1a00658a:	6019      	strhi	r1, [r3, #0]
1a00658c:	f022 0203 	bic.w	r2, r2, #3
1a006590:	4295      	cmp	r5, r2
1a006592:	eba2 0305 	sub.w	r3, r2, r5
1a006596:	d801      	bhi.n	1a00659c <_malloc_r+0x2f8>
1a006598:	2b0f      	cmp	r3, #15
1a00659a:	dc04      	bgt.n	1a0065a6 <_malloc_r+0x302>
1a00659c:	4630      	mov	r0, r6
1a00659e:	f000 f9c3 	bl	1a006928 <__malloc_unlock>
1a0065a2:	2400      	movs	r4, #0
1a0065a4:	e6aa      	b.n	1a0062fc <_malloc_r+0x58>
1a0065a6:	1962      	adds	r2, r4, r5
1a0065a8:	f043 0301 	orr.w	r3, r3, #1
1a0065ac:	f045 0501 	orr.w	r5, r5, #1
1a0065b0:	6065      	str	r5, [r4, #4]
1a0065b2:	4630      	mov	r0, r6
1a0065b4:	60ba      	str	r2, [r7, #8]
1a0065b6:	6053      	str	r3, [r2, #4]
1a0065b8:	f000 f9b6 	bl	1a006928 <__malloc_unlock>
1a0065bc:	3408      	adds	r4, #8
1a0065be:	4620      	mov	r0, r4
1a0065c0:	b003      	add	sp, #12
1a0065c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0065c6:	2814      	cmp	r0, #20
1a0065c8:	d968      	bls.n	1a00669c <_malloc_r+0x3f8>
1a0065ca:	2854      	cmp	r0, #84	; 0x54
1a0065cc:	f200 8097 	bhi.w	1a0066fe <_malloc_r+0x45a>
1a0065d0:	0b28      	lsrs	r0, r5, #12
1a0065d2:	306e      	adds	r0, #110	; 0x6e
1a0065d4:	0041      	lsls	r1, r0, #1
1a0065d6:	e6a5      	b.n	1a006324 <_malloc_r+0x80>
1a0065d8:	10000534 	.word	0x10000534
1a0065dc:	10000adc 	.word	0x10000adc
1a0065e0:	10000ae0 	.word	0x10000ae0
1a0065e4:	10000ad8 	.word	0x10000ad8
1a0065e8:	10000ad4 	.word	0x10000ad4
1a0065ec:	10000940 	.word	0x10000940
1a0065f0:	0a5a      	lsrs	r2, r3, #9
1a0065f2:	2a04      	cmp	r2, #4
1a0065f4:	d955      	bls.n	1a0066a2 <_malloc_r+0x3fe>
1a0065f6:	2a14      	cmp	r2, #20
1a0065f8:	f200 80a7 	bhi.w	1a00674a <_malloc_r+0x4a6>
1a0065fc:	325b      	adds	r2, #91	; 0x5b
1a0065fe:	ea4f 0c42 	mov.w	ip, r2, lsl #1
1a006602:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
1a006606:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 1a0067c4 <_malloc_r+0x520>
1a00660a:	f8dc 1008 	ldr.w	r1, [ip, #8]
1a00660e:	4561      	cmp	r1, ip
1a006610:	d07f      	beq.n	1a006712 <_malloc_r+0x46e>
1a006612:	684a      	ldr	r2, [r1, #4]
1a006614:	f022 0203 	bic.w	r2, r2, #3
1a006618:	4293      	cmp	r3, r2
1a00661a:	d202      	bcs.n	1a006622 <_malloc_r+0x37e>
1a00661c:	6889      	ldr	r1, [r1, #8]
1a00661e:	458c      	cmp	ip, r1
1a006620:	d1f7      	bne.n	1a006612 <_malloc_r+0x36e>
1a006622:	68ca      	ldr	r2, [r1, #12]
1a006624:	687b      	ldr	r3, [r7, #4]
1a006626:	60e2      	str	r2, [r4, #12]
1a006628:	60a1      	str	r1, [r4, #8]
1a00662a:	6094      	str	r4, [r2, #8]
1a00662c:	60cc      	str	r4, [r1, #12]
1a00662e:	e6bb      	b.n	1a0063a8 <_malloc_r+0x104>
1a006630:	1963      	adds	r3, r4, r5
1a006632:	f042 0701 	orr.w	r7, r2, #1
1a006636:	f045 0501 	orr.w	r5, r5, #1
1a00663a:	6065      	str	r5, [r4, #4]
1a00663c:	4630      	mov	r0, r6
1a00663e:	614b      	str	r3, [r1, #20]
1a006640:	610b      	str	r3, [r1, #16]
1a006642:	f8c3 e00c 	str.w	lr, [r3, #12]
1a006646:	f8c3 e008 	str.w	lr, [r3, #8]
1a00664a:	605f      	str	r7, [r3, #4]
1a00664c:	509a      	str	r2, [r3, r2]
1a00664e:	3408      	adds	r4, #8
1a006650:	f000 f96a 	bl	1a006928 <__malloc_unlock>
1a006654:	e652      	b.n	1a0062fc <_malloc_r+0x58>
1a006656:	684b      	ldr	r3, [r1, #4]
1a006658:	e6a6      	b.n	1a0063a8 <_malloc_r+0x104>
1a00665a:	f109 0901 	add.w	r9, r9, #1
1a00665e:	f019 0f03 	tst.w	r9, #3
1a006662:	f10c 0c08 	add.w	ip, ip, #8
1a006666:	f47f aeb1 	bne.w	1a0063cc <_malloc_r+0x128>
1a00666a:	e02c      	b.n	1a0066c6 <_malloc_r+0x422>
1a00666c:	f104 0308 	add.w	r3, r4, #8
1a006670:	6964      	ldr	r4, [r4, #20]
1a006672:	42a3      	cmp	r3, r4
1a006674:	bf08      	it	eq
1a006676:	3002      	addeq	r0, #2
1a006678:	f43f ae69 	beq.w	1a00634e <_malloc_r+0xaa>
1a00667c:	e62e      	b.n	1a0062dc <_malloc_r+0x38>
1a00667e:	441a      	add	r2, r3
1a006680:	461c      	mov	r4, r3
1a006682:	6851      	ldr	r1, [r2, #4]
1a006684:	68db      	ldr	r3, [r3, #12]
1a006686:	f854 5f08 	ldr.w	r5, [r4, #8]!
1a00668a:	f041 0101 	orr.w	r1, r1, #1
1a00668e:	6051      	str	r1, [r2, #4]
1a006690:	4630      	mov	r0, r6
1a006692:	60eb      	str	r3, [r5, #12]
1a006694:	609d      	str	r5, [r3, #8]
1a006696:	f000 f947 	bl	1a006928 <__malloc_unlock>
1a00669a:	e62f      	b.n	1a0062fc <_malloc_r+0x58>
1a00669c:	305b      	adds	r0, #91	; 0x5b
1a00669e:	0041      	lsls	r1, r0, #1
1a0066a0:	e640      	b.n	1a006324 <_malloc_r+0x80>
1a0066a2:	099a      	lsrs	r2, r3, #6
1a0066a4:	3238      	adds	r2, #56	; 0x38
1a0066a6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
1a0066aa:	e7aa      	b.n	1a006602 <_malloc_r+0x35e>
1a0066ac:	42bc      	cmp	r4, r7
1a0066ae:	4b45      	ldr	r3, [pc, #276]	; (1a0067c4 <_malloc_r+0x520>)
1a0066b0:	f43f af0e 	beq.w	1a0064d0 <_malloc_r+0x22c>
1a0066b4:	689c      	ldr	r4, [r3, #8]
1a0066b6:	6862      	ldr	r2, [r4, #4]
1a0066b8:	f022 0203 	bic.w	r2, r2, #3
1a0066bc:	e768      	b.n	1a006590 <_malloc_r+0x2ec>
1a0066be:	f8d8 8000 	ldr.w	r8, [r8]
1a0066c2:	4598      	cmp	r8, r3
1a0066c4:	d17c      	bne.n	1a0067c0 <_malloc_r+0x51c>
1a0066c6:	f010 0f03 	tst.w	r0, #3
1a0066ca:	f1a8 0308 	sub.w	r3, r8, #8
1a0066ce:	f100 30ff 	add.w	r0, r0, #4294967295
1a0066d2:	d1f4      	bne.n	1a0066be <_malloc_r+0x41a>
1a0066d4:	687b      	ldr	r3, [r7, #4]
1a0066d6:	ea23 0304 	bic.w	r3, r3, r4
1a0066da:	607b      	str	r3, [r7, #4]
1a0066dc:	0064      	lsls	r4, r4, #1
1a0066de:	429c      	cmp	r4, r3
1a0066e0:	f63f aeca 	bhi.w	1a006478 <_malloc_r+0x1d4>
1a0066e4:	2c00      	cmp	r4, #0
1a0066e6:	f43f aec7 	beq.w	1a006478 <_malloc_r+0x1d4>
1a0066ea:	4223      	tst	r3, r4
1a0066ec:	4648      	mov	r0, r9
1a0066ee:	f47f ae69 	bne.w	1a0063c4 <_malloc_r+0x120>
1a0066f2:	0064      	lsls	r4, r4, #1
1a0066f4:	4223      	tst	r3, r4
1a0066f6:	f100 0004 	add.w	r0, r0, #4
1a0066fa:	d0fa      	beq.n	1a0066f2 <_malloc_r+0x44e>
1a0066fc:	e662      	b.n	1a0063c4 <_malloc_r+0x120>
1a0066fe:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
1a006702:	d818      	bhi.n	1a006736 <_malloc_r+0x492>
1a006704:	0be8      	lsrs	r0, r5, #15
1a006706:	3077      	adds	r0, #119	; 0x77
1a006708:	0041      	lsls	r1, r0, #1
1a00670a:	e60b      	b.n	1a006324 <_malloc_r+0x80>
1a00670c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
1a006710:	e6fb      	b.n	1a00650a <_malloc_r+0x266>
1a006712:	f8d8 3004 	ldr.w	r3, [r8, #4]
1a006716:	1092      	asrs	r2, r2, #2
1a006718:	f04f 0c01 	mov.w	ip, #1
1a00671c:	fa0c f202 	lsl.w	r2, ip, r2
1a006720:	4313      	orrs	r3, r2
1a006722:	f8c8 3004 	str.w	r3, [r8, #4]
1a006726:	460a      	mov	r2, r1
1a006728:	e77d      	b.n	1a006626 <_malloc_r+0x382>
1a00672a:	2301      	movs	r3, #1
1a00672c:	f8c9 3004 	str.w	r3, [r9, #4]
1a006730:	464c      	mov	r4, r9
1a006732:	2200      	movs	r2, #0
1a006734:	e72c      	b.n	1a006590 <_malloc_r+0x2ec>
1a006736:	f240 5354 	movw	r3, #1364	; 0x554
1a00673a:	4298      	cmp	r0, r3
1a00673c:	d81c      	bhi.n	1a006778 <_malloc_r+0x4d4>
1a00673e:	0ca8      	lsrs	r0, r5, #18
1a006740:	307c      	adds	r0, #124	; 0x7c
1a006742:	0041      	lsls	r1, r0, #1
1a006744:	e5ee      	b.n	1a006324 <_malloc_r+0x80>
1a006746:	3210      	adds	r2, #16
1a006748:	e6b4      	b.n	1a0064b4 <_malloc_r+0x210>
1a00674a:	2a54      	cmp	r2, #84	; 0x54
1a00674c:	d823      	bhi.n	1a006796 <_malloc_r+0x4f2>
1a00674e:	0b1a      	lsrs	r2, r3, #12
1a006750:	326e      	adds	r2, #110	; 0x6e
1a006752:	ea4f 0c42 	mov.w	ip, r2, lsl #1
1a006756:	e754      	b.n	1a006602 <_malloc_r+0x35e>
1a006758:	68bc      	ldr	r4, [r7, #8]
1a00675a:	6862      	ldr	r2, [r4, #4]
1a00675c:	f022 0203 	bic.w	r2, r2, #3
1a006760:	e716      	b.n	1a006590 <_malloc_r+0x2ec>
1a006762:	f3cb 000b 	ubfx	r0, fp, #0, #12
1a006766:	2800      	cmp	r0, #0
1a006768:	f47f aeb9 	bne.w	1a0064de <_malloc_r+0x23a>
1a00676c:	4442      	add	r2, r8
1a00676e:	68bb      	ldr	r3, [r7, #8]
1a006770:	f042 0201 	orr.w	r2, r2, #1
1a006774:	605a      	str	r2, [r3, #4]
1a006776:	e6fd      	b.n	1a006574 <_malloc_r+0x2d0>
1a006778:	21fc      	movs	r1, #252	; 0xfc
1a00677a:	207e      	movs	r0, #126	; 0x7e
1a00677c:	e5d2      	b.n	1a006324 <_malloc_r+0x80>
1a00677e:	2201      	movs	r2, #1
1a006780:	f04f 0a00 	mov.w	sl, #0
1a006784:	e6d4      	b.n	1a006530 <_malloc_r+0x28c>
1a006786:	f104 0108 	add.w	r1, r4, #8
1a00678a:	4630      	mov	r0, r6
1a00678c:	f7ff fcae 	bl	1a0060ec <_free_r>
1a006790:	f8da 1000 	ldr.w	r1, [sl]
1a006794:	e6ee      	b.n	1a006574 <_malloc_r+0x2d0>
1a006796:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a00679a:	d804      	bhi.n	1a0067a6 <_malloc_r+0x502>
1a00679c:	0bda      	lsrs	r2, r3, #15
1a00679e:	3277      	adds	r2, #119	; 0x77
1a0067a0:	ea4f 0c42 	mov.w	ip, r2, lsl #1
1a0067a4:	e72d      	b.n	1a006602 <_malloc_r+0x35e>
1a0067a6:	f240 5154 	movw	r1, #1364	; 0x554
1a0067aa:	428a      	cmp	r2, r1
1a0067ac:	d804      	bhi.n	1a0067b8 <_malloc_r+0x514>
1a0067ae:	0c9a      	lsrs	r2, r3, #18
1a0067b0:	327c      	adds	r2, #124	; 0x7c
1a0067b2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
1a0067b6:	e724      	b.n	1a006602 <_malloc_r+0x35e>
1a0067b8:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
1a0067bc:	227e      	movs	r2, #126	; 0x7e
1a0067be:	e720      	b.n	1a006602 <_malloc_r+0x35e>
1a0067c0:	687b      	ldr	r3, [r7, #4]
1a0067c2:	e78b      	b.n	1a0066dc <_malloc_r+0x438>
1a0067c4:	10000534 	.word	0x10000534

1a0067c8 <memchr>:
1a0067c8:	0783      	lsls	r3, r0, #30
1a0067ca:	b470      	push	{r4, r5, r6}
1a0067cc:	b2c9      	uxtb	r1, r1
1a0067ce:	d040      	beq.n	1a006852 <memchr+0x8a>
1a0067d0:	1e54      	subs	r4, r2, #1
1a0067d2:	2a00      	cmp	r2, #0
1a0067d4:	d03f      	beq.n	1a006856 <memchr+0x8e>
1a0067d6:	7803      	ldrb	r3, [r0, #0]
1a0067d8:	428b      	cmp	r3, r1
1a0067da:	bf18      	it	ne
1a0067dc:	1c43      	addne	r3, r0, #1
1a0067de:	d106      	bne.n	1a0067ee <memchr+0x26>
1a0067e0:	e01d      	b.n	1a00681e <memchr+0x56>
1a0067e2:	b1f4      	cbz	r4, 1a006822 <memchr+0x5a>
1a0067e4:	7802      	ldrb	r2, [r0, #0]
1a0067e6:	428a      	cmp	r2, r1
1a0067e8:	f104 34ff 	add.w	r4, r4, #4294967295
1a0067ec:	d017      	beq.n	1a00681e <memchr+0x56>
1a0067ee:	f013 0f03 	tst.w	r3, #3
1a0067f2:	4618      	mov	r0, r3
1a0067f4:	f103 0301 	add.w	r3, r3, #1
1a0067f8:	d1f3      	bne.n	1a0067e2 <memchr+0x1a>
1a0067fa:	2c03      	cmp	r4, #3
1a0067fc:	d814      	bhi.n	1a006828 <memchr+0x60>
1a0067fe:	b184      	cbz	r4, 1a006822 <memchr+0x5a>
1a006800:	7803      	ldrb	r3, [r0, #0]
1a006802:	428b      	cmp	r3, r1
1a006804:	d00b      	beq.n	1a00681e <memchr+0x56>
1a006806:	1905      	adds	r5, r0, r4
1a006808:	1c43      	adds	r3, r0, #1
1a00680a:	e002      	b.n	1a006812 <memchr+0x4a>
1a00680c:	7802      	ldrb	r2, [r0, #0]
1a00680e:	428a      	cmp	r2, r1
1a006810:	d005      	beq.n	1a00681e <memchr+0x56>
1a006812:	42ab      	cmp	r3, r5
1a006814:	4618      	mov	r0, r3
1a006816:	f103 0301 	add.w	r3, r3, #1
1a00681a:	d1f7      	bne.n	1a00680c <memchr+0x44>
1a00681c:	2000      	movs	r0, #0
1a00681e:	bc70      	pop	{r4, r5, r6}
1a006820:	4770      	bx	lr
1a006822:	4620      	mov	r0, r4
1a006824:	bc70      	pop	{r4, r5, r6}
1a006826:	4770      	bx	lr
1a006828:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
1a00682c:	4602      	mov	r2, r0
1a00682e:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
1a006832:	4610      	mov	r0, r2
1a006834:	3204      	adds	r2, #4
1a006836:	6803      	ldr	r3, [r0, #0]
1a006838:	4073      	eors	r3, r6
1a00683a:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
1a00683e:	ea25 0303 	bic.w	r3, r5, r3
1a006842:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
1a006846:	d1da      	bne.n	1a0067fe <memchr+0x36>
1a006848:	3c04      	subs	r4, #4
1a00684a:	2c03      	cmp	r4, #3
1a00684c:	4610      	mov	r0, r2
1a00684e:	d8f0      	bhi.n	1a006832 <memchr+0x6a>
1a006850:	e7d5      	b.n	1a0067fe <memchr+0x36>
1a006852:	4614      	mov	r4, r2
1a006854:	e7d1      	b.n	1a0067fa <memchr+0x32>
1a006856:	4610      	mov	r0, r2
1a006858:	e7e1      	b.n	1a00681e <memchr+0x56>
1a00685a:	bf00      	nop

1a00685c <memmove>:
1a00685c:	4288      	cmp	r0, r1
1a00685e:	b5f0      	push	{r4, r5, r6, r7, lr}
1a006860:	d90d      	bls.n	1a00687e <memmove+0x22>
1a006862:	188b      	adds	r3, r1, r2
1a006864:	4298      	cmp	r0, r3
1a006866:	d20a      	bcs.n	1a00687e <memmove+0x22>
1a006868:	1881      	adds	r1, r0, r2
1a00686a:	2a00      	cmp	r2, #0
1a00686c:	d054      	beq.n	1a006918 <memmove+0xbc>
1a00686e:	1a9a      	subs	r2, r3, r2
1a006870:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a006874:	f801 4d01 	strb.w	r4, [r1, #-1]!
1a006878:	4293      	cmp	r3, r2
1a00687a:	d1f9      	bne.n	1a006870 <memmove+0x14>
1a00687c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00687e:	2a0f      	cmp	r2, #15
1a006880:	d948      	bls.n	1a006914 <memmove+0xb8>
1a006882:	ea40 0301 	orr.w	r3, r0, r1
1a006886:	079b      	lsls	r3, r3, #30
1a006888:	d147      	bne.n	1a00691a <memmove+0xbe>
1a00688a:	f100 0410 	add.w	r4, r0, #16
1a00688e:	f101 0310 	add.w	r3, r1, #16
1a006892:	4615      	mov	r5, r2
1a006894:	f853 6c10 	ldr.w	r6, [r3, #-16]
1a006898:	f844 6c10 	str.w	r6, [r4, #-16]
1a00689c:	f853 6c0c 	ldr.w	r6, [r3, #-12]
1a0068a0:	f844 6c0c 	str.w	r6, [r4, #-12]
1a0068a4:	f853 6c08 	ldr.w	r6, [r3, #-8]
1a0068a8:	f844 6c08 	str.w	r6, [r4, #-8]
1a0068ac:	3d10      	subs	r5, #16
1a0068ae:	f853 6c04 	ldr.w	r6, [r3, #-4]
1a0068b2:	f844 6c04 	str.w	r6, [r4, #-4]
1a0068b6:	2d0f      	cmp	r5, #15
1a0068b8:	f103 0310 	add.w	r3, r3, #16
1a0068bc:	f104 0410 	add.w	r4, r4, #16
1a0068c0:	d8e8      	bhi.n	1a006894 <memmove+0x38>
1a0068c2:	f1a2 0310 	sub.w	r3, r2, #16
1a0068c6:	f023 030f 	bic.w	r3, r3, #15
1a0068ca:	f002 0e0f 	and.w	lr, r2, #15
1a0068ce:	3310      	adds	r3, #16
1a0068d0:	f1be 0f03 	cmp.w	lr, #3
1a0068d4:	4419      	add	r1, r3
1a0068d6:	4403      	add	r3, r0
1a0068d8:	d921      	bls.n	1a00691e <memmove+0xc2>
1a0068da:	1f1e      	subs	r6, r3, #4
1a0068dc:	460d      	mov	r5, r1
1a0068de:	4674      	mov	r4, lr
1a0068e0:	3c04      	subs	r4, #4
1a0068e2:	f855 7b04 	ldr.w	r7, [r5], #4
1a0068e6:	f846 7f04 	str.w	r7, [r6, #4]!
1a0068ea:	2c03      	cmp	r4, #3
1a0068ec:	d8f8      	bhi.n	1a0068e0 <memmove+0x84>
1a0068ee:	f1ae 0404 	sub.w	r4, lr, #4
1a0068f2:	f024 0403 	bic.w	r4, r4, #3
1a0068f6:	3404      	adds	r4, #4
1a0068f8:	4423      	add	r3, r4
1a0068fa:	4421      	add	r1, r4
1a0068fc:	f002 0203 	and.w	r2, r2, #3
1a006900:	b152      	cbz	r2, 1a006918 <memmove+0xbc>
1a006902:	3b01      	subs	r3, #1
1a006904:	440a      	add	r2, r1
1a006906:	f811 4b01 	ldrb.w	r4, [r1], #1
1a00690a:	f803 4f01 	strb.w	r4, [r3, #1]!
1a00690e:	4291      	cmp	r1, r2
1a006910:	d1f9      	bne.n	1a006906 <memmove+0xaa>
1a006912:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a006914:	4603      	mov	r3, r0
1a006916:	e7f3      	b.n	1a006900 <memmove+0xa4>
1a006918:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00691a:	4603      	mov	r3, r0
1a00691c:	e7f1      	b.n	1a006902 <memmove+0xa6>
1a00691e:	4672      	mov	r2, lr
1a006920:	e7ee      	b.n	1a006900 <memmove+0xa4>
1a006922:	bf00      	nop

1a006924 <__malloc_lock>:
1a006924:	4770      	bx	lr
1a006926:	bf00      	nop

1a006928 <__malloc_unlock>:
1a006928:	4770      	bx	lr
1a00692a:	bf00      	nop

1a00692c <_Balloc>:
1a00692c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a00692e:	b570      	push	{r4, r5, r6, lr}
1a006930:	4605      	mov	r5, r0
1a006932:	460c      	mov	r4, r1
1a006934:	b14b      	cbz	r3, 1a00694a <_Balloc+0x1e>
1a006936:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1a00693a:	b180      	cbz	r0, 1a00695e <_Balloc+0x32>
1a00693c:	6802      	ldr	r2, [r0, #0]
1a00693e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
1a006942:	2300      	movs	r3, #0
1a006944:	6103      	str	r3, [r0, #16]
1a006946:	60c3      	str	r3, [r0, #12]
1a006948:	bd70      	pop	{r4, r5, r6, pc}
1a00694a:	2104      	movs	r1, #4
1a00694c:	2221      	movs	r2, #33	; 0x21
1a00694e:	f000 fd89 	bl	1a007464 <_calloc_r>
1a006952:	64e8      	str	r0, [r5, #76]	; 0x4c
1a006954:	4603      	mov	r3, r0
1a006956:	2800      	cmp	r0, #0
1a006958:	d1ed      	bne.n	1a006936 <_Balloc+0xa>
1a00695a:	2000      	movs	r0, #0
1a00695c:	bd70      	pop	{r4, r5, r6, pc}
1a00695e:	2101      	movs	r1, #1
1a006960:	fa01 f604 	lsl.w	r6, r1, r4
1a006964:	1d72      	adds	r2, r6, #5
1a006966:	4628      	mov	r0, r5
1a006968:	0092      	lsls	r2, r2, #2
1a00696a:	f000 fd7b 	bl	1a007464 <_calloc_r>
1a00696e:	2800      	cmp	r0, #0
1a006970:	d0f3      	beq.n	1a00695a <_Balloc+0x2e>
1a006972:	6044      	str	r4, [r0, #4]
1a006974:	6086      	str	r6, [r0, #8]
1a006976:	e7e4      	b.n	1a006942 <_Balloc+0x16>

1a006978 <_Bfree>:
1a006978:	b131      	cbz	r1, 1a006988 <_Bfree+0x10>
1a00697a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a00697c:	684a      	ldr	r2, [r1, #4]
1a00697e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
1a006982:	6008      	str	r0, [r1, #0]
1a006984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
1a006988:	4770      	bx	lr
1a00698a:	bf00      	nop

1a00698c <__multadd>:
1a00698c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00698e:	690c      	ldr	r4, [r1, #16]
1a006990:	b083      	sub	sp, #12
1a006992:	460d      	mov	r5, r1
1a006994:	4606      	mov	r6, r0
1a006996:	f101 0e14 	add.w	lr, r1, #20
1a00699a:	2700      	movs	r7, #0
1a00699c:	f8de 1000 	ldr.w	r1, [lr]
1a0069a0:	b288      	uxth	r0, r1
1a0069a2:	0c09      	lsrs	r1, r1, #16
1a0069a4:	fb02 3300 	mla	r3, r2, r0, r3
1a0069a8:	fb02 f101 	mul.w	r1, r2, r1
1a0069ac:	eb01 4113 	add.w	r1, r1, r3, lsr #16
1a0069b0:	3701      	adds	r7, #1
1a0069b2:	b29b      	uxth	r3, r3
1a0069b4:	eb03 4301 	add.w	r3, r3, r1, lsl #16
1a0069b8:	42bc      	cmp	r4, r7
1a0069ba:	f84e 3b04 	str.w	r3, [lr], #4
1a0069be:	ea4f 4311 	mov.w	r3, r1, lsr #16
1a0069c2:	dceb      	bgt.n	1a00699c <__multadd+0x10>
1a0069c4:	b13b      	cbz	r3, 1a0069d6 <__multadd+0x4a>
1a0069c6:	68aa      	ldr	r2, [r5, #8]
1a0069c8:	4294      	cmp	r4, r2
1a0069ca:	da07      	bge.n	1a0069dc <__multadd+0x50>
1a0069cc:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a0069d0:	3401      	adds	r4, #1
1a0069d2:	6153      	str	r3, [r2, #20]
1a0069d4:	612c      	str	r4, [r5, #16]
1a0069d6:	4628      	mov	r0, r5
1a0069d8:	b003      	add	sp, #12
1a0069da:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0069dc:	6869      	ldr	r1, [r5, #4]
1a0069de:	9301      	str	r3, [sp, #4]
1a0069e0:	3101      	adds	r1, #1
1a0069e2:	4630      	mov	r0, r6
1a0069e4:	f7ff ffa2 	bl	1a00692c <_Balloc>
1a0069e8:	692a      	ldr	r2, [r5, #16]
1a0069ea:	3202      	adds	r2, #2
1a0069ec:	f105 010c 	add.w	r1, r5, #12
1a0069f0:	4607      	mov	r7, r0
1a0069f2:	0092      	lsls	r2, r2, #2
1a0069f4:	300c      	adds	r0, #12
1a0069f6:	f7fc ff9b 	bl	1a003930 <memcpy>
1a0069fa:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
1a0069fc:	6869      	ldr	r1, [r5, #4]
1a0069fe:	9b01      	ldr	r3, [sp, #4]
1a006a00:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
1a006a04:	6028      	str	r0, [r5, #0]
1a006a06:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
1a006a0a:	463d      	mov	r5, r7
1a006a0c:	e7de      	b.n	1a0069cc <__multadd+0x40>
1a006a0e:	bf00      	nop

1a006a10 <__hi0bits>:
1a006a10:	0c03      	lsrs	r3, r0, #16
1a006a12:	041b      	lsls	r3, r3, #16
1a006a14:	b9b3      	cbnz	r3, 1a006a44 <__hi0bits+0x34>
1a006a16:	0400      	lsls	r0, r0, #16
1a006a18:	2310      	movs	r3, #16
1a006a1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
1a006a1e:	bf04      	itt	eq
1a006a20:	0200      	lsleq	r0, r0, #8
1a006a22:	3308      	addeq	r3, #8
1a006a24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
1a006a28:	bf04      	itt	eq
1a006a2a:	0100      	lsleq	r0, r0, #4
1a006a2c:	3304      	addeq	r3, #4
1a006a2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
1a006a32:	bf04      	itt	eq
1a006a34:	0080      	lsleq	r0, r0, #2
1a006a36:	3302      	addeq	r3, #2
1a006a38:	2800      	cmp	r0, #0
1a006a3a:	db07      	blt.n	1a006a4c <__hi0bits+0x3c>
1a006a3c:	0042      	lsls	r2, r0, #1
1a006a3e:	d403      	bmi.n	1a006a48 <__hi0bits+0x38>
1a006a40:	2020      	movs	r0, #32
1a006a42:	4770      	bx	lr
1a006a44:	2300      	movs	r3, #0
1a006a46:	e7e8      	b.n	1a006a1a <__hi0bits+0xa>
1a006a48:	1c58      	adds	r0, r3, #1
1a006a4a:	4770      	bx	lr
1a006a4c:	4618      	mov	r0, r3
1a006a4e:	4770      	bx	lr

1a006a50 <__lo0bits>:
1a006a50:	6803      	ldr	r3, [r0, #0]
1a006a52:	f013 0207 	ands.w	r2, r3, #7
1a006a56:	d007      	beq.n	1a006a68 <__lo0bits+0x18>
1a006a58:	07d9      	lsls	r1, r3, #31
1a006a5a:	d420      	bmi.n	1a006a9e <__lo0bits+0x4e>
1a006a5c:	079a      	lsls	r2, r3, #30
1a006a5e:	d420      	bmi.n	1a006aa2 <__lo0bits+0x52>
1a006a60:	089b      	lsrs	r3, r3, #2
1a006a62:	6003      	str	r3, [r0, #0]
1a006a64:	2002      	movs	r0, #2
1a006a66:	4770      	bx	lr
1a006a68:	b299      	uxth	r1, r3
1a006a6a:	b909      	cbnz	r1, 1a006a70 <__lo0bits+0x20>
1a006a6c:	0c1b      	lsrs	r3, r3, #16
1a006a6e:	2210      	movs	r2, #16
1a006a70:	f013 0fff 	tst.w	r3, #255	; 0xff
1a006a74:	bf04      	itt	eq
1a006a76:	0a1b      	lsreq	r3, r3, #8
1a006a78:	3208      	addeq	r2, #8
1a006a7a:	0719      	lsls	r1, r3, #28
1a006a7c:	bf04      	itt	eq
1a006a7e:	091b      	lsreq	r3, r3, #4
1a006a80:	3204      	addeq	r2, #4
1a006a82:	0799      	lsls	r1, r3, #30
1a006a84:	bf04      	itt	eq
1a006a86:	089b      	lsreq	r3, r3, #2
1a006a88:	3202      	addeq	r2, #2
1a006a8a:	07d9      	lsls	r1, r3, #31
1a006a8c:	d404      	bmi.n	1a006a98 <__lo0bits+0x48>
1a006a8e:	085b      	lsrs	r3, r3, #1
1a006a90:	d101      	bne.n	1a006a96 <__lo0bits+0x46>
1a006a92:	2020      	movs	r0, #32
1a006a94:	4770      	bx	lr
1a006a96:	3201      	adds	r2, #1
1a006a98:	6003      	str	r3, [r0, #0]
1a006a9a:	4610      	mov	r0, r2
1a006a9c:	4770      	bx	lr
1a006a9e:	2000      	movs	r0, #0
1a006aa0:	4770      	bx	lr
1a006aa2:	085b      	lsrs	r3, r3, #1
1a006aa4:	6003      	str	r3, [r0, #0]
1a006aa6:	2001      	movs	r0, #1
1a006aa8:	4770      	bx	lr
1a006aaa:	bf00      	nop

1a006aac <__i2b>:
1a006aac:	b510      	push	{r4, lr}
1a006aae:	460c      	mov	r4, r1
1a006ab0:	2101      	movs	r1, #1
1a006ab2:	f7ff ff3b 	bl	1a00692c <_Balloc>
1a006ab6:	2201      	movs	r2, #1
1a006ab8:	6144      	str	r4, [r0, #20]
1a006aba:	6102      	str	r2, [r0, #16]
1a006abc:	bd10      	pop	{r4, pc}
1a006abe:	bf00      	nop

1a006ac0 <__multiply>:
1a006ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006ac4:	690f      	ldr	r7, [r1, #16]
1a006ac6:	6916      	ldr	r6, [r2, #16]
1a006ac8:	42b7      	cmp	r7, r6
1a006aca:	b083      	sub	sp, #12
1a006acc:	460d      	mov	r5, r1
1a006ace:	4614      	mov	r4, r2
1a006ad0:	f2c0 808d 	blt.w	1a006bee <__multiply+0x12e>
1a006ad4:	4633      	mov	r3, r6
1a006ad6:	463e      	mov	r6, r7
1a006ad8:	461f      	mov	r7, r3
1a006ada:	68ab      	ldr	r3, [r5, #8]
1a006adc:	6869      	ldr	r1, [r5, #4]
1a006ade:	eb06 0807 	add.w	r8, r6, r7
1a006ae2:	4598      	cmp	r8, r3
1a006ae4:	bfc8      	it	gt
1a006ae6:	3101      	addgt	r1, #1
1a006ae8:	f7ff ff20 	bl	1a00692c <_Balloc>
1a006aec:	f100 0c14 	add.w	ip, r0, #20
1a006af0:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
1a006af4:	45cc      	cmp	ip, r9
1a006af6:	9000      	str	r0, [sp, #0]
1a006af8:	d205      	bcs.n	1a006b06 <__multiply+0x46>
1a006afa:	4663      	mov	r3, ip
1a006afc:	2100      	movs	r1, #0
1a006afe:	f843 1b04 	str.w	r1, [r3], #4
1a006b02:	4599      	cmp	r9, r3
1a006b04:	d8fb      	bhi.n	1a006afe <__multiply+0x3e>
1a006b06:	f104 0214 	add.w	r2, r4, #20
1a006b0a:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
1a006b0e:	f105 0314 	add.w	r3, r5, #20
1a006b12:	4552      	cmp	r2, sl
1a006b14:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
1a006b18:	d254      	bcs.n	1a006bc4 <__multiply+0x104>
1a006b1a:	f8cd 9004 	str.w	r9, [sp, #4]
1a006b1e:	4699      	mov	r9, r3
1a006b20:	f852 3b04 	ldr.w	r3, [r2], #4
1a006b24:	fa1f fb83 	uxth.w	fp, r3
1a006b28:	f1bb 0f00 	cmp.w	fp, #0
1a006b2c:	d020      	beq.n	1a006b70 <__multiply+0xb0>
1a006b2e:	2000      	movs	r0, #0
1a006b30:	464f      	mov	r7, r9
1a006b32:	4666      	mov	r6, ip
1a006b34:	4605      	mov	r5, r0
1a006b36:	e000      	b.n	1a006b3a <__multiply+0x7a>
1a006b38:	461e      	mov	r6, r3
1a006b3a:	f857 4b04 	ldr.w	r4, [r7], #4
1a006b3e:	6830      	ldr	r0, [r6, #0]
1a006b40:	b2a1      	uxth	r1, r4
1a006b42:	b283      	uxth	r3, r0
1a006b44:	fb0b 3101 	mla	r1, fp, r1, r3
1a006b48:	0c24      	lsrs	r4, r4, #16
1a006b4a:	0c00      	lsrs	r0, r0, #16
1a006b4c:	194b      	adds	r3, r1, r5
1a006b4e:	fb0b 0004 	mla	r0, fp, r4, r0
1a006b52:	eb00 4013 	add.w	r0, r0, r3, lsr #16
1a006b56:	b299      	uxth	r1, r3
1a006b58:	4633      	mov	r3, r6
1a006b5a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
1a006b5e:	45be      	cmp	lr, r7
1a006b60:	ea4f 4510 	mov.w	r5, r0, lsr #16
1a006b64:	f843 1b04 	str.w	r1, [r3], #4
1a006b68:	d8e6      	bhi.n	1a006b38 <__multiply+0x78>
1a006b6a:	6075      	str	r5, [r6, #4]
1a006b6c:	f852 3c04 	ldr.w	r3, [r2, #-4]
1a006b70:	ea5f 4b13 	movs.w	fp, r3, lsr #16
1a006b74:	d020      	beq.n	1a006bb8 <__multiply+0xf8>
1a006b76:	f8dc 3000 	ldr.w	r3, [ip]
1a006b7a:	4667      	mov	r7, ip
1a006b7c:	4618      	mov	r0, r3
1a006b7e:	464d      	mov	r5, r9
1a006b80:	2100      	movs	r1, #0
1a006b82:	e000      	b.n	1a006b86 <__multiply+0xc6>
1a006b84:	4637      	mov	r7, r6
1a006b86:	882c      	ldrh	r4, [r5, #0]
1a006b88:	0c00      	lsrs	r0, r0, #16
1a006b8a:	fb0b 0004 	mla	r0, fp, r4, r0
1a006b8e:	4401      	add	r1, r0
1a006b90:	b29c      	uxth	r4, r3
1a006b92:	463e      	mov	r6, r7
1a006b94:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
1a006b98:	f846 3b04 	str.w	r3, [r6], #4
1a006b9c:	6878      	ldr	r0, [r7, #4]
1a006b9e:	f855 4b04 	ldr.w	r4, [r5], #4
1a006ba2:	b283      	uxth	r3, r0
1a006ba4:	0c24      	lsrs	r4, r4, #16
1a006ba6:	fb0b 3404 	mla	r4, fp, r4, r3
1a006baa:	eb04 4311 	add.w	r3, r4, r1, lsr #16
1a006bae:	45ae      	cmp	lr, r5
1a006bb0:	ea4f 4113 	mov.w	r1, r3, lsr #16
1a006bb4:	d8e6      	bhi.n	1a006b84 <__multiply+0xc4>
1a006bb6:	607b      	str	r3, [r7, #4]
1a006bb8:	4592      	cmp	sl, r2
1a006bba:	f10c 0c04 	add.w	ip, ip, #4
1a006bbe:	d8af      	bhi.n	1a006b20 <__multiply+0x60>
1a006bc0:	f8dd 9004 	ldr.w	r9, [sp, #4]
1a006bc4:	f1b8 0f00 	cmp.w	r8, #0
1a006bc8:	dd0b      	ble.n	1a006be2 <__multiply+0x122>
1a006bca:	f859 3c04 	ldr.w	r3, [r9, #-4]
1a006bce:	f1a9 0904 	sub.w	r9, r9, #4
1a006bd2:	b11b      	cbz	r3, 1a006bdc <__multiply+0x11c>
1a006bd4:	e005      	b.n	1a006be2 <__multiply+0x122>
1a006bd6:	f859 3d04 	ldr.w	r3, [r9, #-4]!
1a006bda:	b913      	cbnz	r3, 1a006be2 <__multiply+0x122>
1a006bdc:	f1b8 0801 	subs.w	r8, r8, #1
1a006be0:	d1f9      	bne.n	1a006bd6 <__multiply+0x116>
1a006be2:	9800      	ldr	r0, [sp, #0]
1a006be4:	f8c0 8010 	str.w	r8, [r0, #16]
1a006be8:	b003      	add	sp, #12
1a006bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006bee:	4615      	mov	r5, r2
1a006bf0:	460c      	mov	r4, r1
1a006bf2:	e772      	b.n	1a006ada <__multiply+0x1a>

1a006bf4 <__pow5mult>:
1a006bf4:	f012 0303 	ands.w	r3, r2, #3
1a006bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a006bfc:	4614      	mov	r4, r2
1a006bfe:	4607      	mov	r7, r0
1a006c00:	460e      	mov	r6, r1
1a006c02:	d12d      	bne.n	1a006c60 <__pow5mult+0x6c>
1a006c04:	10a4      	asrs	r4, r4, #2
1a006c06:	d01c      	beq.n	1a006c42 <__pow5mult+0x4e>
1a006c08:	6cbd      	ldr	r5, [r7, #72]	; 0x48
1a006c0a:	b395      	cbz	r5, 1a006c72 <__pow5mult+0x7e>
1a006c0c:	07e3      	lsls	r3, r4, #31
1a006c0e:	f04f 0800 	mov.w	r8, #0
1a006c12:	d406      	bmi.n	1a006c22 <__pow5mult+0x2e>
1a006c14:	1064      	asrs	r4, r4, #1
1a006c16:	d014      	beq.n	1a006c42 <__pow5mult+0x4e>
1a006c18:	6828      	ldr	r0, [r5, #0]
1a006c1a:	b1a8      	cbz	r0, 1a006c48 <__pow5mult+0x54>
1a006c1c:	4605      	mov	r5, r0
1a006c1e:	07e3      	lsls	r3, r4, #31
1a006c20:	d5f8      	bpl.n	1a006c14 <__pow5mult+0x20>
1a006c22:	4638      	mov	r0, r7
1a006c24:	4631      	mov	r1, r6
1a006c26:	462a      	mov	r2, r5
1a006c28:	f7ff ff4a 	bl	1a006ac0 <__multiply>
1a006c2c:	b1b6      	cbz	r6, 1a006c5c <__pow5mult+0x68>
1a006c2e:	6872      	ldr	r2, [r6, #4]
1a006c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a006c32:	1064      	asrs	r4, r4, #1
1a006c34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a006c38:	6031      	str	r1, [r6, #0]
1a006c3a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
1a006c3e:	4606      	mov	r6, r0
1a006c40:	d1ea      	bne.n	1a006c18 <__pow5mult+0x24>
1a006c42:	4630      	mov	r0, r6
1a006c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a006c48:	4629      	mov	r1, r5
1a006c4a:	462a      	mov	r2, r5
1a006c4c:	4638      	mov	r0, r7
1a006c4e:	f7ff ff37 	bl	1a006ac0 <__multiply>
1a006c52:	6028      	str	r0, [r5, #0]
1a006c54:	f8c0 8000 	str.w	r8, [r0]
1a006c58:	4605      	mov	r5, r0
1a006c5a:	e7e0      	b.n	1a006c1e <__pow5mult+0x2a>
1a006c5c:	4606      	mov	r6, r0
1a006c5e:	e7d9      	b.n	1a006c14 <__pow5mult+0x20>
1a006c60:	1e5a      	subs	r2, r3, #1
1a006c62:	4d0b      	ldr	r5, [pc, #44]	; (1a006c90 <__pow5mult+0x9c>)
1a006c64:	2300      	movs	r3, #0
1a006c66:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
1a006c6a:	f7ff fe8f 	bl	1a00698c <__multadd>
1a006c6e:	4606      	mov	r6, r0
1a006c70:	e7c8      	b.n	1a006c04 <__pow5mult+0x10>
1a006c72:	2101      	movs	r1, #1
1a006c74:	4638      	mov	r0, r7
1a006c76:	f7ff fe59 	bl	1a00692c <_Balloc>
1a006c7a:	f240 2171 	movw	r1, #625	; 0x271
1a006c7e:	2201      	movs	r2, #1
1a006c80:	2300      	movs	r3, #0
1a006c82:	6141      	str	r1, [r0, #20]
1a006c84:	6102      	str	r2, [r0, #16]
1a006c86:	4605      	mov	r5, r0
1a006c88:	64b8      	str	r0, [r7, #72]	; 0x48
1a006c8a:	6003      	str	r3, [r0, #0]
1a006c8c:	e7be      	b.n	1a006c0c <__pow5mult+0x18>
1a006c8e:	bf00      	nop
1a006c90:	1a007c50 	.word	0x1a007c50

1a006c94 <__lshift>:
1a006c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a006c98:	690f      	ldr	r7, [r1, #16]
1a006c9a:	688b      	ldr	r3, [r1, #8]
1a006c9c:	ea4f 1962 	mov.w	r9, r2, asr #5
1a006ca0:	444f      	add	r7, r9
1a006ca2:	1c7d      	adds	r5, r7, #1
1a006ca4:	429d      	cmp	r5, r3
1a006ca6:	460e      	mov	r6, r1
1a006ca8:	4614      	mov	r4, r2
1a006caa:	6849      	ldr	r1, [r1, #4]
1a006cac:	4680      	mov	r8, r0
1a006cae:	dd04      	ble.n	1a006cba <__lshift+0x26>
1a006cb0:	005b      	lsls	r3, r3, #1
1a006cb2:	429d      	cmp	r5, r3
1a006cb4:	f101 0101 	add.w	r1, r1, #1
1a006cb8:	dcfa      	bgt.n	1a006cb0 <__lshift+0x1c>
1a006cba:	4640      	mov	r0, r8
1a006cbc:	f7ff fe36 	bl	1a00692c <_Balloc>
1a006cc0:	f1b9 0f00 	cmp.w	r9, #0
1a006cc4:	f100 0114 	add.w	r1, r0, #20
1a006cc8:	dd09      	ble.n	1a006cde <__lshift+0x4a>
1a006cca:	2300      	movs	r3, #0
1a006ccc:	469e      	mov	lr, r3
1a006cce:	460a      	mov	r2, r1
1a006cd0:	3301      	adds	r3, #1
1a006cd2:	454b      	cmp	r3, r9
1a006cd4:	f842 eb04 	str.w	lr, [r2], #4
1a006cd8:	d1fa      	bne.n	1a006cd0 <__lshift+0x3c>
1a006cda:	eb01 0183 	add.w	r1, r1, r3, lsl #2
1a006cde:	6932      	ldr	r2, [r6, #16]
1a006ce0:	f106 0314 	add.w	r3, r6, #20
1a006ce4:	f014 0c1f 	ands.w	ip, r4, #31
1a006ce8:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
1a006cec:	d01f      	beq.n	1a006d2e <__lshift+0x9a>
1a006cee:	f1cc 0920 	rsb	r9, ip, #32
1a006cf2:	2200      	movs	r2, #0
1a006cf4:	681c      	ldr	r4, [r3, #0]
1a006cf6:	fa04 f40c 	lsl.w	r4, r4, ip
1a006cfa:	4314      	orrs	r4, r2
1a006cfc:	468a      	mov	sl, r1
1a006cfe:	f841 4b04 	str.w	r4, [r1], #4
1a006d02:	f853 4b04 	ldr.w	r4, [r3], #4
1a006d06:	459e      	cmp	lr, r3
1a006d08:	fa24 f209 	lsr.w	r2, r4, r9
1a006d0c:	d8f2      	bhi.n	1a006cf4 <__lshift+0x60>
1a006d0e:	f8ca 2004 	str.w	r2, [sl, #4]
1a006d12:	b102      	cbz	r2, 1a006d16 <__lshift+0x82>
1a006d14:	1cbd      	adds	r5, r7, #2
1a006d16:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
1a006d1a:	6872      	ldr	r2, [r6, #4]
1a006d1c:	3d01      	subs	r5, #1
1a006d1e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a006d22:	6105      	str	r5, [r0, #16]
1a006d24:	6031      	str	r1, [r6, #0]
1a006d26:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
1a006d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a006d2e:	3904      	subs	r1, #4
1a006d30:	f853 2b04 	ldr.w	r2, [r3], #4
1a006d34:	f841 2f04 	str.w	r2, [r1, #4]!
1a006d38:	459e      	cmp	lr, r3
1a006d3a:	d8f9      	bhi.n	1a006d30 <__lshift+0x9c>
1a006d3c:	e7eb      	b.n	1a006d16 <__lshift+0x82>
1a006d3e:	bf00      	nop

1a006d40 <__mcmp>:
1a006d40:	6902      	ldr	r2, [r0, #16]
1a006d42:	690b      	ldr	r3, [r1, #16]
1a006d44:	1ad2      	subs	r2, r2, r3
1a006d46:	d113      	bne.n	1a006d70 <__mcmp+0x30>
1a006d48:	009b      	lsls	r3, r3, #2
1a006d4a:	3014      	adds	r0, #20
1a006d4c:	3114      	adds	r1, #20
1a006d4e:	4419      	add	r1, r3
1a006d50:	b410      	push	{r4}
1a006d52:	4403      	add	r3, r0
1a006d54:	e001      	b.n	1a006d5a <__mcmp+0x1a>
1a006d56:	4298      	cmp	r0, r3
1a006d58:	d20c      	bcs.n	1a006d74 <__mcmp+0x34>
1a006d5a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
1a006d5e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a006d62:	4294      	cmp	r4, r2
1a006d64:	d0f7      	beq.n	1a006d56 <__mcmp+0x16>
1a006d66:	d309      	bcc.n	1a006d7c <__mcmp+0x3c>
1a006d68:	2001      	movs	r0, #1
1a006d6a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a006d6e:	4770      	bx	lr
1a006d70:	4610      	mov	r0, r2
1a006d72:	4770      	bx	lr
1a006d74:	2000      	movs	r0, #0
1a006d76:	f85d 4b04 	ldr.w	r4, [sp], #4
1a006d7a:	4770      	bx	lr
1a006d7c:	f04f 30ff 	mov.w	r0, #4294967295
1a006d80:	f85d 4b04 	ldr.w	r4, [sp], #4
1a006d84:	4770      	bx	lr
1a006d86:	bf00      	nop

1a006d88 <__mdiff>:
1a006d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a006d8c:	460e      	mov	r6, r1
1a006d8e:	4605      	mov	r5, r0
1a006d90:	4611      	mov	r1, r2
1a006d92:	4630      	mov	r0, r6
1a006d94:	4614      	mov	r4, r2
1a006d96:	f7ff ffd3 	bl	1a006d40 <__mcmp>
1a006d9a:	1e07      	subs	r7, r0, #0
1a006d9c:	d054      	beq.n	1a006e48 <__mdiff+0xc0>
1a006d9e:	db4d      	blt.n	1a006e3c <__mdiff+0xb4>
1a006da0:	f04f 0800 	mov.w	r8, #0
1a006da4:	6871      	ldr	r1, [r6, #4]
1a006da6:	4628      	mov	r0, r5
1a006da8:	f7ff fdc0 	bl	1a00692c <_Balloc>
1a006dac:	6937      	ldr	r7, [r6, #16]
1a006dae:	6923      	ldr	r3, [r4, #16]
1a006db0:	f8c0 800c 	str.w	r8, [r0, #12]
1a006db4:	3614      	adds	r6, #20
1a006db6:	f104 0214 	add.w	r2, r4, #20
1a006dba:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
1a006dbe:	f100 0514 	add.w	r5, r0, #20
1a006dc2:	eb06 0e87 	add.w	lr, r6, r7, lsl #2
1a006dc6:	2300      	movs	r3, #0
1a006dc8:	f856 8b04 	ldr.w	r8, [r6], #4
1a006dcc:	f852 4b04 	ldr.w	r4, [r2], #4
1a006dd0:	fa13 f388 	uxtah	r3, r3, r8
1a006dd4:	b2a1      	uxth	r1, r4
1a006dd6:	0c24      	lsrs	r4, r4, #16
1a006dd8:	1a59      	subs	r1, r3, r1
1a006dda:	ebc4 4318 	rsb	r3, r4, r8, lsr #16
1a006dde:	eb03 4321 	add.w	r3, r3, r1, asr #16
1a006de2:	b289      	uxth	r1, r1
1a006de4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a006de8:	4594      	cmp	ip, r2
1a006dea:	f845 1b04 	str.w	r1, [r5], #4
1a006dee:	ea4f 4323 	mov.w	r3, r3, asr #16
1a006df2:	4634      	mov	r4, r6
1a006df4:	d8e8      	bhi.n	1a006dc8 <__mdiff+0x40>
1a006df6:	45b6      	cmp	lr, r6
1a006df8:	46ac      	mov	ip, r5
1a006dfa:	d915      	bls.n	1a006e28 <__mdiff+0xa0>
1a006dfc:	f854 2b04 	ldr.w	r2, [r4], #4
1a006e00:	fa13 f182 	uxtah	r1, r3, r2
1a006e04:	0c13      	lsrs	r3, r2, #16
1a006e06:	eb03 4321 	add.w	r3, r3, r1, asr #16
1a006e0a:	b289      	uxth	r1, r1
1a006e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a006e10:	45a6      	cmp	lr, r4
1a006e12:	f845 1b04 	str.w	r1, [r5], #4
1a006e16:	ea4f 4323 	mov.w	r3, r3, asr #16
1a006e1a:	d8ef      	bhi.n	1a006dfc <__mdiff+0x74>
1a006e1c:	43f6      	mvns	r6, r6
1a006e1e:	4476      	add	r6, lr
1a006e20:	f026 0503 	bic.w	r5, r6, #3
1a006e24:	3504      	adds	r5, #4
1a006e26:	4465      	add	r5, ip
1a006e28:	3d04      	subs	r5, #4
1a006e2a:	b921      	cbnz	r1, 1a006e36 <__mdiff+0xae>
1a006e2c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
1a006e30:	3f01      	subs	r7, #1
1a006e32:	2b00      	cmp	r3, #0
1a006e34:	d0fa      	beq.n	1a006e2c <__mdiff+0xa4>
1a006e36:	6107      	str	r7, [r0, #16]
1a006e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a006e3c:	4633      	mov	r3, r6
1a006e3e:	f04f 0801 	mov.w	r8, #1
1a006e42:	4626      	mov	r6, r4
1a006e44:	461c      	mov	r4, r3
1a006e46:	e7ad      	b.n	1a006da4 <__mdiff+0x1c>
1a006e48:	4628      	mov	r0, r5
1a006e4a:	4639      	mov	r1, r7
1a006e4c:	f7ff fd6e 	bl	1a00692c <_Balloc>
1a006e50:	2301      	movs	r3, #1
1a006e52:	6147      	str	r7, [r0, #20]
1a006e54:	6103      	str	r3, [r0, #16]
1a006e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a006e5a:	bf00      	nop

1a006e5c <__d2b>:
1a006e5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a006e60:	ec57 6b10 	vmov	r6, r7, d0
1a006e64:	b083      	sub	sp, #12
1a006e66:	4688      	mov	r8, r1
1a006e68:	2101      	movs	r1, #1
1a006e6a:	463c      	mov	r4, r7
1a006e6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
1a006e70:	4617      	mov	r7, r2
1a006e72:	f7ff fd5b 	bl	1a00692c <_Balloc>
1a006e76:	f3c4 0413 	ubfx	r4, r4, #0, #20
1a006e7a:	4681      	mov	r9, r0
1a006e7c:	b10d      	cbz	r5, 1a006e82 <__d2b+0x26>
1a006e7e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
1a006e82:	9401      	str	r4, [sp, #4]
1a006e84:	b31e      	cbz	r6, 1a006ece <__d2b+0x72>
1a006e86:	a802      	add	r0, sp, #8
1a006e88:	f840 6d08 	str.w	r6, [r0, #-8]!
1a006e8c:	f7ff fde0 	bl	1a006a50 <__lo0bits>
1a006e90:	2800      	cmp	r0, #0
1a006e92:	d134      	bne.n	1a006efe <__d2b+0xa2>
1a006e94:	e89d 000c 	ldmia.w	sp, {r2, r3}
1a006e98:	f8c9 2014 	str.w	r2, [r9, #20]
1a006e9c:	2b00      	cmp	r3, #0
1a006e9e:	bf14      	ite	ne
1a006ea0:	2402      	movne	r4, #2
1a006ea2:	2401      	moveq	r4, #1
1a006ea4:	f8c9 3018 	str.w	r3, [r9, #24]
1a006ea8:	f8c9 4010 	str.w	r4, [r9, #16]
1a006eac:	b9dd      	cbnz	r5, 1a006ee6 <__d2b+0x8a>
1a006eae:	eb09 0384 	add.w	r3, r9, r4, lsl #2
1a006eb2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
1a006eb6:	f8c8 0000 	str.w	r0, [r8]
1a006eba:	6918      	ldr	r0, [r3, #16]
1a006ebc:	f7ff fda8 	bl	1a006a10 <__hi0bits>
1a006ec0:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
1a006ec4:	6038      	str	r0, [r7, #0]
1a006ec6:	4648      	mov	r0, r9
1a006ec8:	b003      	add	sp, #12
1a006eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a006ece:	a801      	add	r0, sp, #4
1a006ed0:	f7ff fdbe 	bl	1a006a50 <__lo0bits>
1a006ed4:	2401      	movs	r4, #1
1a006ed6:	9b01      	ldr	r3, [sp, #4]
1a006ed8:	f8c9 3014 	str.w	r3, [r9, #20]
1a006edc:	3020      	adds	r0, #32
1a006ede:	f8c9 4010 	str.w	r4, [r9, #16]
1a006ee2:	2d00      	cmp	r5, #0
1a006ee4:	d0e3      	beq.n	1a006eae <__d2b+0x52>
1a006ee6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
1a006eea:	4405      	add	r5, r0
1a006eec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
1a006ef0:	f8c8 5000 	str.w	r5, [r8]
1a006ef4:	6038      	str	r0, [r7, #0]
1a006ef6:	4648      	mov	r0, r9
1a006ef8:	b003      	add	sp, #12
1a006efa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a006efe:	e89d 000c 	ldmia.w	sp, {r2, r3}
1a006f02:	f1c0 0120 	rsb	r1, r0, #32
1a006f06:	fa03 f101 	lsl.w	r1, r3, r1
1a006f0a:	430a      	orrs	r2, r1
1a006f0c:	40c3      	lsrs	r3, r0
1a006f0e:	9301      	str	r3, [sp, #4]
1a006f10:	f8c9 2014 	str.w	r2, [r9, #20]
1a006f14:	e7c2      	b.n	1a006e9c <__d2b+0x40>
1a006f16:	bf00      	nop

1a006f18 <_realloc_r>:
1a006f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006f1c:	4617      	mov	r7, r2
1a006f1e:	b083      	sub	sp, #12
1a006f20:	460e      	mov	r6, r1
1a006f22:	2900      	cmp	r1, #0
1a006f24:	f000 80e7 	beq.w	1a0070f6 <_realloc_r+0x1de>
1a006f28:	4681      	mov	r9, r0
1a006f2a:	f107 050b 	add.w	r5, r7, #11
1a006f2e:	f7ff fcf9 	bl	1a006924 <__malloc_lock>
1a006f32:	f856 3c04 	ldr.w	r3, [r6, #-4]
1a006f36:	2d16      	cmp	r5, #22
1a006f38:	f023 0403 	bic.w	r4, r3, #3
1a006f3c:	f1a6 0808 	sub.w	r8, r6, #8
1a006f40:	d84c      	bhi.n	1a006fdc <_realloc_r+0xc4>
1a006f42:	2210      	movs	r2, #16
1a006f44:	4615      	mov	r5, r2
1a006f46:	42af      	cmp	r7, r5
1a006f48:	d84d      	bhi.n	1a006fe6 <_realloc_r+0xce>
1a006f4a:	4294      	cmp	r4, r2
1a006f4c:	f280 8084 	bge.w	1a007058 <_realloc_r+0x140>
1a006f50:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 1a007300 <_realloc_r+0x3e8>
1a006f54:	f8db 0008 	ldr.w	r0, [fp, #8]
1a006f58:	eb08 0104 	add.w	r1, r8, r4
1a006f5c:	4288      	cmp	r0, r1
1a006f5e:	f000 80d6 	beq.w	1a00710e <_realloc_r+0x1f6>
1a006f62:	6848      	ldr	r0, [r1, #4]
1a006f64:	f020 0e01 	bic.w	lr, r0, #1
1a006f68:	448e      	add	lr, r1
1a006f6a:	f8de e004 	ldr.w	lr, [lr, #4]
1a006f6e:	f01e 0f01 	tst.w	lr, #1
1a006f72:	d13f      	bne.n	1a006ff4 <_realloc_r+0xdc>
1a006f74:	f020 0003 	bic.w	r0, r0, #3
1a006f78:	4420      	add	r0, r4
1a006f7a:	4290      	cmp	r0, r2
1a006f7c:	f280 80c1 	bge.w	1a007102 <_realloc_r+0x1ea>
1a006f80:	07db      	lsls	r3, r3, #31
1a006f82:	f100 808f 	bmi.w	1a0070a4 <_realloc_r+0x18c>
1a006f86:	f856 3c08 	ldr.w	r3, [r6, #-8]
1a006f8a:	ebc3 0a08 	rsb	sl, r3, r8
1a006f8e:	f8da 3004 	ldr.w	r3, [sl, #4]
1a006f92:	f023 0303 	bic.w	r3, r3, #3
1a006f96:	eb00 0e03 	add.w	lr, r0, r3
1a006f9a:	4596      	cmp	lr, r2
1a006f9c:	db34      	blt.n	1a007008 <_realloc_r+0xf0>
1a006f9e:	68cb      	ldr	r3, [r1, #12]
1a006fa0:	688a      	ldr	r2, [r1, #8]
1a006fa2:	4657      	mov	r7, sl
1a006fa4:	60d3      	str	r3, [r2, #12]
1a006fa6:	609a      	str	r2, [r3, #8]
1a006fa8:	f857 1f08 	ldr.w	r1, [r7, #8]!
1a006fac:	f8da 300c 	ldr.w	r3, [sl, #12]
1a006fb0:	60cb      	str	r3, [r1, #12]
1a006fb2:	1f22      	subs	r2, r4, #4
1a006fb4:	2a24      	cmp	r2, #36	; 0x24
1a006fb6:	6099      	str	r1, [r3, #8]
1a006fb8:	f200 8136 	bhi.w	1a007228 <_realloc_r+0x310>
1a006fbc:	2a13      	cmp	r2, #19
1a006fbe:	f240 80fd 	bls.w	1a0071bc <_realloc_r+0x2a4>
1a006fc2:	6833      	ldr	r3, [r6, #0]
1a006fc4:	f8ca 3008 	str.w	r3, [sl, #8]
1a006fc8:	6873      	ldr	r3, [r6, #4]
1a006fca:	f8ca 300c 	str.w	r3, [sl, #12]
1a006fce:	2a1b      	cmp	r2, #27
1a006fd0:	f200 8140 	bhi.w	1a007254 <_realloc_r+0x33c>
1a006fd4:	3608      	adds	r6, #8
1a006fd6:	f10a 0310 	add.w	r3, sl, #16
1a006fda:	e0f0      	b.n	1a0071be <_realloc_r+0x2a6>
1a006fdc:	f025 0507 	bic.w	r5, r5, #7
1a006fe0:	2d00      	cmp	r5, #0
1a006fe2:	462a      	mov	r2, r5
1a006fe4:	daaf      	bge.n	1a006f46 <_realloc_r+0x2e>
1a006fe6:	230c      	movs	r3, #12
1a006fe8:	2000      	movs	r0, #0
1a006fea:	f8c9 3000 	str.w	r3, [r9]
1a006fee:	b003      	add	sp, #12
1a006ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006ff4:	07d9      	lsls	r1, r3, #31
1a006ff6:	d455      	bmi.n	1a0070a4 <_realloc_r+0x18c>
1a006ff8:	f856 3c08 	ldr.w	r3, [r6, #-8]
1a006ffc:	ebc3 0a08 	rsb	sl, r3, r8
1a007000:	f8da 3004 	ldr.w	r3, [sl, #4]
1a007004:	f023 0303 	bic.w	r3, r3, #3
1a007008:	4423      	add	r3, r4
1a00700a:	4293      	cmp	r3, r2
1a00700c:	db4a      	blt.n	1a0070a4 <_realloc_r+0x18c>
1a00700e:	4657      	mov	r7, sl
1a007010:	f8da 100c 	ldr.w	r1, [sl, #12]
1a007014:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a007018:	1f22      	subs	r2, r4, #4
1a00701a:	2a24      	cmp	r2, #36	; 0x24
1a00701c:	60c1      	str	r1, [r0, #12]
1a00701e:	6088      	str	r0, [r1, #8]
1a007020:	f200 810e 	bhi.w	1a007240 <_realloc_r+0x328>
1a007024:	2a13      	cmp	r2, #19
1a007026:	f240 8109 	bls.w	1a00723c <_realloc_r+0x324>
1a00702a:	6831      	ldr	r1, [r6, #0]
1a00702c:	f8ca 1008 	str.w	r1, [sl, #8]
1a007030:	6871      	ldr	r1, [r6, #4]
1a007032:	f8ca 100c 	str.w	r1, [sl, #12]
1a007036:	2a1b      	cmp	r2, #27
1a007038:	f200 8121 	bhi.w	1a00727e <_realloc_r+0x366>
1a00703c:	3608      	adds	r6, #8
1a00703e:	f10a 0210 	add.w	r2, sl, #16
1a007042:	6831      	ldr	r1, [r6, #0]
1a007044:	6011      	str	r1, [r2, #0]
1a007046:	6871      	ldr	r1, [r6, #4]
1a007048:	6051      	str	r1, [r2, #4]
1a00704a:	68b1      	ldr	r1, [r6, #8]
1a00704c:	6091      	str	r1, [r2, #8]
1a00704e:	461c      	mov	r4, r3
1a007050:	f8da 3004 	ldr.w	r3, [sl, #4]
1a007054:	463e      	mov	r6, r7
1a007056:	46d0      	mov	r8, sl
1a007058:	1b62      	subs	r2, r4, r5
1a00705a:	2a0f      	cmp	r2, #15
1a00705c:	f003 0301 	and.w	r3, r3, #1
1a007060:	d80e      	bhi.n	1a007080 <_realloc_r+0x168>
1a007062:	4323      	orrs	r3, r4
1a007064:	4444      	add	r4, r8
1a007066:	f8c8 3004 	str.w	r3, [r8, #4]
1a00706a:	6863      	ldr	r3, [r4, #4]
1a00706c:	f043 0301 	orr.w	r3, r3, #1
1a007070:	6063      	str	r3, [r4, #4]
1a007072:	4648      	mov	r0, r9
1a007074:	f7ff fc58 	bl	1a006928 <__malloc_unlock>
1a007078:	4630      	mov	r0, r6
1a00707a:	b003      	add	sp, #12
1a00707c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007080:	eb08 0105 	add.w	r1, r8, r5
1a007084:	431d      	orrs	r5, r3
1a007086:	f042 0301 	orr.w	r3, r2, #1
1a00708a:	440a      	add	r2, r1
1a00708c:	f8c8 5004 	str.w	r5, [r8, #4]
1a007090:	604b      	str	r3, [r1, #4]
1a007092:	6853      	ldr	r3, [r2, #4]
1a007094:	f043 0301 	orr.w	r3, r3, #1
1a007098:	3108      	adds	r1, #8
1a00709a:	6053      	str	r3, [r2, #4]
1a00709c:	4648      	mov	r0, r9
1a00709e:	f7ff f825 	bl	1a0060ec <_free_r>
1a0070a2:	e7e6      	b.n	1a007072 <_realloc_r+0x15a>
1a0070a4:	4639      	mov	r1, r7
1a0070a6:	4648      	mov	r0, r9
1a0070a8:	f7ff f8fc 	bl	1a0062a4 <_malloc_r>
1a0070ac:	4607      	mov	r7, r0
1a0070ae:	b1d8      	cbz	r0, 1a0070e8 <_realloc_r+0x1d0>
1a0070b0:	f856 3c04 	ldr.w	r3, [r6, #-4]
1a0070b4:	f023 0201 	bic.w	r2, r3, #1
1a0070b8:	4442      	add	r2, r8
1a0070ba:	f1a0 0108 	sub.w	r1, r0, #8
1a0070be:	4291      	cmp	r1, r2
1a0070c0:	f000 80ac 	beq.w	1a00721c <_realloc_r+0x304>
1a0070c4:	1f22      	subs	r2, r4, #4
1a0070c6:	2a24      	cmp	r2, #36	; 0x24
1a0070c8:	f200 8099 	bhi.w	1a0071fe <_realloc_r+0x2e6>
1a0070cc:	2a13      	cmp	r2, #19
1a0070ce:	d86a      	bhi.n	1a0071a6 <_realloc_r+0x28e>
1a0070d0:	4603      	mov	r3, r0
1a0070d2:	4632      	mov	r2, r6
1a0070d4:	6811      	ldr	r1, [r2, #0]
1a0070d6:	6019      	str	r1, [r3, #0]
1a0070d8:	6851      	ldr	r1, [r2, #4]
1a0070da:	6059      	str	r1, [r3, #4]
1a0070dc:	6892      	ldr	r2, [r2, #8]
1a0070de:	609a      	str	r2, [r3, #8]
1a0070e0:	4631      	mov	r1, r6
1a0070e2:	4648      	mov	r0, r9
1a0070e4:	f7ff f802 	bl	1a0060ec <_free_r>
1a0070e8:	4648      	mov	r0, r9
1a0070ea:	f7ff fc1d 	bl	1a006928 <__malloc_unlock>
1a0070ee:	4638      	mov	r0, r7
1a0070f0:	b003      	add	sp, #12
1a0070f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0070f6:	4611      	mov	r1, r2
1a0070f8:	b003      	add	sp, #12
1a0070fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0070fe:	f7ff b8d1 	b.w	1a0062a4 <_malloc_r>
1a007102:	68ca      	ldr	r2, [r1, #12]
1a007104:	6889      	ldr	r1, [r1, #8]
1a007106:	4604      	mov	r4, r0
1a007108:	60ca      	str	r2, [r1, #12]
1a00710a:	6091      	str	r1, [r2, #8]
1a00710c:	e7a4      	b.n	1a007058 <_realloc_r+0x140>
1a00710e:	6841      	ldr	r1, [r0, #4]
1a007110:	f021 0103 	bic.w	r1, r1, #3
1a007114:	4421      	add	r1, r4
1a007116:	f105 0010 	add.w	r0, r5, #16
1a00711a:	4281      	cmp	r1, r0
1a00711c:	da5b      	bge.n	1a0071d6 <_realloc_r+0x2be>
1a00711e:	07db      	lsls	r3, r3, #31
1a007120:	d4c0      	bmi.n	1a0070a4 <_realloc_r+0x18c>
1a007122:	f856 3c08 	ldr.w	r3, [r6, #-8]
1a007126:	ebc3 0a08 	rsb	sl, r3, r8
1a00712a:	f8da 3004 	ldr.w	r3, [sl, #4]
1a00712e:	f023 0303 	bic.w	r3, r3, #3
1a007132:	eb01 0c03 	add.w	ip, r1, r3
1a007136:	4560      	cmp	r0, ip
1a007138:	f73f af66 	bgt.w	1a007008 <_realloc_r+0xf0>
1a00713c:	4657      	mov	r7, sl
1a00713e:	f8da 300c 	ldr.w	r3, [sl, #12]
1a007142:	f857 1f08 	ldr.w	r1, [r7, #8]!
1a007146:	1f22      	subs	r2, r4, #4
1a007148:	2a24      	cmp	r2, #36	; 0x24
1a00714a:	60cb      	str	r3, [r1, #12]
1a00714c:	6099      	str	r1, [r3, #8]
1a00714e:	f200 80b8 	bhi.w	1a0072c2 <_realloc_r+0x3aa>
1a007152:	2a13      	cmp	r2, #19
1a007154:	f240 80a9 	bls.w	1a0072aa <_realloc_r+0x392>
1a007158:	6833      	ldr	r3, [r6, #0]
1a00715a:	f8ca 3008 	str.w	r3, [sl, #8]
1a00715e:	6873      	ldr	r3, [r6, #4]
1a007160:	f8ca 300c 	str.w	r3, [sl, #12]
1a007164:	2a1b      	cmp	r2, #27
1a007166:	f200 80b5 	bhi.w	1a0072d4 <_realloc_r+0x3bc>
1a00716a:	3608      	adds	r6, #8
1a00716c:	f10a 0310 	add.w	r3, sl, #16
1a007170:	6832      	ldr	r2, [r6, #0]
1a007172:	601a      	str	r2, [r3, #0]
1a007174:	6872      	ldr	r2, [r6, #4]
1a007176:	605a      	str	r2, [r3, #4]
1a007178:	68b2      	ldr	r2, [r6, #8]
1a00717a:	609a      	str	r2, [r3, #8]
1a00717c:	eb0a 0205 	add.w	r2, sl, r5
1a007180:	ebc5 030c 	rsb	r3, r5, ip
1a007184:	f043 0301 	orr.w	r3, r3, #1
1a007188:	f8cb 2008 	str.w	r2, [fp, #8]
1a00718c:	6053      	str	r3, [r2, #4]
1a00718e:	f8da 3004 	ldr.w	r3, [sl, #4]
1a007192:	f003 0301 	and.w	r3, r3, #1
1a007196:	431d      	orrs	r5, r3
1a007198:	4648      	mov	r0, r9
1a00719a:	f8ca 5004 	str.w	r5, [sl, #4]
1a00719e:	f7ff fbc3 	bl	1a006928 <__malloc_unlock>
1a0071a2:	4638      	mov	r0, r7
1a0071a4:	e769      	b.n	1a00707a <_realloc_r+0x162>
1a0071a6:	6833      	ldr	r3, [r6, #0]
1a0071a8:	6003      	str	r3, [r0, #0]
1a0071aa:	6873      	ldr	r3, [r6, #4]
1a0071ac:	6043      	str	r3, [r0, #4]
1a0071ae:	2a1b      	cmp	r2, #27
1a0071b0:	d829      	bhi.n	1a007206 <_realloc_r+0x2ee>
1a0071b2:	f100 0308 	add.w	r3, r0, #8
1a0071b6:	f106 0208 	add.w	r2, r6, #8
1a0071ba:	e78b      	b.n	1a0070d4 <_realloc_r+0x1bc>
1a0071bc:	463b      	mov	r3, r7
1a0071be:	6832      	ldr	r2, [r6, #0]
1a0071c0:	601a      	str	r2, [r3, #0]
1a0071c2:	6872      	ldr	r2, [r6, #4]
1a0071c4:	605a      	str	r2, [r3, #4]
1a0071c6:	68b2      	ldr	r2, [r6, #8]
1a0071c8:	609a      	str	r2, [r3, #8]
1a0071ca:	463e      	mov	r6, r7
1a0071cc:	4674      	mov	r4, lr
1a0071ce:	f8da 3004 	ldr.w	r3, [sl, #4]
1a0071d2:	46d0      	mov	r8, sl
1a0071d4:	e740      	b.n	1a007058 <_realloc_r+0x140>
1a0071d6:	eb08 0205 	add.w	r2, r8, r5
1a0071da:	1b4b      	subs	r3, r1, r5
1a0071dc:	f043 0301 	orr.w	r3, r3, #1
1a0071e0:	f8cb 2008 	str.w	r2, [fp, #8]
1a0071e4:	6053      	str	r3, [r2, #4]
1a0071e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
1a0071ea:	f003 0301 	and.w	r3, r3, #1
1a0071ee:	431d      	orrs	r5, r3
1a0071f0:	4648      	mov	r0, r9
1a0071f2:	f846 5c04 	str.w	r5, [r6, #-4]
1a0071f6:	f7ff fb97 	bl	1a006928 <__malloc_unlock>
1a0071fa:	4630      	mov	r0, r6
1a0071fc:	e73d      	b.n	1a00707a <_realloc_r+0x162>
1a0071fe:	4631      	mov	r1, r6
1a007200:	f7ff fb2c 	bl	1a00685c <memmove>
1a007204:	e76c      	b.n	1a0070e0 <_realloc_r+0x1c8>
1a007206:	68b3      	ldr	r3, [r6, #8]
1a007208:	6083      	str	r3, [r0, #8]
1a00720a:	68f3      	ldr	r3, [r6, #12]
1a00720c:	60c3      	str	r3, [r0, #12]
1a00720e:	2a24      	cmp	r2, #36	; 0x24
1a007210:	d02c      	beq.n	1a00726c <_realloc_r+0x354>
1a007212:	f100 0310 	add.w	r3, r0, #16
1a007216:	f106 0210 	add.w	r2, r6, #16
1a00721a:	e75b      	b.n	1a0070d4 <_realloc_r+0x1bc>
1a00721c:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a007220:	f022 0203 	bic.w	r2, r2, #3
1a007224:	4414      	add	r4, r2
1a007226:	e717      	b.n	1a007058 <_realloc_r+0x140>
1a007228:	4631      	mov	r1, r6
1a00722a:	4638      	mov	r0, r7
1a00722c:	4674      	mov	r4, lr
1a00722e:	463e      	mov	r6, r7
1a007230:	f7ff fb14 	bl	1a00685c <memmove>
1a007234:	46d0      	mov	r8, sl
1a007236:	f8da 3004 	ldr.w	r3, [sl, #4]
1a00723a:	e70d      	b.n	1a007058 <_realloc_r+0x140>
1a00723c:	463a      	mov	r2, r7
1a00723e:	e700      	b.n	1a007042 <_realloc_r+0x12a>
1a007240:	4631      	mov	r1, r6
1a007242:	4638      	mov	r0, r7
1a007244:	461c      	mov	r4, r3
1a007246:	463e      	mov	r6, r7
1a007248:	f7ff fb08 	bl	1a00685c <memmove>
1a00724c:	46d0      	mov	r8, sl
1a00724e:	f8da 3004 	ldr.w	r3, [sl, #4]
1a007252:	e701      	b.n	1a007058 <_realloc_r+0x140>
1a007254:	68b3      	ldr	r3, [r6, #8]
1a007256:	f8ca 3010 	str.w	r3, [sl, #16]
1a00725a:	68f3      	ldr	r3, [r6, #12]
1a00725c:	f8ca 3014 	str.w	r3, [sl, #20]
1a007260:	2a24      	cmp	r2, #36	; 0x24
1a007262:	d018      	beq.n	1a007296 <_realloc_r+0x37e>
1a007264:	3610      	adds	r6, #16
1a007266:	f10a 0318 	add.w	r3, sl, #24
1a00726a:	e7a8      	b.n	1a0071be <_realloc_r+0x2a6>
1a00726c:	6933      	ldr	r3, [r6, #16]
1a00726e:	6103      	str	r3, [r0, #16]
1a007270:	6973      	ldr	r3, [r6, #20]
1a007272:	6143      	str	r3, [r0, #20]
1a007274:	f106 0218 	add.w	r2, r6, #24
1a007278:	f100 0318 	add.w	r3, r0, #24
1a00727c:	e72a      	b.n	1a0070d4 <_realloc_r+0x1bc>
1a00727e:	68b1      	ldr	r1, [r6, #8]
1a007280:	f8ca 1010 	str.w	r1, [sl, #16]
1a007284:	68f1      	ldr	r1, [r6, #12]
1a007286:	f8ca 1014 	str.w	r1, [sl, #20]
1a00728a:	2a24      	cmp	r2, #36	; 0x24
1a00728c:	d00f      	beq.n	1a0072ae <_realloc_r+0x396>
1a00728e:	3610      	adds	r6, #16
1a007290:	f10a 0218 	add.w	r2, sl, #24
1a007294:	e6d5      	b.n	1a007042 <_realloc_r+0x12a>
1a007296:	6933      	ldr	r3, [r6, #16]
1a007298:	f8ca 3018 	str.w	r3, [sl, #24]
1a00729c:	6973      	ldr	r3, [r6, #20]
1a00729e:	f8ca 301c 	str.w	r3, [sl, #28]
1a0072a2:	3618      	adds	r6, #24
1a0072a4:	f10a 0320 	add.w	r3, sl, #32
1a0072a8:	e789      	b.n	1a0071be <_realloc_r+0x2a6>
1a0072aa:	463b      	mov	r3, r7
1a0072ac:	e760      	b.n	1a007170 <_realloc_r+0x258>
1a0072ae:	6932      	ldr	r2, [r6, #16]
1a0072b0:	f8ca 2018 	str.w	r2, [sl, #24]
1a0072b4:	6972      	ldr	r2, [r6, #20]
1a0072b6:	f8ca 201c 	str.w	r2, [sl, #28]
1a0072ba:	3618      	adds	r6, #24
1a0072bc:	f10a 0220 	add.w	r2, sl, #32
1a0072c0:	e6bf      	b.n	1a007042 <_realloc_r+0x12a>
1a0072c2:	4631      	mov	r1, r6
1a0072c4:	4638      	mov	r0, r7
1a0072c6:	f8cd c004 	str.w	ip, [sp, #4]
1a0072ca:	f7ff fac7 	bl	1a00685c <memmove>
1a0072ce:	f8dd c004 	ldr.w	ip, [sp, #4]
1a0072d2:	e753      	b.n	1a00717c <_realloc_r+0x264>
1a0072d4:	68b3      	ldr	r3, [r6, #8]
1a0072d6:	f8ca 3010 	str.w	r3, [sl, #16]
1a0072da:	68f3      	ldr	r3, [r6, #12]
1a0072dc:	f8ca 3014 	str.w	r3, [sl, #20]
1a0072e0:	2a24      	cmp	r2, #36	; 0x24
1a0072e2:	d003      	beq.n	1a0072ec <_realloc_r+0x3d4>
1a0072e4:	3610      	adds	r6, #16
1a0072e6:	f10a 0318 	add.w	r3, sl, #24
1a0072ea:	e741      	b.n	1a007170 <_realloc_r+0x258>
1a0072ec:	6933      	ldr	r3, [r6, #16]
1a0072ee:	f8ca 3018 	str.w	r3, [sl, #24]
1a0072f2:	6973      	ldr	r3, [r6, #20]
1a0072f4:	f8ca 301c 	str.w	r3, [sl, #28]
1a0072f8:	3618      	adds	r6, #24
1a0072fa:	f10a 0320 	add.w	r3, sl, #32
1a0072fe:	e737      	b.n	1a007170 <_realloc_r+0x258>
1a007300:	10000534 	.word	0x10000534

1a007304 <__fpclassifyd>:
1a007304:	ec53 2b10 	vmov	r2, r3, d0
1a007308:	b410      	push	{r4}
1a00730a:	f033 4400 	bics.w	r4, r3, #2147483648	; 0x80000000
1a00730e:	d008      	beq.n	1a007322 <__fpclassifyd+0x1e>
1a007310:	4911      	ldr	r1, [pc, #68]	; (1a007358 <__fpclassifyd+0x54>)
1a007312:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
1a007316:	4288      	cmp	r0, r1
1a007318:	d808      	bhi.n	1a00732c <__fpclassifyd+0x28>
1a00731a:	2004      	movs	r0, #4
1a00731c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a007320:	4770      	bx	lr
1a007322:	b91a      	cbnz	r2, 1a00732c <__fpclassifyd+0x28>
1a007324:	2002      	movs	r0, #2
1a007326:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00732a:	4770      	bx	lr
1a00732c:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
1a007330:	4909      	ldr	r1, [pc, #36]	; (1a007358 <__fpclassifyd+0x54>)
1a007332:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
1a007336:	428b      	cmp	r3, r1
1a007338:	d9ef      	bls.n	1a00731a <__fpclassifyd+0x16>
1a00733a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
1a00733e:	d201      	bcs.n	1a007344 <__fpclassifyd+0x40>
1a007340:	2003      	movs	r0, #3
1a007342:	e7eb      	b.n	1a00731c <__fpclassifyd+0x18>
1a007344:	4b05      	ldr	r3, [pc, #20]	; (1a00735c <__fpclassifyd+0x58>)
1a007346:	429c      	cmp	r4, r3
1a007348:	d001      	beq.n	1a00734e <__fpclassifyd+0x4a>
1a00734a:	2000      	movs	r0, #0
1a00734c:	e7e6      	b.n	1a00731c <__fpclassifyd+0x18>
1a00734e:	fab2 f082 	clz	r0, r2
1a007352:	0940      	lsrs	r0, r0, #5
1a007354:	e7e2      	b.n	1a00731c <__fpclassifyd+0x18>
1a007356:	bf00      	nop
1a007358:	7fdfffff 	.word	0x7fdfffff
1a00735c:	7ff00000 	.word	0x7ff00000

1a007360 <__ssprint_r>:
1a007360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a007364:	6893      	ldr	r3, [r2, #8]
1a007366:	f8d2 8000 	ldr.w	r8, [r2]
1a00736a:	b083      	sub	sp, #12
1a00736c:	4691      	mov	r9, r2
1a00736e:	2b00      	cmp	r3, #0
1a007370:	d072      	beq.n	1a007458 <__ssprint_r+0xf8>
1a007372:	4607      	mov	r7, r0
1a007374:	f04f 0b00 	mov.w	fp, #0
1a007378:	6808      	ldr	r0, [r1, #0]
1a00737a:	688b      	ldr	r3, [r1, #8]
1a00737c:	460d      	mov	r5, r1
1a00737e:	465c      	mov	r4, fp
1a007380:	2c00      	cmp	r4, #0
1a007382:	d045      	beq.n	1a007410 <__ssprint_r+0xb0>
1a007384:	429c      	cmp	r4, r3
1a007386:	461e      	mov	r6, r3
1a007388:	469a      	mov	sl, r3
1a00738a:	d348      	bcc.n	1a00741e <__ssprint_r+0xbe>
1a00738c:	89ab      	ldrh	r3, [r5, #12]
1a00738e:	f413 6f90 	tst.w	r3, #1152	; 0x480
1a007392:	d02d      	beq.n	1a0073f0 <__ssprint_r+0x90>
1a007394:	696e      	ldr	r6, [r5, #20]
1a007396:	6929      	ldr	r1, [r5, #16]
1a007398:	eb06 0646 	add.w	r6, r6, r6, lsl #1
1a00739c:	ebc1 0a00 	rsb	sl, r1, r0
1a0073a0:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
1a0073a4:	1c60      	adds	r0, r4, #1
1a0073a6:	1076      	asrs	r6, r6, #1
1a0073a8:	4450      	add	r0, sl
1a0073aa:	4286      	cmp	r6, r0
1a0073ac:	4632      	mov	r2, r6
1a0073ae:	bf3c      	itt	cc
1a0073b0:	4606      	movcc	r6, r0
1a0073b2:	4632      	movcc	r2, r6
1a0073b4:	055b      	lsls	r3, r3, #21
1a0073b6:	d535      	bpl.n	1a007424 <__ssprint_r+0xc4>
1a0073b8:	4611      	mov	r1, r2
1a0073ba:	4638      	mov	r0, r7
1a0073bc:	f7fe ff72 	bl	1a0062a4 <_malloc_r>
1a0073c0:	2800      	cmp	r0, #0
1a0073c2:	d039      	beq.n	1a007438 <__ssprint_r+0xd8>
1a0073c4:	4652      	mov	r2, sl
1a0073c6:	6929      	ldr	r1, [r5, #16]
1a0073c8:	9001      	str	r0, [sp, #4]
1a0073ca:	f7fc fab1 	bl	1a003930 <memcpy>
1a0073ce:	89aa      	ldrh	r2, [r5, #12]
1a0073d0:	9b01      	ldr	r3, [sp, #4]
1a0073d2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
1a0073d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a0073da:	81aa      	strh	r2, [r5, #12]
1a0073dc:	ebca 0206 	rsb	r2, sl, r6
1a0073e0:	eb03 000a 	add.w	r0, r3, sl
1a0073e4:	616e      	str	r6, [r5, #20]
1a0073e6:	612b      	str	r3, [r5, #16]
1a0073e8:	6028      	str	r0, [r5, #0]
1a0073ea:	60aa      	str	r2, [r5, #8]
1a0073ec:	4626      	mov	r6, r4
1a0073ee:	46a2      	mov	sl, r4
1a0073f0:	4652      	mov	r2, sl
1a0073f2:	4659      	mov	r1, fp
1a0073f4:	f7ff fa32 	bl	1a00685c <memmove>
1a0073f8:	f8d9 2008 	ldr.w	r2, [r9, #8]
1a0073fc:	68ab      	ldr	r3, [r5, #8]
1a0073fe:	6828      	ldr	r0, [r5, #0]
1a007400:	1b9b      	subs	r3, r3, r6
1a007402:	4450      	add	r0, sl
1a007404:	1b14      	subs	r4, r2, r4
1a007406:	60ab      	str	r3, [r5, #8]
1a007408:	6028      	str	r0, [r5, #0]
1a00740a:	f8c9 4008 	str.w	r4, [r9, #8]
1a00740e:	b31c      	cbz	r4, 1a007458 <__ssprint_r+0xf8>
1a007410:	f8d8 b000 	ldr.w	fp, [r8]
1a007414:	f8d8 4004 	ldr.w	r4, [r8, #4]
1a007418:	f108 0808 	add.w	r8, r8, #8
1a00741c:	e7b0      	b.n	1a007380 <__ssprint_r+0x20>
1a00741e:	4626      	mov	r6, r4
1a007420:	46a2      	mov	sl, r4
1a007422:	e7e5      	b.n	1a0073f0 <__ssprint_r+0x90>
1a007424:	4638      	mov	r0, r7
1a007426:	f7ff fd77 	bl	1a006f18 <_realloc_r>
1a00742a:	4603      	mov	r3, r0
1a00742c:	2800      	cmp	r0, #0
1a00742e:	d1d5      	bne.n	1a0073dc <__ssprint_r+0x7c>
1a007430:	4638      	mov	r0, r7
1a007432:	6929      	ldr	r1, [r5, #16]
1a007434:	f7fe fe5a 	bl	1a0060ec <_free_r>
1a007438:	230c      	movs	r3, #12
1a00743a:	603b      	str	r3, [r7, #0]
1a00743c:	89ab      	ldrh	r3, [r5, #12]
1a00743e:	2200      	movs	r2, #0
1a007440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a007444:	f04f 30ff 	mov.w	r0, #4294967295
1a007448:	81ab      	strh	r3, [r5, #12]
1a00744a:	f8c9 2008 	str.w	r2, [r9, #8]
1a00744e:	f8c9 2004 	str.w	r2, [r9, #4]
1a007452:	b003      	add	sp, #12
1a007454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007458:	2000      	movs	r0, #0
1a00745a:	f8c9 0004 	str.w	r0, [r9, #4]
1a00745e:	b003      	add	sp, #12
1a007460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a007464 <_calloc_r>:
1a007464:	b510      	push	{r4, lr}
1a007466:	fb02 f101 	mul.w	r1, r2, r1
1a00746a:	f7fe ff1b 	bl	1a0062a4 <_malloc_r>
1a00746e:	4604      	mov	r4, r0
1a007470:	b168      	cbz	r0, 1a00748e <_calloc_r+0x2a>
1a007472:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a007476:	f022 0203 	bic.w	r2, r2, #3
1a00747a:	3a04      	subs	r2, #4
1a00747c:	2a24      	cmp	r2, #36	; 0x24
1a00747e:	d818      	bhi.n	1a0074b2 <_calloc_r+0x4e>
1a007480:	2a13      	cmp	r2, #19
1a007482:	d806      	bhi.n	1a007492 <_calloc_r+0x2e>
1a007484:	4603      	mov	r3, r0
1a007486:	2200      	movs	r2, #0
1a007488:	601a      	str	r2, [r3, #0]
1a00748a:	605a      	str	r2, [r3, #4]
1a00748c:	609a      	str	r2, [r3, #8]
1a00748e:	4620      	mov	r0, r4
1a007490:	bd10      	pop	{r4, pc}
1a007492:	2300      	movs	r3, #0
1a007494:	2a1b      	cmp	r2, #27
1a007496:	6003      	str	r3, [r0, #0]
1a007498:	6043      	str	r3, [r0, #4]
1a00749a:	d90f      	bls.n	1a0074bc <_calloc_r+0x58>
1a00749c:	2a24      	cmp	r2, #36	; 0x24
1a00749e:	6083      	str	r3, [r0, #8]
1a0074a0:	60c3      	str	r3, [r0, #12]
1a0074a2:	bf05      	ittet	eq
1a0074a4:	6103      	streq	r3, [r0, #16]
1a0074a6:	6143      	streq	r3, [r0, #20]
1a0074a8:	f100 0310 	addne.w	r3, r0, #16
1a0074ac:	f100 0318 	addeq.w	r3, r0, #24
1a0074b0:	e7e9      	b.n	1a007486 <_calloc_r+0x22>
1a0074b2:	2100      	movs	r1, #0
1a0074b4:	f7fc fad6 	bl	1a003a64 <memset>
1a0074b8:	4620      	mov	r0, r4
1a0074ba:	bd10      	pop	{r4, pc}
1a0074bc:	f100 0308 	add.w	r3, r0, #8
1a0074c0:	e7e1      	b.n	1a007486 <_calloc_r+0x22>
1a0074c2:	bf00      	nop

1a0074c4 <__gedf2>:
1a0074c4:	f04f 3cff 	mov.w	ip, #4294967295
1a0074c8:	e006      	b.n	1a0074d8 <__cmpdf2+0x4>
1a0074ca:	bf00      	nop

1a0074cc <__ledf2>:
1a0074cc:	f04f 0c01 	mov.w	ip, #1
1a0074d0:	e002      	b.n	1a0074d8 <__cmpdf2+0x4>
1a0074d2:	bf00      	nop

1a0074d4 <__cmpdf2>:
1a0074d4:	f04f 0c01 	mov.w	ip, #1
1a0074d8:	f84d cd04 	str.w	ip, [sp, #-4]!
1a0074dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a0074e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a0074e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a0074e8:	bf18      	it	ne
1a0074ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a0074ee:	d01b      	beq.n	1a007528 <__cmpdf2+0x54>
1a0074f0:	b001      	add	sp, #4
1a0074f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a0074f6:	bf0c      	ite	eq
1a0074f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a0074fc:	ea91 0f03 	teqne	r1, r3
1a007500:	bf02      	ittt	eq
1a007502:	ea90 0f02 	teqeq	r0, r2
1a007506:	2000      	moveq	r0, #0
1a007508:	4770      	bxeq	lr
1a00750a:	f110 0f00 	cmn.w	r0, #0
1a00750e:	ea91 0f03 	teq	r1, r3
1a007512:	bf58      	it	pl
1a007514:	4299      	cmppl	r1, r3
1a007516:	bf08      	it	eq
1a007518:	4290      	cmpeq	r0, r2
1a00751a:	bf2c      	ite	cs
1a00751c:	17d8      	asrcs	r0, r3, #31
1a00751e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a007522:	f040 0001 	orr.w	r0, r0, #1
1a007526:	4770      	bx	lr
1a007528:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a00752c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a007530:	d102      	bne.n	1a007538 <__cmpdf2+0x64>
1a007532:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a007536:	d107      	bne.n	1a007548 <__cmpdf2+0x74>
1a007538:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a00753c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a007540:	d1d6      	bne.n	1a0074f0 <__cmpdf2+0x1c>
1a007542:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a007546:	d0d3      	beq.n	1a0074f0 <__cmpdf2+0x1c>
1a007548:	f85d 0b04 	ldr.w	r0, [sp], #4
1a00754c:	4770      	bx	lr
1a00754e:	bf00      	nop

1a007550 <__aeabi_cdrcmple>:
1a007550:	4684      	mov	ip, r0
1a007552:	4610      	mov	r0, r2
1a007554:	4662      	mov	r2, ip
1a007556:	468c      	mov	ip, r1
1a007558:	4619      	mov	r1, r3
1a00755a:	4663      	mov	r3, ip
1a00755c:	e000      	b.n	1a007560 <__aeabi_cdcmpeq>
1a00755e:	bf00      	nop

1a007560 <__aeabi_cdcmpeq>:
1a007560:	b501      	push	{r0, lr}
1a007562:	f7ff ffb7 	bl	1a0074d4 <__cmpdf2>
1a007566:	2800      	cmp	r0, #0
1a007568:	bf48      	it	mi
1a00756a:	f110 0f00 	cmnmi.w	r0, #0
1a00756e:	bd01      	pop	{r0, pc}

1a007570 <__aeabi_dcmpeq>:
1a007570:	f84d ed08 	str.w	lr, [sp, #-8]!
1a007574:	f7ff fff4 	bl	1a007560 <__aeabi_cdcmpeq>
1a007578:	bf0c      	ite	eq
1a00757a:	2001      	moveq	r0, #1
1a00757c:	2000      	movne	r0, #0
1a00757e:	f85d fb08 	ldr.w	pc, [sp], #8
1a007582:	bf00      	nop

1a007584 <__aeabi_dcmplt>:
1a007584:	f84d ed08 	str.w	lr, [sp, #-8]!
1a007588:	f7ff ffea 	bl	1a007560 <__aeabi_cdcmpeq>
1a00758c:	bf34      	ite	cc
1a00758e:	2001      	movcc	r0, #1
1a007590:	2000      	movcs	r0, #0
1a007592:	f85d fb08 	ldr.w	pc, [sp], #8
1a007596:	bf00      	nop

1a007598 <__aeabi_dcmple>:
1a007598:	f84d ed08 	str.w	lr, [sp, #-8]!
1a00759c:	f7ff ffe0 	bl	1a007560 <__aeabi_cdcmpeq>
1a0075a0:	bf94      	ite	ls
1a0075a2:	2001      	movls	r0, #1
1a0075a4:	2000      	movhi	r0, #0
1a0075a6:	f85d fb08 	ldr.w	pc, [sp], #8
1a0075aa:	bf00      	nop

1a0075ac <__aeabi_dcmpge>:
1a0075ac:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0075b0:	f7ff ffce 	bl	1a007550 <__aeabi_cdrcmple>
1a0075b4:	bf94      	ite	ls
1a0075b6:	2001      	movls	r0, #1
1a0075b8:	2000      	movhi	r0, #0
1a0075ba:	f85d fb08 	ldr.w	pc, [sp], #8
1a0075be:	bf00      	nop

1a0075c0 <__aeabi_dcmpgt>:
1a0075c0:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0075c4:	f7ff ffc4 	bl	1a007550 <__aeabi_cdrcmple>
1a0075c8:	bf34      	ite	cc
1a0075ca:	2001      	movcc	r0, #1
1a0075cc:	2000      	movcs	r0, #0
1a0075ce:	f85d fb08 	ldr.w	pc, [sp], #8
1a0075d2:	bf00      	nop

1a0075d4 <__aeabi_d2iz>:
1a0075d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a0075d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a0075dc:	d215      	bcs.n	1a00760a <__aeabi_d2iz+0x36>
1a0075de:	d511      	bpl.n	1a007604 <__aeabi_d2iz+0x30>
1a0075e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a0075e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a0075e8:	d912      	bls.n	1a007610 <__aeabi_d2iz+0x3c>
1a0075ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a0075ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a0075f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a0075f6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a0075fa:	fa23 f002 	lsr.w	r0, r3, r2
1a0075fe:	bf18      	it	ne
1a007600:	4240      	negne	r0, r0
1a007602:	4770      	bx	lr
1a007604:	f04f 0000 	mov.w	r0, #0
1a007608:	4770      	bx	lr
1a00760a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a00760e:	d105      	bne.n	1a00761c <__aeabi_d2iz+0x48>
1a007610:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a007614:	bf08      	it	eq
1a007616:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a00761a:	4770      	bx	lr
1a00761c:	f04f 0000 	mov.w	r0, #0
1a007620:	4770      	bx	lr
1a007622:	bf00      	nop
1a007624:	0a0d5441 	.word	0x0a0d5441
1a007628:	00000000 	.word	0x00000000
1a00762c:	0a0d4b4f 	.word	0x0a0d4b4f
1a007630:	00000000 	.word	0x00000000
1a007634:	54524155 	.word	0x54524155
1a007638:	554c425f 	.word	0x554c425f
1a00763c:	4f4f5445 	.word	0x4f4f5445
1a007640:	70204854 	.word	0x70204854
1a007644:	20617261 	.word	0x20617261
1a007648:	75646f6d 	.word	0x75646f6d
1a00764c:	42206f6c 	.word	0x42206f6c
1a007650:	7465756c 	.word	0x7465756c
1a007654:	68746f6f 	.word	0x68746f6f
1a007658:	6e6f6320 	.word	0x6e6f6320
1a00765c:	75676966 	.word	0x75676966
1a007660:	61646172 	.word	0x61646172
1a007664:	0000002e 	.word	0x0000002e
1a007668:	54524155 	.word	0x54524155
1a00766c:	2043505f 	.word	0x2043505f
1a007670:	666e6f63 	.word	0x666e6f63
1a007674:	72756769 	.word	0x72756769
1a007678:	2e616461 	.word	0x2e616461
1a00767c:	00000000 	.word	0x00000000
1a007680:	74736554 	.word	0x74736554
1a007684:	206f7465 	.word	0x206f7465
1a007688:	65206973 	.word	0x65206973
1a00768c:	6f6d206c 	.word	0x6f6d206c
1a007690:	6f6c7564 	.word	0x6f6c7564
1a007694:	74736520 	.word	0x74736520
1a007698:	6f632061 	.word	0x6f632061
1a00769c:	7463656e 	.word	0x7463656e
1a0076a0:	206f6461 	.word	0x206f6461
1a0076a4:	69766e65 	.word	0x69766e65
1a0076a8:	6f646e61 	.word	0x6f646e61
1a0076ac:	5441203a 	.word	0x5441203a
1a0076b0:	00000a0d 	.word	0x00000a0d
1a0076b4:	75646f4d 	.word	0x75646f4d
1a0076b8:	63206f6c 	.word	0x63206f6c
1a0076bc:	63656e6f 	.word	0x63656e6f
1a0076c0:	6f646174 	.word	0x6f646174
1a0076c4:	726f6320 	.word	0x726f6320
1a0076c8:	74636572 	.word	0x74636572
1a0076cc:	6e656d61 	.word	0x6e656d61
1a0076d0:	002e6574 	.word	0x002e6574
1a0076d4:	63696e49 	.word	0x63696e49
1a0076d8:	696c6169 	.word	0x696c6169
1a0076dc:	646e617a 	.word	0x646e617a
1a0076e0:	4d49206f 	.word	0x4d49206f
1a0076e4:	504d2055 	.word	0x504d2055
1a0076e8:	35323955 	.word	0x35323955
1a0076ec:	2e2e2e30 	.word	0x2e2e2e30
1a0076f0:	00000a0d 	.word	0x00000a0d
1a0076f4:	20554d49 	.word	0x20554d49
1a0076f8:	3955504d 	.word	0x3955504d
1a0076fc:	20303532 	.word	0x20303532
1a007700:	69206f6e 	.word	0x69206f6e
1a007704:	6963696e 	.word	0x6963696e
1a007708:	7a696c61 	.word	0x7a696c61
1a00770c:	2c6f6461 	.word	0x2c6f6461
1a007710:	65686320 	.word	0x65686320
1a007714:	65657571 	.word	0x65657571
1a007718:	73616c20 	.word	0x73616c20
1a00771c:	6e6f6320 	.word	0x6e6f6320
1a007720:	6f697865 	.word	0x6f697865
1a007724:	3a73656e 	.word	0x3a73656e
1a007728:	0a0d0a0d 	.word	0x0a0d0a0d
1a00772c:	00000000 	.word	0x00000000
1a007730:	3955504d 	.word	0x3955504d
1a007734:	20303532 	.word	0x20303532
1a007738:	2d2d2d2d 	.word	0x2d2d2d2d
1a00773c:	55444520 	.word	0x55444520
1a007740:	4149432d 	.word	0x4149432d
1a007744:	584e2d41 	.word	0x584e2d41
1a007748:	0d0a0d50 	.word	0x0d0a0d50
1a00774c:	0000000a 	.word	0x0000000a
1a007750:	20202020 	.word	0x20202020
1a007754:	20434356 	.word	0x20434356
1a007758:	2d2d2d2d 	.word	0x2d2d2d2d
1a00775c:	332e3320 	.word	0x332e3320
1a007760:	000a0d56 	.word	0x000a0d56
1a007764:	20202020 	.word	0x20202020
1a007768:	20444e47 	.word	0x20444e47
1a00776c:	2d2d2d2d 	.word	0x2d2d2d2d
1a007770:	444e4720 	.word	0x444e4720
1a007774:	00000a0d 	.word	0x00000a0d
1a007778:	20202020 	.word	0x20202020
1a00777c:	204c4353 	.word	0x204c4353
1a007780:	2d2d2d2d 	.word	0x2d2d2d2d
1a007784:	4c435320 	.word	0x4c435320
1a007788:	00000a0d 	.word	0x00000a0d
1a00778c:	20202020 	.word	0x20202020
1a007790:	20414453 	.word	0x20414453
1a007794:	2d2d2d2d 	.word	0x2d2d2d2d
1a007798:	41445320 	.word	0x41445320
1a00779c:	00000a0d 	.word	0x00000a0d
1a0077a0:	20202020 	.word	0x20202020
1a0077a4:	20304441 	.word	0x20304441
1a0077a8:	2d2d2d2d 	.word	0x2d2d2d2d
1a0077ac:	444e4720 	.word	0x444e4720
1a0077b0:	0a0d0a0d 	.word	0x0a0d0a0d
1a0077b4:	00000000 	.word	0x00000000
1a0077b8:	64206553 	.word	0x64206553
1a0077bc:	65697465 	.word	0x65697465
1a0077c0:	6520656e 	.word	0x6520656e
1a0077c4:	7270206c 	.word	0x7270206c
1a0077c8:	6172676f 	.word	0x6172676f
1a0077cc:	0d2e616d 	.word	0x0d2e616d
1a0077d0:	0000000a 	.word	0x0000000a
1a0077d4:	20554d49 	.word	0x20554d49
1a0077d8:	3955504d 	.word	0x3955504d
1a0077dc:	20303532 	.word	0x20303532
1a0077e0:	63696e69 	.word	0x63696e69
1a0077e4:	696c6169 	.word	0x696c6169
1a0077e8:	6f64617a 	.word	0x6f64617a
1a0077ec:	726f6320 	.word	0x726f6320
1a0077f0:	74636572 	.word	0x74636572
1a0077f4:	6e656d61 	.word	0x6e656d61
1a0077f8:	0d2e6574 	.word	0x0d2e6574
1a0077fc:	000a0d0a 	.word	0x000a0d0a
1a007800:	6f726947 	.word	0x6f726947
1a007804:	706f6373 	.word	0x706f6373
1a007808:	20203a6f 	.word	0x20203a6f
1a00780c:	20202020 	.word	0x20202020
1a007810:	2c662528 	.word	0x2c662528
1a007814:	2c662520 	.word	0x2c662520
1a007818:	29662520 	.word	0x29662520
1a00781c:	5b202020 	.word	0x5b202020
1a007820:	2f646172 	.word	0x2f646172
1a007824:	0a0d5d73 	.word	0x0a0d5d73
1a007828:	00000000 	.word	0x00000000
1a00782c:	6c656341 	.word	0x6c656341
1a007830:	6d6f7265 	.word	0x6d6f7265
1a007834:	6f727465 	.word	0x6f727465
1a007838:	2020203a 	.word	0x2020203a
1a00783c:	2c662528 	.word	0x2c662528
1a007840:	2c662520 	.word	0x2c662520
1a007844:	29662520 	.word	0x29662520
1a007848:	5b202020 	.word	0x5b202020
1a00784c:	32732f6d 	.word	0x32732f6d
1a007850:	000a0d5d 	.word	0x000a0d5d
1a007854:	6e67614d 	.word	0x6e67614d
1a007858:	6d6f7465 	.word	0x6d6f7465
1a00785c:	6f727465 	.word	0x6f727465
1a007860:	2020203a 	.word	0x2020203a
1a007864:	2c662528 	.word	0x2c662528
1a007868:	2c662520 	.word	0x2c662520
1a00786c:	29662520 	.word	0x29662520
1a007870:	5b202020 	.word	0x5b202020
1a007874:	0d5d5475 	.word	0x0d5d5475
1a007878:	0000000a 	.word	0x0000000a
1a00787c:	706d6554 	.word	0x706d6554
1a007880:	74617265 	.word	0x74617265
1a007884:	3a617275 	.word	0x3a617275
1a007888:	20202020 	.word	0x20202020
1a00788c:	20206625 	.word	0x20206625
1a007890:	5d435b20 	.word	0x5d435b20
1a007894:	0a0d0a0d 	.word	0x0a0d0a0d
1a007898:	00000000 	.word	0x00000000
1a00789c:	482b5441 	.word	0x482b5441
1a0078a0:	0d504c45 	.word	0x0d504c45
1a0078a4:	0000000a 	.word	0x0000000a

1a0078a8 <ultrasonicSensorsIrqMap>:
1a0078a8:	00020100                                ....

1a0078ac <gpioPinsInit>:
1a0078ac:	02000104 00050701 05010d03 04080100     ................
1a0078bc:	02020002 02000304 00000403 04070002     ................
1a0078cc:	030c0300 09050402 05040103 04030208     ................
1a0078dc:	04020305 06040504 0802000c 03000b06     ................
1a0078ec:	00090607 07060503 060f0504 03030004     ................
1a0078fc:	02000404 00050404 06040502 04060200     ................
1a00790c:	0c050408 05040a04 0003010e 14010a00     ................
1a00791c:	010f0000 0d000012 00001101 0010010c     ................
1a00792c:	07070300 000f0300 01000001 00000000     ................
1a00793c:	000a0600 08060603 06100504 04030005     ................
1a00794c:	03000106 04090400 04010d05 010b0000     ................
1a00795c:	0200000f 00000001 00010104 02010800     ................
1a00796c:	01090000 09010006 05040002 04010200     ................
1a00797c:	02020105 02020504 0e00000a 01000b02     ................
1a00798c:	000c020b 00040c01 04000200 01020001     ................
1a00799c:	02000204 00030402 03070302 070b0300     ................
1a0079ac:	0c030004 03000507 0006070d 01020e03     ................
1a0079bc:	04010504 06020006 02000504 00040405     ................
1a0079cc:	08040402 040c0504 0d050409 05040a04     ................
1a0079dc:	0005010e 00000801                       ........

1a0079e4 <lpcUarts>:
1a0079e4:	40081000 06020406 00180205 40081000     ...@...........@
1a0079f4:	09070509 00180706 40082000 00000000     ......... .@....
1a007a04:	00190000 400c1000 07060107 001a0602     .......@........
1a007a14:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a007a24:	02020302 001b0204                       ........

1a007a2c <GpioPorts>:
1a007a2c:	03030003 0f050403 05031005 07030603     ................
1a007a3c:	00000802                                ....

1a007a40 <OscRateIn>:
1a007a40:	00b71b00                                ....

1a007a44 <ExtRateIn>:
1a007a44:	00000000                                ....

1a007a48 <GpioButtons>:
1a007a48:	08000400 09010900                       ........

1a007a50 <GpioLeds>:
1a007a50:	01050005 0e000205 0c010b01              ............

1a007a5c <InitClkStates>:
1a007a5c:	00010308 00010307 01010f01              ............

1a007a68 <pinmuxing>:
1a007a68:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a007a78:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a007a88:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a007a98:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a007aa8:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a007ab8:	00d50301 00d50401 00160107 00560207     ..............V.
1a007ac8:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a007ad8:	00570206 00f30f01 00f71001 00f31101     ..W.............
1a007ae8:	00b31201 00f01301 00b31401 00b60707     ................
1a007af8:	00f20000 00b60100                       ........

1a007b00 <UART_BClock>:
1a007b00:	01a201c2 01620182                       ......b.

1a007b08 <UART_PClock>:
1a007b08:	00820081 00a200a1 08040201 0f0f0f03     ................
1a007b18:	000000ff                                ....

1a007b1c <periph_to_base>:
1a007b1c:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a007b2c:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a007b3c:	000100e0 01000100 01200003 00060120     .......... . ...
1a007b4c:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a007b5c:	01820013 00120182 01a201a2 01c20011     ................
1a007b6c:	001001c2 01e201e2 0202000f 000e0202     ................
1a007b7c:	02220222 0223000d 001c0223              "."...#.#...

1a007b88 <InitClkStates>:
1a007b88:	00010100 00010909 0001090a 01010701     ................
1a007b98:	00010902 00010906 0101090c 0001090d     ................
1a007ba8:	0001090e 0001090f 00010910 00010911     ................
1a007bb8:	00010912 00010913 00011114 00011119     ................
1a007bc8:	0001111a 0001111b                       ........

1a007bd0 <zeroes.6916>:
1a007bd0:	30303030 30303030 30303030 30303030     0000000000000000
1a007be0:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
1a007bf0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
1a007c00:	00000000 33323130 37363534 62613938     ....0123456789ab
1a007c10:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
1a007c20:	00000030                                0...

1a007c24 <blanks.6915>:
1a007c24:	20202020 20202020 20202020 20202020                     
1a007c34:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
1a007c44:	00000043 49534f50 00000058              C...POSIX...

1a007c50 <p05.5296>:
1a007c50:	00000005 00000019 0000007d 00000000     ........}.......

1a007c60 <__mprec_tens>:
1a007c60:	00000000 3ff00000 00000000 40240000     .......?......$@
1a007c70:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
1a007c80:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
1a007c90:	00000000 412e8480 00000000 416312d0     .......A......cA
1a007ca0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
1a007cb0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
1a007cc0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
1a007cd0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
1a007ce0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
1a007cf0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
1a007d00:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
1a007d10:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
1a007d20:	79d99db4 44ea7843                       ...yCx.D

1a007d28 <__mprec_bigtens>:
1a007d28:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
1a007d38:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
1a007d48:	7f73bf3c 75154fdd                       <.s..O.u
