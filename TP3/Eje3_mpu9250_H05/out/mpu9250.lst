
examples/c/sapi/bare_metal/i2c/IMUs/mpu9250/out/mpu9250.elf:     file format elf32-littlearm
examples/c/sapi/bare_metal/i2c/IMUs/mpu9250/out/mpu9250.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0027cd

Program Header:
0x70000001 off    0x00010420 vaddr 0x1a008420 paddr 0x1a008420 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**15
         filesz 0x000000b4 memsz 0x00000b3c flags rw-
    LOAD off    0x00008000 vaddr 0x1a000000 paddr 0x1a000000 align 2**15
         filesz 0x00008428 memsz 0x00008428 flags r-x
    LOAD off    0x00018000 vaddr 0x10000000 paddr 0x1a008428 align 2**15
         filesz 0x0000096c memsz 0x0000096c flags rw-
private flags = 5000402: [Version5 EABI] [hard-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008420  1a000000  1a000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000096c  10000000  1a008428  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  0001896c  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  0001896c  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  0001896c  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  0001896c  2**2
                  CONTENTS
  6 .bss          000001cc  10000970  10000970  00000970  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  0001896c  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  0001896c  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  0001896c  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  0001896c  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a008420  1a008420  00010420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  0001896c  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  0001896c  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  0001896c  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  0001896c  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  0001896c  2**2
                  CONTENTS
 17 .noinit       00000000  10000b3c  10000b3c  0001896c  2**2
                  CONTENTS
 18 .debug_info   00016705  00000000  00000000  0001896c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00003ad4  00000000  00000000  0002f071  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    00007fc4  00000000  00000000  00032b45  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000b68  00000000  00000000  0003ab09  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000a38  00000000  00000000  0003b671  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000bb1d  00000000  00000000  0003c0a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   0000ec45  00000000  00000000  00047bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0001f86a  00000000  00000000  0005680b  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      00000070  00000000  00000000  00076075  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000037  00000000  00000000  000760e5  2**0
                  CONTENTS, READONLY
 28 .debug_frame  000029bc  00000000  00000000  0007611c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000970 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a008420 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000b3c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a0007a0 l     F .text	000000ac uartProcessIRQ
10000978 l     O .bss	00000004 rxIsrCallbackUART0
1000097c l     O .bss	00000004 txIsrCallbackUART0
10000980 l     O .bss	00000004 txIsrCallbackUART2
10000984 l     O .bss	00000004 txIsrCallbackUART3
1a0080b0 l     O .text	00000048 lpcUarts
10000988 l     O .bss	00000004 rxIsrCallbackUART2
1000098c l     O .bss	00000004 rxIsrCallbackUART3
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 mpu9250.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a000474 l     F .text	00000010 clearInterrupt
1a000484 l     F .text	00000060 serveInterrupt
10000004 l     O .data	00000048 ultrasonicSensors
1a007f74 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a000508 l     F .text	0000002c gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_imu_mpu9250.c
1a000864 l     F .text	00000080 mpu9250InitializeControlStructure
1a0008e4 l     F .text	00000034 mpu9250ReadRegisters
1a000918 l     F .text	00000020 mpu9250WhoAmI
1a000938 l     F .text	0000004c mpu9250WriteRegister
1a000984 l     F .text	00000058 mpu9250ReadAK8963Registers
1a0009dc l     F .text	00000020 mpu9250WhoAmIAK8963
1a0009fc l     F .text	00000070 mpu9250WriteAK8963Register
1a000a6c l     F .text	00000090 mpu9250SetGyroRange
1a000afc l     F .text	000000ec mpu9250SetDlpfBandwidth
1a000be8 l     F .text	000000ac mpu9250SetSrd
1a000f78 l     F .text	00000150 mpu9250CalibrateGyro
10000990 l     O .bss	00000158 control
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000050 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_i2c.c
1a0013dc l     F .text	00000030 i2cHardwareInit
1a00140c l     F .text	0000003c i2cHardwareRead
1a001448 l     F .text	0000003c i2cHardwareWrite
00000000 l    df *ABS*	00000000 sapi_timer.c
1a0014dc l     F .text	00000002 errorOcurred
1a0014e0 l     F .text	00000002 doNothing
10000054 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 board.c
1a0016d4 l     F .text	00000040 Board_LED_Init
1a001714 l     F .text	0000003c Board_TEC_Init
1a001750 l     F .text	0000003c Board_GPIO_Init
1a00178c l     F .text	00000038 Board_SPI_Init
1a0017c4 l     F .text	00000024 Board_I2C_Init
1a0017e8 l     F .text	00000030 Board_ADC_Init
1a0080f8 l     O .text	00000012 GpioPorts
1a008114 l     O .text	00000008 GpioButtons
1a00811c l     O .text	0000000c GpioLeds
00000000 l    df *ABS*	00000000 system.c
10000ae8 l     O .bss	00000004 heap_end.11148
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a008128 l     O .text	0000000c InitClkStates
1a008134 l     O .text	00000098 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a001a40 l     F .text	0000002c Chip_UART_GetIndex
1a0081cc l     O .text	00000008 UART_BClock
1a0081d4 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a001ba4 l     F .text	00000014 Chip_ADC_GetClockIndex
1a001bb8 l     F .text	00000030 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a001c7c l     F .text	000000a8 pll_calc_divs
1a001d24 l     F .text	00000104 pll_get_frac
1a001e28 l     F .text	00000048 Chip_Clock_FindBaseClock
1a002094 l     F .text	00000022 Chip_Clock_GetDivRate
10000aec l     O .bss	00000008 audio_usb_pll_freq
1a0081e8 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a008254 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 i2cm_18xx_43xx.c
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0024cc l     F .text	00000014 Chip_SSP_GetClockIndex
1a0024e0 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000094 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
1a004d60 l     F .text	00000076 __sbprintf
1a00829c l     O .text	00000010 zeroes.6931
1a0082f0 l     O .text	00000010 blanks.6930
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
1a004e9c l     F .text	0000012c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a005ffc l     F .text	000000f0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
100004fc l     O .data	00000038 lconv
10000534 l     O .data	00000020 lc_ctype_charset
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mprec.c
1a008320 l     O .text	0000000c p05.5296
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
1a0078f4 l     F .text	00000078 __sprint_r.part.0
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 impure.c
100000d0 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
1a080000 l       *ABS*	00000000 __top_MFlashA512
1a008428 l       .ARM.exidx	00000000 __exidx_end
1a008428 l       .ARM.exidx	00000000 _etext
20008000 l       *ABS*	00000000 __top_RamAHB32
1a008420 l       .ARM.exidx	00000000 __exidx_start
20010000 l       *ABS*	00000000 __top_RamAHB_ETB16
10008000 l       *ABS*	00000000 __top_RamLoc32
2000c000 l       *ABS*	00000000 __top_RamAHB16
1008a000 l       *ABS*	00000000 __top_RamLoc40
1a008420 l       .bss_RAM5	00000000 __init_array_end
1a008420 l       .bss_RAM5	00000000 __preinit_array_end
1b080000 l       *ABS*	00000000 __top_MFlashB512
1a008420 l       .bss_RAM5	00000000 __init_array_start
1a008420 l       .bss_RAM5	00000000 __preinit_array_start
1a001ebc g     F .text	0000001c Chip_Clock_GetDividerSource
1a0018c0 g     F .text	00000012 _isatty_r
1a00243c g     F .text	0000000e Chip_I2CM_Xfer
1a007d28 g     F .text	00000012 .hidden __aeabi_dcmple
1a002cc4 g     F .text	0000002e .hidden __gnu_uldivmod_helper
1a00386c g     F .text	0000005c _puts_r
1a001560 g     F .text	00000040 TIMER2_IRQHandler
1a007c64 g     F .text	0000007a .hidden __cmpdf2
1a001484 g     F .text	0000000e i2cInit
1a00019c  w    F .text	00000002 DebugMon_Handler
1a0018d4 g     F .text	0000000a _lseek_r
1a0001a8  w    F .text	00000002 RIT_IRQHandler
1a007c64 g     F .text	0000007a .hidden __eqdf2
1a0001a8  w    F .text	00000002 ADCHS_IRQHandler
1a00311c g     F .text	0000029c .hidden __divdi3
1a000114 g       .text	00000000 __section_table_start
1a0001a8  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002b68 g     F .text	0000005a .hidden __floatdidf
1a0001a8  w    F .text	00000002 I2C0_IRQHandler
1a003844 g     F .text	00000028 printf
1a007be4 g     F .text	00000054 _wcrtomb_r
1a0078cc g     F .text	00000020 __sseek
1a0060ec g     F .text	0000000a __sinit
10000974 g     O .bss	00000004 callBackFuncParams
1a007984 g     F .text	000000a8 __swbuf_r
1a000188  w    F .text	00000002 HardFault_Handler
1a0025a4 g     F .text	00000122 handleMasterXferState
1a000f30 g     F .text	0000000c mpu9250GetAccelX_mss
1a000000 g       *ABS*	00000000 __vectors_start__
1a001c5c g     F .text	0000000c Chip_ADC_SetResolution
1a006e38 g     F .text	00000002 __malloc_unlock
1a000770 g     F .text	00000030 SysTick_Handler
1a0001a8  w    F .text	00000002 SDIO_IRQHandler
1a001850 g     F .text	0000001c Board_UARTGetChar
1a0001a8  w    F .text	00000002 ATIMER_IRQHandler
1a006d6c g     F .text	000000c6 memmove
1a0001a0  w    F .text	00000002 PendSV_Handler
1a000184  w    F .text	00000002 NMI_Handler
1a006e3c g     F .text	0000004c _Balloc
1a000150 g       .text	00000000 __data_section_table_end
1a0001a8  w    F .text	00000002 I2C1_IRQHandler
1a0001a8  w    F .text	00000002 UART1_IRQHandler
1a007c54 g     F .text	0000008a .hidden __gtdf2
1a0001a8  w    F .text	00000002 GPIO5_IRQHandler
1a0001a8  w    F .text	00000002 CAN1_IRQHandler
1a001494 g     F .text	0000002a i2cRead
1a0018b4 g     F .text	0000000a _fstat_r
1a001364 g     F .text	0000000c mpu9250GetMagY_uT
53ff5072 g       *ABS*	00000000 __valid_user_code_checksum
1a007cf0 g     F .text	00000010 .hidden __aeabi_cdcmple
1a0001a8  w    F .text	00000002 USB1_IRQHandler
1a0001a8  w    F .text	00000002 I2S0_IRQHandler
1a001370 g     F .text	0000000c mpu9250GetMagZ_uT
1a0015a0 g     F .text	00000040 TIMER3_IRQHandler
1a002120 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000178 g     F .text	0000000a UART0_IRQHandler
1a0001c8 g     F .text	00000012 bss_init
1a003674 g     F .text	00000134 memcpy
1a007ce0 g     F .text	00000020 .hidden __aeabi_cdrcmple
1a0001a8  w    F .text	00000002 SGPIO_IRQHandler
1a005ff0 g     F .text	0000000c _cleanup_r
1a002af8 g     F .text	00000022 .hidden __floatsidf
1a002750 g     F .text	00000030 Chip_I2C_MasterStateHandler
1a007c5c g     F .text	00000082 .hidden __ltdf2
1a002c64 g     F .text	00000000 .hidden __aeabi_uldivmod
10000b3c g       .noinit	00000000 _noinit
1a0038c8 g     F .text	00000010 puts
10000b38 g     O .bss	00000004 SystemCoreClock
1a007814 g     F .text	0000005c __fpclassifyd
1a001a6c g     F .text	00000054 Chip_UART_Init
1a0001a8  w    F .text	00000002 ADC0_IRQHandler
1a008330 g     O .text	000000c8 __mprec_tens
1a000194  w    F .text	00000002 UsageFault_Handler
1a0066b8 g     F .text	00000008 __locale_charset
1a00219c g     F .text	0000004c Chip_Clock_GetRate
1a0001a8  w    F .text	00000002 GPIO6_IRQHandler
10000afc g     O .bss	00000004 __malloc_top_pad
10000b28 g     O .bss	00000008 tickCounter
1a0019c8 g     F .text	0000006c Board_SetupClocking
10000554 g     O .data	00000004 __mb_cur_max
1a002ad8 g     F .text	0000001e .hidden __aeabi_ui2d
1a0066cc g     F .text	00000008 _localeconv_r
1a006fbc g     F .text	00000012 __i2b
1a00634c g     F .text	00000318 __sfvwrite_r
1a00271c g     F .text	00000034 Chip_I2C_SetMasterEventHandler
1a002854 g     F .text	00000000 .hidden __aeabi_drsub
1a0010c8 g     F .text	00000290 mpu9250Init
1a00192c g     F .text	00000020 _sbrk_r
1a008110 g     O .text	00000004 ExtRateIn
1a0001a8  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a00137c g     F .text	0000000c mpu9250GetTemperature_C
1a0018e0 g     F .text	0000004c _read_r
1a007d14 g     F .text	00000012 .hidden __aeabi_dcmplt
1a007a8c g     F .text	00000084 _fclose_r
1a0004f0 g     F .text	0000000a GPIO1_IRQHandler
10000af8 g     O .bss	00000004 __malloc_max_sbrked_mem
1a002b1c g     F .text	0000003a .hidden __extendsfdf2
1a002f4c g     F .text	000001d0 .hidden __aeabi_ddiv
1a0001a8  w    F .text	00000002 SSP0_IRQHandler
1a000f48 g     F .text	0000000c mpu9250GetAccelZ_mss
1a002860 g     F .text	00000276 .hidden __adddf3
1a002cf8 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
1a007428 g     F .text	000003ec _realloc_r
1a003624 g     F .text	00000050 __libc_init_array
1a0033b8 g     F .text	0000026a .hidden __udivdi3
1a007bc0 g     F .text	00000024 _fputwc_r
1a0083f8 g     O .text	00000028 __mprec_bigtens
1a002ad8 g     F .text	0000001e .hidden __floatunsidf
1a0001a8  w    F .text	00000002 ADC1_IRQHandler
1a007250 g     F .text	00000046 __mcmp
1a00186c g     F .text	0000003c Board_Init
1a002850 g     F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a002bc4 g     F .text	0000009e .hidden __aeabi_d2f
1a0001a8  w    F .text	00000002 RTC_IRQHandler
10000b3c g       .bss	00000000 _ebss
1a0014e4 g     F .text	0000003c TIMER0_IRQHandler
1a0006f4 g     F .text	0000007c tickInit
1a0001a8  w    F .text	00000002 SPI_IRQHandler
1a00244c g     F .text	00000024 Chip_I2CM_XferBlocking
1a006f20 g     F .text	00000040 __hi0bits
1a0026ec g     F .text	00000030 Chip_I2C_SetClockRate
1a007d64 g     F .text	0000004e .hidden __fixdfsi
1a0001a8  w    F .text	00000002 LCD_IRQHandler
1a001e70 g     F .text	0000004c Chip_Clock_EnableCrystal
1a002860 g     F .text	00000276 .hidden __aeabi_dadd
1a0001ac g     F .text	0000001a data_init
1a007c5c g     F .text	00000082 .hidden __ledf2
1a007104 g     F .text	000000a0 __pow5mult
1a002b58 g     F .text	0000006a .hidden __aeabi_ul2d
1a001520 g     F .text	00000040 TIMER1_IRQHandler
1a0026c8 g     F .text	00000024 Chip_I2C_Init
1a00084c g     F .text	0000000a UART2_IRQHandler
1a00202c g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a007f78 g     O .text	00000136 gpioPinsInit
1a0024f8 g     F .text	00000012 Chip_SSP_SetClockRate
1a007d50 g     F .text	00000012 .hidden __aeabi_dcmpgt
1a0004fc g     F .text	0000000a GPIO2_IRQHandler
1a0060f8 g     F .text	00000002 __sfp_lock_acquire
1a006cd8 g     F .text	00000092 memchr
1a00619c g     F .text	000001b0 _free_r
1a0020fc g     F .text	00000024 Chip_Clock_GetBaseClock
1a0066c0 g     F .text	0000000c __locale_mb_cur_max
1a007d3c g     F .text	00000012 .hidden __aeabi_dcmpge
10000970 g       .bss	00000000 _bss
1a001c28 g     F .text	00000032 Chip_ADC_SetSampleRate
1a00285c g     F .text	0000027a .hidden __aeabi_dsub
10000964 g     O .data	00000004 __malloc_sbrk_base
1a002b58 g     F .text	0000006a .hidden __floatundidf
1a0071a4 g     F .text	000000aa __lshift
1a0001a8  w    F .text	00000002 I2S1_IRQHandler
1a00250c g     F .text	0000003e Chip_SSP_SetBitRate
1a000f60 g     F .text	0000000c mpu9250GetGyroY_rads
1a0024c8 g     F .text	00000002 Chip_GPIO_Init
1a00810c g     O .text	00000004 OscRateIn
1a006fd0 g     F .text	00000134 __multiply
10000b3c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
10000b00 g     O .bss	00000028 __malloc_current_mallinfo
1a00736c g     F .text	000000ba __d2b
1a0001a8  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a0018a8 g     F .text	0000000a _close_r
1a002af8 g     F .text	00000022 .hidden __aeabi_i2d
1a000534 g     F .text	0000019c gpioInit
1a004dd8 g     F .text	000000c4 __swsetup_r
1a002cf4  w    F .text	00000002 .hidden __aeabi_ldiv0
1a002f4c g     F .text	000001d0 .hidden __divdf3
10000558 g     O .data	00000408 __malloc_av_
1a002cf8 g     F .text	00000254 .hidden __muldf3
1a007870 g     F .text	00000022 __sread
1a0001a8  w    F .text	00000002 USB0_IRQHandler
1a0001a8  w    F .text	00000002 GPIO3_IRQHandler
10000000 g     O .data	00000001 addr
1a006e34 g     F .text	00000002 __malloc_lock
1a00183c g     F .text	00000014 Board_UARTPutChar
1a002780 g     F .text	00000018 Chip_I2C_IsStateChanged
1a0001a8  w    F .text	00000002 SCT_IRQHandler
1a005fc4 g     F .text	0000002c _fflush_r
1a007a2c g     F .text	0000005e _calloc_r
1a001ed8 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a0037a8 g     F .text	0000009a memset
1a00018c  w    F .text	00000002 MemManage_Handler
1a000300 g     F .text	00000174 main
10000af4 g     O .bss	00000004 __malloc_max_total_mem
1a001358 g     F .text	0000000c mpu9250GetMagX_uT
1a0001a8  w    F .text	00000002 WDT_IRQHandler
1a000198  w    F .text	00000002 SVC_Handler
1000004c g     O .data	00000004 DWT_CTRL
1a0078ec g     F .text	00000008 __sclose
1a002bc4 g     F .text	0000009e .hidden __truncdfsf2
1a004fc8 g     F .text	00000ea2 _dtoa_r
1a0067b4 g     F .text	00000524 _malloc_r
1a007c38 g     F .text	0000001a __ascii_wctomb
1a002b68 g     F .text	0000005a .hidden __aeabi_l2d
1a0001a8  w    F .text	00000002 GPIO7_IRQHandler
1a00212c g     F .text	0000003c Chip_Clock_EnableOpts
1a006100 g     F .text	0000009c _malloc_trim_r
1a001ef4 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a002470 g     F .text	00000058 fpuInit
1a000f3c g     F .text	0000000c mpu9250GetAccelY_mss
1a001fac g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001978 g     F .text	0000001c SystemInit
1a0001a8  w    F .text	00000002 SPIFI_IRQHandler
1a0013a4 g     F .text	00000038 delay
1a0001a8  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a007c64 g     F .text	0000007a .hidden __nedf2
1a001be8 g     F .text	00000040 Chip_ADC_Init
1a001994 g     F .text	00000034 Board_SetupMuxing
1a001ac0 g     F .text	000000e4 Chip_UART_SetBaudFDR
1a0006d0 g     F .text	0000000c tickRead
1a00194c g     F .text	0000002a _write_r
10000b30 g     O .bss	00000008 tickRateMS
1a000c94 g     F .text	0000029c mpu9250Read
1a0001a8  w    F .text	00000002 ETH_IRQHandler
10000970 g     O .bss	00000004 tickHookFunction
100004f8 g     O .data	00000004 _impure_ptr
1a005e70 g     F .text	00000154 __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001a8  w    F .text	00000002 CAN0_IRQHandler
1a002338 g     F .text	00000104 Chip_I2CM_XferHandler
10000000 g       .data	00000000 _data
10000b3c g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a00254c g     F .text	00000038 Chip_SSP_Init
1a002798 g     F .text	00000034 Chip_I2C_EventHandlerPolling
1a0001a8  w    F .text	00000002 GINT0_IRQHandler
1a0001a8  w    F .text	00000002 DAC_IRQHandler
1a0014c0 g     F .text	0000001a i2cWrite
1a001818 g     F .text	00000024 Board_Debug_Init
1a007d00 g     F .text	00000012 .hidden __aeabi_dcmpeq
1000096c g       .data	00000000 _edata
1a002584 g     F .text	00000020 Chip_I2C_EventHandler
1a0001a8  w    F .text	00000002 M0SUB_IRQHandler
1a007b10 g     F .text	000000b0 __fputwc
1a0021e8 g     F .text	00000150 Chip_SetupCoreClock
1a000f6c g     F .text	0000000c mpu9250GetGyroZ_rads
1a007894 g     F .text	00000038 __swrite
1a0004e4 g     F .text	0000000a GPIO0_IRQHandler
10000960 g     O .data	00000004 __malloc_trim_threshold
1a000000 g     O .text	00000114 g_pfnVectors
1a0027cc g     F .text	00000084 ResetISR
1a006664 g     F .text	00000052 _fwalk_reent
1a001c68 g     F .text	00000014 SystemCoreClockUpdate
1a007298 g     F .text	000000d2 __mdiff
1a007d64 g     F .text	0000004e .hidden __aeabi_d2iz
1a0001a8  w    F .text	00000002 DMA_IRQHandler
1a0001a8  w    F .text	00000002 EVRT_IRQHandler
1a0060fc g     F .text	00000002 __sfp_lock_release
1a002cf4  w    F .text	00000002 .hidden __aeabi_idiv0
1a000190  w    F .text	00000002 BusFault_Handler
1a0066d4 g     F .text	000000e0 __smakebuf_r
1a0038d8 g     F .text	0000005c strlen
1a002168 g     F .text	00000034 Chip_Clock_Enable
1a007cf0 g     F .text	00000010 .hidden __aeabi_cdcmpeq
1a007c54 g     F .text	0000008a .hidden __gedf2
1a000858 g     F .text	0000000a UART3_IRQHandler
1a0001a8  w    F .text	00000002 MCPWM_IRQHandler
1a000f54 g     F .text	0000000c mpu9250GetGyroX_rads
10000968 g     O .data	00000004 __wctomb
1a002c94 g     F .text	0000002e .hidden __gnu_ldivmod_helper
1a00796c g     F .text	00000018 __sprint_r
1a0001a8  w    F .text	00000002 M0APP_IRQHandler
1a002b1c g     F .text	0000003a .hidden __aeabi_f2d
1a0015e0 g     F .text	000000f4 boardInit
1a00285c g     F .text	0000027a .hidden __subdf3
1a003938 g     F .text	00001424 _vfprintf_r
1a0001a8  w    F .text	00000002 GINT1_IRQHandler
1a006f60 g     F .text	0000005a __lo0bits
1a0006dc g     F .text	00000018 tickPowerSet
1a0020b8 g     F .text	00000044 Chip_Clock_SetBaseClock
1a001388 g     F .text	0000001c cyclesCounterInit
1a0001a8  w    F .text	00000002 GPIO4_IRQHandler
1a001a34 g     F .text	0000000c Board_SystemInit
1a006e9c g     F .text	00000082 __multadd
1a006e88 g     F .text	00000012 _Bfree



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 cd 27 00 1a 85 01 00 1a 89 01 00 1a     .....'..........
1a000010:	8d 01 00 1a 91 01 00 1a 95 01 00 1a 72 50 ff 53     ............rP.S
	...
1a00002c:	99 01 00 1a 9d 01 00 1a 00 00 00 00 a1 01 00 1a     ................
1a00003c:	71 07 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     q...............
1a00004c:	00 00 00 00 a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00005c:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00006c:	a9 01 00 1a e5 14 00 1a 21 15 00 1a 61 15 00 1a     ........!...a...
1a00007c:	a1 15 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00008c:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00009c:	a9 01 00 1a 79 01 00 1a a9 01 00 1a 4d 08 00 1a     ....y.......M...
1a0000ac:	59 08 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     Y...............
1a0000bc:	a9 01 00 1a e5 04 00 1a f1 04 00 1a fd 04 00 1a     ................
1a0000cc:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000dc:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000ec:	a9 01 00 1a 00 00 00 00 a9 01 00 1a a9 01 00 1a     ................
1a0000fc:	a9 01 00 1a 00 00 00 00 a9 01 00 1a a9 01 00 1a     ................
1a00010c:	a9 01 00 1a a9 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a008428 	.word	0x1a008428
1a000118:	10000000 	.word	0x10000000
1a00011c:	0000096c 	.word	0x0000096c
1a000120:	1a008428 	.word	0x1a008428
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a008428 	.word	0x1a008428
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a008428 	.word	0x1a008428
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a008428 	.word	0x1a008428
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000970 	.word	0x10000970
1a000154:	000001cc 	.word	0x000001cc
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a000178:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a00017a:	2000      	movs	r0, #0
1a00017c:	f000 fb10 	bl	1a0007a0 <uartProcessIRQ>
1a000180:	bd08      	pop	{r3, pc}
1a000182:	bf00      	nop

1a000184 <NMI_Handler>:
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <NMI_Handler>
1a000186:	bf00      	nop

1a000188 <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <HardFault_Handler>
1a00018a:	bf00      	nop

1a00018c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00018c:	e7fe      	b.n	1a00018c <MemManage_Handler>
1a00018e:	bf00      	nop

1a000190 <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a000190:	e7fe      	b.n	1a000190 <BusFault_Handler>
1a000192:	bf00      	nop

1a000194 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000194:	e7fe      	b.n	1a000194 <UsageFault_Handler>
1a000196:	bf00      	nop

1a000198 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000198:	e7fe      	b.n	1a000198 <SVC_Handler>
1a00019a:	bf00      	nop

1a00019c <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a00019c:	e7fe      	b.n	1a00019c <DebugMon_Handler>
1a00019e:	bf00      	nop

1a0001a0 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a0001a0:	e7fe      	b.n	1a0001a0 <PendSV_Handler>
1a0001a2:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a0001a4:	e7fe      	b.n	1a0001a4 <PendSV_Handler+0x4>
1a0001a6:	bf00      	nop

1a0001a8 <ADC0_IRQHandler>:
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001a8:	e7fe      	b.n	1a0001a8 <ADC0_IRQHandler>
1a0001aa:	bf00      	nop

1a0001ac <data_init>:
// ResetISR() function in order to cope with MCUs with multiple banks of
// memory.
//*****************************************************************************
        __attribute__((section(".after_vectors"
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a0001ac:	b410      	push	{r4}
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001ae:	2300      	movs	r3, #0
1a0001b0:	e004      	b.n	1a0001bc <data_init+0x10>
        *pulDest++ = *pulSrc++;
1a0001b2:	6804      	ldr	r4, [r0, #0]
1a0001b4:	600c      	str	r4, [r1, #0]
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a0001b8:	3004      	adds	r0, #4
1a0001ba:	3104      	adds	r1, #4
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001bc:	4293      	cmp	r3, r2
1a0001be:	d3f8      	bcc.n	1a0001b2 <data_init+0x6>
        *pulDest++ = *pulSrc++;
}
1a0001c0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001c4:	4770      	bx	lr
1a0001c6:	bf00      	nop

1a0001c8 <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c8:	2300      	movs	r3, #0
1a0001ca:	e003      	b.n	1a0001d4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001cc:	2200      	movs	r2, #0
1a0001ce:	6002      	str	r2, [r0, #0]

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001d0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001d2:	3004      	adds	r0, #4

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001d4:	428b      	cmp	r3, r1
1a0001d6:	d3f9      	bcc.n	1a0001cc <bss_init+0x4>
        *pulDest++ = 0;
}
1a0001d8:	4770      	bx	lr
1a0001da:	bf00      	nop
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <main>:
/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

/* FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE RESET. */
int main(void){
1a000300:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000302:	b085      	sub	sp, #20
   /* ------------- INICIALIZACIONES ------------- */

   boardConfig();
1a000304:	f001 f96c 	bl	1a0015e0 <boardInit>

   // Inicializar la IMU
   printf("Inicializando IMU MPU9250...\r\n" );
1a000308:	484b      	ldr	r0, [pc, #300]	; (1a000438 <main+0x138>)
1a00030a:	f003 fadd 	bl	1a0038c8 <puts>
   int8_t status;
   status = mpu9250Init( addr );
1a00030e:	4b4b      	ldr	r3, [pc, #300]	; (1a00043c <main+0x13c>)
1a000310:	7818      	ldrb	r0, [r3, #0]
1a000312:	f000 fed9 	bl	1a0010c8 <mpu9250Init>

   if( status < 0 ){
1a000316:	2800      	cmp	r0, #0
1a000318:	da18      	bge.n	1a00034c <main+0x4c>
      printf( "IMU MPU9250 no inicializado, chequee las conexiones:\r\n\r\n" );
1a00031a:	4849      	ldr	r0, [pc, #292]	; (1a000440 <main+0x140>)
1a00031c:	f003 fad4 	bl	1a0038c8 <puts>
      printf( "MPU9250 ---- EDU-CIAA-NXP\r\n\r\n" );
1a000320:	4848      	ldr	r0, [pc, #288]	; (1a000444 <main+0x144>)
1a000322:	f003 fad1 	bl	1a0038c8 <puts>
      printf( "    VCC ---- 3.3V\r\n" );
1a000326:	4848      	ldr	r0, [pc, #288]	; (1a000448 <main+0x148>)
1a000328:	f003 face 	bl	1a0038c8 <puts>
      printf( "    GND ---- GND\r\n" );
1a00032c:	4847      	ldr	r0, [pc, #284]	; (1a00044c <main+0x14c>)
1a00032e:	f003 facb 	bl	1a0038c8 <puts>
      printf( "    SCL ---- SCL\r\n" );
1a000332:	4847      	ldr	r0, [pc, #284]	; (1a000450 <main+0x150>)
1a000334:	f003 fac8 	bl	1a0038c8 <puts>
      printf( "    SDA ---- SDA\r\n" );
1a000338:	4846      	ldr	r0, [pc, #280]	; (1a000454 <main+0x154>)
1a00033a:	f003 fac5 	bl	1a0038c8 <puts>
      printf( "    AD0 ---- GND\r\n\r\n" );
1a00033e:	4846      	ldr	r0, [pc, #280]	; (1a000458 <main+0x158>)
1a000340:	f003 fac2 	bl	1a0038c8 <puts>
      printf( "Se detiene el programa.\r\n" );
1a000344:	4845      	ldr	r0, [pc, #276]	; (1a00045c <main+0x15c>)
1a000346:	f003 fabf 	bl	1a0038c8 <puts>
      while(1);
1a00034a:	e7fe      	b.n	1a00034a <main+0x4a>
   }
   printf("IMU MPU9250 inicializado correctamente.\r\n\r\n" );
1a00034c:	4844      	ldr	r0, [pc, #272]	; (1a000460 <main+0x160>)
1a00034e:	f003 fabb 	bl	1a0038c8 <puts>

   /* ------------- REPETIR POR SIEMPRE ------------- */
   while(TRUE){

      //Leer el sensor y guardar en estructura de control
      mpu9250Read();
1a000352:	f000 fc9f 	bl	1a000c94 <mpu9250Read>

      // Imprimir resultados
      printf( "Giroscopo:      (%f, %f, %f)   [rad/s]\r\n",
              mpu9250GetGyroX_rads(),
1a000356:	f000 fdfd 	bl	1a000f54 <mpu9250GetGyroX_rads>
1a00035a:	ee10 4a10 	vmov	r4, s0
              mpu9250GetGyroY_rads(),
1a00035e:	f000 fdff 	bl	1a000f60 <mpu9250GetGyroY_rads>
1a000362:	ee10 7a10 	vmov	r7, s0
              mpu9250GetGyroZ_rads()
1a000366:	f000 fe01 	bl	1a000f6c <mpu9250GetGyroZ_rads>
1a00036a:	ee10 6a10 	vmov	r6, s0

      //Leer el sensor y guardar en estructura de control
      mpu9250Read();

      // Imprimir resultados
      printf( "Giroscopo:      (%f, %f, %f)   [rad/s]\r\n",
1a00036e:	4620      	mov	r0, r4
1a000370:	f002 fbd4 	bl	1a002b1c <__aeabi_f2d>
1a000374:	4604      	mov	r4, r0
1a000376:	460d      	mov	r5, r1
1a000378:	4638      	mov	r0, r7
1a00037a:	f002 fbcf 	bl	1a002b1c <__aeabi_f2d>
1a00037e:	e9cd 0100 	strd	r0, r1, [sp]
1a000382:	4630      	mov	r0, r6
1a000384:	f002 fbca 	bl	1a002b1c <__aeabi_f2d>
1a000388:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a00038c:	4835      	ldr	r0, [pc, #212]	; (1a000464 <main+0x164>)
1a00038e:	4622      	mov	r2, r4
1a000390:	462b      	mov	r3, r5
1a000392:	f003 fa57 	bl	1a003844 <printf>
              mpu9250GetGyroY_rads(),
              mpu9250GetGyroZ_rads()
            );

		printf( "Acelerometro:   (%f, %f, %f)   [m/s2]\r\n",
              mpu9250GetAccelX_mss(),
1a000396:	f000 fdcb 	bl	1a000f30 <mpu9250GetAccelX_mss>
1a00039a:	ee10 4a10 	vmov	r4, s0
              mpu9250GetAccelY_mss(),
1a00039e:	f000 fdcd 	bl	1a000f3c <mpu9250GetAccelY_mss>
1a0003a2:	ee10 7a10 	vmov	r7, s0
              mpu9250GetAccelZ_mss()
1a0003a6:	f000 fdcf 	bl	1a000f48 <mpu9250GetAccelZ_mss>
1a0003aa:	ee10 6a10 	vmov	r6, s0
              mpu9250GetGyroX_rads(),
              mpu9250GetGyroY_rads(),
              mpu9250GetGyroZ_rads()
            );

		printf( "Acelerometro:   (%f, %f, %f)   [m/s2]\r\n",
1a0003ae:	4620      	mov	r0, r4
1a0003b0:	f002 fbb4 	bl	1a002b1c <__aeabi_f2d>
1a0003b4:	4604      	mov	r4, r0
1a0003b6:	460d      	mov	r5, r1
1a0003b8:	4638      	mov	r0, r7
1a0003ba:	f002 fbaf 	bl	1a002b1c <__aeabi_f2d>
1a0003be:	e9cd 0100 	strd	r0, r1, [sp]
1a0003c2:	4630      	mov	r0, r6
1a0003c4:	f002 fbaa 	bl	1a002b1c <__aeabi_f2d>
1a0003c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a0003cc:	4826      	ldr	r0, [pc, #152]	; (1a000468 <main+0x168>)
1a0003ce:	4622      	mov	r2, r4
1a0003d0:	462b      	mov	r3, r5
1a0003d2:	f003 fa37 	bl	1a003844 <printf>
              mpu9250GetAccelY_mss(),
              mpu9250GetAccelZ_mss()
            );

		printf( "Magnetometro:   (%f, %f, %f)   [uT]\r\n",
              mpu9250GetMagX_uT(),
1a0003d6:	f000 ffbf 	bl	1a001358 <mpu9250GetMagX_uT>
1a0003da:	ee10 4a10 	vmov	r4, s0
              mpu9250GetMagY_uT(),
1a0003de:	f000 ffc1 	bl	1a001364 <mpu9250GetMagY_uT>
1a0003e2:	ee10 7a10 	vmov	r7, s0
              mpu9250GetMagZ_uT()
1a0003e6:	f000 ffc3 	bl	1a001370 <mpu9250GetMagZ_uT>
1a0003ea:	ee10 6a10 	vmov	r6, s0
              mpu9250GetAccelX_mss(),
              mpu9250GetAccelY_mss(),
              mpu9250GetAccelZ_mss()
            );

		printf( "Magnetometro:   (%f, %f, %f)   [uT]\r\n",
1a0003ee:	4620      	mov	r0, r4
1a0003f0:	f002 fb94 	bl	1a002b1c <__aeabi_f2d>
1a0003f4:	4604      	mov	r4, r0
1a0003f6:	460d      	mov	r5, r1
1a0003f8:	4638      	mov	r0, r7
1a0003fa:	f002 fb8f 	bl	1a002b1c <__aeabi_f2d>
1a0003fe:	e9cd 0100 	strd	r0, r1, [sp]
1a000402:	4630      	mov	r0, r6
1a000404:	f002 fb8a 	bl	1a002b1c <__aeabi_f2d>
1a000408:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a00040c:	4817      	ldr	r0, [pc, #92]	; (1a00046c <main+0x16c>)
1a00040e:	4622      	mov	r2, r4
1a000410:	462b      	mov	r3, r5
1a000412:	f003 fa17 	bl	1a003844 <printf>
              mpu9250GetMagY_uT(),
              mpu9250GetMagZ_uT()
            );

		printf( "Temperatura:    %f   [C]\r\n\r\n",
              mpu9250GetTemperature_C()
1a000416:	f000 ffb1 	bl	1a00137c <mpu9250GetTemperature_C>
              mpu9250GetMagX_uT(),
              mpu9250GetMagY_uT(),
              mpu9250GetMagZ_uT()
            );

		printf( "Temperatura:    %f   [C]\r\n\r\n",
1a00041a:	ee10 0a10 	vmov	r0, s0
1a00041e:	f002 fb7d 	bl	1a002b1c <__aeabi_f2d>
1a000422:	4602      	mov	r2, r0
1a000424:	460b      	mov	r3, r1
1a000426:	4812      	ldr	r0, [pc, #72]	; (1a000470 <main+0x170>)
1a000428:	f003 fa0c 	bl	1a003844 <printf>
              mpu9250GetTemperature_C()
            );

      delay(1000);
1a00042c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000430:	2100      	movs	r1, #0
1a000432:	f000 ffb7 	bl	1a0013a4 <delay>
   }
1a000436:	e78c      	b.n	1a000352 <main+0x52>
1a000438:	1a007db4 	.word	0x1a007db4
1a00043c:	10000000 	.word	0x10000000
1a000440:	1a007dd4 	.word	0x1a007dd4
1a000444:	1a007e0c 	.word	0x1a007e0c
1a000448:	1a007e2c 	.word	0x1a007e2c
1a00044c:	1a007e40 	.word	0x1a007e40
1a000450:	1a007e54 	.word	0x1a007e54
1a000454:	1a007e68 	.word	0x1a007e68
1a000458:	1a007e7c 	.word	0x1a007e7c
1a00045c:	1a007e90 	.word	0x1a007e90
1a000460:	1a007eac 	.word	0x1a007eac
1a000464:	1a007ed8 	.word	0x1a007ed8
1a000468:	1a007f04 	.word	0x1a007f04
1a00046c:	1a007f2c 	.word	0x1a007f2c
1a000470:	1a007f54 	.word	0x1a007f54

1a000474 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a000474:	2301      	movs	r3, #1
1a000476:	4083      	lsls	r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a000478:	4a01      	ldr	r2, [pc, #4]	; (1a000480 <clearInterrupt+0xc>)
1a00047a:	6253      	str	r3, [r2, #36]	; 0x24
1a00047c:	4770      	bx	lr
1a00047e:	bf00      	nop
1a000480:	40087000 	.word	0x40087000

1a000484 <serveInterrupt>:
}

static void serveInterrupt(uint8_t irqChannel)
{
1a000484:	b570      	push	{r4, r5, r6, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a000486:	4b13      	ldr	r3, [pc, #76]	; (1a0004d4 <serveInterrupt+0x50>)
1a000488:	5c1b      	ldrb	r3, [r3, r0]
 * @param	pPININT	: The base address of Pin interrupt block
 * @return	PININT states (bit n = high) with a latched rise state detected
 */
STATIC INLINE uint32_t Chip_PININT_GetRiseStates(LPC_PIN_INT_T *pPININT)
{
	return pPININT->RISE;
1a00048a:	4a13      	ldr	r2, [pc, #76]	; (1a0004d8 <serveInterrupt+0x54>)
1a00048c:	69d2      	ldr	r2, [r2, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a00048e:	2401      	movs	r4, #1
1a000490:	4084      	lsls	r4, r0
1a000492:	4214      	tst	r4, r2
1a000494:	d00a      	beq.n	1a0004ac <serveInterrupt+0x28>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a000496:	4a11      	ldr	r2, [pc, #68]	; (1a0004dc <serveInterrupt+0x58>)
1a000498:	6892      	ldr	r2, [r2, #8]
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly

      /* Save actual timer count in echoRiseTime */
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a00049a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a00049e:	00db      	lsls	r3, r3, #3
1a0004a0:	490f      	ldr	r1, [pc, #60]	; (1a0004e0 <serveInterrupt+0x5c>)
1a0004a2:	440b      	add	r3, r1
1a0004a4:	605a      	str	r2, [r3, #4]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearRiseStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->RISE = pins;
1a0004a6:	4b0c      	ldr	r3, [pc, #48]	; (1a0004d8 <serveInterrupt+0x54>)
1a0004a8:	61dc      	str	r4, [r3, #28]
1a0004aa:	e00f      	b.n	1a0004cc <serveInterrupt+0x48>
1a0004ac:	4a0b      	ldr	r2, [pc, #44]	; (1a0004dc <serveInterrupt+0x58>)
1a0004ae:	6891      	ldr	r1, [r2, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0004b0:	4d0b      	ldr	r5, [pc, #44]	; (1a0004e0 <serveInterrupt+0x5c>)
1a0004b2:	005e      	lsls	r6, r3, #1
1a0004b4:	18f2      	adds	r2, r6, r3
1a0004b6:	00d2      	lsls	r2, r2, #3
1a0004b8:	442a      	add	r2, r5
1a0004ba:	6091      	str	r1, [r2, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a0004bc:	6852      	ldr	r2, [r2, #4]
1a0004be:	1a89      	subs	r1, r1, r2
1a0004c0:	4433      	add	r3, r6
1a0004c2:	00db      	lsls	r3, r3, #3
1a0004c4:	442b      	add	r3, r5
1a0004c6:	60d9      	str	r1, [r3, #12]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearFallStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->FALL = pins;
1a0004c8:	4b03      	ldr	r3, [pc, #12]	; (1a0004d8 <serveInterrupt+0x54>)
1a0004ca:	621c      	str	r4, [r3, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a0004cc:	f7ff ffd2 	bl	1a000474 <clearInterrupt>
1a0004d0:	bd70      	pop	{r4, r5, r6, pc}
1a0004d2:	bf00      	nop
1a0004d4:	1a007f74 	.word	0x1a007f74
1a0004d8:	40087000 	.word	0x40087000
1a0004dc:	40084000 	.word	0x40084000
1a0004e0:	10000004 	.word	0x10000004

1a0004e4 <GPIO0_IRQHandler>:
/*==================[ISR external functions definition]======================*/
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
void GPIO0_IRQHandler(void)
{
1a0004e4:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a0004e6:	2000      	movs	r0, #0
1a0004e8:	f7ff ffcc 	bl	1a000484 <serveInterrupt>
1a0004ec:	bd08      	pop	{r3, pc}
1a0004ee:	bf00      	nop

1a0004f0 <GPIO1_IRQHandler>:
}

void GPIO1_IRQHandler(void)
{
1a0004f0:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a0004f2:	2001      	movs	r0, #1
1a0004f4:	f7ff ffc6 	bl	1a000484 <serveInterrupt>
1a0004f8:	bd08      	pop	{r3, pc}
1a0004fa:	bf00      	nop

1a0004fc <GPIO2_IRQHandler>:
}

void GPIO2_IRQHandler(void)
{
1a0004fc:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a0004fe:	2002      	movs	r0, #2
1a000500:	f7ff ffc0 	bl	1a000484 <serveInterrupt>
1a000504:	bd08      	pop	{r3, pc}
1a000506:	bf00      	nop

1a000508 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a000508:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00050a:	4d09      	ldr	r5, [pc, #36]	; (1a000530 <gpioObtainPinInit+0x28>)
1a00050c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a000510:	182c      	adds	r4, r5, r0
1a000512:	5c28      	ldrb	r0, [r5, r0]
1a000514:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a000516:	7861      	ldrb	r1, [r4, #1]
1a000518:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a00051a:	78a2      	ldrb	r2, [r4, #2]
1a00051c:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a00051e:	78e2      	ldrb	r2, [r4, #3]
1a000520:	9b02      	ldr	r3, [sp, #8]
1a000522:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a000524:	7922      	ldrb	r2, [r4, #4]
1a000526:	9b03      	ldr	r3, [sp, #12]
1a000528:	701a      	strb	r2, [r3, #0]
}
1a00052a:	bc30      	pop	{r4, r5}
1a00052c:	4770      	bx	lr
1a00052e:	bf00      	nop
1a000530:	1a007f78 	.word	0x1a007f78

1a000534 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a000534:	b570      	push	{r4, r5, r6, lr}
1a000536:	b084      	sub	sp, #16
1a000538:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00053a:	2300      	movs	r3, #0
1a00053c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a000540:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a000544:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a000548:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00054c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a000550:	ab03      	add	r3, sp, #12
1a000552:	9300      	str	r3, [sp, #0]
1a000554:	f10d 030b 	add.w	r3, sp, #11
1a000558:	9301      	str	r3, [sp, #4]
1a00055a:	f10d 010f 	add.w	r1, sp, #15
1a00055e:	f10d 020e 	add.w	r2, sp, #14
1a000562:	f10d 030d 	add.w	r3, sp, #13
1a000566:	f7ff ffcf 	bl	1a000508 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00056a:	2c05      	cmp	r4, #5
1a00056c:	f200 80a8 	bhi.w	1a0006c0 <gpioInit+0x18c>
1a000570:	e8df f004 	tbb	[pc, r4]
1a000574:	46278408 	.word	0x46278408
1a000578:	0365      	.short	0x0365

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a00057a:	4853      	ldr	r0, [pc, #332]	; (1a0006c8 <gpioInit+0x194>)
1a00057c:	f001 ffa4 	bl	1a0024c8 <Chip_GPIO_Init>
/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{

   bool_t ret_val     = 1;
1a000580:	2001      	movs	r0, #1
   switch(config) {

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
      break;
1a000582:	e09e      	b.n	1a0006c2 <gpioInit+0x18e>

   case GPIO_INPUT:
      Chip_SCU_PinMux(
1a000584:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000588:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00058c:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a000590:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000594:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000598:	494c      	ldr	r1, [pc, #304]	; (1a0006cc <gpioInit+0x198>)
1a00059a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00059e:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0005a2:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0005a6:	2001      	movs	r0, #1
1a0005a8:	fa00 f402 	lsl.w	r4, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0005ac:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a0005b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0005b4:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a0005b8:	ea22 0204 	bic.w	r2, r2, r4
1a0005bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a0005c0:	e07f      	b.n	1a0006c2 <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLUP:
      Chip_SCU_PinMux(
1a0005c2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0005c6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0005ca:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0005ce:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0005d2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0005d6:	493d      	ldr	r1, [pc, #244]	; (1a0006cc <gpioInit+0x198>)
1a0005d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0005dc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0005e0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0005e4:	2001      	movs	r0, #1
1a0005e6:	fa00 f402 	lsl.w	r4, r0, r2
1a0005ea:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a0005ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0005f2:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a0005f6:	ea22 0204 	bic.w	r2, r2, r4
1a0005fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a0005fe:	e060      	b.n	1a0006c2 <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLDOWN:
      Chip_SCU_PinMux(
1a000600:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000604:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000608:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a00060c:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000610:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000614:	492d      	ldr	r1, [pc, #180]	; (1a0006cc <gpioInit+0x198>)
1a000616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLDOWN | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00061a:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00061e:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000622:	2001      	movs	r0, #1
1a000624:	fa00 f402 	lsl.w	r4, r0, r2
1a000628:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a00062c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a000630:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a000634:	ea22 0204 	bic.w	r2, r2, r4
1a000638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a00063c:	e041      	b.n	1a0006c2 <gpioInit+0x18e>
      break;
   case GPIO_INPUT_PULLUP_PULLDOWN:
      Chip_SCU_PinMux(
1a00063e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000642:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000646:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a00064a:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00064e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000652:	491e      	ldr	r1, [pc, #120]	; (1a0006cc <gpioInit+0x198>)
1a000654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_REPEATER | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000658:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00065c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000660:	2001      	movs	r0, #1
1a000662:	fa00 f402 	lsl.w	r4, r0, r2
1a000666:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a00066a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00066e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a000672:	ea22 0204 	bic.w	r2, r2, r4
1a000676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a00067a:	e022      	b.n	1a0006c2 <gpioInit+0x18e>
      break;

   case GPIO_OUTPUT:
      Chip_SCU_PinMux(
1a00067c:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000680:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000684:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a000688:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00068c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000690:	490e      	ldr	r1, [pc, #56]	; (1a0006cc <gpioInit+0x198>)
1a000692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_INBUFF_EN,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a000696:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a00069a:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a00069e:	b25a      	sxtb	r2, r3
1a0006a0:	2001      	movs	r0, #1
1a0006a2:	fa00 f602 	lsl.w	r6, r0, r2
 * Chip_GPIO_SetPortDIR() function instead.
 */
STATIC INLINE void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
1a0006a6:	4a08      	ldr	r2, [pc, #32]	; (1a0006c8 <gpioInit+0x194>)
1a0006a8:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0006ac:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
1a0006b0:	4331      	orrs	r1, r6
1a0006b2:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a0006b6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0006ba:	2100      	movs	r1, #0
1a0006bc:	54d1      	strb	r1, [r2, r3]
1a0006be:	e000      	b.n	1a0006c2 <gpioInit+0x18e>
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
      break;

   default:
      ret_val = 0;
1a0006c0:	2000      	movs	r0, #0
      break;
   }

   return ret_val;

}
1a0006c2:	b004      	add	sp, #16
1a0006c4:	bd70      	pop	{r4, r5, r6, pc}
1a0006c6:	bf00      	nop
1a0006c8:	400f4000 	.word	0x400f4000
1a0006cc:	40086000 	.word	0x40086000

1a0006d0 <tickRead>:

// Read Tick Counter
tick_t tickRead( void )
{
   return tickCounter;
}
1a0006d0:	4b01      	ldr	r3, [pc, #4]	; (1a0006d8 <tickRead+0x8>)
1a0006d2:	e9d3 0100 	ldrd	r0, r1, [r3]
1a0006d6:	4770      	bx	lr
1a0006d8:	10000b28 	.word	0x10000b28

1a0006dc <tickPowerSet>:
}

// Enable or disable the peripheral energy and clock
void tickPowerSet( bool_t power )
{
   if( power ) {
1a0006dc:	b118      	cbz	r0, 1a0006e6 <tickPowerSet+0xa>
      // Enable SysTick IRQ and SysTick Timer
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a0006de:	2207      	movs	r2, #7
1a0006e0:	4b03      	ldr	r3, [pc, #12]	; (1a0006f0 <tickPowerSet+0x14>)
1a0006e2:	601a      	str	r2, [r3, #0]
1a0006e4:	4770      	bx	lr
                      SysTick_CTRL_TICKINT_Msk   |
                      SysTick_CTRL_ENABLE_Msk;
   } else {
      // Disable SysTick IRQ and SysTick Timer
      SysTick->CTRL = 0x0000000;
1a0006e6:	2200      	movs	r2, #0
1a0006e8:	4b01      	ldr	r3, [pc, #4]	; (1a0006f0 <tickPowerSet+0x14>)
1a0006ea:	601a      	str	r2, [r3, #0]
1a0006ec:	4770      	bx	lr
1a0006ee:	bf00      	nop
1a0006f0:	e000e010 	.word	0xe000e010

1a0006f4 <tickInit>:

void tickerCallback( void );

// Tick Initialization and rate configuration from 1 to 50 ms
bool_t tickInit( tick_t tickRateMSvalue )
{
1a0006f4:	b510      	push	{r4, lr}
   #ifndef TICK_OVER_RTOS
      bool_t ret_val = 1;
      tick_t tickRateHz = 0;
      if( tickRateMSvalue == 0 ) {
1a0006f6:	ea50 0301 	orrs.w	r3, r0, r1
1a0006fa:	d104      	bne.n	1a000706 <tickInit+0x12>
         tickPowerSet( OFF );
1a0006fc:	2000      	movs	r0, #0
1a0006fe:	f7ff ffed 	bl	1a0006dc <tickPowerSet>
         ret_val = 0;
1a000702:	2000      	movs	r0, #0
1a000704:	bd10      	pop	{r4, pc}
      } else {
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a000706:	f110 32ff 	adds.w	r2, r0, #4294967295
1a00070a:	f141 33ff 	adc.w	r3, r1, #4294967295
1a00070e:	2b00      	cmp	r3, #0
1a000710:	bf08      	it	eq
1a000712:	2a32      	cmpeq	r2, #50	; 0x32
1a000714:	d222      	bcs.n	1a00075c <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a000716:	4b12      	ldr	r3, [pc, #72]	; (1a000760 <tickInit+0x6c>)
1a000718:	e9c3 0100 	strd	r0, r1, [r3]
            tickRateHz =  200 =>  200 ticks per second =>  5 ms tick
            tickRateHz =  100 =>  100 ticks per second => 10 ms tick
            tickRateHz =   20 =>   20 ticks per second => 50 ms tick
            */
            // Init SysTick interrupt, tickRateHz ticks per second
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a00071c:	4b11      	ldr	r3, [pc, #68]	; (1a000764 <tickInit+0x70>)
1a00071e:	681c      	ldr	r4, [r3, #0]
1a000720:	fba4 2300 	umull	r2, r3, r4, r0
1a000724:	fb04 3301 	mla	r3, r4, r1, r3
1a000728:	4610      	mov	r0, r2
1a00072a:	4619      	mov	r1, r3
1a00072c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a000730:	2300      	movs	r3, #0
1a000732:	f002 fa97 	bl	1a002c64 <__aeabi_uldivmod>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1a000736:	3801      	subs	r0, #1
1a000738:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a00073c:	d209      	bcs.n	1a000752 <tickInit+0x5e>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1a00073e:	4b0a      	ldr	r3, [pc, #40]	; (1a000768 <tickInit+0x74>)
1a000740:	6058      	str	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a000742:	21e0      	movs	r1, #224	; 0xe0
1a000744:	4a09      	ldr	r2, [pc, #36]	; (1a00076c <tickInit+0x78>)
1a000746:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1a00074a:	2200      	movs	r2, #0
1a00074c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a00074e:	2207      	movs	r2, #7
1a000750:	601a      	str	r2, [r3, #0]
            if ( SysTick_Config( CMU_ClockFreqGet(cmuClock_CORE) / tickRateHz) ){
               //DEBUG_BREAK;
               ret_val = 0;
            }
            */
            tickPowerSet( ON );
1a000752:	2001      	movs	r0, #1
1a000754:	f7ff ffc2 	bl	1a0006dc <tickPowerSet>

// Tick Initialization and rate configuration from 1 to 50 ms
bool_t tickInit( tick_t tickRateMSvalue )
{
   #ifndef TICK_OVER_RTOS
      bool_t ret_val = 1;
1a000758:	2001      	movs	r0, #1
1a00075a:	bd10      	pop	{r4, pc}
            }
            */
            tickPowerSet( ON );
         } else {
            // Error, tickRateMS variable not in range (1 <= tickRateMS <= 50)
            ret_val = 0;
1a00075c:	2000      	movs	r0, #0
      #else
         #warning "Unknown RTOS. Ticker disabled"
            return 0;
      #endif
   #endif
}
1a00075e:	bd10      	pop	{r4, pc}
1a000760:	10000b30 	.word	0x10000b30
1a000764:	10000b38 	.word	0x10000b38
1a000768:	e000e010 	.word	0xe000e010
1a00076c:	e000ed00 	.word	0xe000ed00

1a000770 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a000770:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a000772:	4908      	ldr	r1, [pc, #32]	; (1a000794 <SysTick_Handler+0x24>)
1a000774:	e9d1 2300 	ldrd	r2, r3, [r1]
1a000778:	3201      	adds	r2, #1
1a00077a:	f143 0300 	adc.w	r3, r3, #0
1a00077e:	e9c1 2300 	strd	r2, r3, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a000782:	4b05      	ldr	r3, [pc, #20]	; (1a000798 <SysTick_Handler+0x28>)
1a000784:	681b      	ldr	r3, [r3, #0]
1a000786:	b123      	cbz	r3, 1a000792 <SysTick_Handler+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a000788:	4b03      	ldr	r3, [pc, #12]	; (1a000798 <SysTick_Handler+0x28>)
1a00078a:	681b      	ldr	r3, [r3, #0]
1a00078c:	4a03      	ldr	r2, [pc, #12]	; (1a00079c <SysTick_Handler+0x2c>)
1a00078e:	6810      	ldr	r0, [r2, #0]
1a000790:	4798      	blx	r3
1a000792:	bd08      	pop	{r3, pc}
1a000794:	10000b28 	.word	0x10000b28
1a000798:	10000970 	.word	0x10000970
1a00079c:	10000974 	.word	0x10000974

1a0007a0 <uartProcessIRQ>:
static void uartProcessIRQ( uartMap_t uart );

/*==================[internal functions definition]==========================*/

static void uartProcessIRQ( uartMap_t uart )
{
1a0007a0:	b570      	push	{r4, r5, r6, lr}
1a0007a2:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a0007a4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a0007a8:	009b      	lsls	r3, r3, #2
1a0007aa:	4a21      	ldr	r2, [pc, #132]	; (1a000830 <uartProcessIRQ+0x90>)
1a0007ac:	58d6      	ldr	r6, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0007ae:	6975      	ldr	r5, [r6, #20]
1a0007b0:	b2ed      	uxtb	r5, r5

   // Rx Interrupt
   if(status & UART_LSR_RDR) { // uartRxReady
1a0007b2:	f015 0f01 	tst.w	r5, #1
1a0007b6:	d019      	beq.n	1a0007ec <uartProcessIRQ+0x4c>
      // Execute callback
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a0007b8:	b930      	cbnz	r0, 1a0007c8 <uartProcessIRQ+0x28>
1a0007ba:	4b1e      	ldr	r3, [pc, #120]	; (1a000834 <uartProcessIRQ+0x94>)
1a0007bc:	681b      	ldr	r3, [r3, #0]
1a0007be:	b11b      	cbz	r3, 1a0007c8 <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART0)(0);
1a0007c0:	4b1c      	ldr	r3, [pc, #112]	; (1a000834 <uartProcessIRQ+0x94>)
1a0007c2:	681b      	ldr	r3, [r3, #0]
1a0007c4:	2000      	movs	r0, #0
1a0007c6:	4798      	blx	r3

      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a0007c8:	2c03      	cmp	r4, #3
1a0007ca:	d106      	bne.n	1a0007da <uartProcessIRQ+0x3a>
1a0007cc:	4b1a      	ldr	r3, [pc, #104]	; (1a000838 <uartProcessIRQ+0x98>)
1a0007ce:	681b      	ldr	r3, [r3, #0]
1a0007d0:	b11b      	cbz	r3, 1a0007da <uartProcessIRQ+0x3a>
         (*rxIsrCallbackUART2)(0);
1a0007d2:	4b19      	ldr	r3, [pc, #100]	; (1a000838 <uartProcessIRQ+0x98>)
1a0007d4:	681b      	ldr	r3, [r3, #0]
1a0007d6:	2000      	movs	r0, #0
1a0007d8:	4798      	blx	r3

      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a0007da:	2c05      	cmp	r4, #5
1a0007dc:	d106      	bne.n	1a0007ec <uartProcessIRQ+0x4c>
1a0007de:	4b17      	ldr	r3, [pc, #92]	; (1a00083c <uartProcessIRQ+0x9c>)
1a0007e0:	681b      	ldr	r3, [r3, #0]
1a0007e2:	b11b      	cbz	r3, 1a0007ec <uartProcessIRQ+0x4c>
         (*rxIsrCallbackUART3)(0);
1a0007e4:	4b15      	ldr	r3, [pc, #84]	; (1a00083c <uartProcessIRQ+0x9c>)
1a0007e6:	681b      	ldr	r3, [r3, #0]
1a0007e8:	2000      	movs	r0, #0
1a0007ea:	4798      	blx	r3
   }

   // Tx Interrupt
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a0007ec:	f015 0f20 	tst.w	r5, #32
1a0007f0:	d01d      	beq.n	1a00082e <uartProcessIRQ+0x8e>
 *			to determine which interrupts are enabled. You can check
 *			for multiple enabled bits if needed.
 */
STATIC INLINE uint32_t Chip_UART_GetIntsEnabled(LPC_USART_T *pUART)
{
	return pUART->IER;
1a0007f2:	6873      	ldr	r3, [r6, #4]
1a0007f4:	f013 0f02 	tst.w	r3, #2
1a0007f8:	d019      	beq.n	1a00082e <uartProcessIRQ+0x8e>
       ( Chip_UART_GetIntsEnabled( lpcUarts[uart].uartAddr ) & UART_IER_THREINT ) ) {

      // Execute callback
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a0007fa:	b934      	cbnz	r4, 1a00080a <uartProcessIRQ+0x6a>
1a0007fc:	4b10      	ldr	r3, [pc, #64]	; (1a000840 <uartProcessIRQ+0xa0>)
1a0007fe:	681b      	ldr	r3, [r3, #0]
1a000800:	b11b      	cbz	r3, 1a00080a <uartProcessIRQ+0x6a>
         (*txIsrCallbackUART0)(0);
1a000802:	4b0f      	ldr	r3, [pc, #60]	; (1a000840 <uartProcessIRQ+0xa0>)
1a000804:	681b      	ldr	r3, [r3, #0]
1a000806:	2000      	movs	r0, #0
1a000808:	4798      	blx	r3

      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a00080a:	2c03      	cmp	r4, #3
1a00080c:	d106      	bne.n	1a00081c <uartProcessIRQ+0x7c>
1a00080e:	4b0d      	ldr	r3, [pc, #52]	; (1a000844 <uartProcessIRQ+0xa4>)
1a000810:	681b      	ldr	r3, [r3, #0]
1a000812:	b11b      	cbz	r3, 1a00081c <uartProcessIRQ+0x7c>
         (*txIsrCallbackUART2)(0);
1a000814:	4b0b      	ldr	r3, [pc, #44]	; (1a000844 <uartProcessIRQ+0xa4>)
1a000816:	681b      	ldr	r3, [r3, #0]
1a000818:	2000      	movs	r0, #0
1a00081a:	4798      	blx	r3

      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a00081c:	2c05      	cmp	r4, #5
1a00081e:	d106      	bne.n	1a00082e <uartProcessIRQ+0x8e>
1a000820:	4b09      	ldr	r3, [pc, #36]	; (1a000848 <uartProcessIRQ+0xa8>)
1a000822:	681b      	ldr	r3, [r3, #0]
1a000824:	b11b      	cbz	r3, 1a00082e <uartProcessIRQ+0x8e>
         (*txIsrCallbackUART3)(0);
1a000826:	4b08      	ldr	r3, [pc, #32]	; (1a000848 <uartProcessIRQ+0xa8>)
1a000828:	681b      	ldr	r3, [r3, #0]
1a00082a:	2000      	movs	r0, #0
1a00082c:	4798      	blx	r3
1a00082e:	bd70      	pop	{r4, r5, r6, pc}
1a000830:	1a0080b0 	.word	0x1a0080b0
1a000834:	10000978 	.word	0x10000978
1a000838:	10000988 	.word	0x10000988
1a00083c:	1000098c 	.word	0x1000098c
1a000840:	1000097c 	.word	0x1000097c
1a000844:	10000980 	.word	0x10000980
1a000848:	10000984 	.word	0x10000984

1a00084c <UART2_IRQHandler>:
}

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a00084c:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a00084e:	2003      	movs	r0, #3
1a000850:	f7ff ffa6 	bl	1a0007a0 <uartProcessIRQ>
1a000854:	bd08      	pop	{r3, pc}
1a000856:	bf00      	nop

1a000858 <UART3_IRQHandler>:
}

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a000858:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a00085a:	2005      	movs	r0, #5
1a00085c:	f7ff ffa0 	bl	1a0007a0 <uartProcessIRQ>
1a000860:	bd08      	pop	{r3, pc}
1a000862:	bf00      	nop

1a000864 <mpu9250InitializeControlStructure>:

/*==================[internal functions definition]==========================*/

static int8_t mpu9250InitializeControlStructure( void )
{
	control._tempScale = 333.87f;
1a000864:	4b1b      	ldr	r3, [pc, #108]	; (1a0008d4 <mpu9250InitializeControlStructure+0x70>)
1a000866:	4a1c      	ldr	r2, [pc, #112]	; (1a0008d8 <mpu9250InitializeControlStructure+0x74>)
1a000868:	619a      	str	r2, [r3, #24]
	control._tempOffset = 21.0f;
1a00086a:	4a1c      	ldr	r2, [pc, #112]	; (1a0008dc <mpu9250InitializeControlStructure+0x78>)
1a00086c:	61da      	str	r2, [r3, #28]
	control._numSamples = 100;
1a00086e:	2264      	movs	r2, #100	; 0x64
1a000870:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	control._axs = 1.0f;
1a000874:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
1a000878:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	control._ays = 1.0f;
1a00087c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	control._azs = 1.0f;
1a000880:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	control._maxCounts = 1000;
1a000884:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a000888:	f8a3 10d8 	strh.w	r1, [r3, #216]	; 0xd8
	control._deltaThresh = 0.3f;
1a00088c:	4914      	ldr	r1, [pc, #80]	; (1a0008e0 <mpu9250InitializeControlStructure+0x7c>)
1a00088e:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
	control._coeff = 8;
1a000892:	2108      	movs	r1, #8
1a000894:	f883 10e0 	strb.w	r1, [r3, #224]	; 0xe0
	control._hxs = 1.0f;
1a000898:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	control._hys = 1.0f;
1a00089c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	control._hzs = 1.0f;
1a0008a0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	control.tX[0] = 0;
1a0008a4:	2200      	movs	r2, #0
1a0008a6:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
	control.tX[1] = 1;
1a0008aa:	2101      	movs	r1, #1
1a0008ac:	f8a3 1142 	strh.w	r1, [r3, #322]	; 0x142
	control.tX[2] = 0;
1a0008b0:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
	control.tY[0] = 1;
1a0008b4:	f8a3 1146 	strh.w	r1, [r3, #326]	; 0x146
	control.tY[1] = 0;
1a0008b8:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148
	control.tY[2] = 0;
1a0008bc:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
	control.tZ[0] = 0;
1a0008c0:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
	control.tZ[1] = 0;
1a0008c4:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
	control.tZ[2] = -1;
1a0008c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
1a0008cc:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
}
1a0008d0:	4770      	bx	lr
1a0008d2:	bf00      	nop
1a0008d4:	10000990 	.word	0x10000990
1a0008d8:	43a6ef5c 	.word	0x43a6ef5c
1a0008dc:	41a80000 	.word	0x41a80000
1a0008e0:	3e99999a 	.word	0x3e99999a

1a0008e4 <mpu9250ReadRegisters>:
      return -1;
	}
}

static int8_t mpu9250ReadRegisters( uint8_t subAddress, uint8_t count )
{
1a0008e4:	b510      	push	{r4, lr}
1a0008e6:	b086      	sub	sp, #24
1a0008e8:	aa06      	add	r2, sp, #24
1a0008ea:	f802 0d01 	strb.w	r0, [r2, #-1]!
	if( i2cRead( I2C0,control.address,&subAddress,1,TRUE,control._buffer,count,TRUE) ){
1a0008ee:	4809      	ldr	r0, [pc, #36]	; (1a000914 <mpu9250ReadRegisters+0x30>)
1a0008f0:	f810 4b24 	ldrb.w	r4, [r0], #36
1a0008f4:	2301      	movs	r3, #1
1a0008f6:	9300      	str	r3, [sp, #0]
1a0008f8:	9001      	str	r0, [sp, #4]
1a0008fa:	9102      	str	r1, [sp, #8]
1a0008fc:	9303      	str	r3, [sp, #12]
1a0008fe:	2000      	movs	r0, #0
1a000900:	4621      	mov	r1, r4
1a000902:	f000 fdc7 	bl	1a001494 <i2cRead>
1a000906:	b108      	cbz	r0, 1a00090c <mpu9250ReadRegisters+0x28>
		return 1;
1a000908:	2001      	movs	r0, #1
1a00090a:	e000      	b.n	1a00090e <mpu9250ReadRegisters+0x2a>
	} else {
		return -1;
1a00090c:	20ff      	movs	r0, #255	; 0xff
	}
}
1a00090e:	b240      	sxtb	r0, r0
1a000910:	b006      	add	sp, #24
1a000912:	bd10      	pop	{r4, pc}
1a000914:	10000990 	.word	0x10000990

1a000918 <mpu9250WhoAmI>:
		return -6;
	}
}

static int8_t mpu9250WhoAmI( void )
{
1a000918:	b508      	push	{r3, lr}
	// read the WHO AM I register
	if (mpu9250ReadRegisters(MPU9250_WHO_AM_I,1) < 0) {
1a00091a:	2075      	movs	r0, #117	; 0x75
1a00091c:	2101      	movs	r1, #1
1a00091e:	f7ff ffe1 	bl	1a0008e4 <mpu9250ReadRegisters>
1a000922:	2800      	cmp	r0, #0
1a000924:	db03      	blt.n	1a00092e <mpu9250WhoAmI+0x16>
		return -1;
	}
	// return the register value
	return control._buffer[0];
1a000926:	4b03      	ldr	r3, [pc, #12]	; (1a000934 <mpu9250WhoAmI+0x1c>)
1a000928:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
1a00092c:	e000      	b.n	1a000930 <mpu9250WhoAmI+0x18>

static int8_t mpu9250WhoAmI( void )
{
	// read the WHO AM I register
	if (mpu9250ReadRegisters(MPU9250_WHO_AM_I,1) < 0) {
		return -1;
1a00092e:	20ff      	movs	r0, #255	; 0xff
	}
	// return the register value
	return control._buffer[0];
}
1a000930:	b240      	sxtb	r0, r0
1a000932:	bd08      	pop	{r3, pc}
1a000934:	10000990 	.word	0x10000990

1a000938 <mpu9250WriteRegister>:
	control.tZ[1] = 0;
	control.tZ[2] = -1;
}

static int8_t mpu9250WriteRegister( uint8_t subAddress, uint8_t data )
{
1a000938:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00093a:	b085      	sub	sp, #20
1a00093c:	4607      	mov	r7, r0
1a00093e:	460c      	mov	r4, r1
	uint8_t transmitDataBuffer[2];
	transmitDataBuffer[0] = subAddress;
1a000940:	f88d 000c 	strb.w	r0, [sp, #12]
	transmitDataBuffer[1] = data;
1a000944:	f88d 100d 	strb.w	r1, [sp, #13]
	i2cWrite(I2C0, control.address, transmitDataBuffer, 2, TRUE);
1a000948:	4d0d      	ldr	r5, [pc, #52]	; (1a000980 <mpu9250WriteRegister+0x48>)
1a00094a:	7829      	ldrb	r1, [r5, #0]
1a00094c:	2601      	movs	r6, #1
1a00094e:	9600      	str	r6, [sp, #0]
1a000950:	2000      	movs	r0, #0
1a000952:	aa03      	add	r2, sp, #12
1a000954:	2302      	movs	r3, #2
1a000956:	f000 fdb3 	bl	1a0014c0 <i2cWrite>

	delay(10);
1a00095a:	200a      	movs	r0, #10
1a00095c:	2100      	movs	r1, #0
1a00095e:	f000 fd21 	bl	1a0013a4 <delay>

	/* read back the register */
	mpu9250ReadRegisters(subAddress,1);
1a000962:	4638      	mov	r0, r7
1a000964:	4631      	mov	r1, r6
1a000966:	f7ff ffbd 	bl	1a0008e4 <mpu9250ReadRegisters>
	/* check the read back register against the written register */
	if(control._buffer[0] == data) {
1a00096a:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
1a00096e:	42a3      	cmp	r3, r4
1a000970:	d101      	bne.n	1a000976 <mpu9250WriteRegister+0x3e>
      return 1;
1a000972:	4630      	mov	r0, r6
1a000974:	e000      	b.n	1a000978 <mpu9250WriteRegister+0x40>
	}
	else{
      return -1;
1a000976:	20ff      	movs	r0, #255	; 0xff
	}
}
1a000978:	b240      	sxtb	r0, r0
1a00097a:	b005      	add	sp, #20
1a00097c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00097e:	bf00      	nop
1a000980:	10000990 	.word	0x10000990

1a000984 <mpu9250ReadAK8963Registers>:
	// return the register value
	return control._buffer[0];
}

static int8_t mpu9250ReadAK8963Registers( uint8_t subAddress, uint8_t count )
{
1a000984:	b538      	push	{r3, r4, r5, lr}
1a000986:	4605      	mov	r5, r0
1a000988:	460c      	mov	r4, r1
	// set slave 0 to the AK8963 and set for read
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_ADDR, MPU9250_AK8963_I2C_ADDR | MPU9250_I2C_READ_FLAG) < 0) {
1a00098a:	2025      	movs	r0, #37	; 0x25
1a00098c:	218c      	movs	r1, #140	; 0x8c
1a00098e:	f7ff ffd3 	bl	1a000938 <mpu9250WriteRegister>
1a000992:	2800      	cmp	r0, #0
1a000994:	db18      	blt.n	1a0009c8 <mpu9250ReadAK8963Registers+0x44>
		return -1;
	}
	// set the register to the desired AK8963 sub address
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_REG, subAddress) < 0) {
1a000996:	2026      	movs	r0, #38	; 0x26
1a000998:	4629      	mov	r1, r5
1a00099a:	f7ff ffcd 	bl	1a000938 <mpu9250WriteRegister>
1a00099e:	2800      	cmp	r0, #0
1a0009a0:	db14      	blt.n	1a0009cc <mpu9250ReadAK8963Registers+0x48>
		return -2;
	}
	// enable I2C and request the bytes
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_CTRL, MPU9250_I2C_SLV0_EN | count) < 0) {
1a0009a2:	2027      	movs	r0, #39	; 0x27
1a0009a4:	f044 0180 	orr.w	r1, r4, #128	; 0x80
1a0009a8:	f7ff ffc6 	bl	1a000938 <mpu9250WriteRegister>
1a0009ac:	2800      	cmp	r0, #0
1a0009ae:	db0f      	blt.n	1a0009d0 <mpu9250ReadAK8963Registers+0x4c>
		return -3;
	}
	delay(1); // takes some time for these registers to fill
1a0009b0:	2001      	movs	r0, #1
1a0009b2:	2100      	movs	r1, #0
1a0009b4:	f000 fcf6 	bl	1a0013a4 <delay>
	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	control._status = mpu9250ReadRegisters(MPU9250_EXT_SENS_DATA_00,count);
1a0009b8:	2049      	movs	r0, #73	; 0x49
1a0009ba:	4621      	mov	r1, r4
1a0009bc:	f7ff ff92 	bl	1a0008e4 <mpu9250ReadRegisters>
1a0009c0:	4b05      	ldr	r3, [pc, #20]	; (1a0009d8 <mpu9250ReadAK8963Registers+0x54>)
1a0009c2:	f883 0152 	strb.w	r0, [r3, #338]	; 0x152
	return control._status;
1a0009c6:	e004      	b.n	1a0009d2 <mpu9250ReadAK8963Registers+0x4e>

static int8_t mpu9250ReadAK8963Registers( uint8_t subAddress, uint8_t count )
{
	// set slave 0 to the AK8963 and set for read
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_ADDR, MPU9250_AK8963_I2C_ADDR | MPU9250_I2C_READ_FLAG) < 0) {
		return -1;
1a0009c8:	20ff      	movs	r0, #255	; 0xff
1a0009ca:	e002      	b.n	1a0009d2 <mpu9250ReadAK8963Registers+0x4e>
	}
	// set the register to the desired AK8963 sub address
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_REG, subAddress) < 0) {
		return -2;
1a0009cc:	20fe      	movs	r0, #254	; 0xfe
1a0009ce:	e000      	b.n	1a0009d2 <mpu9250ReadAK8963Registers+0x4e>
	}
	// enable I2C and request the bytes
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_CTRL, MPU9250_I2C_SLV0_EN | count) < 0) {
		return -3;
1a0009d0:	20fd      	movs	r0, #253	; 0xfd
	}
	delay(1); // takes some time for these registers to fill
	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	control._status = mpu9250ReadRegisters(MPU9250_EXT_SENS_DATA_00,count);
	return control._status;
}
1a0009d2:	b240      	sxtb	r0, r0
1a0009d4:	bd38      	pop	{r3, r4, r5, pc}
1a0009d6:	bf00      	nop
1a0009d8:	10000990 	.word	0x10000990

1a0009dc <mpu9250WhoAmIAK8963>:
	// return the register value
	return control._buffer[0];
}

static int8_t mpu9250WhoAmIAK8963( void )
{
1a0009dc:	b508      	push	{r3, lr}
	// read the WHO AM I register
	if (mpu9250ReadAK8963Registers(MPU9250_AK8963_WHO_AM_I,1) < 0) {
1a0009de:	2000      	movs	r0, #0
1a0009e0:	2101      	movs	r1, #1
1a0009e2:	f7ff ffcf 	bl	1a000984 <mpu9250ReadAK8963Registers>
1a0009e6:	2800      	cmp	r0, #0
1a0009e8:	db03      	blt.n	1a0009f2 <mpu9250WhoAmIAK8963+0x16>
		return -1;
	}
	// return the register value
	return control._buffer[0];
1a0009ea:	4b03      	ldr	r3, [pc, #12]	; (1a0009f8 <mpu9250WhoAmIAK8963+0x1c>)
1a0009ec:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
1a0009f0:	e000      	b.n	1a0009f4 <mpu9250WhoAmIAK8963+0x18>

static int8_t mpu9250WhoAmIAK8963( void )
{
	// read the WHO AM I register
	if (mpu9250ReadAK8963Registers(MPU9250_AK8963_WHO_AM_I,1) < 0) {
		return -1;
1a0009f2:	20ff      	movs	r0, #255	; 0xff
	}
	// return the register value
	return control._buffer[0];
}
1a0009f4:	b240      	sxtb	r0, r0
1a0009f6:	bd08      	pop	{r3, pc}
1a0009f8:	10000990 	.word	0x10000990

1a0009fc <mpu9250WriteAK8963Register>:
		return -1;
	}
}

static int8_t mpu9250WriteAK8963Register( uint8_t subAddress, uint8_t data )
{
1a0009fc:	b538      	push	{r3, r4, r5, lr}
1a0009fe:	4604      	mov	r4, r0
1a000a00:	460d      	mov	r5, r1
	// set slave 0 to the AK8963 and set for write
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_ADDR, MPU9250_AK8963_I2C_ADDR) < 0) {
1a000a02:	2025      	movs	r0, #37	; 0x25
1a000a04:	210c      	movs	r1, #12
1a000a06:	f7ff ff97 	bl	1a000938 <mpu9250WriteRegister>
1a000a0a:	2800      	cmp	r0, #0
1a000a0c:	db1e      	blt.n	1a000a4c <mpu9250WriteAK8963Register+0x50>
		return -1;
	}
	// set the register to the desired AK8963 sub address
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_REG, subAddress) < 0) {
1a000a0e:	2026      	movs	r0, #38	; 0x26
1a000a10:	4621      	mov	r1, r4
1a000a12:	f7ff ff91 	bl	1a000938 <mpu9250WriteRegister>
1a000a16:	2800      	cmp	r0, #0
1a000a18:	db1a      	blt.n	1a000a50 <mpu9250WriteAK8963Register+0x54>
		return -2;
	}
	// store the data for write
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_DO, data) < 0) {
1a000a1a:	2063      	movs	r0, #99	; 0x63
1a000a1c:	4629      	mov	r1, r5
1a000a1e:	f7ff ff8b 	bl	1a000938 <mpu9250WriteRegister>
1a000a22:	2800      	cmp	r0, #0
1a000a24:	db16      	blt.n	1a000a54 <mpu9250WriteAK8963Register+0x58>
		return -3;
	}
	// enable I2C and send 1 byte
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_CTRL, MPU9250_I2C_SLV0_EN | (uint8_t)1) < 0) {
1a000a26:	2027      	movs	r0, #39	; 0x27
1a000a28:	2181      	movs	r1, #129	; 0x81
1a000a2a:	f7ff ff85 	bl	1a000938 <mpu9250WriteRegister>
1a000a2e:	2800      	cmp	r0, #0
1a000a30:	db12      	blt.n	1a000a58 <mpu9250WriteAK8963Register+0x5c>
		return -4;
	}
	// read the register and confirm
	if (mpu9250ReadAK8963Registers(subAddress,1) < 0) {
1a000a32:	4620      	mov	r0, r4
1a000a34:	2101      	movs	r1, #1
1a000a36:	f7ff ffa5 	bl	1a000984 <mpu9250ReadAK8963Registers>
1a000a3a:	2800      	cmp	r0, #0
1a000a3c:	db0e      	blt.n	1a000a5c <mpu9250WriteAK8963Register+0x60>
		return -5;
	}
	if(control._buffer[0] == data) {
1a000a3e:	4b0a      	ldr	r3, [pc, #40]	; (1a000a68 <mpu9250WriteAK8963Register+0x6c>)
1a000a40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
1a000a44:	42ab      	cmp	r3, r5
1a000a46:	d10b      	bne.n	1a000a60 <mpu9250WriteAK8963Register+0x64>
		return 1;
1a000a48:	2001      	movs	r0, #1
1a000a4a:	e00a      	b.n	1a000a62 <mpu9250WriteAK8963Register+0x66>

static int8_t mpu9250WriteAK8963Register( uint8_t subAddress, uint8_t data )
{
	// set slave 0 to the AK8963 and set for write
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_ADDR, MPU9250_AK8963_I2C_ADDR) < 0) {
		return -1;
1a000a4c:	20ff      	movs	r0, #255	; 0xff
1a000a4e:	e008      	b.n	1a000a62 <mpu9250WriteAK8963Register+0x66>
	}
	// set the register to the desired AK8963 sub address
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_REG, subAddress) < 0) {
		return -2;
1a000a50:	20fe      	movs	r0, #254	; 0xfe
1a000a52:	e006      	b.n	1a000a62 <mpu9250WriteAK8963Register+0x66>
	}
	// store the data for write
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_DO, data) < 0) {
		return -3;
1a000a54:	20fd      	movs	r0, #253	; 0xfd
1a000a56:	e004      	b.n	1a000a62 <mpu9250WriteAK8963Register+0x66>
	}
	// enable I2C and send 1 byte
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_CTRL, MPU9250_I2C_SLV0_EN | (uint8_t)1) < 0) {
		return -4;
1a000a58:	20fc      	movs	r0, #252	; 0xfc
1a000a5a:	e002      	b.n	1a000a62 <mpu9250WriteAK8963Register+0x66>
	}
	// read the register and confirm
	if (mpu9250ReadAK8963Registers(subAddress,1) < 0) {
		return -5;
1a000a5c:	20fb      	movs	r0, #251	; 0xfb
1a000a5e:	e000      	b.n	1a000a62 <mpu9250WriteAK8963Register+0x66>
	}
	if(control._buffer[0] == data) {
		return 1;
	} else{
		return -6;
1a000a60:	20fa      	movs	r0, #250	; 0xfa
	}
}
1a000a62:	b240      	sxtb	r0, r0
1a000a64:	bd38      	pop	{r3, r4, r5, pc}
1a000a66:	bf00      	nop
1a000a68:	10000990 	.word	0x10000990

1a000a6c <mpu9250SetGyroRange>:
	}
	return 1;
}

static int8_t mpu9250SetGyroRange( MPU9250_GyroRange_t range )
{
1a000a6c:	b510      	push	{r4, lr}
1a000a6e:	4604      	mov	r4, r0
	switch(range) {
1a000a70:	2803      	cmp	r0, #3
1a000a72:	d82a      	bhi.n	1a000aca <mpu9250SetGyroRange+0x5e>
1a000a74:	e8df f000 	tbb	[pc, r0]
1a000a78:	20160c02 	.word	0x20160c02
		case MPU9250_GYRO_RANGE_250DPS: {
		  // setting the gyro range to 250DPS
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_250DPS) < 0){
1a000a7c:	201b      	movs	r0, #27
1a000a7e:	2100      	movs	r1, #0
1a000a80:	f7ff ff5a 	bl	1a000938 <mpu9250WriteRegister>
1a000a84:	2800      	cmp	r0, #0
1a000a86:	db25      	blt.n	1a000ad4 <mpu9250SetGyroRange+0x68>
			return -1;
		  }
        // setting the gyro scale to 250DPS
		  control._gyroScale = 250.0f/32767.5f * MPU9250_D2R; 
1a000a88:	4a17      	ldr	r2, [pc, #92]	; (1a000ae8 <mpu9250SetGyroRange+0x7c>)
1a000a8a:	4b18      	ldr	r3, [pc, #96]	; (1a000aec <mpu9250SetGyroRange+0x80>)
1a000a8c:	609a      	str	r2, [r3, #8]
		  break;
1a000a8e:	e01c      	b.n	1a000aca <mpu9250SetGyroRange+0x5e>
		}
		case MPU9250_GYRO_RANGE_500DPS: {
		  // setting the gyro range to 500DPS
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_500DPS) < 0){
1a000a90:	201b      	movs	r0, #27
1a000a92:	2108      	movs	r1, #8
1a000a94:	f7ff ff50 	bl	1a000938 <mpu9250WriteRegister>
1a000a98:	2800      	cmp	r0, #0
1a000a9a:	db1d      	blt.n	1a000ad8 <mpu9250SetGyroRange+0x6c>
			return -1;
		  }
        // setting the gyro scale to 500DPS
		  control._gyroScale = 500.0f/32767.5f * MPU9250_D2R; 
1a000a9c:	4a14      	ldr	r2, [pc, #80]	; (1a000af0 <mpu9250SetGyroRange+0x84>)
1a000a9e:	4b13      	ldr	r3, [pc, #76]	; (1a000aec <mpu9250SetGyroRange+0x80>)
1a000aa0:	609a      	str	r2, [r3, #8]
		  break;
1a000aa2:	e012      	b.n	1a000aca <mpu9250SetGyroRange+0x5e>
		}
		case MPU9250_GYRO_RANGE_1000DPS: {
		  // setting the gyro range to 1000DPS
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_1000DPS) < 0){
1a000aa4:	201b      	movs	r0, #27
1a000aa6:	2110      	movs	r1, #16
1a000aa8:	f7ff ff46 	bl	1a000938 <mpu9250WriteRegister>
1a000aac:	2800      	cmp	r0, #0
1a000aae:	db15      	blt.n	1a000adc <mpu9250SetGyroRange+0x70>
			return -1;
		  }
        // setting the gyro scale to 1000DPS
		  control._gyroScale = 1000.0f/32767.5f * MPU9250_D2R; 
1a000ab0:	4a10      	ldr	r2, [pc, #64]	; (1a000af4 <mpu9250SetGyroRange+0x88>)
1a000ab2:	4b0e      	ldr	r3, [pc, #56]	; (1a000aec <mpu9250SetGyroRange+0x80>)
1a000ab4:	609a      	str	r2, [r3, #8]
		  break;
1a000ab6:	e008      	b.n	1a000aca <mpu9250SetGyroRange+0x5e>
		}
		case MPU9250_GYRO_RANGE_2000DPS: {
		  // setting the gyro range to 2000DPS
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_2000DPS) < 0){
1a000ab8:	201b      	movs	r0, #27
1a000aba:	2118      	movs	r1, #24
1a000abc:	f7ff ff3c 	bl	1a000938 <mpu9250WriteRegister>
1a000ac0:	2800      	cmp	r0, #0
1a000ac2:	db0d      	blt.n	1a000ae0 <mpu9250SetGyroRange+0x74>
			return -1;
		  }
        // setting the gyro scale to 2000DPS
		  control._gyroScale = 2000.0f/32767.5f * MPU9250_D2R; 
1a000ac4:	4a0c      	ldr	r2, [pc, #48]	; (1a000af8 <mpu9250SetGyroRange+0x8c>)
1a000ac6:	4b09      	ldr	r3, [pc, #36]	; (1a000aec <mpu9250SetGyroRange+0x80>)
1a000ac8:	609a      	str	r2, [r3, #8]
		  break;
		}
	}
	control._gyroRange = range;
1a000aca:	4b08      	ldr	r3, [pc, #32]	; (1a000aec <mpu9250SetGyroRange+0x80>)
1a000acc:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
	return 1;
1a000ad0:	2001      	movs	r0, #1
1a000ad2:	e006      	b.n	1a000ae2 <mpu9250SetGyroRange+0x76>
{
	switch(range) {
		case MPU9250_GYRO_RANGE_250DPS: {
		  // setting the gyro range to 250DPS
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_250DPS) < 0){
			return -1;
1a000ad4:	20ff      	movs	r0, #255	; 0xff
1a000ad6:	e004      	b.n	1a000ae2 <mpu9250SetGyroRange+0x76>
		  break;
		}
		case MPU9250_GYRO_RANGE_500DPS: {
		  // setting the gyro range to 500DPS
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_500DPS) < 0){
			return -1;
1a000ad8:	20ff      	movs	r0, #255	; 0xff
1a000ada:	e002      	b.n	1a000ae2 <mpu9250SetGyroRange+0x76>
		  break;
		}
		case MPU9250_GYRO_RANGE_1000DPS: {
		  // setting the gyro range to 1000DPS
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_1000DPS) < 0){
			return -1;
1a000adc:	20ff      	movs	r0, #255	; 0xff
1a000ade:	e000      	b.n	1a000ae2 <mpu9250SetGyroRange+0x76>
		  break;
		}
		case MPU9250_GYRO_RANGE_2000DPS: {
		  // setting the gyro range to 2000DPS
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_2000DPS) < 0){
			return -1;
1a000ae0:	20ff      	movs	r0, #255	; 0xff
		  break;
		}
	}
	control._gyroRange = range;
	return 1;
}
1a000ae2:	b240      	sxtb	r0, r0
1a000ae4:	bd10      	pop	{r4, pc}
1a000ae6:	bf00      	nop
1a000ae8:	390ba0e4 	.word	0x390ba0e4
1a000aec:	10000990 	.word	0x10000990
1a000af0:	398ba0e4 	.word	0x398ba0e4
1a000af4:	3a0ba0e4 	.word	0x3a0ba0e4
1a000af8:	3a8ba0e4 	.word	0x3a8ba0e4

1a000afc <mpu9250SetDlpfBandwidth>:

static int8_t mpu9250SetDlpfBandwidth( MPU9250_DlpfBandwidth_t bandwidth )
{
1a000afc:	b510      	push	{r4, lr}
1a000afe:	4604      	mov	r4, r0
	switch (bandwidth) {
1a000b00:	2805      	cmp	r0, #5
1a000b02:	d851      	bhi.n	1a000ba8 <mpu9250SetDlpfBandwidth+0xac>
1a000b04:	e8df f000 	tbb	[pc, r0]
1a000b08:	2a1d1003 	.word	0x2a1d1003
1a000b0c:	4437      	.short	0x4437
		case MPU9250_DLPF_BANDWIDTH_184HZ: {
         // setting accel bandwidth to 184Hz
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_184) < 0) { 
1a000b0e:	201d      	movs	r0, #29
1a000b10:	2101      	movs	r1, #1
1a000b12:	f7ff ff11 	bl	1a000938 <mpu9250WriteRegister>
1a000b16:	2800      	cmp	r0, #0
1a000b18:	db4b      	blt.n	1a000bb2 <mpu9250SetDlpfBandwidth+0xb6>
				return -1;
			}
         // setting gyro bandwidth to 184Hz
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_184) < 0) { 
1a000b1a:	201a      	movs	r0, #26
1a000b1c:	2101      	movs	r1, #1
1a000b1e:	f7ff ff0b 	bl	1a000938 <mpu9250WriteRegister>
1a000b22:	2800      	cmp	r0, #0
1a000b24:	da40      	bge.n	1a000ba8 <mpu9250SetDlpfBandwidth+0xac>
1a000b26:	e046      	b.n	1a000bb6 <mpu9250SetDlpfBandwidth+0xba>
			}
			break;
		}
		case MPU9250_DLPF_BANDWIDTH_92HZ: {
         // setting accel bandwidth to 92Hz
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_92) < 0) { 
1a000b28:	201d      	movs	r0, #29
1a000b2a:	2102      	movs	r1, #2
1a000b2c:	f7ff ff04 	bl	1a000938 <mpu9250WriteRegister>
1a000b30:	2800      	cmp	r0, #0
1a000b32:	db42      	blt.n	1a000bba <mpu9250SetDlpfBandwidth+0xbe>
				return -1;
			}
         // setting gyro bandwidth to 92Hz
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_92) < 0) { 
1a000b34:	201a      	movs	r0, #26
1a000b36:	2102      	movs	r1, #2
1a000b38:	f7ff fefe 	bl	1a000938 <mpu9250WriteRegister>
1a000b3c:	2800      	cmp	r0, #0
1a000b3e:	da33      	bge.n	1a000ba8 <mpu9250SetDlpfBandwidth+0xac>
1a000b40:	e03d      	b.n	1a000bbe <mpu9250SetDlpfBandwidth+0xc2>
			}
			break;
		}
		case MPU9250_DLPF_BANDWIDTH_41HZ: {
         // setting accel bandwidth to 41Hz
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_41) < 0) { 
1a000b42:	201d      	movs	r0, #29
1a000b44:	2103      	movs	r1, #3
1a000b46:	f7ff fef7 	bl	1a000938 <mpu9250WriteRegister>
1a000b4a:	2800      	cmp	r0, #0
1a000b4c:	db39      	blt.n	1a000bc2 <mpu9250SetDlpfBandwidth+0xc6>
				return -1;
			}
         // setting gyro bandwidth to 41Hz
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_41) < 0) { 
1a000b4e:	201a      	movs	r0, #26
1a000b50:	2103      	movs	r1, #3
1a000b52:	f7ff fef1 	bl	1a000938 <mpu9250WriteRegister>
1a000b56:	2800      	cmp	r0, #0
1a000b58:	da26      	bge.n	1a000ba8 <mpu9250SetDlpfBandwidth+0xac>
1a000b5a:	e034      	b.n	1a000bc6 <mpu9250SetDlpfBandwidth+0xca>
			}
			break;
		}
		case MPU9250_DLPF_BANDWIDTH_20HZ: {
         // setting accel bandwidth to 20Hz
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_20) < 0) { 
1a000b5c:	201d      	movs	r0, #29
1a000b5e:	2104      	movs	r1, #4
1a000b60:	f7ff feea 	bl	1a000938 <mpu9250WriteRegister>
1a000b64:	2800      	cmp	r0, #0
1a000b66:	db30      	blt.n	1a000bca <mpu9250SetDlpfBandwidth+0xce>
				return -1;
			}
         // setting gyro bandwidth to 20Hz
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_20) < 0) { 
1a000b68:	201a      	movs	r0, #26
1a000b6a:	2104      	movs	r1, #4
1a000b6c:	f7ff fee4 	bl	1a000938 <mpu9250WriteRegister>
1a000b70:	2800      	cmp	r0, #0
1a000b72:	da19      	bge.n	1a000ba8 <mpu9250SetDlpfBandwidth+0xac>
1a000b74:	e02b      	b.n	1a000bce <mpu9250SetDlpfBandwidth+0xd2>
			}
			break;
		}
		case MPU9250_DLPF_BANDWIDTH_10HZ: {
         // setting accel bandwidth to 10Hz
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_10) < 0) { 
1a000b76:	201d      	movs	r0, #29
1a000b78:	2105      	movs	r1, #5
1a000b7a:	f7ff fedd 	bl	1a000938 <mpu9250WriteRegister>
1a000b7e:	2800      	cmp	r0, #0
1a000b80:	db27      	blt.n	1a000bd2 <mpu9250SetDlpfBandwidth+0xd6>
				return -1;
			}
         // setting gyro bandwidth to 10Hz
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_10) < 0) { 
1a000b82:	201a      	movs	r0, #26
1a000b84:	2105      	movs	r1, #5
1a000b86:	f7ff fed7 	bl	1a000938 <mpu9250WriteRegister>
1a000b8a:	2800      	cmp	r0, #0
1a000b8c:	da0c      	bge.n	1a000ba8 <mpu9250SetDlpfBandwidth+0xac>
1a000b8e:	e022      	b.n	1a000bd6 <mpu9250SetDlpfBandwidth+0xda>
			}
			break;
		}
		case MPU9250_DLPF_BANDWIDTH_5HZ: {
         // setting accel bandwidth to 5Hz
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_5) < 0) { 
1a000b90:	201d      	movs	r0, #29
1a000b92:	2106      	movs	r1, #6
1a000b94:	f7ff fed0 	bl	1a000938 <mpu9250WriteRegister>
1a000b98:	2800      	cmp	r0, #0
1a000b9a:	db1e      	blt.n	1a000bda <mpu9250SetDlpfBandwidth+0xde>
				return -1;
			}
         // setting gyro bandwidth to 5Hz
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_5) < 0) { 
1a000b9c:	201a      	movs	r0, #26
1a000b9e:	2106      	movs	r1, #6
1a000ba0:	f7ff feca 	bl	1a000938 <mpu9250WriteRegister>
1a000ba4:	2800      	cmp	r0, #0
1a000ba6:	db1a      	blt.n	1a000bde <mpu9250SetDlpfBandwidth+0xe2>
				return -2;
			}
			break;
		}
	}
	control._bandwidth = bandwidth;
1a000ba8:	4b0e      	ldr	r3, [pc, #56]	; (1a000be4 <mpu9250SetDlpfBandwidth+0xe8>)
1a000baa:	f883 4022 	strb.w	r4, [r3, #34]	; 0x22
	return 1;
1a000bae:	2001      	movs	r0, #1
1a000bb0:	e016      	b.n	1a000be0 <mpu9250SetDlpfBandwidth+0xe4>
{
	switch (bandwidth) {
		case MPU9250_DLPF_BANDWIDTH_184HZ: {
         // setting accel bandwidth to 184Hz
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_184) < 0) { 
				return -1;
1a000bb2:	20ff      	movs	r0, #255	; 0xff
1a000bb4:	e014      	b.n	1a000be0 <mpu9250SetDlpfBandwidth+0xe4>
			}
         // setting gyro bandwidth to 184Hz
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_184) < 0) { 
				return -2;
1a000bb6:	20fe      	movs	r0, #254	; 0xfe
1a000bb8:	e012      	b.n	1a000be0 <mpu9250SetDlpfBandwidth+0xe4>
			break;
		}
		case MPU9250_DLPF_BANDWIDTH_92HZ: {
         // setting accel bandwidth to 92Hz
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_92) < 0) { 
				return -1;
1a000bba:	20ff      	movs	r0, #255	; 0xff
1a000bbc:	e010      	b.n	1a000be0 <mpu9250SetDlpfBandwidth+0xe4>
			}
         // setting gyro bandwidth to 92Hz
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_92) < 0) { 
				return -2;
1a000bbe:	20fe      	movs	r0, #254	; 0xfe
1a000bc0:	e00e      	b.n	1a000be0 <mpu9250SetDlpfBandwidth+0xe4>
			break;
		}
		case MPU9250_DLPF_BANDWIDTH_41HZ: {
         // setting accel bandwidth to 41Hz
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_41) < 0) { 
				return -1;
1a000bc2:	20ff      	movs	r0, #255	; 0xff
1a000bc4:	e00c      	b.n	1a000be0 <mpu9250SetDlpfBandwidth+0xe4>
			}
         // setting gyro bandwidth to 41Hz
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_41) < 0) { 
				return -2;
1a000bc6:	20fe      	movs	r0, #254	; 0xfe
1a000bc8:	e00a      	b.n	1a000be0 <mpu9250SetDlpfBandwidth+0xe4>
			break;
		}
		case MPU9250_DLPF_BANDWIDTH_20HZ: {
         // setting accel bandwidth to 20Hz
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_20) < 0) { 
				return -1;
1a000bca:	20ff      	movs	r0, #255	; 0xff
1a000bcc:	e008      	b.n	1a000be0 <mpu9250SetDlpfBandwidth+0xe4>
			}
         // setting gyro bandwidth to 20Hz
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_20) < 0) { 
				return -2;
1a000bce:	20fe      	movs	r0, #254	; 0xfe
1a000bd0:	e006      	b.n	1a000be0 <mpu9250SetDlpfBandwidth+0xe4>
			break;
		}
		case MPU9250_DLPF_BANDWIDTH_10HZ: {
         // setting accel bandwidth to 10Hz
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_10) < 0) { 
				return -1;
1a000bd2:	20ff      	movs	r0, #255	; 0xff
1a000bd4:	e004      	b.n	1a000be0 <mpu9250SetDlpfBandwidth+0xe4>
			}
         // setting gyro bandwidth to 10Hz
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_10) < 0) { 
				return -2;
1a000bd6:	20fe      	movs	r0, #254	; 0xfe
1a000bd8:	e002      	b.n	1a000be0 <mpu9250SetDlpfBandwidth+0xe4>
			break;
		}
		case MPU9250_DLPF_BANDWIDTH_5HZ: {
         // setting accel bandwidth to 5Hz
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_5) < 0) { 
				return -1;
1a000bda:	20ff      	movs	r0, #255	; 0xff
1a000bdc:	e000      	b.n	1a000be0 <mpu9250SetDlpfBandwidth+0xe4>
			}
         // setting gyro bandwidth to 5Hz
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_5) < 0) { 
				return -2;
1a000bde:	20fe      	movs	r0, #254	; 0xfe
			break;
		}
	}
	control._bandwidth = bandwidth;
	return 1;
}
1a000be0:	b240      	sxtb	r0, r0
1a000be2:	bd10      	pop	{r4, pc}
1a000be4:	10000990 	.word	0x10000990

1a000be8 <mpu9250SetSrd>:

static int8_t mpu9250SetSrd( uint8_t srd )
{
1a000be8:	b510      	push	{r4, lr}
1a000bea:	4604      	mov	r4, r0
	/* setting the sample rate divider to 19 to facilitate setting up 
      magnetometer */
   // setting the sample rate divider
	if (mpu9250WriteRegister(MPU9250_SMPDIV, 19) < 0) {
1a000bec:	2019      	movs	r0, #25
1a000bee:	2113      	movs	r1, #19
1a000bf0:	f7ff fea2 	bl	1a000938 <mpu9250WriteRegister>
1a000bf4:	2800      	cmp	r0, #0
1a000bf6:	db3d      	blt.n	1a000c74 <mpu9250SetSrd+0x8c>
		return -1;
	}
	if (srd > 9) {
1a000bf8:	2c09      	cmp	r4, #9
1a000bfa:	d918      	bls.n	1a000c2e <mpu9250SetSrd+0x46>
		// set AK8963 to Power Down
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a000bfc:	200a      	movs	r0, #10
1a000bfe:	2100      	movs	r1, #0
1a000c00:	f7ff fefc 	bl	1a0009fc <mpu9250WriteAK8963Register>
1a000c04:	2800      	cmp	r0, #0
1a000c06:	db37      	blt.n	1a000c78 <mpu9250SetSrd+0x90>
			return -2;
		}
		delay(100); // long wait between AK8963 mode changes
1a000c08:	2064      	movs	r0, #100	; 0x64
1a000c0a:	2100      	movs	r1, #0
1a000c0c:	f000 fbca 	bl	1a0013a4 <delay>
		// set AK8963 to 16 bit resolution, 8 Hz update rate
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS1) < 0) {
1a000c10:	200a      	movs	r0, #10
1a000c12:	2112      	movs	r1, #18
1a000c14:	f7ff fef2 	bl	1a0009fc <mpu9250WriteAK8963Register>
1a000c18:	2800      	cmp	r0, #0
1a000c1a:	db2f      	blt.n	1a000c7c <mpu9250SetSrd+0x94>
			return -3;
		}
		delay(100); // long wait between AK8963 mode changes
1a000c1c:	2064      	movs	r0, #100	; 0x64
1a000c1e:	2100      	movs	r1, #0
1a000c20:	f000 fbc0 	bl	1a0013a4 <delay>
		// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
		mpu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
1a000c24:	2003      	movs	r0, #3
1a000c26:	2107      	movs	r1, #7
1a000c28:	f7ff feac 	bl	1a000984 <mpu9250ReadAK8963Registers>
1a000c2c:	e017      	b.n	1a000c5e <mpu9250SetSrd+0x76>
	} else {
		// set AK8963 to Power Down
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a000c2e:	200a      	movs	r0, #10
1a000c30:	2100      	movs	r1, #0
1a000c32:	f7ff fee3 	bl	1a0009fc <mpu9250WriteAK8963Register>
1a000c36:	2800      	cmp	r0, #0
1a000c38:	db22      	blt.n	1a000c80 <mpu9250SetSrd+0x98>
			return -2;
		}
		delay(100); // long wait between AK8963 mode changes
1a000c3a:	2064      	movs	r0, #100	; 0x64
1a000c3c:	2100      	movs	r1, #0
1a000c3e:	f000 fbb1 	bl	1a0013a4 <delay>
		// set AK8963 to 16 bit resolution, 100 Hz update rate
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS2) < 0) {
1a000c42:	200a      	movs	r0, #10
1a000c44:	2116      	movs	r1, #22
1a000c46:	f7ff fed9 	bl	1a0009fc <mpu9250WriteAK8963Register>
1a000c4a:	2800      	cmp	r0, #0
1a000c4c:	db1a      	blt.n	1a000c84 <mpu9250SetSrd+0x9c>
			return -3;
		}
		delay(100); // long wait between AK8963 mode changes
1a000c4e:	2064      	movs	r0, #100	; 0x64
1a000c50:	2100      	movs	r1, #0
1a000c52:	f000 fba7 	bl	1a0013a4 <delay>
		// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
		mpu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
1a000c56:	2003      	movs	r0, #3
1a000c58:	2107      	movs	r1, #7
1a000c5a:	f7ff fe93 	bl	1a000984 <mpu9250ReadAK8963Registers>
	}
	/* setting the sample rate divider */
	if (mpu9250WriteRegister(MPU9250_SMPDIV, srd) < 0) { // setting the sample rate divider
1a000c5e:	2019      	movs	r0, #25
1a000c60:	4621      	mov	r1, r4
1a000c62:	f7ff fe69 	bl	1a000938 <mpu9250WriteRegister>
1a000c66:	2800      	cmp	r0, #0
1a000c68:	db0e      	blt.n	1a000c88 <mpu9250SetSrd+0xa0>
		return -4;
	}
	control._srd = srd;
1a000c6a:	4b09      	ldr	r3, [pc, #36]	; (1a000c90 <mpu9250SetSrd+0xa8>)
1a000c6c:	f883 4023 	strb.w	r4, [r3, #35]	; 0x23
	return 1;
1a000c70:	2001      	movs	r0, #1
1a000c72:	e00a      	b.n	1a000c8a <mpu9250SetSrd+0xa2>
{
	/* setting the sample rate divider to 19 to facilitate setting up 
      magnetometer */
   // setting the sample rate divider
	if (mpu9250WriteRegister(MPU9250_SMPDIV, 19) < 0) {
		return -1;
1a000c74:	20ff      	movs	r0, #255	; 0xff
1a000c76:	e008      	b.n	1a000c8a <mpu9250SetSrd+0xa2>
	}
	if (srd > 9) {
		// set AK8963 to Power Down
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
			return -2;
1a000c78:	20fe      	movs	r0, #254	; 0xfe
1a000c7a:	e006      	b.n	1a000c8a <mpu9250SetSrd+0xa2>
		}
		delay(100); // long wait between AK8963 mode changes
		// set AK8963 to 16 bit resolution, 8 Hz update rate
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS1) < 0) {
			return -3;
1a000c7c:	20fd      	movs	r0, #253	; 0xfd
1a000c7e:	e004      	b.n	1a000c8a <mpu9250SetSrd+0xa2>
		// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
		mpu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
	} else {
		// set AK8963 to Power Down
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
			return -2;
1a000c80:	20fe      	movs	r0, #254	; 0xfe
1a000c82:	e002      	b.n	1a000c8a <mpu9250SetSrd+0xa2>
		}
		delay(100); // long wait between AK8963 mode changes
		// set AK8963 to 16 bit resolution, 100 Hz update rate
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS2) < 0) {
			return -3;
1a000c84:	20fd      	movs	r0, #253	; 0xfd
1a000c86:	e000      	b.n	1a000c8a <mpu9250SetSrd+0xa2>
		// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
		mpu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
	}
	/* setting the sample rate divider */
	if (mpu9250WriteRegister(MPU9250_SMPDIV, srd) < 0) { // setting the sample rate divider
		return -4;
1a000c88:	20fc      	movs	r0, #252	; 0xfc
	}
	control._srd = srd;
	return 1;
}
1a000c8a:	b240      	sxtb	r0, r0
1a000c8c:	bd10      	pop	{r4, pc}
1a000c8e:	bf00      	nop
1a000c90:	10000990 	.word	0x10000990

1a000c94 <mpu9250Read>:
	return 1;
}

//Read sensor registers and store data at control structure
bool_t mpu9250Read(void)
{
1a000c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000c98:	b087      	sub	sp, #28
	// grab the data from the MPU9250
	if( !mpu9250ReadRegisters(MPU9250_ACCEL_OUT, 21) ){
1a000c9a:	203b      	movs	r0, #59	; 0x3b
1a000c9c:	2115      	movs	r1, #21
1a000c9e:	f7ff fe21 	bl	1a0008e4 <mpu9250ReadRegisters>
1a000ca2:	2800      	cmp	r0, #0
1a000ca4:	f000 813e 	beq.w	1a000f24 <mpu9250Read+0x290>
		return 0;
	}
	// combine into 16 bit values
	control._axcounts = (((int16_t)control._buffer[0]) << 8)  | control._buffer[1];
1a000ca8:	4ba0      	ldr	r3, [pc, #640]	; (1a000f2c <mpu9250Read+0x298>)
1a000caa:	f893 b024 	ldrb.w	fp, [r3, #36]	; 0x24
1a000cae:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
1a000cb2:	ea42 2b0b 	orr.w	fp, r2, fp, lsl #8
1a000cb6:	f8a3 b12c 	strh.w	fp, [r3, #300]	; 0x12c
	control._aycounts = (((int16_t)control._buffer[2]) << 8)  | control._buffer[3];
1a000cba:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
1a000cbe:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
1a000cc2:	ea42 2401 	orr.w	r4, r2, r1, lsl #8
1a000cc6:	f8a3 412e 	strh.w	r4, [r3, #302]	; 0x12e
	control._azcounts = (((int16_t)control._buffer[4]) << 8)  | control._buffer[5];
1a000cca:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
1a000cce:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
1a000cd2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
1a000cd6:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
	control._tcounts  = (((int16_t)control._buffer[6]) << 8)  | control._buffer[7];
1a000cda:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
1a000cde:	f893 102b 	ldrb.w	r1, [r3, #43]	; 0x2b
1a000ce2:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
1a000ce6:	9101      	str	r1, [sp, #4]
1a000ce8:	f8a3 113e 	strh.w	r1, [r3, #318]	; 0x13e
	control._gxcounts = (((int16_t)control._buffer[8]) << 8)  | control._buffer[9];
1a000cec:	f893 602c 	ldrb.w	r6, [r3, #44]	; 0x2c
1a000cf0:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
1a000cf4:	ea41 2606 	orr.w	r6, r1, r6, lsl #8
1a000cf8:	f8a3 6132 	strh.w	r6, [r3, #306]	; 0x132
	control._gycounts = (((int16_t)control._buffer[10]) << 8) | control._buffer[11];
1a000cfc:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
1a000d00:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
1a000d04:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
1a000d08:	f8a3 0134 	strh.w	r0, [r3, #308]	; 0x134
	control._gzcounts = (((int16_t)control._buffer[12]) << 8) | control._buffer[13];
1a000d0c:	f893 e030 	ldrb.w	lr, [r3, #48]	; 0x30
1a000d10:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
1a000d14:	ea41 250e 	orr.w	r5, r1, lr, lsl #8
1a000d18:	9502      	str	r5, [sp, #8]
1a000d1a:	f8a3 5136 	strh.w	r5, [r3, #310]	; 0x136
	control._hxcounts = (((int16_t)control._buffer[15]) << 8) | control._buffer[14];
1a000d1e:	f893 5033 	ldrb.w	r5, [r3, #51]	; 0x33
1a000d22:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
1a000d26:	ea41 2705 	orr.w	r7, r1, r5, lsl #8
1a000d2a:	9703      	str	r7, [sp, #12]
1a000d2c:	f8a3 7138 	strh.w	r7, [r3, #312]	; 0x138
	control._hycounts = (((int16_t)control._buffer[17]) << 8) | control._buffer[16];
1a000d30:	f893 5035 	ldrb.w	r5, [r3, #53]	; 0x35
1a000d34:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
1a000d38:	ea41 2e05 	orr.w	lr, r1, r5, lsl #8
1a000d3c:	f8cd e010 	str.w	lr, [sp, #16]
1a000d40:	f8a3 e13a 	strh.w	lr, [r3, #314]	; 0x13a
	control._hzcounts = (((int16_t)control._buffer[19]) << 8) | control._buffer[18];
1a000d44:	f893 5037 	ldrb.w	r5, [r3, #55]	; 0x37
1a000d48:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
1a000d4c:	ea41 2e05 	orr.w	lr, r1, r5, lsl #8
1a000d50:	f8cd e014 	str.w	lr, [sp, #20]
1a000d54:	f8a3 e13c 	strh.w	lr, [r3, #316]	; 0x13c
	// transform and convert to float values
	control._ax = (((float)(control.tX[0]*control._axcounts + control.tX[1]*control._aycounts + control.tX[2]*control._azcounts) * control._accelScale) - control._axb)*control._axs;
1a000d58:	f9b3 a140 	ldrsh.w	sl, [r3, #320]	; 0x140
1a000d5c:	fa0f fb8b 	sxth.w	fp, fp
1a000d60:	f9b3 7142 	ldrsh.w	r7, [r3, #322]	; 0x142
1a000d64:	b221      	sxth	r1, r4
1a000d66:	fb01 f407 	mul.w	r4, r1, r7
1a000d6a:	fb0b 440a 	mla	r4, fp, sl, r4
1a000d6e:	f9b3 5144 	ldrsh.w	r5, [r3, #324]	; 0x144
1a000d72:	b212      	sxth	r2, r2
1a000d74:	fb02 4405 	mla	r4, r2, r5, r4
1a000d78:	ee07 4a90 	vmov	s15, r4
1a000d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a000d80:	ed93 7a01 	vldr	s14, [r3, #4]
1a000d84:	ee67 7a87 	vmul.f32	s15, s15, s14
1a000d88:	edd3 6a30 	vldr	s13, [r3, #192]	; 0xc0
1a000d8c:	ee77 7ae6 	vsub.f32	s15, s15, s13
1a000d90:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
1a000d94:	ee67 7aa6 	vmul.f32	s15, s15, s13
1a000d98:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	control._ay = (((float)(control.tY[0]*control._axcounts + control.tY[1]*control._aycounts + control.tY[2]*control._azcounts) * control._accelScale) - control._ayb)*control._ays;
1a000d9c:	f9b3 c146 	ldrsh.w	ip, [r3, #326]	; 0x146
1a000da0:	f9b3 8148 	ldrsh.w	r8, [r3, #328]	; 0x148
1a000da4:	fb08 fe01 	mul.w	lr, r8, r1
1a000da8:	fb0c ee0b 	mla	lr, ip, fp, lr
1a000dac:	f9b3 414a 	ldrsh.w	r4, [r3, #330]	; 0x14a
1a000db0:	fb04 ee02 	mla	lr, r4, r2, lr
1a000db4:	ee07 ea90 	vmov	s15, lr
1a000db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a000dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
1a000dc0:	edd3 6a31 	vldr	s13, [r3, #196]	; 0xc4
1a000dc4:	ee77 7ae6 	vsub.f32	s15, s15, s13
1a000dc8:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
1a000dcc:	ee67 7aa6 	vmul.f32	s15, s15, s13
1a000dd0:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	control._az = (((float)(control.tZ[0]*control._axcounts + control.tZ[1]*control._aycounts + control.tZ[2]*control._azcounts) * control._accelScale) - control._azb)*control._azs;
1a000dd4:	f9b3 e14c 	ldrsh.w	lr, [r3, #332]	; 0x14c
1a000dd8:	f9b3 914e 	ldrsh.w	r9, [r3, #334]	; 0x14e
1a000ddc:	fb09 f101 	mul.w	r1, r9, r1
1a000de0:	fb0e 110b 	mla	r1, lr, fp, r1
1a000de4:	f9b3 b150 	ldrsh.w	fp, [r3, #336]	; 0x150
1a000de8:	fb0b 1102 	mla	r1, fp, r2, r1
1a000dec:	ee07 1a90 	vmov	s15, r1
1a000df0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a000df4:	ee27 7a27 	vmul.f32	s14, s14, s15
1a000df8:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
1a000dfc:	ee37 7a67 	vsub.f32	s14, s14, s15
1a000e00:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
1a000e04:	ee27 7a27 	vmul.f32	s14, s14, s15
1a000e08:	ed83 7a11 	vstr	s14, [r3, #68]	; 0x44
	control._gx = ((float) (control.tX[0]*control._gxcounts + control.tX[1]*control._gycounts + control.tX[2]*control._gzcounts) * control._gyroScale) -  control._gxb;
1a000e0c:	b236      	sxth	r6, r6
1a000e0e:	b200      	sxth	r0, r0
1a000e10:	fb00 f707 	mul.w	r7, r0, r7
1a000e14:	fb06 770a 	mla	r7, r6, sl, r7
1a000e18:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
1a000e1c:	fb02 7a05 	mla	sl, r2, r5, r7
1a000e20:	ee07 aa90 	vmov	s15, sl
1a000e24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a000e28:	ed93 7a02 	vldr	s14, [r3, #8]
1a000e2c:	ee67 7a87 	vmul.f32	s15, s15, s14
1a000e30:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
1a000e34:	ee77 7ae6 	vsub.f32	s15, s15, s13
1a000e38:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	control._gy = ((float) (control.tY[0]*control._gxcounts + control.tY[1]*control._gycounts + control.tY[2]*control._gzcounts) * control._gyroScale) -  control._gyb;
1a000e3c:	fb00 f808 	mul.w	r8, r0, r8
1a000e40:	fb06 8c0c 	mla	ip, r6, ip, r8
1a000e44:	fb02 c404 	mla	r4, r2, r4, ip
1a000e48:	ee07 4a90 	vmov	s15, r4
1a000e4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a000e50:	ee67 7a27 	vmul.f32	s15, s14, s15
1a000e54:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
1a000e58:	ee77 7ae6 	vsub.f32	s15, s15, s13
1a000e5c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	control._gz = ((float) (control.tZ[0]*control._gxcounts + control.tZ[1]*control._gycounts + control.tZ[2]*control._gzcounts) * control._gyroScale) -  control._gzb;
1a000e60:	fb00 f009 	mul.w	r0, r0, r9
1a000e64:	fb06 060e 	mla	r6, r6, lr, r0
1a000e68:	fb02 6b0b 	mla	fp, r2, fp, r6
1a000e6c:	ee07 ba90 	vmov	s15, fp
1a000e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a000e74:	ee27 7a27 	vmul.f32	s14, s14, s15
1a000e78:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
1a000e7c:	ee37 7a67 	vsub.f32	s14, s14, s15
1a000e80:	ed83 7a14 	vstr	s14, [r3, #80]	; 0x50
	control._hx = (((float)(control._hxcounts) * control._magScaleX) - control._hxb)*control._hxs;
1a000e84:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
1a000e88:	ee07 2a90 	vmov	s15, r2
1a000e8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a000e90:	ed93 7a03 	vldr	s14, [r3, #12]
1a000e94:	ee67 7a87 	vmul.f32	s15, s15, s14
1a000e98:	ed93 7a44 	vldr	s14, [r3, #272]	; 0x110
1a000e9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
1a000ea0:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
1a000ea4:	ee67 7a87 	vmul.f32	s15, s15, s14
1a000ea8:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	control._hy = (((float)(control._hycounts) * control._magScaleY) - control._hyb)*control._hys;
1a000eac:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
1a000eb0:	ee07 2a90 	vmov	s15, r2
1a000eb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a000eb8:	ed93 7a04 	vldr	s14, [r3, #16]
1a000ebc:	ee67 7a87 	vmul.f32	s15, s15, s14
1a000ec0:	ed93 7a45 	vldr	s14, [r3, #276]	; 0x114
1a000ec4:	ee77 7ac7 	vsub.f32	s15, s15, s14
1a000ec8:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
1a000ecc:	ee67 7a87 	vmul.f32	s15, s15, s14
1a000ed0:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	control._hz = (((float)(control._hzcounts) * control._magScaleZ) - control._hzb)*control._hzs;
1a000ed4:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
1a000ed8:	ee07 2a90 	vmov	s15, r2
1a000edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a000ee0:	ed93 7a05 	vldr	s14, [r3, #20]
1a000ee4:	ee67 7a87 	vmul.f32	s15, s15, s14
1a000ee8:	ed93 7a46 	vldr	s14, [r3, #280]	; 0x118
1a000eec:	ee77 7ac7 	vsub.f32	s15, s15, s14
1a000ef0:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
1a000ef4:	ee67 7a87 	vmul.f32	s15, s15, s14
1a000ef8:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	control._t = ((((float) control._tcounts)  - control._tempOffset)/ control._tempScale) + control._tempOffset;
1a000efc:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
1a000f00:	ee07 2a10 	vmov	s14, r2
1a000f04:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
1a000f08:	edd3 6a07 	vldr	s13, [r3, #28]
1a000f0c:	ee37 7a66 	vsub.f32	s14, s14, s13
1a000f10:	edd3 7a06 	vldr	s15, [r3, #24]
1a000f14:	eec7 7a27 	vdiv.f32	s15, s14, s15
1a000f18:	ee76 7aa7 	vadd.f32	s15, s13, s15
1a000f1c:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	return 1;
1a000f20:	2001      	movs	r0, #1
1a000f22:	e000      	b.n	1a000f26 <mpu9250Read+0x292>
//Read sensor registers and store data at control structure
bool_t mpu9250Read(void)
{
	// grab the data from the MPU9250
	if( !mpu9250ReadRegisters(MPU9250_ACCEL_OUT, 21) ){
		return 0;
1a000f24:	2000      	movs	r0, #0
	control._hx = (((float)(control._hxcounts) * control._magScaleX) - control._hxb)*control._hxs;
	control._hy = (((float)(control._hycounts) * control._magScaleY) - control._hyb)*control._hys;
	control._hz = (((float)(control._hzcounts) * control._magScaleZ) - control._hzb)*control._hzs;
	control._t = ((((float) control._tcounts)  - control._tempOffset)/ control._tempScale) + control._tempOffset;
	return 1;
}
1a000f26:	b007      	add	sp, #28
1a000f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000f2c:	10000990 	.word	0x10000990

1a000f30 <mpu9250GetAccelX_mss>:

// Returns the accelerometer measurement in the x direction, m/s/s
float mpu9250GetAccelX_mss( void )
{
	return control._ax;
}
1a000f30:	4b01      	ldr	r3, [pc, #4]	; (1a000f38 <mpu9250GetAccelX_mss+0x8>)
1a000f32:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
1a000f36:	4770      	bx	lr
1a000f38:	10000990 	.word	0x10000990

1a000f3c <mpu9250GetAccelY_mss>:

// Returns the accelerometer measurement in the y direction, m/s/s
float mpu9250GetAccelY_mss( void )
{
	return control._ay;
}
1a000f3c:	4b01      	ldr	r3, [pc, #4]	; (1a000f44 <mpu9250GetAccelY_mss+0x8>)
1a000f3e:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
1a000f42:	4770      	bx	lr
1a000f44:	10000990 	.word	0x10000990

1a000f48 <mpu9250GetAccelZ_mss>:

// Returns the accelerometer measurement in the z direction, m/s/s
float mpu9250GetAccelZ_mss( void )
{
	return control._az;
}
1a000f48:	4b01      	ldr	r3, [pc, #4]	; (1a000f50 <mpu9250GetAccelZ_mss+0x8>)
1a000f4a:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
1a000f4e:	4770      	bx	lr
1a000f50:	10000990 	.word	0x10000990

1a000f54 <mpu9250GetGyroX_rads>:

// Returns the gyroscope measurement in the x direction, rad/s
float mpu9250GetGyroX_rads( void )
{
	return control._gx;
}
1a000f54:	4b01      	ldr	r3, [pc, #4]	; (1a000f5c <mpu9250GetGyroX_rads+0x8>)
1a000f56:	ed93 0a12 	vldr	s0, [r3, #72]	; 0x48
1a000f5a:	4770      	bx	lr
1a000f5c:	10000990 	.word	0x10000990

1a000f60 <mpu9250GetGyroY_rads>:

// Returns the gyroscope measurement in the y direction, rad/s
float mpu9250GetGyroY_rads( void )
{
	return control._gy;
}
1a000f60:	4b01      	ldr	r3, [pc, #4]	; (1a000f68 <mpu9250GetGyroY_rads+0x8>)
1a000f62:	ed93 0a13 	vldr	s0, [r3, #76]	; 0x4c
1a000f66:	4770      	bx	lr
1a000f68:	10000990 	.word	0x10000990

1a000f6c <mpu9250GetGyroZ_rads>:

// Returns the gyroscope measurement in the z direction, rad/s
float mpu9250GetGyroZ_rads( void )
{
	return control._gz;
}
1a000f6c:	4b01      	ldr	r3, [pc, #4]	; (1a000f74 <mpu9250GetGyroZ_rads+0x8>)
1a000f6e:	ed93 0a14 	vldr	s0, [r3, #80]	; 0x50
1a000f72:	4770      	bx	lr
1a000f74:	10000990 	.word	0x10000990

1a000f78 <mpu9250CalibrateGyro>:
	control._status = mpu9250ReadRegisters(MPU9250_EXT_SENS_DATA_00,count);
	return control._status;
}

static int8_t mpu9250CalibrateGyro( void )
{
1a000f78:	b538      	push	{r3, r4, r5, lr}
1a000f7a:	ed2d 8b02 	vpush	{d8}
	// set the range, bandwidth, and srd
	if (mpu9250SetGyroRange(MPU9250_GYRO_RANGE_250DPS) < 0) {
1a000f7e:	2000      	movs	r0, #0
1a000f80:	f7ff fd74 	bl	1a000a6c <mpu9250SetGyroRange>
1a000f84:	2800      	cmp	r0, #0
1a000f86:	f2c0 808e 	blt.w	1a0010a6 <mpu9250CalibrateGyro+0x12e>
		return -1;
	}
	if (mpu9250SetDlpfBandwidth(MPU9250_DLPF_BANDWIDTH_20HZ) < 0) {
1a000f8a:	2003      	movs	r0, #3
1a000f8c:	f7ff fdb6 	bl	1a000afc <mpu9250SetDlpfBandwidth>
1a000f90:	2800      	cmp	r0, #0
1a000f92:	f2c0 808a 	blt.w	1a0010aa <mpu9250CalibrateGyro+0x132>
		return -2;
	}
	if (mpu9250SetSrd(19) < 0) {
1a000f96:	2013      	movs	r0, #19
1a000f98:	f7ff fe26 	bl	1a000be8 <mpu9250SetSrd>
1a000f9c:	2800      	cmp	r0, #0
1a000f9e:	f2c0 8086 	blt.w	1a0010ae <mpu9250CalibrateGyro+0x136>
		return -3;
	}

	// take samples and find bias
	control._gxbD = 0;
1a000fa2:	4b48      	ldr	r3, [pc, #288]	; (1a0010c4 <mpu9250CalibrateGyro+0x14c>)
1a000fa4:	2000      	movs	r0, #0
1a000fa6:	2100      	movs	r1, #0
1a000fa8:	e9c3 011a 	strd	r0, r1, [r3, #104]	; 0x68
	control._gybD = 0;
1a000fac:	e9c3 011c 	strd	r0, r1, [r3, #112]	; 0x70
	control._gzbD = 0;
1a000fb0:	e9c3 011e 	strd	r0, r1, [r3, #120]	; 0x78
	for (uint8_t i=0; i < control._numSamples; i++) {
1a000fb4:	2500      	movs	r5, #0
1a000fb6:	e04a      	b.n	1a00104e <mpu9250CalibrateGyro+0xd6>
		mpu9250Read();
1a000fb8:	f7ff fe6c 	bl	1a000c94 <mpu9250Read>
		control._gxbD += ((mpu9250GetGyroX_rads() + control._gxb)/control._numSamples);
1a000fbc:	f7ff ffca 	bl	1a000f54 <mpu9250GetGyroX_rads>
1a000fc0:	4c40      	ldr	r4, [pc, #256]	; (1a0010c4 <mpu9250CalibrateGyro+0x14c>)
1a000fc2:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
1a000fc6:	ee30 0a27 	vadd.f32	s0, s0, s15
1a000fca:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
1a000fce:	ee08 3a10 	vmov	s16, r3
1a000fd2:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
1a000fd6:	eec0 7a08 	vdiv.f32	s15, s0, s16
1a000fda:	ee17 0a90 	vmov	r0, s15
1a000fde:	f001 fd9d 	bl	1a002b1c <__aeabi_f2d>
1a000fe2:	4602      	mov	r2, r0
1a000fe4:	460b      	mov	r3, r1
1a000fe6:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
1a000fea:	f001 fc39 	bl	1a002860 <__adddf3>
1a000fee:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
		control._gybD += ((mpu9250GetGyroY_rads() + control._gyb)/control._numSamples);
1a000ff2:	f7ff ffb5 	bl	1a000f60 <mpu9250GetGyroY_rads>
1a000ff6:	edd4 7a21 	vldr	s15, [r4, #132]	; 0x84
1a000ffa:	ee30 0a27 	vadd.f32	s0, s0, s15
1a000ffe:	eec0 7a08 	vdiv.f32	s15, s0, s16
1a001002:	ee17 0a90 	vmov	r0, s15
1a001006:	f001 fd89 	bl	1a002b1c <__aeabi_f2d>
1a00100a:	4602      	mov	r2, r0
1a00100c:	460b      	mov	r3, r1
1a00100e:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
1a001012:	f001 fc25 	bl	1a002860 <__adddf3>
1a001016:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
		control._gzbD += ((mpu9250GetGyroZ_rads() + control._gzb)/control._numSamples);
1a00101a:	f7ff ffa7 	bl	1a000f6c <mpu9250GetGyroZ_rads>
1a00101e:	edd4 7a22 	vldr	s15, [r4, #136]	; 0x88
1a001022:	ee30 0a27 	vadd.f32	s0, s0, s15
1a001026:	eec0 7a08 	vdiv.f32	s15, s0, s16
1a00102a:	ee17 0a90 	vmov	r0, s15
1a00102e:	f001 fd75 	bl	1a002b1c <__aeabi_f2d>
1a001032:	4602      	mov	r2, r0
1a001034:	460b      	mov	r3, r1
1a001036:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
1a00103a:	f001 fc11 	bl	1a002860 <__adddf3>
1a00103e:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
		delay(20);
1a001042:	2014      	movs	r0, #20
1a001044:	2100      	movs	r1, #0
1a001046:	f000 f9ad 	bl	1a0013a4 <delay>

	// take samples and find bias
	control._gxbD = 0;
	control._gybD = 0;
	control._gzbD = 0;
	for (uint8_t i=0; i < control._numSamples; i++) {
1a00104a:	3501      	adds	r5, #1
1a00104c:	b2ed      	uxtb	r5, r5
1a00104e:	4b1d      	ldr	r3, [pc, #116]	; (1a0010c4 <mpu9250CalibrateGyro+0x14c>)
1a001050:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
1a001054:	42ab      	cmp	r3, r5
1a001056:	d8af      	bhi.n	1a000fb8 <mpu9250CalibrateGyro+0x40>
		control._gxbD += ((mpu9250GetGyroX_rads() + control._gxb)/control._numSamples);
		control._gybD += ((mpu9250GetGyroY_rads() + control._gyb)/control._numSamples);
		control._gzbD += ((mpu9250GetGyroZ_rads() + control._gzb)/control._numSamples);
		delay(20);
	}
	control._gxb = (float)control._gxbD;
1a001058:	4c1a      	ldr	r4, [pc, #104]	; (1a0010c4 <mpu9250CalibrateGyro+0x14c>)
1a00105a:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
1a00105e:	f001 fdb1 	bl	1a002bc4 <__aeabi_d2f>
1a001062:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	control._gyb = (float)control._gybD;
1a001066:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
1a00106a:	f001 fdab 	bl	1a002bc4 <__aeabi_d2f>
1a00106e:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
	control._gzb = (float)control._gzbD;
1a001072:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
1a001076:	f001 fda5 	bl	1a002bc4 <__aeabi_d2f>
1a00107a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88

	// set the range, bandwidth, and srd back to what they were
	if (mpu9250SetGyroRange(control._gyroRange) < 0) {
1a00107e:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
1a001082:	f7ff fcf3 	bl	1a000a6c <mpu9250SetGyroRange>
1a001086:	2800      	cmp	r0, #0
1a001088:	db13      	blt.n	1a0010b2 <mpu9250CalibrateGyro+0x13a>
		return -4;
	}
	if (mpu9250SetDlpfBandwidth(control._bandwidth) < 0) {
1a00108a:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
1a00108e:	f7ff fd35 	bl	1a000afc <mpu9250SetDlpfBandwidth>
1a001092:	2800      	cmp	r0, #0
1a001094:	db0f      	blt.n	1a0010b6 <mpu9250CalibrateGyro+0x13e>
		return -5;
	}
	if (mpu9250SetSrd(control._srd) < 0) {
1a001096:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
1a00109a:	f7ff fda5 	bl	1a000be8 <mpu9250SetSrd>
1a00109e:	2800      	cmp	r0, #0
1a0010a0:	da0b      	bge.n	1a0010ba <mpu9250CalibrateGyro+0x142>
		return -6;
1a0010a2:	20fa      	movs	r0, #250	; 0xfa
1a0010a4:	e00a      	b.n	1a0010bc <mpu9250CalibrateGyro+0x144>

static int8_t mpu9250CalibrateGyro( void )
{
	// set the range, bandwidth, and srd
	if (mpu9250SetGyroRange(MPU9250_GYRO_RANGE_250DPS) < 0) {
		return -1;
1a0010a6:	20ff      	movs	r0, #255	; 0xff
1a0010a8:	e008      	b.n	1a0010bc <mpu9250CalibrateGyro+0x144>
	}
	if (mpu9250SetDlpfBandwidth(MPU9250_DLPF_BANDWIDTH_20HZ) < 0) {
		return -2;
1a0010aa:	20fe      	movs	r0, #254	; 0xfe
1a0010ac:	e006      	b.n	1a0010bc <mpu9250CalibrateGyro+0x144>
	}
	if (mpu9250SetSrd(19) < 0) {
		return -3;
1a0010ae:	20fd      	movs	r0, #253	; 0xfd
1a0010b0:	e004      	b.n	1a0010bc <mpu9250CalibrateGyro+0x144>
	control._gyb = (float)control._gybD;
	control._gzb = (float)control._gzbD;

	// set the range, bandwidth, and srd back to what they were
	if (mpu9250SetGyroRange(control._gyroRange) < 0) {
		return -4;
1a0010b2:	20fc      	movs	r0, #252	; 0xfc
1a0010b4:	e002      	b.n	1a0010bc <mpu9250CalibrateGyro+0x144>
	}
	if (mpu9250SetDlpfBandwidth(control._bandwidth) < 0) {
		return -5;
1a0010b6:	20fb      	movs	r0, #251	; 0xfb
1a0010b8:	e000      	b.n	1a0010bc <mpu9250CalibrateGyro+0x144>
	}
	if (mpu9250SetSrd(control._srd) < 0) {
		return -6;
	}
	return 1;
1a0010ba:	2001      	movs	r0, #1
}
1a0010bc:	b240      	sxtb	r0, r0
1a0010be:	ecbd 8b02 	vpop	{d8}
1a0010c2:	bd38      	pop	{r3, r4, r5, pc}
1a0010c4:	10000990 	.word	0x10000990

1a0010c8 <mpu9250Init>:

/*==================[external functions definition]==========================*/

//Initialize MPU9250 (TODO: include SPI communication)
int8_t mpu9250Init( MPU9250_address_t address )
{
1a0010c8:	b510      	push	{r4, lr}
1a0010ca:	4604      	mov	r4, r0
	mpu9250InitializeControlStructure();
1a0010cc:	f7ff fbca 	bl	1a000864 <mpu9250InitializeControlStructure>

	control.address = address;
1a0010d0:	4b99      	ldr	r3, [pc, #612]	; (1a001338 <mpu9250Init+0x270>)
1a0010d2:	701c      	strb	r4, [r3, #0]

	// using I2C for communication
	// starting the I2C bus
	i2cInit(I2C0, MPU9250_I2C_RATE);
1a0010d4:	2000      	movs	r0, #0
1a0010d6:	4999      	ldr	r1, [pc, #612]	; (1a00133c <mpu9250Init+0x274>)
1a0010d8:	f000 f9d4 	bl	1a001484 <i2cInit>

	// select clock source to gyro
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
1a0010dc:	206b      	movs	r0, #107	; 0x6b
1a0010de:	2101      	movs	r1, #1
1a0010e0:	f7ff fc2a 	bl	1a000938 <mpu9250WriteRegister>
1a0010e4:	2800      	cmp	r0, #0
1a0010e6:	f2c0 80fd 	blt.w	1a0012e4 <mpu9250Init+0x21c>
		return -1;
	}
	// enable I2C master mode
	if (mpu9250WriteRegister(MPU9250_USER_CTRL, MPU9250_I2C_MST_EN) < 0) {
1a0010ea:	206a      	movs	r0, #106	; 0x6a
1a0010ec:	2120      	movs	r1, #32
1a0010ee:	f7ff fc23 	bl	1a000938 <mpu9250WriteRegister>
1a0010f2:	2800      	cmp	r0, #0
1a0010f4:	f2c0 80f8 	blt.w	1a0012e8 <mpu9250Init+0x220>
		return -2;
	}
	// set the I2C bus speed to 400 kHz
	if (mpu9250WriteRegister(MPU9250_I2C_MST_CTRL, MPU9250_I2C_MST_CLK) < 0) {
1a0010f8:	2024      	movs	r0, #36	; 0x24
1a0010fa:	210d      	movs	r1, #13
1a0010fc:	f7ff fc1c 	bl	1a000938 <mpu9250WriteRegister>
1a001100:	2800      	cmp	r0, #0
1a001102:	f2c0 80f3 	blt.w	1a0012ec <mpu9250Init+0x224>
		return -3;
	}
	// set AK8963 to Power Down
	mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN);
1a001106:	200a      	movs	r0, #10
1a001108:	2100      	movs	r1, #0
1a00110a:	f7ff fc77 	bl	1a0009fc <mpu9250WriteAK8963Register>
	// reset the MPU9250
	mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_PWR_RESET);
1a00110e:	206b      	movs	r0, #107	; 0x6b
1a001110:	2180      	movs	r1, #128	; 0x80
1a001112:	f7ff fc11 	bl	1a000938 <mpu9250WriteRegister>
	// wait for MPU-9250 to come back up
	delay(1);
1a001116:	2001      	movs	r0, #1
1a001118:	2100      	movs	r1, #0
1a00111a:	f000 f943 	bl	1a0013a4 <delay>
	// reset the AK8963
	mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL2, MPU9250_AK8963_RESET);
1a00111e:	200b      	movs	r0, #11
1a001120:	2101      	movs	r1, #1
1a001122:	f7ff fc6b 	bl	1a0009fc <mpu9250WriteAK8963Register>
	// select clock source to gyro
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
1a001126:	206b      	movs	r0, #107	; 0x6b
1a001128:	2101      	movs	r1, #1
1a00112a:	f7ff fc05 	bl	1a000938 <mpu9250WriteRegister>
1a00112e:	2800      	cmp	r0, #0
1a001130:	f2c0 80de 	blt.w	1a0012f0 <mpu9250Init+0x228>
		return -4;
	}
	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	if ((mpu9250WhoAmI() != 113) && (mpu9250WhoAmI() != 115)) {
1a001134:	f7ff fbf0 	bl	1a000918 <mpu9250WhoAmI>
1a001138:	2871      	cmp	r0, #113	; 0x71
1a00113a:	d004      	beq.n	1a001146 <mpu9250Init+0x7e>
1a00113c:	f7ff fbec 	bl	1a000918 <mpu9250WhoAmI>
1a001140:	2873      	cmp	r0, #115	; 0x73
1a001142:	f040 80d7 	bne.w	1a0012f4 <mpu9250Init+0x22c>
		return -5;
	}
	// enable accelerometer and gyro
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_2, MPU9250_SEN_ENABLE) < 0) {
1a001146:	206c      	movs	r0, #108	; 0x6c
1a001148:	2100      	movs	r1, #0
1a00114a:	f7ff fbf5 	bl	1a000938 <mpu9250WriteRegister>
1a00114e:	2800      	cmp	r0, #0
1a001150:	f2c0 80d2 	blt.w	1a0012f8 <mpu9250Init+0x230>
		return -6;
	}
	// setting accel range to 16G as default
	if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG, MPU9250_ACCEL_FS_SEL_16G) < 0) {
1a001154:	201c      	movs	r0, #28
1a001156:	2118      	movs	r1, #24
1a001158:	f7ff fbee 	bl	1a000938 <mpu9250WriteRegister>
1a00115c:	2800      	cmp	r0, #0
1a00115e:	f2c0 80cd 	blt.w	1a0012fc <mpu9250Init+0x234>
		return -7;
	}
	control._accelScale = MPU9250_G * 16.0f / 32767.5f; // setting the accel scale to 16G
1a001162:	4b75      	ldr	r3, [pc, #468]	; (1a001338 <mpu9250Init+0x270>)
1a001164:	4a76      	ldr	r2, [pc, #472]	; (1a001340 <mpu9250Init+0x278>)
1a001166:	605a      	str	r2, [r3, #4]
	control._accelRange = MPU9250_ACCEL_RANGE_16G;
1a001168:	2203      	movs	r2, #3
1a00116a:	f883 2020 	strb.w	r2, [r3, #32]
	// setting the gyro range to 2000DPS as default
	if (mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_2000DPS) < 0) {
1a00116e:	201b      	movs	r0, #27
1a001170:	2118      	movs	r1, #24
1a001172:	f7ff fbe1 	bl	1a000938 <mpu9250WriteRegister>
1a001176:	2800      	cmp	r0, #0
1a001178:	f2c0 80c2 	blt.w	1a001300 <mpu9250Init+0x238>
		return -8;
	}
   // setting the gyro scale to 2000DPS
	control._gyroScale = 2000.0f / 32767.5f * MPU9250_D2R; 
1a00117c:	4b6e      	ldr	r3, [pc, #440]	; (1a001338 <mpu9250Init+0x270>)
1a00117e:	4a71      	ldr	r2, [pc, #452]	; (1a001344 <mpu9250Init+0x27c>)
1a001180:	609a      	str	r2, [r3, #8]
	control._gyroRange = MPU9250_GYRO_RANGE_2000DPS;
1a001182:	2203      	movs	r2, #3
1a001184:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	// setting bandwidth to 184Hz as default
	if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_184) < 0) {
1a001188:	201d      	movs	r0, #29
1a00118a:	2101      	movs	r1, #1
1a00118c:	f7ff fbd4 	bl	1a000938 <mpu9250WriteRegister>
1a001190:	2800      	cmp	r0, #0
1a001192:	f2c0 80b7 	blt.w	1a001304 <mpu9250Init+0x23c>
		return -9;
	}
   // setting gyro bandwidth to 184Hz
	if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_184) < 0) { 
1a001196:	201a      	movs	r0, #26
1a001198:	2101      	movs	r1, #1
1a00119a:	f7ff fbcd 	bl	1a000938 <mpu9250WriteRegister>
1a00119e:	2800      	cmp	r0, #0
1a0011a0:	f2c0 80b2 	blt.w	1a001308 <mpu9250Init+0x240>
		return -10;
	}
	control._bandwidth = MPU9250_DLPF_BANDWIDTH_184HZ;
1a0011a4:	2100      	movs	r1, #0
1a0011a6:	4b64      	ldr	r3, [pc, #400]	; (1a001338 <mpu9250Init+0x270>)
1a0011a8:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
	// setting the sample rate divider to 0 as default
	if (mpu9250WriteRegister(MPU9250_SMPDIV, 0x00) < 0) {
1a0011ac:	2019      	movs	r0, #25
1a0011ae:	f7ff fbc3 	bl	1a000938 <mpu9250WriteRegister>
1a0011b2:	2800      	cmp	r0, #0
1a0011b4:	f2c0 80aa 	blt.w	1a00130c <mpu9250Init+0x244>
		return -11;
	}
	control._srd = 0;
1a0011b8:	2200      	movs	r2, #0
1a0011ba:	4b5f      	ldr	r3, [pc, #380]	; (1a001338 <mpu9250Init+0x270>)
1a0011bc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	// enable I2C master mode
	if (mpu9250WriteRegister(MPU9250_USER_CTRL, MPU9250_I2C_MST_EN) < 0) {
1a0011c0:	206a      	movs	r0, #106	; 0x6a
1a0011c2:	2120      	movs	r1, #32
1a0011c4:	f7ff fbb8 	bl	1a000938 <mpu9250WriteRegister>
1a0011c8:	2800      	cmp	r0, #0
1a0011ca:	f2c0 80a1 	blt.w	1a001310 <mpu9250Init+0x248>
		return -12;
	}
	// set the I2C bus speed to 400 kHz
	if (mpu9250WriteRegister(MPU9250_I2C_MST_CTRL, MPU9250_I2C_MST_CLK) < 0) {
1a0011ce:	2024      	movs	r0, #36	; 0x24
1a0011d0:	210d      	movs	r1, #13
1a0011d2:	f7ff fbb1 	bl	1a000938 <mpu9250WriteRegister>
1a0011d6:	2800      	cmp	r0, #0
1a0011d8:	f2c0 809c 	blt.w	1a001314 <mpu9250Init+0x24c>
		return -13;
	}
	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if (mpu9250WhoAmIAK8963() != 72) {
1a0011dc:	f7ff fbfe 	bl	1a0009dc <mpu9250WhoAmIAK8963>
1a0011e0:	2848      	cmp	r0, #72	; 0x48
1a0011e2:	f040 8099 	bne.w	1a001318 <mpu9250Init+0x250>
		return -14;
	}
	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a0011e6:	200a      	movs	r0, #10
1a0011e8:	2100      	movs	r1, #0
1a0011ea:	f7ff fc07 	bl	1a0009fc <mpu9250WriteAK8963Register>
1a0011ee:	2800      	cmp	r0, #0
1a0011f0:	f2c0 8094 	blt.w	1a00131c <mpu9250Init+0x254>
		return -15;
	}
	delay(100); // long wait between AK8963 mode changes
1a0011f4:	2064      	movs	r0, #100	; 0x64
1a0011f6:	2100      	movs	r1, #0
1a0011f8:	f000 f8d4 	bl	1a0013a4 <delay>
	// set AK8963 to FUSE ROM access
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_FUSE_ROM) < 0) {
1a0011fc:	200a      	movs	r0, #10
1a0011fe:	210f      	movs	r1, #15
1a001200:	f7ff fbfc 	bl	1a0009fc <mpu9250WriteAK8963Register>
1a001204:	2800      	cmp	r0, #0
1a001206:	f2c0 808b 	blt.w	1a001320 <mpu9250Init+0x258>
		return -16;
	}
	delay(100); // long wait between AK8963 mode changes
1a00120a:	2064      	movs	r0, #100	; 0x64
1a00120c:	2100      	movs	r1, #0
1a00120e:	f000 f8c9 	bl	1a0013a4 <delay>
	// read the AK8963 ASA registers and compute magnetometer scale factors
	mpu9250ReadAK8963Registers(MPU9250_AK8963_ASA, 3);
1a001212:	2010      	movs	r0, #16
1a001214:	2103      	movs	r1, #3
1a001216:	f7ff fbb5 	bl	1a000984 <mpu9250ReadAK8963Registers>
	control._magScaleX = ((((float) control._buffer[0]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a00121a:	4b47      	ldr	r3, [pc, #284]	; (1a001338 <mpu9250Init+0x270>)
1a00121c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
1a001220:	ee06 2a10 	vmov	s12, r2
1a001224:	eeb8 6a46 	vcvt.f32.u32	s12, s12
1a001228:	eddf 4a47 	vldr	s9, [pc, #284]	; 1a001348 <mpu9250Init+0x280>
1a00122c:	ee36 6a64 	vsub.f32	s12, s12, s9
1a001230:	ed9f 7a46 	vldr	s14, [pc, #280]	; 1a00134c <mpu9250Init+0x284>
1a001234:	ee26 6a07 	vmul.f32	s12, s12, s14
1a001238:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
1a00123c:	ee36 6a27 	vadd.f32	s12, s12, s15
1a001240:	ed9f 5a43 	vldr	s10, [pc, #268]	; 1a001350 <mpu9250Init+0x288>
1a001244:	ee26 6a05 	vmul.f32	s12, s12, s10
			/ 32760.0f; // micro Tesla
1a001248:	eddf 5a42 	vldr	s11, [pc, #264]	; 1a001354 <mpu9250Init+0x28c>
1a00124c:	ee86 6a25 	vdiv.f32	s12, s12, s11
		return -16;
	}
	delay(100); // long wait between AK8963 mode changes
	// read the AK8963 ASA registers and compute magnetometer scale factors
	mpu9250ReadAK8963Registers(MPU9250_AK8963_ASA, 3);
	control._magScaleX = ((((float) control._buffer[0]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a001250:	ed83 6a03 	vstr	s12, [r3, #12]
			/ 32760.0f; // micro Tesla
	control._magScaleY = ((((float) control._buffer[1]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a001254:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
1a001258:	ee06 2a10 	vmov	s12, r2
1a00125c:	eeb8 6a46 	vcvt.f32.u32	s12, s12
1a001260:	ee36 6a64 	vsub.f32	s12, s12, s9
1a001264:	ee26 6a07 	vmul.f32	s12, s12, s14
1a001268:	ee36 6a27 	vadd.f32	s12, s12, s15
1a00126c:	ee26 6a05 	vmul.f32	s12, s12, s10
			/ 32760.0f; // micro Tesla
1a001270:	ee86 6a25 	vdiv.f32	s12, s12, s11
	delay(100); // long wait between AK8963 mode changes
	// read the AK8963 ASA registers and compute magnetometer scale factors
	mpu9250ReadAK8963Registers(MPU9250_AK8963_ASA, 3);
	control._magScaleX = ((((float) control._buffer[0]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
			/ 32760.0f; // micro Tesla
	control._magScaleY = ((((float) control._buffer[1]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a001274:	ed83 6a04 	vstr	s12, [r3, #16]
			/ 32760.0f; // micro Tesla
	control._magScaleZ = ((((float) control._buffer[2]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a001278:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
1a00127c:	ee06 2a90 	vmov	s13, r2
1a001280:	eef8 6a66 	vcvt.f32.u32	s13, s13
1a001284:	ee76 6ae4 	vsub.f32	s13, s13, s9
1a001288:	ee26 7a87 	vmul.f32	s14, s13, s14
1a00128c:	ee37 7a27 	vadd.f32	s14, s14, s15
1a001290:	ee67 7a05 	vmul.f32	s15, s14, s10
			/ 32760.0f; // micro Tesla
1a001294:	eec7 7aa5 	vdiv.f32	s15, s15, s11
	mpu9250ReadAK8963Registers(MPU9250_AK8963_ASA, 3);
	control._magScaleX = ((((float) control._buffer[0]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
			/ 32760.0f; // micro Tesla
	control._magScaleY = ((((float) control._buffer[1]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
			/ 32760.0f; // micro Tesla
	control._magScaleZ = ((((float) control._buffer[2]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a001298:	edc3 7a05 	vstr	s15, [r3, #20]
			/ 32760.0f; // micro Tesla
	// set AK8963 to Power Down
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a00129c:	200a      	movs	r0, #10
1a00129e:	2100      	movs	r1, #0
1a0012a0:	f7ff fbac 	bl	1a0009fc <mpu9250WriteAK8963Register>
1a0012a4:	2800      	cmp	r0, #0
1a0012a6:	db3d      	blt.n	1a001324 <mpu9250Init+0x25c>
		return -17;
	}
	delay(100); // long wait between AK8963 mode changes
1a0012a8:	2064      	movs	r0, #100	; 0x64
1a0012aa:	2100      	movs	r1, #0
1a0012ac:	f000 f87a 	bl	1a0013a4 <delay>
	// set AK8963 to 16 bit resolution, 100 Hz update rate
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS2) < 0) {
1a0012b0:	200a      	movs	r0, #10
1a0012b2:	2116      	movs	r1, #22
1a0012b4:	f7ff fba2 	bl	1a0009fc <mpu9250WriteAK8963Register>
1a0012b8:	2800      	cmp	r0, #0
1a0012ba:	db35      	blt.n	1a001328 <mpu9250Init+0x260>
		return -18;
	}
	delay(100); // long wait between AK8963 mode changes
1a0012bc:	2064      	movs	r0, #100	; 0x64
1a0012be:	2100      	movs	r1, #0
1a0012c0:	f000 f870 	bl	1a0013a4 <delay>
	// select clock source to gyro
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
1a0012c4:	206b      	movs	r0, #107	; 0x6b
1a0012c6:	2101      	movs	r1, #1
1a0012c8:	f7ff fb36 	bl	1a000938 <mpu9250WriteRegister>
1a0012cc:	2800      	cmp	r0, #0
1a0012ce:	db2d      	blt.n	1a00132c <mpu9250Init+0x264>
		return -19;
	}
	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	mpu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
1a0012d0:	2003      	movs	r0, #3
1a0012d2:	2107      	movs	r1, #7
1a0012d4:	f7ff fb56 	bl	1a000984 <mpu9250ReadAK8963Registers>
	// estimate gyro bias
	if (mpu9250CalibrateGyro() < 0) {
1a0012d8:	f7ff fe4e 	bl	1a000f78 <mpu9250CalibrateGyro>
1a0012dc:	2800      	cmp	r0, #0
1a0012de:	da27      	bge.n	1a001330 <mpu9250Init+0x268>
		return -20;
1a0012e0:	20ec      	movs	r0, #236	; 0xec
1a0012e2:	e026      	b.n	1a001332 <mpu9250Init+0x26a>
	// starting the I2C bus
	i2cInit(I2C0, MPU9250_I2C_RATE);

	// select clock source to gyro
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
		return -1;
1a0012e4:	20ff      	movs	r0, #255	; 0xff
1a0012e6:	e024      	b.n	1a001332 <mpu9250Init+0x26a>
	}
	// enable I2C master mode
	if (mpu9250WriteRegister(MPU9250_USER_CTRL, MPU9250_I2C_MST_EN) < 0) {
		return -2;
1a0012e8:	20fe      	movs	r0, #254	; 0xfe
1a0012ea:	e022      	b.n	1a001332 <mpu9250Init+0x26a>
	}
	// set the I2C bus speed to 400 kHz
	if (mpu9250WriteRegister(MPU9250_I2C_MST_CTRL, MPU9250_I2C_MST_CLK) < 0) {
		return -3;
1a0012ec:	20fd      	movs	r0, #253	; 0xfd
1a0012ee:	e020      	b.n	1a001332 <mpu9250Init+0x26a>
	delay(1);
	// reset the AK8963
	mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL2, MPU9250_AK8963_RESET);
	// select clock source to gyro
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
		return -4;
1a0012f0:	20fc      	movs	r0, #252	; 0xfc
1a0012f2:	e01e      	b.n	1a001332 <mpu9250Init+0x26a>
	}
	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	if ((mpu9250WhoAmI() != 113) && (mpu9250WhoAmI() != 115)) {
		return -5;
1a0012f4:	20fb      	movs	r0, #251	; 0xfb
1a0012f6:	e01c      	b.n	1a001332 <mpu9250Init+0x26a>
	}
	// enable accelerometer and gyro
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_2, MPU9250_SEN_ENABLE) < 0) {
		return -6;
1a0012f8:	20fa      	movs	r0, #250	; 0xfa
1a0012fa:	e01a      	b.n	1a001332 <mpu9250Init+0x26a>
	}
	// setting accel range to 16G as default
	if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG, MPU9250_ACCEL_FS_SEL_16G) < 0) {
		return -7;
1a0012fc:	20f9      	movs	r0, #249	; 0xf9
1a0012fe:	e018      	b.n	1a001332 <mpu9250Init+0x26a>
	}
	control._accelScale = MPU9250_G * 16.0f / 32767.5f; // setting the accel scale to 16G
	control._accelRange = MPU9250_ACCEL_RANGE_16G;
	// setting the gyro range to 2000DPS as default
	if (mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_2000DPS) < 0) {
		return -8;
1a001300:	20f8      	movs	r0, #248	; 0xf8
1a001302:	e016      	b.n	1a001332 <mpu9250Init+0x26a>
   // setting the gyro scale to 2000DPS
	control._gyroScale = 2000.0f / 32767.5f * MPU9250_D2R; 
	control._gyroRange = MPU9250_GYRO_RANGE_2000DPS;
	// setting bandwidth to 184Hz as default
	if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_184) < 0) {
		return -9;
1a001304:	20f7      	movs	r0, #247	; 0xf7
1a001306:	e014      	b.n	1a001332 <mpu9250Init+0x26a>
	}
   // setting gyro bandwidth to 184Hz
	if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_184) < 0) { 
		return -10;
1a001308:	20f6      	movs	r0, #246	; 0xf6
1a00130a:	e012      	b.n	1a001332 <mpu9250Init+0x26a>
	}
	control._bandwidth = MPU9250_DLPF_BANDWIDTH_184HZ;
	// setting the sample rate divider to 0 as default
	if (mpu9250WriteRegister(MPU9250_SMPDIV, 0x00) < 0) {
		return -11;
1a00130c:	20f5      	movs	r0, #245	; 0xf5
1a00130e:	e010      	b.n	1a001332 <mpu9250Init+0x26a>
	}
	control._srd = 0;
	// enable I2C master mode
	if (mpu9250WriteRegister(MPU9250_USER_CTRL, MPU9250_I2C_MST_EN) < 0) {
		return -12;
1a001310:	20f4      	movs	r0, #244	; 0xf4
1a001312:	e00e      	b.n	1a001332 <mpu9250Init+0x26a>
	}
	// set the I2C bus speed to 400 kHz
	if (mpu9250WriteRegister(MPU9250_I2C_MST_CTRL, MPU9250_I2C_MST_CLK) < 0) {
		return -13;
1a001314:	20f3      	movs	r0, #243	; 0xf3
1a001316:	e00c      	b.n	1a001332 <mpu9250Init+0x26a>
	}
	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if (mpu9250WhoAmIAK8963() != 72) {
		return -14;
1a001318:	20f2      	movs	r0, #242	; 0xf2
1a00131a:	e00a      	b.n	1a001332 <mpu9250Init+0x26a>
	}
	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
		return -15;
1a00131c:	20f1      	movs	r0, #241	; 0xf1
1a00131e:	e008      	b.n	1a001332 <mpu9250Init+0x26a>
	}
	delay(100); // long wait between AK8963 mode changes
	// set AK8963 to FUSE ROM access
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_FUSE_ROM) < 0) {
		return -16;
1a001320:	20f0      	movs	r0, #240	; 0xf0
1a001322:	e006      	b.n	1a001332 <mpu9250Init+0x26a>
			/ 32760.0f; // micro Tesla
	control._magScaleZ = ((((float) control._buffer[2]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
			/ 32760.0f; // micro Tesla
	// set AK8963 to Power Down
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
		return -17;
1a001324:	20ef      	movs	r0, #239	; 0xef
1a001326:	e004      	b.n	1a001332 <mpu9250Init+0x26a>
	}
	delay(100); // long wait between AK8963 mode changes
	// set AK8963 to 16 bit resolution, 100 Hz update rate
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS2) < 0) {
		return -18;
1a001328:	20ee      	movs	r0, #238	; 0xee
1a00132a:	e002      	b.n	1a001332 <mpu9250Init+0x26a>
	}
	delay(100); // long wait between AK8963 mode changes
	// select clock source to gyro
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
		return -19;
1a00132c:	20ed      	movs	r0, #237	; 0xed
1a00132e:	e000      	b.n	1a001332 <mpu9250Init+0x26a>
	// estimate gyro bias
	if (mpu9250CalibrateGyro() < 0) {
		return -20;
	}
	// successful init, return 1
	return 1;
1a001330:	2001      	movs	r0, #1
}
1a001332:	b240      	sxtb	r0, r0
1a001334:	bd10      	pop	{r4, pc}
1a001336:	bf00      	nop
1a001338:	10000990 	.word	0x10000990
1a00133c:	00061a80 	.word	0x00061a80
1a001340:	3b9cea16 	.word	0x3b9cea16
1a001344:	3a8ba0e4 	.word	0x3a8ba0e4
1a001348:	43000000 	.word	0x43000000
1a00134c:	3b800000 	.word	0x3b800000
1a001350:	45998000 	.word	0x45998000
1a001354:	46fff000 	.word	0x46fff000

1a001358 <mpu9250GetMagX_uT>:

// Returns the magnetometer measurement in the x direction, uT
float mpu9250GetMagX_uT( void )
{
  return control._hx;
}
1a001358:	4b01      	ldr	r3, [pc, #4]	; (1a001360 <mpu9250GetMagX_uT+0x8>)
1a00135a:	ed93 0a15 	vldr	s0, [r3, #84]	; 0x54
1a00135e:	4770      	bx	lr
1a001360:	10000990 	.word	0x10000990

1a001364 <mpu9250GetMagY_uT>:

// Returns the magnetometer measurement in the y direction, uT
float mpu9250GetMagY_uT( void )
{
  return control._hy;
}
1a001364:	4b01      	ldr	r3, [pc, #4]	; (1a00136c <mpu9250GetMagY_uT+0x8>)
1a001366:	ed93 0a16 	vldr	s0, [r3, #88]	; 0x58
1a00136a:	4770      	bx	lr
1a00136c:	10000990 	.word	0x10000990

1a001370 <mpu9250GetMagZ_uT>:

// Returns the magnetometer measurement in the z direction, uT
float mpu9250GetMagZ_uT( void )
{
  return control._hz;
}
1a001370:	4b01      	ldr	r3, [pc, #4]	; (1a001378 <mpu9250GetMagZ_uT+0x8>)
1a001372:	ed93 0a17 	vldr	s0, [r3, #92]	; 0x5c
1a001376:	4770      	bx	lr
1a001378:	10000990 	.word	0x10000990

1a00137c <mpu9250GetTemperature_C>:

// Returns the die temperature, C
float mpu9250GetTemperature_C( void )
{
  return control._t;
}
1a00137c:	4b01      	ldr	r3, [pc, #4]	; (1a001384 <mpu9250GetTemperature_C+0x8>)
1a00137e:	ed93 0a18 	vldr	s0, [r3, #96]	; 0x60
1a001382:	4770      	bx	lr
1a001384:	10000990 	.word	0x10000990

1a001388 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a001388:	4b04      	ldr	r3, [pc, #16]	; (1a00139c <cyclesCounterInit+0x14>)
1a00138a:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a00138c:	4b04      	ldr	r3, [pc, #16]	; (1a0013a0 <cyclesCounterInit+0x18>)
1a00138e:	681a      	ldr	r2, [r3, #0]
1a001390:	6813      	ldr	r3, [r2, #0]
1a001392:	f043 0301 	orr.w	r3, r3, #1
1a001396:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a001398:	2001      	movs	r0, #1
1a00139a:	4770      	bx	lr
1a00139c:	10000050 	.word	0x10000050
1a0013a0:	1000004c 	.word	0x1000004c

1a0013a4 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay(tick_t duration)
{
1a0013a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0013a8:	4680      	mov	r8, r0
1a0013aa:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a0013ac:	f7ff f990 	bl	1a0006d0 <tickRead>
1a0013b0:	4606      	mov	r6, r0
1a0013b2:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration/tickRateMS );
1a0013b4:	f7ff f98c 	bl	1a0006d0 <tickRead>
1a0013b8:	1b84      	subs	r4, r0, r6
1a0013ba:	eb61 0507 	sbc.w	r5, r1, r7
1a0013be:	4640      	mov	r0, r8
1a0013c0:	4649      	mov	r1, r9
1a0013c2:	4b05      	ldr	r3, [pc, #20]	; (1a0013d8 <delay+0x34>)
1a0013c4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0013c8:	f001 fc4c 	bl	1a002c64 <__aeabi_uldivmod>
1a0013cc:	428d      	cmp	r5, r1
1a0013ce:	bf08      	it	eq
1a0013d0:	4284      	cmpeq	r4, r0
1a0013d2:	d3ef      	bcc.n	1a0013b4 <delay+0x10>
}
1a0013d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0013d8:	10000b30 	.word	0x10000b30

1a0013dc <i2cHardwareInit>:
   return retVal;
}
#else

static bool_t i2cHardwareInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{
1a0013dc:	b538      	push	{r3, r4, r5, lr}
1a0013de:	4604      	mov	r4, r0
1a0013e0:	460d      	mov	r5, r1
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0013e2:	f640 0208 	movw	r2, #2056	; 0x808
1a0013e6:	4b07      	ldr	r3, [pc, #28]	; (1a001404 <i2cHardwareInit+0x28>)
1a0013e8:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

   // Configuracion de las lineas de SDA y SCL de la placa
   Chip_SCU_I2C0PinConfig( I2C0_STANDARD_FAST_MODE );

   // Inicializacion del periferico
   Chip_I2C_Init( i2cNumber );
1a0013ec:	f001 f96c 	bl	1a0026c8 <Chip_I2C_Init>
   // Seleccion de velocidad del bus
   Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
1a0013f0:	4620      	mov	r0, r4
1a0013f2:	4629      	mov	r1, r5
1a0013f4:	f001 f97a 	bl	1a0026ec <Chip_I2C_SetClockRate>
   // Configuracion para que los eventos se resuelvan por polliong
   // (la otra opcion es por interrupcion)
   Chip_I2C_SetMasterEventHandler( i2cNumber, Chip_I2C_EventHandlerPolling );
1a0013f8:	4620      	mov	r0, r4
1a0013fa:	4903      	ldr	r1, [pc, #12]	; (1a001408 <i2cHardwareInit+0x2c>)
1a0013fc:	f001 f98e 	bl	1a00271c <Chip_I2C_SetMasterEventHandler>

   return TRUE;
}
1a001400:	2001      	movs	r0, #1
1a001402:	bd38      	pop	{r3, r4, r5, pc}
1a001404:	40086000 	.word	0x40086000
1a001408:	1a002799 	.word	0x1a002799

1a00140c <i2cHardwareRead>:
                               uint16_t dataToReadBufferSize,
                               bool_t   sendWriteStop,
                               uint8_t* receiveDataBuffer,
                               uint16_t receiveDataBufferSize,
                               bool_t   sendReadStop )
{
1a00140c:	b500      	push	{lr}
1a00140e:	b085      	sub	sp, #20

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   i2cData.slaveAddr = i2cSlaveAddress;
1a001410:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a001414:	2100      	movs	r1, #0
1a001416:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a00141a:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = dataToReadBuffer;
1a00141e:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = dataToReadBufferSize;
1a001420:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = receiveDataBuffer;
1a001424:	9b07      	ldr	r3, [sp, #28]
1a001426:	9303      	str	r3, [sp, #12]
   i2cData.rxSz      = receiveDataBufferSize;
1a001428:	f8bd 3020 	ldrh.w	r3, [sp, #32]
1a00142c:	f8ad 3006 	strh.w	r3, [sp, #6]

   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a001430:	4804      	ldr	r0, [pc, #16]	; (1a001444 <i2cHardwareRead+0x38>)
1a001432:	4669      	mov	r1, sp
1a001434:	f001 f80a 	bl	1a00244c <Chip_I2CM_XferBlocking>
1a001438:	b100      	cbz	r0, 1a00143c <i2cHardwareRead+0x30>
      return FALSE;
   }

   return TRUE;
1a00143a:	2001      	movs	r0, #1
}
1a00143c:	b005      	add	sp, #20
1a00143e:	f85d fb04 	ldr.w	pc, [sp], #4
1a001442:	bf00      	nop
1a001444:	400a1000 	.word	0x400a1000

1a001448 <i2cHardwareWrite>:

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   if( i2cNumber != I2C0 ) {
1a001448:	b9a0      	cbnz	r0, 1a001474 <i2cHardwareWrite+0x2c>
static bool_t i2cHardwareWrite( i2cMap_t  i2cNumber,
                                uint8_t  i2cSlaveAddress,
                                uint8_t* transmitDataBuffer,
                                uint16_t transmitDataBufferSize,
                                bool_t   sendWriteStop )
{
1a00144a:	b500      	push	{lr}
1a00144c:	b085      	sub	sp, #20
   if( i2cNumber != I2C0 ) {
      return FALSE;
   }

   // Prepare the i2cData register
   i2cData.slaveAddr = i2cSlaveAddress;
1a00144e:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a001452:	2100      	movs	r1, #0
1a001454:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a001458:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = transmitDataBuffer;
1a00145c:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = transmitDataBufferSize;
1a00145e:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = 0;
1a001462:	9103      	str	r1, [sp, #12]
   i2cData.rxSz      = 0;
1a001464:	f8ad 1006 	strh.w	r1, [sp, #6]

   /* Send the i2c data */
   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a001468:	4805      	ldr	r0, [pc, #20]	; (1a001480 <i2cHardwareWrite+0x38>)
1a00146a:	4669      	mov	r1, sp
1a00146c:	f000 ffee 	bl	1a00244c <Chip_I2CM_XferBlocking>
1a001470:	b910      	cbnz	r0, 1a001478 <i2cHardwareWrite+0x30>
1a001472:	e002      	b.n	1a00147a <i2cHardwareWrite+0x32>
   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   if( i2cNumber != I2C0 ) {
      return FALSE;
1a001474:	2000      	movs	r0, #0
   }

   *** END - TEST I2C Response *** */

   return TRUE;
}
1a001476:	4770      	bx	lr
      }
   }

   *** END - TEST I2C Response *** */

   return TRUE;
1a001478:	2001      	movs	r0, #1
}
1a00147a:	b005      	add	sp, #20
1a00147c:	f85d fb04 	ldr.w	pc, [sp], #4
1a001480:	400a1000 	.word	0x400a1000

1a001484 <i2cInit>:
bool_t i2cInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a001484:	b918      	cbnz	r0, 1a00148e <i2cInit+0xa>


/*==================[external functions definition]==========================*/

bool_t i2cInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{
1a001486:	b508      	push	{r3, lr}
   }

#if( I2C_SOFTWARE == 1 )
   retVal = i2cSoftwareInit( i2cNumber, clockRateHz );
#else
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
1a001488:	f7ff ffa8 	bl	1a0013dc <i2cHardwareInit>
#endif

   return retVal;
1a00148c:	bd08      	pop	{r3, pc}
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
      return FALSE;
1a00148e:	2000      	movs	r0, #0
1a001490:	4770      	bx	lr
1a001492:	bf00      	nop

1a001494 <i2cRead>:
                bool_t   sendReadStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a001494:	b978      	cbnz	r0, 1a0014b6 <i2cRead+0x22>
                uint16_t dataToReadBufferSize,
                bool_t   sendWriteStop,
                uint8_t* receiveDataBuffer,
                uint16_t receiveDataBufferSize,
                bool_t   sendReadStop )
{
1a001496:	b510      	push	{r4, lr}
1a001498:	b084      	sub	sp, #16
                             sendWriteStop,
                             receiveDataBuffer,
                             receiveDataBufferSize,
                             sendReadStop );
#else
   retVal = i2cHardwareRead( i2cNumber,
1a00149a:	f89d 4018 	ldrb.w	r4, [sp, #24]
1a00149e:	9400      	str	r4, [sp, #0]
1a0014a0:	9c07      	ldr	r4, [sp, #28]
1a0014a2:	9401      	str	r4, [sp, #4]
1a0014a4:	f8bd 4020 	ldrh.w	r4, [sp, #32]
1a0014a8:	9402      	str	r4, [sp, #8]
1a0014aa:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
1a0014ae:	9403      	str	r4, [sp, #12]
1a0014b0:	f7ff ffac 	bl	1a00140c <i2cHardwareRead>
                             receiveDataBuffer,
                             receiveDataBufferSize,
                             sendReadStop );
#endif

   return retVal;
1a0014b4:	e001      	b.n	1a0014ba <i2cRead+0x26>
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
      return FALSE;
1a0014b6:	2000      	movs	r0, #0
1a0014b8:	4770      	bx	lr
                             receiveDataBufferSize,
                             sendReadStop );
#endif

   return retVal;
}
1a0014ba:	b004      	add	sp, #16
1a0014bc:	bd10      	pop	{r4, pc}
1a0014be:	bf00      	nop

1a0014c0 <i2cWrite>:
                 bool_t   sendWriteStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a0014c0:	b938      	cbnz	r0, 1a0014d2 <i2cWrite+0x12>
bool_t i2cWrite( i2cMap_t  i2cNumber,
                 uint8_t  i2cSlaveAddress,
                 uint8_t* transmitDataBuffer,
                 uint16_t transmitDataBufferSize,
                 bool_t   sendWriteStop )
{
1a0014c2:	b510      	push	{r4, lr}
1a0014c4:	b082      	sub	sp, #8
                              i2cSlaveAddress,
                              transmitDataBuffer,
                              transmitDataBufferSize,
                              sendWriteStop );
#else
   retVal = i2cHardwareWrite( i2cNumber,
1a0014c6:	f89d 4010 	ldrb.w	r4, [sp, #16]
1a0014ca:	9400      	str	r4, [sp, #0]
1a0014cc:	f7ff ffbc 	bl	1a001448 <i2cHardwareWrite>
                              transmitDataBuffer,
                              transmitDataBufferSize,
                              sendWriteStop );
#endif

   return retVal;
1a0014d0:	e001      	b.n	1a0014d6 <i2cWrite+0x16>
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
      return FALSE;
1a0014d2:	2000      	movs	r0, #0
1a0014d4:	4770      	bx	lr
                              transmitDataBufferSize,
                              sendWriteStop );
#endif

   return retVal;
}
1a0014d6:	b002      	add	sp, #8
1a0014d8:	bd10      	pop	{r4, pc}
1a0014da:	bf00      	nop

1a0014dc <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a0014dc:	e7fe      	b.n	1a0014dc <errorOcurred>
1a0014de:	bf00      	nop

1a0014e0 <doNothing>:
}

static void doNothing( void* ptr )
{
1a0014e0:	4770      	bx	lr
1a0014e2:	bf00      	nop

1a0014e4 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a0014e4:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0014e6:	2400      	movs	r4, #0
1a0014e8:	e013      	b.n	1a001512 <TIMER0_IRQHandler+0x2e>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0014ea:	4b0b      	ldr	r3, [pc, #44]	; (1a001518 <TIMER0_IRQHandler+0x34>)
1a0014ec:	681a      	ldr	r2, [r3, #0]
1a0014ee:	f004 010f 	and.w	r1, r4, #15
1a0014f2:	2301      	movs	r3, #1
1a0014f4:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a0014f6:	421a      	tst	r2, r3
1a0014f8:	d009      	beq.n	1a00150e <TIMER0_IRQHandler+0x2a>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0014fa:	4b08      	ldr	r3, [pc, #32]	; (1a00151c <TIMER0_IRQHandler+0x38>)
1a0014fc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a001500:	2000      	movs	r0, #0
1a001502:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001504:	b262      	sxtb	r2, r4
1a001506:	2301      	movs	r3, #1
1a001508:	4093      	lsls	r3, r2
1a00150a:	4a03      	ldr	r2, [pc, #12]	; (1a001518 <TIMER0_IRQHandler+0x34>)
1a00150c:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00150e:	3401      	adds	r4, #1
1a001510:	b2e4      	uxtb	r4, r4
void TIMER0_IRQHandler(void)
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001512:	2c03      	cmp	r4, #3
1a001514:	d9e9      	bls.n	1a0014ea <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a001516:	bd10      	pop	{r4, pc}
1a001518:	40084000 	.word	0x40084000
1a00151c:	10000054 	.word	0x10000054

1a001520 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a001520:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001522:	2400      	movs	r4, #0
1a001524:	e014      	b.n	1a001550 <TIMER1_IRQHandler+0x30>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001526:	4b0c      	ldr	r3, [pc, #48]	; (1a001558 <TIMER1_IRQHandler+0x38>)
1a001528:	681a      	ldr	r2, [r3, #0]
1a00152a:	f004 010f 	and.w	r1, r4, #15
1a00152e:	2301      	movs	r3, #1
1a001530:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a001532:	421a      	tst	r2, r3
1a001534:	d00a      	beq.n	1a00154c <TIMER1_IRQHandler+0x2c>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001536:	1d23      	adds	r3, r4, #4
1a001538:	4a08      	ldr	r2, [pc, #32]	; (1a00155c <TIMER1_IRQHandler+0x3c>)
1a00153a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00153e:	2000      	movs	r0, #0
1a001540:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001542:	b262      	sxtb	r2, r4
1a001544:	2301      	movs	r3, #1
1a001546:	4093      	lsls	r3, r2
1a001548:	4a03      	ldr	r2, [pc, #12]	; (1a001558 <TIMER1_IRQHandler+0x38>)
1a00154a:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00154c:	3401      	adds	r4, #1
1a00154e:	b2e4      	uxtb	r4, r4
void TIMER1_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001550:	2c03      	cmp	r4, #3
1a001552:	d9e8      	bls.n	1a001526 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a001554:	bd10      	pop	{r4, pc}
1a001556:	bf00      	nop
1a001558:	40085000 	.word	0x40085000
1a00155c:	10000054 	.word	0x10000054

1a001560 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a001560:	b510      	push	{r4, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001562:	2400      	movs	r4, #0
1a001564:	e015      	b.n	1a001592 <TIMER2_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001566:	4b0c      	ldr	r3, [pc, #48]	; (1a001598 <TIMER2_IRQHandler+0x38>)
1a001568:	681a      	ldr	r2, [r3, #0]
1a00156a:	f004 010f 	and.w	r1, r4, #15
1a00156e:	2301      	movs	r3, #1
1a001570:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a001572:	421a      	tst	r2, r3
1a001574:	d00b      	beq.n	1a00158e <TIMER2_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001576:	f104 0308 	add.w	r3, r4, #8
1a00157a:	4a08      	ldr	r2, [pc, #32]	; (1a00159c <TIMER2_IRQHandler+0x3c>)
1a00157c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001580:	2000      	movs	r0, #0
1a001582:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001584:	b262      	sxtb	r2, r4
1a001586:	2301      	movs	r3, #1
1a001588:	4093      	lsls	r3, r2
1a00158a:	4a03      	ldr	r2, [pc, #12]	; (1a001598 <TIMER2_IRQHandler+0x38>)
1a00158c:	6013      	str	r3, [r2, #0]
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00158e:	3401      	adds	r4, #1
1a001590:	b2e4      	uxtb	r4, r4

void TIMER2_IRQHandler( void )
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001592:	2c03      	cmp	r4, #3
1a001594:	d9e7      	bls.n	1a001566 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a001596:	bd10      	pop	{r4, pc}
1a001598:	400c3000 	.word	0x400c3000
1a00159c:	10000054 	.word	0x10000054

1a0015a0 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a0015a0:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0015a2:	2400      	movs	r4, #0
1a0015a4:	e015      	b.n	1a0015d2 <TIMER3_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0015a6:	4b0c      	ldr	r3, [pc, #48]	; (1a0015d8 <TIMER3_IRQHandler+0x38>)
1a0015a8:	681a      	ldr	r2, [r3, #0]
1a0015aa:	f004 010f 	and.w	r1, r4, #15
1a0015ae:	2301      	movs	r3, #1
1a0015b0:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a0015b2:	421a      	tst	r2, r3
1a0015b4:	d00b      	beq.n	1a0015ce <TIMER3_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0015b6:	f104 030c 	add.w	r3, r4, #12
1a0015ba:	4a08      	ldr	r2, [pc, #32]	; (1a0015dc <TIMER3_IRQHandler+0x3c>)
1a0015bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0015c0:	2000      	movs	r0, #0
1a0015c2:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0015c4:	b262      	sxtb	r2, r4
1a0015c6:	2301      	movs	r3, #1
1a0015c8:	4093      	lsls	r3, r2
1a0015ca:	4a03      	ldr	r2, [pc, #12]	; (1a0015d8 <TIMER3_IRQHandler+0x38>)
1a0015cc:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0015ce:	3401      	adds	r4, #1
1a0015d0:	b2e4      	uxtb	r4, r4
void TIMER3_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0015d2:	2c03      	cmp	r4, #3
1a0015d4:	d9e7      	bls.n	1a0015a6 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a0015d6:	bd10      	pop	{r4, pc}
1a0015d8:	400c4000 	.word	0x400c4000
1a0015dc:	10000054 	.word	0x10000054

1a0015e0 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a0015e0:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a0015e2:	f000 fb41 	bl	1a001c68 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a0015e6:	4b3a      	ldr	r3, [pc, #232]	; (1a0016d0 <boardInit+0xf0>)
1a0015e8:	6818      	ldr	r0, [r3, #0]
1a0015ea:	f7ff fecd 	bl	1a001388 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a0015ee:	2001      	movs	r0, #1
1a0015f0:	2100      	movs	r1, #0
1a0015f2:	f7ff f87f 	bl	1a0006f4 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a0015f6:	2000      	movs	r0, #0
1a0015f8:	2105      	movs	r1, #5
1a0015fa:	f7fe ff9b 	bl	1a000534 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a0015fe:	2024      	movs	r0, #36	; 0x24
1a001600:	2100      	movs	r1, #0
1a001602:	f7fe ff97 	bl	1a000534 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a001606:	2025      	movs	r0, #37	; 0x25
1a001608:	2100      	movs	r1, #0
1a00160a:	f7fe ff93 	bl	1a000534 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a00160e:	2026      	movs	r0, #38	; 0x26
1a001610:	2100      	movs	r1, #0
1a001612:	f7fe ff8f 	bl	1a000534 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a001616:	2027      	movs	r0, #39	; 0x27
1a001618:	2100      	movs	r1, #0
1a00161a:	f7fe ff8b 	bl	1a000534 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a00161e:	2028      	movs	r0, #40	; 0x28
1a001620:	2101      	movs	r1, #1
1a001622:	f7fe ff87 	bl	1a000534 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a001626:	2029      	movs	r0, #41	; 0x29
1a001628:	2101      	movs	r1, #1
1a00162a:	f7fe ff83 	bl	1a000534 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a00162e:	202a      	movs	r0, #42	; 0x2a
1a001630:	2101      	movs	r1, #1
1a001632:	f7fe ff7f 	bl	1a000534 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a001636:	202b      	movs	r0, #43	; 0x2b
1a001638:	2101      	movs	r1, #1
1a00163a:	f7fe ff7b 	bl	1a000534 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a00163e:	202c      	movs	r0, #44	; 0x2c
1a001640:	2101      	movs	r1, #1
1a001642:	f7fe ff77 	bl	1a000534 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a001646:	202d      	movs	r0, #45	; 0x2d
1a001648:	2101      	movs	r1, #1
1a00164a:	f7fe ff73 	bl	1a000534 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a00164e:	202e      	movs	r0, #46	; 0x2e
1a001650:	2100      	movs	r1, #0
1a001652:	f7fe ff6f 	bl	1a000534 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a001656:	202f      	movs	r0, #47	; 0x2f
1a001658:	2100      	movs	r1, #0
1a00165a:	f7fe ff6b 	bl	1a000534 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a00165e:	2030      	movs	r0, #48	; 0x30
1a001660:	2100      	movs	r1, #0
1a001662:	f7fe ff67 	bl	1a000534 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a001666:	2031      	movs	r0, #49	; 0x31
1a001668:	2100      	movs	r1, #0
1a00166a:	f7fe ff63 	bl	1a000534 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a00166e:	2032      	movs	r0, #50	; 0x32
1a001670:	2100      	movs	r1, #0
1a001672:	f7fe ff5f 	bl	1a000534 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a001676:	2033      	movs	r0, #51	; 0x33
1a001678:	2100      	movs	r1, #0
1a00167a:	f7fe ff5b 	bl	1a000534 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a00167e:	2034      	movs	r0, #52	; 0x34
1a001680:	2100      	movs	r1, #0
1a001682:	f7fe ff57 	bl	1a000534 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a001686:	2035      	movs	r0, #53	; 0x35
1a001688:	2100      	movs	r1, #0
1a00168a:	f7fe ff53 	bl	1a000534 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a00168e:	2036      	movs	r0, #54	; 0x36
1a001690:	2101      	movs	r1, #1
1a001692:	f7fe ff4f 	bl	1a000534 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a001696:	2037      	movs	r0, #55	; 0x37
1a001698:	2101      	movs	r1, #1
1a00169a:	f7fe ff4b 	bl	1a000534 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a00169e:	2038      	movs	r0, #56	; 0x38
1a0016a0:	2101      	movs	r1, #1
1a0016a2:	f7fe ff47 	bl	1a000534 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a0016a6:	2039      	movs	r0, #57	; 0x39
1a0016a8:	2101      	movs	r1, #1
1a0016aa:	f7fe ff43 	bl	1a000534 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a0016ae:	203a      	movs	r0, #58	; 0x3a
1a0016b0:	2101      	movs	r1, #1
1a0016b2:	f7fe ff3f 	bl	1a000534 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a0016b6:	203b      	movs	r0, #59	; 0x3b
1a0016b8:	2101      	movs	r1, #1
1a0016ba:	f7fe ff3b 	bl	1a000534 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a0016be:	203c      	movs	r0, #60	; 0x3c
1a0016c0:	2101      	movs	r1, #1
1a0016c2:	f7fe ff37 	bl	1a000534 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a0016c6:	203d      	movs	r0, #61	; 0x3d
1a0016c8:	2101      	movs	r1, #1
1a0016ca:	f7fe ff33 	bl	1a000534 <gpioInit>
1a0016ce:	bd08      	pop	{r3, pc}
1a0016d0:	10000b38 	.word	0x10000b38

1a0016d4 <Board_LED_Init>:
#define GPIO_BUTTONS_SIZE   (sizeof(GpioButtons) / sizeof(struct gpio_t))
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
1a0016d4:	b470      	push	{r4, r5, r6}
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0016d6:	2200      	movs	r2, #0
1a0016d8:	e014      	b.n	1a001704 <Board_LED_Init+0x30>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0016da:	4b0c      	ldr	r3, [pc, #48]	; (1a00170c <Board_LED_Init+0x38>)
1a0016dc:	f813 4012 	ldrb.w	r4, [r3, r2, lsl #1]
1a0016e0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
1a0016e4:	7859      	ldrb	r1, [r3, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0016e6:	480a      	ldr	r0, [pc, #40]	; (1a001710 <Board_LED_Init+0x3c>)
1a0016e8:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0016ec:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
1a0016f0:	2301      	movs	r3, #1
1a0016f2:	408b      	lsls	r3, r1
1a0016f4:	4333      	orrs	r3, r6
1a0016f6:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a0016fa:	eb01 1144 	add.w	r1, r1, r4, lsl #5
1a0016fe:	2300      	movs	r3, #0
1a001700:	5443      	strb	r3, [r0, r1]
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a001702:	3201      	adds	r2, #1
1a001704:	2a05      	cmp	r2, #5
1a001706:	d9e8      	bls.n	1a0016da <Board_LED_Init+0x6>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a001708:	bc70      	pop	{r4, r5, r6}
1a00170a:	4770      	bx	lr
1a00170c:	1a00811c 	.word	0x1a00811c
1a001710:	400f4000 	.word	0x400f4000

1a001714 <Board_TEC_Init>:


static void Board_TEC_Init()
{
1a001714:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a001716:	2300      	movs	r3, #0
1a001718:	e011      	b.n	1a00173e <Board_TEC_Init+0x2a>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a00171a:	490b      	ldr	r1, [pc, #44]	; (1a001748 <Board_TEC_Init+0x34>)
1a00171c:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a001720:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a001724:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a001726:	4c09      	ldr	r4, [pc, #36]	; (1a00174c <Board_TEC_Init+0x38>)
1a001728:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00172c:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a001730:	2101      	movs	r1, #1
1a001732:	40a9      	lsls	r1, r5
1a001734:	ea20 0101 	bic.w	r1, r0, r1
1a001738:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a00173c:	3301      	adds	r3, #1
1a00173e:	2b03      	cmp	r3, #3
1a001740:	d9eb      	bls.n	1a00171a <Board_TEC_Init+0x6>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a001742:	bc30      	pop	{r4, r5}
1a001744:	4770      	bx	lr
1a001746:	bf00      	nop
1a001748:	1a008114 	.word	0x1a008114
1a00174c:	400f4000 	.word	0x400f4000

1a001750 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
1a001750:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a001752:	2300      	movs	r3, #0
1a001754:	e011      	b.n	1a00177a <Board_GPIO_Init+0x2a>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a001756:	490b      	ldr	r1, [pc, #44]	; (1a001784 <Board_GPIO_Init+0x34>)
1a001758:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00175c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a001760:	784d      	ldrb	r5, [r1, #1]
1a001762:	4c09      	ldr	r4, [pc, #36]	; (1a001788 <Board_GPIO_Init+0x38>)
1a001764:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a001768:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a00176c:	2101      	movs	r1, #1
1a00176e:	40a9      	lsls	r1, r5
1a001770:	ea20 0101 	bic.w	r1, r0, r1
1a001774:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a001778:	3301      	adds	r3, #1
1a00177a:	2b08      	cmp	r3, #8
1a00177c:	d9eb      	bls.n	1a001756 <Board_GPIO_Init+0x6>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a00177e:	bc30      	pop	{r4, r5}
1a001780:	4770      	bx	lr
1a001782:	bf00      	nop
1a001784:	1a0080f8 	.word	0x1a0080f8
1a001788:	400f4000 	.word	0x400f4000

1a00178c <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a00178c:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a00178e:	4c0b      	ldr	r4, [pc, #44]	; (1a0017bc <Board_SPI_Init+0x30>)
1a001790:	4620      	mov	r0, r4
1a001792:	f000 fedb 	bl	1a00254c <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a001796:	6863      	ldr	r3, [r4, #4]
1a001798:	f023 0304 	bic.w	r3, r3, #4
1a00179c:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00179e:	6823      	ldr	r3, [r4, #0]
1a0017a0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0017a4:	f043 0307 	orr.w	r3, r3, #7
1a0017a8:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0017aa:	4620      	mov	r0, r4
1a0017ac:	4904      	ldr	r1, [pc, #16]	; (1a0017c0 <Board_SPI_Init+0x34>)
1a0017ae:	f000 fead 	bl	1a00250c <Chip_SSP_SetBitRate>
 * @param	pSSP		: The base of SSP peripheral on the chip
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Enable(LPC_SSP_T *pSSP)
{
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0017b2:	6863      	ldr	r3, [r4, #4]
1a0017b4:	f043 0302 	orr.w	r3, r3, #2
1a0017b8:	6063      	str	r3, [r4, #4]
1a0017ba:	bd10      	pop	{r4, pc}
1a0017bc:	400c5000 	.word	0x400c5000
1a0017c0:	000186a0 	.word	0x000186a0

1a0017c4 <Board_I2C_Init>:
    }
}


static void Board_I2C_Init()
{
1a0017c4:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a0017c6:	2000      	movs	r0, #0
1a0017c8:	f000 ff7e 	bl	1a0026c8 <Chip_I2C_Init>
1a0017cc:	f640 0208 	movw	r2, #2056	; 0x808
1a0017d0:	4b03      	ldr	r3, [pc, #12]	; (1a0017e0 <Board_I2C_Init+0x1c>)
1a0017d2:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_SCU_I2C0PinConfig(BOARD_I2C_MODE);
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0017d6:	2000      	movs	r0, #0
1a0017d8:	4902      	ldr	r1, [pc, #8]	; (1a0017e4 <Board_I2C_Init+0x20>)
1a0017da:	f000 ff87 	bl	1a0026ec <Chip_I2C_SetClockRate>
1a0017de:	bd08      	pop	{r3, pc}
1a0017e0:	40086000 	.word	0x40086000
1a0017e4:	000f4240 	.word	0x000f4240

1a0017e8 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a0017e8:	b510      	push	{r4, lr}
1a0017ea:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a0017ec:	4c08      	ldr	r4, [pc, #32]	; (1a001810 <Board_ADC_Init+0x28>)
1a0017ee:	4620      	mov	r0, r4
1a0017f0:	4669      	mov	r1, sp
1a0017f2:	f000 f9f9 	bl	1a001be8 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a0017f6:	4620      	mov	r0, r4
1a0017f8:	4669      	mov	r1, sp
1a0017fa:	4a06      	ldr	r2, [pc, #24]	; (1a001814 <Board_ADC_Init+0x2c>)
1a0017fc:	f000 fa14 	bl	1a001c28 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a001800:	4620      	mov	r0, r4
1a001802:	4669      	mov	r1, sp
1a001804:	2200      	movs	r2, #0
1a001806:	f000 fa29 	bl	1a001c5c <Chip_ADC_SetResolution>
}
1a00180a:	b002      	add	sp, #8
1a00180c:	bd10      	pop	{r4, pc}
1a00180e:	bf00      	nop
1a001810:	400e3000 	.word	0x400e3000
1a001814:	00061a80 	.word	0x00061a80

1a001818 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a001818:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a00181a:	4c07      	ldr	r4, [pc, #28]	; (1a001838 <Board_Debug_Init+0x20>)
1a00181c:	4620      	mov	r0, r4
1a00181e:	f000 f925 	bl	1a001a6c <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a001822:	4620      	mov	r0, r4
1a001824:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a001828:	f000 f94a 	bl	1a001ac0 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a00182c:	2303      	movs	r3, #3
1a00182e:	60e3      	str	r3, [r4, #12]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a001830:	2301      	movs	r3, #1
1a001832:	65e3      	str	r3, [r4, #92]	; 0x5c
1a001834:	bd10      	pop	{r4, pc}
1a001836:	bf00      	nop
1a001838:	400c1000 	.word	0x400c1000

1a00183c <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a00183c:	4b03      	ldr	r3, [pc, #12]	; (1a00184c <Board_UARTPutChar+0x10>)
1a00183e:	695b      	ldr	r3, [r3, #20]
}


void Board_UARTPutChar(char ch)
{
    while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a001840:	f013 0f20 	tst.w	r3, #32
1a001844:	d0fa      	beq.n	1a00183c <Board_UARTPutChar>
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
1a001846:	4b01      	ldr	r3, [pc, #4]	; (1a00184c <Board_UARTPutChar+0x10>)
1a001848:	6018      	str	r0, [r3, #0]
1a00184a:	4770      	bx	lr
1a00184c:	400c1000 	.word	0x400c1000

1a001850 <Board_UARTGetChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a001850:	4b05      	ldr	r3, [pc, #20]	; (1a001868 <Board_UARTGetChar+0x18>)
1a001852:	695b      	ldr	r3, [r3, #20]
}


int Board_UARTGetChar(void)
{
    if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a001854:	f013 0f01 	tst.w	r3, #1
1a001858:	d003      	beq.n	1a001862 <Board_UARTGetChar+0x12>
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00185a:	4b03      	ldr	r3, [pc, #12]	; (1a001868 <Board_UARTGetChar+0x18>)
1a00185c:	6818      	ldr	r0, [r3, #0]
1a00185e:	b2c0      	uxtb	r0, r0
       return (int) Chip_UART_ReadByte(DEBUG_UART);
1a001860:	4770      	bx	lr
    }
    return EOF;
1a001862:	f04f 30ff 	mov.w	r0, #4294967295
}
1a001866:	4770      	bx	lr
1a001868:	400c1000 	.word	0x400c1000

1a00186c <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a00186c:	b508      	push	{r3, lr}
   DEBUGINIT();
1a00186e:	f7ff ffd3 	bl	1a001818 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a001872:	480b      	ldr	r0, [pc, #44]	; (1a0018a0 <Board_Init+0x34>)
1a001874:	f000 fe28 	bl	1a0024c8 <Chip_GPIO_Init>

   Board_LED_Init();
1a001878:	f7ff ff2c 	bl	1a0016d4 <Board_LED_Init>
   Board_TEC_Init();
1a00187c:	f7ff ff4a 	bl	1a001714 <Board_TEC_Init>
   Board_SPI_Init();
1a001880:	f7ff ff84 	bl	1a00178c <Board_SPI_Init>
   Board_GPIO_Init();
1a001884:	f7ff ff64 	bl	1a001750 <Board_GPIO_Init>
   Board_I2C_Init();
1a001888:	f7ff ff9c 	bl	1a0017c4 <Board_I2C_Init>
   Board_ADC_Init();
1a00188c:	f7ff ffac 	bl	1a0017e8 <Board_ADC_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
	LPC_CREG->CREG6 |= 0x4;
1a001890:	4a04      	ldr	r2, [pc, #16]	; (1a0018a4 <Board_Init+0x38>)
1a001892:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a001896:	f043 0304 	orr.w	r3, r3, #4
1a00189a:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
1a00189e:	bd08      	pop	{r3, pc}
1a0018a0:	400f4000 	.word	0x400f4000
1a0018a4:	40043000 	.word	0x40043000

1a0018a8 <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a0018a8:	2309      	movs	r3, #9
1a0018aa:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0018ac:	f04f 30ff 	mov.w	r0, #4294967295
1a0018b0:	4770      	bx	lr
1a0018b2:	bf00      	nop

1a0018b4 <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a0018b4:	2358      	movs	r3, #88	; 0x58
1a0018b6:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0018b8:	f04f 30ff 	mov.w	r0, #4294967295
1a0018bc:	4770      	bx	lr
1a0018be:	bf00      	nop

1a0018c0 <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a0018c0:	2902      	cmp	r1, #2
1a0018c2:	d904      	bls.n	1a0018ce <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a0018c4:	2309      	movs	r3, #9
1a0018c6:	6003      	str	r3, [r0, #0]
       return -1;
1a0018c8:	f04f 30ff 	mov.w	r0, #4294967295
1a0018cc:	4770      	bx	lr
int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
   case 0:
   case 1:
   case 2:
       return 1;
1a0018ce:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a0018d0:	4770      	bx	lr
1a0018d2:	bf00      	nop

1a0018d4 <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a0018d4:	2358      	movs	r3, #88	; 0x58
1a0018d6:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0018d8:	f04f 30ff 	mov.w	r0, #4294967295
1a0018dc:	4770      	bx	lr
1a0018de:	bf00      	nop

1a0018e0 <_read_r>:
       SET_ERR(ENODEV);
       return -1;
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a0018e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t i = 0;
  char c = 0;
  switch (fd) {
1a0018e2:	2902      	cmp	r1, #2
1a0018e4:	d912      	bls.n	1a00190c <_read_r+0x2c>
1a0018e6:	e01c      	b.n	1a001922 <_read_r+0x42>
  case 0:
  case 1:
  case 2:
      while( i < n ){
         c = (char)Board_UARTGetChar();
1a0018e8:	f7ff ffb2 	bl	1a001850 <Board_UARTGetChar>
1a0018ec:	b2c0      	uxtb	r0, r0
         if( c != 255 ){
1a0018ee:	28ff      	cmp	r0, #255	; 0xff
1a0018f0:	d010      	beq.n	1a001914 <_read_r+0x34>
            if( c != '\r' && c != '\n' ){
1a0018f2:	280d      	cmp	r0, #13
1a0018f4:	d004      	beq.n	1a001900 <_read_r+0x20>
1a0018f6:	280a      	cmp	r0, #10
1a0018f8:	d002      	beq.n	1a001900 <_read_r+0x20>
               ((char*) b)[i] = c;
1a0018fa:	5538      	strb	r0, [r7, r4]
               i++;
1a0018fc:	3401      	adds	r4, #1
1a0018fe:	e009      	b.n	1a001914 <_read_r+0x34>
            }else{
               ((char*) b)[i] = c;
1a001900:	5538      	strb	r0, [r7, r4]
               i++;
1a001902:	3401      	adds	r4, #1
               c = (char)Board_UARTGetChar(); // read anotherone to prevent \r\n
1a001904:	f7ff ffa4 	bl	1a001850 <Board_UARTGetChar>
               return i;
1a001908:	4620      	mov	r0, r4
1a00190a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00190c:	461d      	mov	r5, r3
1a00190e:	4617      	mov	r7, r2
1a001910:	4606      	mov	r6, r0
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  char c = 0;
  switch (fd) {
1a001912:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a001914:	42ac      	cmp	r4, r5
1a001916:	d3e7      	bcc.n	1a0018e8 <_read_r+0x8>
               c = (char)Board_UARTGetChar(); // read anotherone to prevent \r\n
               return i;
            }
         }
      }
      SET_ERR(ENODEV);
1a001918:	2313      	movs	r3, #19
1a00191a:	6033      	str	r3, [r6, #0]
      return -1;
1a00191c:	f04f 30ff 	mov.w	r0, #4294967295
1a001920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  default:
      SET_ERR(ENODEV);
1a001922:	2313      	movs	r3, #19
1a001924:	6003      	str	r3, [r0, #0]
      return -1;
1a001926:	f04f 30ff 	mov.w	r0, #4294967295
  }
}
1a00192a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a00192c <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a00192c:	4b05      	ldr	r3, [pc, #20]	; (1a001944 <_sbrk_r+0x18>)
1a00192e:	681b      	ldr	r3, [r3, #0]
1a001930:	b913      	cbnz	r3, 1a001938 <_sbrk_r+0xc>
       heap_end = &_pvHeapStart;
1a001932:	4a05      	ldr	r2, [pc, #20]	; (1a001948 <_sbrk_r+0x1c>)
1a001934:	4b03      	ldr	r3, [pc, #12]	; (1a001944 <_sbrk_r+0x18>)
1a001936:	601a      	str	r2, [r3, #0]
   }
   prev_heap_end = heap_end;
1a001938:	4b02      	ldr	r3, [pc, #8]	; (1a001944 <_sbrk_r+0x18>)
1a00193a:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a00193c:	4401      	add	r1, r0
1a00193e:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a001940:	4770      	bx	lr
1a001942:	bf00      	nop
1a001944:	10000ae8 	.word	0x10000ae8
1a001948:	10000b3c 	.word	0x10000b3c

1a00194c <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a00194c:	2902      	cmp	r1, #2
1a00194e:	d905      	bls.n	1a00195c <_write_r+0x10>
1a001950:	e00c      	b.n	1a00196c <_write_r+0x20>
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
           Board_UARTPutChar(((char*) b)[i]);
1a001952:	5d30      	ldrb	r0, [r6, r4]
1a001954:	f7ff ff72 	bl	1a00183c <Board_UARTPutChar>
   size_t i;
   switch (fd) {
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a001958:	3401      	adds	r4, #1
1a00195a:	e003      	b.n	1a001964 <_write_r+0x18>
   UNUSED(st);
   SET_ERR(ENOSYS);
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a00195c:	b570      	push	{r4, r5, r6, lr}
1a00195e:	461d      	mov	r5, r3
1a001960:	4616      	mov	r6, r2
   size_t i;
   switch (fd) {
1a001962:	2400      	movs	r4, #0
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a001964:	42ac      	cmp	r4, r5
1a001966:	d3f4      	bcc.n	1a001952 <_write_r+0x6>
           Board_UARTPutChar(((char*) b)[i]);
       return n;
1a001968:	4628      	mov	r0, r5
1a00196a:	bd70      	pop	{r4, r5, r6, pc}
   default:
       SET_ERR(ENODEV);
1a00196c:	2313      	movs	r3, #19
1a00196e:	6003      	str	r3, [r0, #0]
       return -1;
1a001970:	f04f 30ff 	mov.w	r0, #4294967295
1a001974:	4770      	bx	lr
1a001976:	bf00      	nop

1a001978 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a001978:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a00197a:	4b04      	ldr	r3, [pc, #16]	; (1a00198c <SystemInit+0x14>)
1a00197c:	4a04      	ldr	r2, [pc, #16]	; (1a001990 <SystemInit+0x18>)
1a00197e:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a001980:	f000 fd76 	bl	1a002470 <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a001984:	f000 f856 	bl	1a001a34 <Board_SystemInit>
1a001988:	bd08      	pop	{r3, pc}
1a00198a:	bf00      	nop
1a00198c:	e000ed08 	.word	0xe000ed08
1a001990:	1a000000 	.word	0x1a000000

1a001994 <Board_SetupMuxing>:
    {0,  1, (SCU_MODE_HIGHSPEEDSLEW_EN | SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_FUNC6)}, /* TXEN */
};


void Board_SetupMuxing(void)
{
1a001994:	b410      	push	{r4}
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a001996:	2300      	movs	r3, #0
1a001998:	e00c      	b.n	1a0019b4 <Board_SetupMuxing+0x20>
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a00199a:	4a09      	ldr	r2, [pc, #36]	; (1a0019c0 <Board_SetupMuxing+0x2c>)
1a00199c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0019a0:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0019a4:	784a      	ldrb	r2, [r1, #1]
1a0019a6:	8848      	ldrh	r0, [r1, #2]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0019a8:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0019ac:	4905      	ldr	r1, [pc, #20]	; (1a0019c4 <Board_SetupMuxing+0x30>)
1a0019ae:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0019b2:	3301      	adds	r3, #1
1a0019b4:	2b25      	cmp	r3, #37	; 0x25
1a0019b6:	d9f0      	bls.n	1a00199a <Board_SetupMuxing+0x6>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0019b8:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0019bc:	4770      	bx	lr
1a0019be:	bf00      	nop
1a0019c0:	1a008134 	.word	0x1a008134
1a0019c4:	40086000 	.word	0x40086000

1a0019c8 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a0019c8:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0019ca:	4a17      	ldr	r2, [pc, #92]	; (1a001a28 <Board_SetupClocking+0x60>)
1a0019cc:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0019d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0019d4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0019d8:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0019dc:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0019e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0019e4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0019e8:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0019ec:	2006      	movs	r0, #6
1a0019ee:	490f      	ldr	r1, [pc, #60]	; (1a001a2c <Board_SetupClocking+0x64>)
1a0019f0:	2201      	movs	r2, #1
1a0019f2:	f000 fbf9 	bl	1a0021e8 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0019f6:	2400      	movs	r4, #0
1a0019f8:	e00a      	b.n	1a001a10 <Board_SetupClocking+0x48>
    {
        const struct CLK_BASE_STATES *c = &InitClkStates[i];
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0019fa:	4a0d      	ldr	r2, [pc, #52]	; (1a001a30 <Board_SetupClocking+0x68>)
1a0019fc:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a001a00:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a001a04:	7859      	ldrb	r1, [r3, #1]
1a001a06:	789a      	ldrb	r2, [r3, #2]
1a001a08:	78db      	ldrb	r3, [r3, #3]
1a001a0a:	f000 fb55 	bl	1a0020b8 <Chip_Clock_SetBaseClock>
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a001a0e:	3401      	adds	r4, #1
1a001a10:	2c02      	cmp	r4, #2
1a001a12:	d9f2      	bls.n	1a0019fa <Board_SetupClocking+0x32>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a001a14:	4b04      	ldr	r3, [pc, #16]	; (1a001a28 <Board_SetupClocking+0x60>)
1a001a16:	685a      	ldr	r2, [r3, #4]
1a001a18:	f022 020c 	bic.w	r2, r2, #12
1a001a1c:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a001a1e:	685a      	ldr	r2, [r3, #4]
1a001a20:	f042 0203 	orr.w	r2, r2, #3
1a001a24:	605a      	str	r2, [r3, #4]
1a001a26:	bd10      	pop	{r4, pc}
1a001a28:	40043000 	.word	0x40043000
1a001a2c:	0c28cb00 	.word	0x0c28cb00
1a001a30:	1a008128 	.word	0x1a008128

1a001a34 <Board_SystemInit>:
}


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a001a34:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a001a36:	f7ff ffad 	bl	1a001994 <Board_SetupMuxing>
    Board_SetupClocking();
1a001a3a:	f7ff ffc5 	bl	1a0019c8 <Board_SetupClocking>
1a001a3e:	bd08      	pop	{r3, pc}

1a001a40 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a001a40:	4b09      	ldr	r3, [pc, #36]	; (1a001a68 <Chip_UART_GetIndex+0x28>)
1a001a42:	4298      	cmp	r0, r3
1a001a44:	d009      	beq.n	1a001a5a <Chip_UART_GetIndex+0x1a>
1a001a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a001a4a:	4298      	cmp	r0, r3
1a001a4c:	d007      	beq.n	1a001a5e <Chip_UART_GetIndex+0x1e>
1a001a4e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a001a52:	4298      	cmp	r0, r3
1a001a54:	d005      	beq.n	1a001a62 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a001a56:	2000      	movs	r0, #0
1a001a58:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a001a5a:	2002      	movs	r0, #2
1a001a5c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a001a5e:	2003      	movs	r0, #3
1a001a60:	4770      	bx	lr
	uint32_t base = (uint32_t) pUART;
	switch(base) {
		case LPC_USART0_BASE:
			return 0;
		case LPC_UART1_BASE:
			return 1;
1a001a62:	2001      	movs	r0, #1
		case LPC_USART3_BASE:
			return 3;
		default:
			return 0; /* Should never come here */
	}
}
1a001a64:	4770      	bx	lr
1a001a66:	bf00      	nop
1a001a68:	400c1000 	.word	0x400c1000

1a001a6c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a001a6c:	b510      	push	{r4, lr}
1a001a6e:	b082      	sub	sp, #8
1a001a70:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a001a72:	f7ff ffe5 	bl	1a001a40 <Chip_UART_GetIndex>
1a001a76:	4b10      	ldr	r3, [pc, #64]	; (1a001ab8 <Chip_UART_Init+0x4c>)
1a001a78:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001a7c:	2101      	movs	r1, #1
1a001a7e:	460a      	mov	r2, r1
1a001a80:	460b      	mov	r3, r1
1a001a82:	f000 fb53 	bl	1a00212c <Chip_Clock_EnableOpts>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a001a86:	2307      	movs	r3, #7
1a001a88:	60a3      	str	r3, [r4, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
    pUART->TER2 = 0;
1a001a8a:	2300      	movs	r3, #0
1a001a8c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a001a8e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a001a90:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a001a92:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a001a94:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a001a96:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a001a98:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a001a9a:	4b08      	ldr	r3, [pc, #32]	; (1a001abc <Chip_UART_Init+0x50>)
1a001a9c:	429c      	cmp	r4, r3
1a001a9e:	d103      	bne.n	1a001aa8 <Chip_UART_Init+0x3c>
		/* Set Modem Control to default state */
		pUART->MCR = 0;
1a001aa0:	2300      	movs	r3, #0
1a001aa2:	6123      	str	r3, [r4, #16]
		/*Dummy Reading to Clear Status */
		tmp = pUART->MSR;
1a001aa4:	69a3      	ldr	r3, [r4, #24]
1a001aa6:	9301      	str	r3, [sp, #4]
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a001aa8:	2303      	movs	r3, #3
1a001aaa:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a001aac:	2310      	movs	r3, #16
1a001aae:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a001ab0:	9b01      	ldr	r3, [sp, #4]
}
1a001ab2:	b002      	add	sp, #8
1a001ab4:	bd10      	pop	{r4, pc}
1a001ab6:	bf00      	nop
1a001ab8:	1a0081d4 	.word	0x1a0081d4
1a001abc:	40082000 	.word	0x40082000

1a001ac0 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a001ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001ac4:	b083      	sub	sp, #12
1a001ac6:	4683      	mov	fp, r0
1a001ac8:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a001aca:	f7ff ffb9 	bl	1a001a40 <Chip_UART_GetIndex>
1a001ace:	4b34      	ldr	r3, [pc, #208]	; (1a001ba0 <Chip_UART_SetBaudFDR+0xe0>)
1a001ad0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001ad4:	f000 fb62 	bl	1a00219c <Chip_Clock_GetRate>
1a001ad8:	4606      	mov	r6, r0
/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */
1a001ada:	f04f 37ff 	mov.w	r7, #4294967295

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a001ade:	2401      	movs	r4, #1
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a001ae0:	2300      	movs	r3, #0
1a001ae2:	9301      	str	r3, [sp, #4]
1a001ae4:	46a2      	mov	sl, r4
1a001ae6:	4699      	mov	r9, r3

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a001ae8:	e029      	b.n	1a001b3e <Chip_UART_SetBaudFDR+0x7e>
		for (d = 0; d < m; d++) {
			uint32_t diff, div;
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a001aea:	2300      	movs	r3, #0
1a001aec:	0932      	lsrs	r2, r6, #4
1a001aee:	0730      	lsls	r0, r6, #28
1a001af0:	fba0 0104 	umull	r0, r1, r0, r4
1a001af4:	fb04 1102 	mla	r1, r4, r2, r1
1a001af8:	1962      	adds	r2, r4, r5
1a001afa:	fb08 f202 	mul.w	r2, r8, r2
1a001afe:	f001 f8b1 	bl	1a002c64 <__aeabi_uldivmod>

			/* Lower 32-bit of dval has diff */
			diff = (uint32_t) dval;
1a001b02:	4603      	mov	r3, r0
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);
1a001b04:	460a      	mov	r2, r1

			/* Closer to next div */
			if ((int)diff < 0) {
1a001b06:	2800      	cmp	r0, #0
1a001b08:	da01      	bge.n	1a001b0e <Chip_UART_SetBaudFDR+0x4e>
				diff = -diff;
1a001b0a:	4243      	negs	r3, r0
				div ++;
1a001b0c:	1c4a      	adds	r2, r1, #1
			}

			/* Check if new value is worse than old or out of range */
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a001b0e:	429f      	cmp	r7, r3
1a001b10:	d30a      	bcc.n	1a001b28 <Chip_UART_SetBaudFDR+0x68>
1a001b12:	b14a      	cbz	r2, 1a001b28 <Chip_UART_SetBaudFDR+0x68>
1a001b14:	0c11      	lsrs	r1, r2, #16
1a001b16:	d107      	bne.n	1a001b28 <Chip_UART_SetBaudFDR+0x68>
1a001b18:	2a02      	cmp	r2, #2
1a001b1a:	d800      	bhi.n	1a001b1e <Chip_UART_SetBaudFDR+0x5e>
1a001b1c:	b925      	cbnz	r5, 1a001b28 <Chip_UART_SetBaudFDR+0x68>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a001b1e:	b14b      	cbz	r3, 1a001b34 <Chip_UART_SetBaudFDR+0x74>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a001b20:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a001b22:	9501      	str	r5, [sp, #4]
			sm = m;
1a001b24:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a001b26:	4691      	mov	r9, r2
	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
		for (d = 0; d < m; d++) {
1a001b28:	3501      	adds	r5, #1
1a001b2a:	e000      	b.n	1a001b2e <Chip_UART_SetBaudFDR+0x6e>
1a001b2c:	2500      	movs	r5, #0
1a001b2e:	42a5      	cmp	r5, r4
1a001b30:	d3db      	bcc.n	1a001aea <Chip_UART_SetBaudFDR+0x2a>
1a001b32:	e003      	b.n	1a001b3c <Chip_UART_SetBaudFDR+0x7c>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a001b34:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a001b36:	9501      	str	r5, [sp, #4]
			sm = m;
1a001b38:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a001b3a:	4691      	mov	r9, r2

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a001b3c:	3401      	adds	r4, #1
1a001b3e:	b10f      	cbz	r7, 1a001b44 <Chip_UART_SetBaudFDR+0x84>
1a001b40:	2c0f      	cmp	r4, #15
1a001b42:	d9f3      	bls.n	1a001b2c <Chip_UART_SetBaudFDR+0x6c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a001b44:	f1b9 0f00 	cmp.w	r9, #0
1a001b48:	d026      	beq.n	1a001b98 <Chip_UART_SetBaudFDR+0xd8>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a001b4a:	f8db 300c 	ldr.w	r3, [fp, #12]
1a001b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001b52:	f8cb 300c 	str.w	r3, [fp, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a001b56:	fa5f f389 	uxtb.w	r3, r9
1a001b5a:	f8cb 3000 	str.w	r3, [fp]
	pUART->DLM = (uint32_t) dlm;
1a001b5e:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a001b62:	f8cb 3004 	str.w	r3, [fp, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001b66:	f8db 300c 	ldr.w	r3, [fp, #12]
1a001b6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001b6e:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a001b72:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a001b76:	b2da      	uxtb	r2, r3
1a001b78:	9901      	ldr	r1, [sp, #4]
1a001b7a:	f001 030f 	and.w	r3, r1, #15
1a001b7e:	4313      	orrs	r3, r2
1a001b80:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a001b84:	0933      	lsrs	r3, r6, #4
1a001b86:	fb0a f303 	mul.w	r3, sl, r3
1a001b8a:	eb0a 0001 	add.w	r0, sl, r1
1a001b8e:	fb09 f000 	mul.w	r0, r9, r0
1a001b92:	fbb3 f0f0 	udiv	r0, r3, r0
1a001b96:	e000      	b.n	1a001b9a <Chip_UART_SetBaudFDR+0xda>
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
		return 0;
1a001b98:	2000      	movs	r0, #0
	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
}
1a001b9a:	b003      	add	sp, #12
1a001b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001ba0:	1a0081cc 	.word	0x1a0081cc

1a001ba4 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a001ba4:	4b03      	ldr	r3, [pc, #12]	; (1a001bb4 <Chip_ADC_GetClockIndex+0x10>)
1a001ba6:	4298      	cmp	r0, r3
1a001ba8:	d101      	bne.n	1a001bae <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
1a001baa:	2004      	movs	r0, #4
1a001bac:	4770      	bx	lr
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a001bae:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a001bb0:	4770      	bx	lr
1a001bb2:	bf00      	nop
1a001bb4:	400e4000 	.word	0x400e4000

1a001bb8 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a001bb8:	b570      	push	{r4, r5, r6, lr}
1a001bba:	460d      	mov	r5, r1
1a001bbc:	4614      	mov	r4, r2
1a001bbe:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a001bc0:	f7ff fff0 	bl	1a001ba4 <Chip_ADC_GetClockIndex>
1a001bc4:	f000 faea 	bl	1a00219c <Chip_Clock_GetRate>
	if (burstMode) {
1a001bc8:	b115      	cbz	r5, 1a001bd0 <getClkDiv+0x18>
		fullAdcRate = adcRate * clks;
1a001bca:	fb04 f406 	mul.w	r4, r4, r6
1a001bce:	e003      	b.n	1a001bd8 <getClkDiv+0x20>
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a001bd0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001bd4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a001bd8:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a001bdc:	0064      	lsls	r4, r4, #1
1a001bde:	fbb0 f4f4 	udiv	r4, r0, r4
1a001be2:	1e60      	subs	r0, r4, #1
	return div;
}
1a001be4:	b2c0      	uxtb	r0, r0
1a001be6:	bd70      	pop	{r4, r5, r6, pc}

1a001be8 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a001be8:	b538      	push	{r3, r4, r5, lr}
1a001bea:	4605      	mov	r5, r0
1a001bec:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a001bee:	f7ff ffd9 	bl	1a001ba4 <Chip_ADC_GetClockIndex>
1a001bf2:	2101      	movs	r1, #1
1a001bf4:	460a      	mov	r2, r1
1a001bf6:	460b      	mov	r3, r1
1a001bf8:	f000 fa98 	bl	1a00212c <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a001bfc:	2100      	movs	r1, #0
1a001bfe:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a001c00:	4a08      	ldr	r2, [pc, #32]	; (1a001c24 <Chip_ADC_Init+0x3c>)
1a001c02:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a001c04:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a001c06:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a001c08:	4628      	mov	r0, r5
1a001c0a:	230b      	movs	r3, #11
1a001c0c:	f7ff ffd4 	bl	1a001bb8 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001c10:	0200      	lsls	r0, r0, #8
1a001c12:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001c16:	7920      	ldrb	r0, [r4, #4]
1a001c18:	f000 0007 	and.w	r0, r0, #7
1a001c1c:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
	pADC->CR = cr;
1a001c20:	6028      	str	r0, [r5, #0]
1a001c22:	bd38      	pop	{r3, r4, r5, pc}
1a001c24:	00061a80 	.word	0x00061a80

1a001c28 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a001c28:	b570      	push	{r4, r5, r6, lr}
1a001c2a:	4606      	mov	r6, r0
1a001c2c:	460d      	mov	r5, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a001c2e:	6804      	ldr	r4, [r0, #0]
1a001c30:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a001c34:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a001c38:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a001c3a:	790b      	ldrb	r3, [r1, #4]
1a001c3c:	f1c3 030b 	rsb	r3, r3, #11
1a001c40:	7949      	ldrb	r1, [r1, #5]
1a001c42:	b2db      	uxtb	r3, r3
1a001c44:	f7ff ffb8 	bl	1a001bb8 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001c48:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001c4c:	792c      	ldrb	r4, [r5, #4]
1a001c4e:	f004 0407 	and.w	r4, r4, #7
1a001c52:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	pADC->CR = cr;
1a001c56:	6030      	str	r0, [r6, #0]
1a001c58:	bd70      	pop	{r4, r5, r6, pc}
1a001c5a:	bf00      	nop

1a001c5c <Chip_ADC_SetResolution>:
}

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a001c5c:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a001c5e:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a001c60:	680a      	ldr	r2, [r1, #0]
1a001c62:	f7ff ffe1 	bl	1a001c28 <Chip_ADC_SetSampleRate>
1a001c66:	bd08      	pop	{r3, pc}

1a001c68 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a001c68:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a001c6a:	2069      	movs	r0, #105	; 0x69
1a001c6c:	f000 fa96 	bl	1a00219c <Chip_Clock_GetRate>
1a001c70:	4b01      	ldr	r3, [pc, #4]	; (1a001c78 <SystemCoreClockUpdate+0x10>)
1a001c72:	6018      	str	r0, [r3, #0]
1a001c74:	bd08      	pop	{r3, pc}
1a001c76:	bf00      	nop
1a001c78:	10000b38 	.word	0x10000b38

1a001c7c <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001c7c:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a001c7e:	680b      	ldr	r3, [r1, #0]
1a001c80:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001c84:	d002      	beq.n	1a001c8c <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a001c86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a001c8a:	600b      	str	r3, [r1, #0]
1a001c8c:	4686      	mov	lr, r0
1a001c8e:	2601      	movs	r6, #1
1a001c90:	e041      	b.n	1a001d16 <pll_calc_divs+0x9a>
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
1a001c92:	680d      	ldr	r5, [r1, #0]
1a001c94:	f015 0f40 	tst.w	r5, #64	; 0x40
1a001c98:	d008      	beq.n	1a001cac <pll_calc_divs+0x30>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a001c9a:	1c7b      	adds	r3, r7, #1
1a001c9c:	fa04 f203 	lsl.w	r2, r4, r3
1a001ca0:	694b      	ldr	r3, [r1, #20]
1a001ca2:	fb03 f302 	mul.w	r3, r3, r2
1a001ca6:	fbb3 f3f6 	udiv	r3, r3, r6
1a001caa:	e004      	b.n	1a001cb6 <pll_calc_divs+0x3a>
				} else {
					fcco = (m * ppll->fin) / n;
1a001cac:	694b      	ldr	r3, [r1, #20]
1a001cae:	fb04 f303 	mul.w	r3, r4, r3
1a001cb2:	fbb3 f3f6 	udiv	r3, r3, r6
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a001cb6:	4a19      	ldr	r2, [pc, #100]	; (1a001d1c <pll_calc_divs+0xa0>)
1a001cb8:	4293      	cmp	r3, r2
1a001cba:	d920      	bls.n	1a001cfe <pll_calc_divs+0x82>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a001cbc:	4a18      	ldr	r2, [pc, #96]	; (1a001d20 <pll_calc_divs+0xa4>)
1a001cbe:	4293      	cmp	r3, r2
1a001cc0:	d823      	bhi.n	1a001d0a <pll_calc_divs+0x8e>
				if (ppll->ctrl & (1 << 7)) {
1a001cc2:	f015 0f80 	tst.w	r5, #128	; 0x80
1a001cc6:	d103      	bne.n	1a001cd0 <pll_calc_divs+0x54>
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
1a001cc8:	1c7a      	adds	r2, r7, #1
1a001cca:	fa23 f202 	lsr.w	r2, r3, r2
1a001cce:	e000      	b.n	1a001cd2 <pll_calc_divs+0x56>
					fcco = (m * ppll->fin) / n;
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a001cd0:	461a      	mov	r2, r3
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a001cd2:	1a85      	subs	r5, r0, r2
1a001cd4:	d502      	bpl.n	1a001cdc <pll_calc_divs+0x60>
		return -val;
1a001cd6:	f1c5 0c00 	rsb	ip, r5, #0
1a001cda:	e000      	b.n	1a001cde <pll_calc_divs+0x62>
	return val;
1a001cdc:	46ac      	mov	ip, r5
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a001cde:	45e6      	cmp	lr, ip
1a001ce0:	d90d      	bls.n	1a001cfe <pll_calc_divs+0x82>
					ppll->nsel = n;
1a001ce2:	608e      	str	r6, [r1, #8]
					ppll->psel = p + 1;
1a001ce4:	f107 0e01 	add.w	lr, r7, #1
1a001ce8:	f8c1 e00c 	str.w	lr, [r1, #12]
					ppll->msel = m;
1a001cec:	610c      	str	r4, [r1, #16]
					ppll->fout = fout;
1a001cee:	618a      	str	r2, [r1, #24]
					ppll->fcco = fcco;
1a001cf0:	61cb      	str	r3, [r1, #28]
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a001cf2:	2d00      	cmp	r5, #0
1a001cf4:	da02      	bge.n	1a001cfc <pll_calc_divs+0x80>
		return -val;
1a001cf6:	f1c5 0e00 	rsb	lr, r5, #0
1a001cfa:	e000      	b.n	1a001cfe <pll_calc_divs+0x82>
	return val;
1a001cfc:	46ae      	mov	lr, r5
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
1a001cfe:	3401      	adds	r4, #1
1a001d00:	e000      	b.n	1a001d04 <pll_calc_divs+0x88>
1a001d02:	2401      	movs	r4, #1
1a001d04:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
1a001d08:	ddc3      	ble.n	1a001c92 <pll_calc_divs+0x16>
	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a001d0a:	3701      	adds	r7, #1
1a001d0c:	e000      	b.n	1a001d10 <pll_calc_divs+0x94>
1a001d0e:	2700      	movs	r7, #0
1a001d10:	2f03      	cmp	r7, #3
1a001d12:	ddf6      	ble.n	1a001d02 <pll_calc_divs+0x86>

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
1a001d14:	3601      	adds	r6, #1
1a001d16:	2e04      	cmp	r6, #4
1a001d18:	ddf9      	ble.n	1a001d0e <pll_calc_divs+0x92>
					prev = ABS(freq - fout);
				}
			}
		}
	}
}
1a001d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a001d1c:	094c5eff 	.word	0x094c5eff
1a001d20:	1312d000 	.word	0x1312d000

1a001d24 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001d24:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001d26:	b099      	sub	sp, #100	; 0x64
1a001d28:	4605      	mov	r5, r0
1a001d2a:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a001d2c:	4668      	mov	r0, sp
1a001d2e:	2100      	movs	r1, #0
1a001d30:	2260      	movs	r2, #96	; 0x60
1a001d32:	f001 fd39 	bl	1a0037a8 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a001d36:	2380      	movs	r3, #128	; 0x80
1a001d38:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a001d3a:	6963      	ldr	r3, [r4, #20]
1a001d3c:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a001d3e:	7923      	ldrb	r3, [r4, #4]
1a001d40:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a001d44:	4628      	mov	r0, r5
1a001d46:	4669      	mov	r1, sp
1a001d48:	f7ff ff98 	bl	1a001c7c <pll_calc_divs>
	if (pll[0].fout == freq) {
1a001d4c:	9b06      	ldr	r3, [sp, #24]
1a001d4e:	42ab      	cmp	r3, r5
1a001d50:	d107      	bne.n	1a001d62 <pll_get_frac+0x3e>
		*ppll = pll[0];
1a001d52:	466d      	mov	r5, sp
1a001d54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001d56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001d58:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001d5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a001d60:	e05e      	b.n	1a001e20 <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a001d62:	1aeb      	subs	r3, r5, r3
1a001d64:	d500      	bpl.n	1a001d68 <pll_get_frac+0x44>
		return -val;
1a001d66:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[0]);
	if (pll[0].fout == freq) {
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a001d68:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a001d6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a001d6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a001d70:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a001d72:	6963      	ldr	r3, [r4, #20]
1a001d74:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a001d76:	7923      	ldrb	r3, [r4, #4]
1a001d78:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a001d7c:	4628      	mov	r0, r5
1a001d7e:	a910      	add	r1, sp, #64	; 0x40
1a001d80:	f7ff ff7c 	bl	1a001c7c <pll_calc_divs>
	if (pll[2].fout == freq) {
1a001d84:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a001d86:	42ab      	cmp	r3, r5
1a001d88:	d107      	bne.n	1a001d9a <pll_get_frac+0x76>
		*ppll = pll[2];
1a001d8a:	ad10      	add	r5, sp, #64	; 0x40
1a001d8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001d8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001d90:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001d94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a001d98:	e042      	b.n	1a001e20 <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a001d9a:	1aeb      	subs	r3, r5, r3
1a001d9c:	d500      	bpl.n	1a001da0 <pll_get_frac+0x7c>
		return -val;
1a001d9e:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[2]);
	if (pll[2].fout == freq) {
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a001da0:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a001da2:	4b20      	ldr	r3, [pc, #128]	; (1a001e24 <pll_get_frac+0x100>)
1a001da4:	429d      	cmp	r5, r3
1a001da6:	d812      	bhi.n	1a001dce <pll_get_frac+0xaa>
		/* Try integer mode */
		pll[1].ctrl = (1 << 6);
1a001da8:	2340      	movs	r3, #64	; 0x40
1a001daa:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a001dac:	6963      	ldr	r3, [r4, #20]
1a001dae:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a001db0:	4628      	mov	r0, r5
1a001db2:	a908      	add	r1, sp, #32
1a001db4:	f7ff ff62 	bl	1a001c7c <pll_calc_divs>
		if (pll[1].fout == freq) {
1a001db8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a001dba:	42ab      	cmp	r3, r5
1a001dbc:	d107      	bne.n	1a001dce <pll_get_frac+0xaa>
			*ppll = pll[1];
1a001dbe:	ad08      	add	r5, sp, #32
1a001dc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001dc4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001dc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a001dcc:	e028      	b.n	1a001e20 <pll_get_frac+0xfc>
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a001dce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a001dd0:	1aed      	subs	r5, r5, r3
1a001dd2:	d500      	bpl.n	1a001dd6 <pll_get_frac+0xb2>
		return -val;
1a001dd4:	426d      	negs	r5, r5
		}
	}
	diff[1] = ABS(freq - pll[1].fout);

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a001dd6:	42ae      	cmp	r6, r5
1a001dd8:	dc11      	bgt.n	1a001dfe <pll_get_frac+0xda>
		if (diff[0] <= diff[2]) {
1a001dda:	42be      	cmp	r6, r7
1a001ddc:	dc07      	bgt.n	1a001dee <pll_get_frac+0xca>
			*ppll = pll[0];
1a001dde:	466d      	mov	r5, sp
1a001de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001de4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001de8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001dec:	e018      	b.n	1a001e20 <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a001dee:	ad10      	add	r5, sp, #64	; 0x40
1a001df0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001df2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001df4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001df8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001dfc:	e010      	b.n	1a001e20 <pll_get_frac+0xfc>
		}
	} else {
		if (diff[1] <= diff[2]) {
1a001dfe:	42af      	cmp	r7, r5
1a001e00:	db07      	blt.n	1a001e12 <pll_get_frac+0xee>
			*ppll = pll[1];
1a001e02:	ad08      	add	r5, sp, #32
1a001e04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001e06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001e08:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001e0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001e10:	e006      	b.n	1a001e20 <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a001e12:	ad10      	add	r5, sp, #64	; 0x40
1a001e14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001e16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001e18:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001e1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
	}
}
1a001e20:	b019      	add	sp, #100	; 0x64
1a001e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a001e24:	068e7780 	.word	0x068e7780

1a001e28 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a001e28:	b430      	push	{r4, r5}
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a001e2a:	2300      	movs	r3, #0
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a001e2c:	211c      	movs	r1, #28
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001e2e:	e010      	b.n	1a001e52 <Chip_Clock_FindBaseClock+0x2a>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a001e30:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001e34:	0052      	lsls	r2, r2, #1
1a001e36:	4d0d      	ldr	r5, [pc, #52]	; (1a001e6c <Chip_Clock_FindBaseClock+0x44>)
1a001e38:	5aaa      	ldrh	r2, [r5, r2]
1a001e3a:	4282      	cmp	r2, r0
1a001e3c:	d806      	bhi.n	1a001e4c <Chip_Clock_FindBaseClock+0x24>
1a001e3e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001e42:	0052      	lsls	r2, r2, #1
1a001e44:	442a      	add	r2, r5
1a001e46:	8852      	ldrh	r2, [r2, #2]
1a001e48:	4282      	cmp	r2, r0
1a001e4a:	d201      	bcs.n	1a001e50 <Chip_Clock_FindBaseClock+0x28>
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a001e4c:	3301      	adds	r3, #1
1a001e4e:	e000      	b.n	1a001e52 <Chip_Clock_FindBaseClock+0x2a>
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
1a001e50:	4621      	mov	r1, r4
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001e52:	291c      	cmp	r1, #28
1a001e54:	d107      	bne.n	1a001e66 <Chip_Clock_FindBaseClock+0x3e>
1a001e56:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001e5a:	0052      	lsls	r2, r2, #1
1a001e5c:	4c03      	ldr	r4, [pc, #12]	; (1a001e6c <Chip_Clock_FindBaseClock+0x44>)
1a001e5e:	4422      	add	r2, r4
1a001e60:	7914      	ldrb	r4, [r2, #4]
1a001e62:	428c      	cmp	r4, r1
1a001e64:	d1e4      	bne.n	1a001e30 <Chip_Clock_FindBaseClock+0x8>
			i++;
		}
	}

	return baseclk;
}
1a001e66:	4608      	mov	r0, r1
1a001e68:	bc30      	pop	{r4, r5}
1a001e6a:	4770      	bx	lr
1a001e6c:	1a0081e8 	.word	0x1a0081e8

1a001e70 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a001e70:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a001e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a001e76:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a001e78:	4a0d      	ldr	r2, [pc, #52]	; (1a001eb0 <Chip_Clock_EnableCrystal+0x40>)
1a001e7a:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a001e7c:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a001e80:	6992      	ldr	r2, [r2, #24]
1a001e82:	428a      	cmp	r2, r1
1a001e84:	d001      	beq.n	1a001e8a <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001e86:	4a0a      	ldr	r2, [pc, #40]	; (1a001eb0 <Chip_Clock_EnableCrystal+0x40>)
1a001e88:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a001e8a:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a001e8e:	4a09      	ldr	r2, [pc, #36]	; (1a001eb4 <Chip_Clock_EnableCrystal+0x44>)
1a001e90:	6811      	ldr	r1, [r2, #0]
1a001e92:	4a09      	ldr	r2, [pc, #36]	; (1a001eb8 <Chip_Clock_EnableCrystal+0x48>)
1a001e94:	4291      	cmp	r1, r2
1a001e96:	d901      	bls.n	1a001e9c <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a001e98:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001e9c:	4a04      	ldr	r2, [pc, #16]	; (1a001eb0 <Chip_Clock_EnableCrystal+0x40>)
1a001e9e:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a001ea0:	9b01      	ldr	r3, [sp, #4]
1a001ea2:	1e5a      	subs	r2, r3, #1
1a001ea4:	9201      	str	r2, [sp, #4]
1a001ea6:	2b00      	cmp	r3, #0
1a001ea8:	d1fa      	bne.n	1a001ea0 <Chip_Clock_EnableCrystal+0x30>
}
1a001eaa:	b002      	add	sp, #8
1a001eac:	4770      	bx	lr
1a001eae:	bf00      	nop
1a001eb0:	40050000 	.word	0x40050000
1a001eb4:	1a00810c 	.word	0x1a00810c
1a001eb8:	01312cff 	.word	0x01312cff

1a001ebc <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a001ebc:	3012      	adds	r0, #18
1a001ebe:	4b05      	ldr	r3, [pc, #20]	; (1a001ed4 <Chip_Clock_GetDividerSource+0x18>)
1a001ec0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a001ec4:	f010 0f01 	tst.w	r0, #1
1a001ec8:	d102      	bne.n	1a001ed0 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001eca:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001ece:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];

	if (reg & 1) {	/* divider is powered down */
		return CLKINPUT_PD;
1a001ed0:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a001ed2:	4770      	bx	lr
1a001ed4:	40050000 	.word	0x40050000

1a001ed8 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a001ed8:	f100 0212 	add.w	r2, r0, #18
1a001edc:	4b03      	ldr	r3, [pc, #12]	; (1a001eec <Chip_Clock_GetDividerDivisor+0x14>)
1a001ede:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a001ee2:	4b03      	ldr	r3, [pc, #12]	; (1a001ef0 <Chip_Clock_GetDividerDivisor+0x18>)
1a001ee4:	5c18      	ldrb	r0, [r3, r0]
}
1a001ee6:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a001eea:	4770      	bx	lr
1a001eec:	40050000 	.word	0x40050000
1a001ef0:	1a0081e0 	.word	0x1a0081e0

1a001ef4 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a001ef4:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a001ef6:	2810      	cmp	r0, #16
1a001ef8:	d80a      	bhi.n	1a001f10 <Chip_Clock_GetClockInputHz+0x1c>
1a001efa:	e8df f000 	tbb	[pc, r0]
1a001efe:	0b42      	.short	0x0b42
1a001f00:	091f160d 	.word	0x091f160d
1a001f04:	2b282522 	.word	0x2b282522
1a001f08:	322e0909 	.word	0x322e0909
1a001f0c:	3a36      	.short	0x3a36
1a001f0e:	3e          	.byte	0x3e
1a001f0f:	00          	.byte	0x00
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a001f10:	2000      	movs	r0, #0
1a001f12:	bd08      	pop	{r3, pc}
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a001f14:	481e      	ldr	r0, [pc, #120]	; (1a001f90 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a001f16:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001f18:	4b1e      	ldr	r3, [pc, #120]	; (1a001f94 <Chip_Clock_GetClockInputHz+0xa0>)
1a001f1a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001f1e:	f003 0307 	and.w	r3, r3, #7
1a001f22:	2b04      	cmp	r3, #4
1a001f24:	d130      	bne.n	1a001f88 <Chip_Clock_GetClockInputHz+0x94>
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a001f26:	2000      	movs	r0, #0
1a001f28:	bd08      	pop	{r3, pc}
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001f2a:	4b1a      	ldr	r3, [pc, #104]	; (1a001f94 <Chip_Clock_GetClockInputHz+0xa0>)
1a001f2c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001f30:	f003 0307 	and.w	r3, r3, #7
1a001f34:	2b04      	cmp	r3, #4
1a001f36:	d029      	beq.n	1a001f8c <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a001f38:	4817      	ldr	r0, [pc, #92]	; (1a001f98 <Chip_Clock_GetClockInputHz+0xa4>)
1a001f3a:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a001f3c:	4b17      	ldr	r3, [pc, #92]	; (1a001f9c <Chip_Clock_GetClockInputHz+0xa8>)
1a001f3e:	6818      	ldr	r0, [r3, #0]
		break;
1a001f40:	bd08      	pop	{r3, pc}

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a001f42:	4b17      	ldr	r3, [pc, #92]	; (1a001fa0 <Chip_Clock_GetClockInputHz+0xac>)
1a001f44:	6818      	ldr	r0, [r3, #0]
		break;
1a001f46:	bd08      	pop	{r3, pc}

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a001f48:	4b16      	ldr	r3, [pc, #88]	; (1a001fa4 <Chip_Clock_GetClockInputHz+0xb0>)
1a001f4a:	6818      	ldr	r0, [r3, #0]
		break;
1a001f4c:	bd08      	pop	{r3, pc}

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a001f4e:	4b15      	ldr	r3, [pc, #84]	; (1a001fa4 <Chip_Clock_GetClockInputHz+0xb0>)
1a001f50:	6858      	ldr	r0, [r3, #4]
		break;
1a001f52:	bd08      	pop	{r3, pc}

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a001f54:	f000 f86a 	bl	1a00202c <Chip_Clock_GetMainPLLHz>
		break;
1a001f58:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a001f5a:	2100      	movs	r1, #0
1a001f5c:	f000 f89a 	bl	1a002094 <Chip_Clock_GetDivRate>
		break;
1a001f60:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a001f62:	2101      	movs	r1, #1
1a001f64:	f000 f896 	bl	1a002094 <Chip_Clock_GetDivRate>
		break;
1a001f68:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a001f6a:	2102      	movs	r1, #2
1a001f6c:	f000 f892 	bl	1a002094 <Chip_Clock_GetDivRate>
		break;
1a001f70:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a001f72:	2103      	movs	r1, #3
1a001f74:	f000 f88e 	bl	1a002094 <Chip_Clock_GetDivRate>
		break;
1a001f78:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a001f7a:	2104      	movs	r1, #4
1a001f7c:	f000 f88a 	bl	1a002094 <Chip_Clock_GetDivRate>
		break;
1a001f80:	bd08      	pop	{r3, pc}
{
	uint32_t rate = 0;

	switch (input) {
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
1a001f82:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a001f86:	bd08      	pop	{r3, pc}
		break;

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a001f88:	4803      	ldr	r0, [pc, #12]	; (1a001f98 <Chip_Clock_GetClockInputHz+0xa4>)
1a001f8a:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			rate = 25000000; /* MII uses 25 MHz */
		} else {
			rate = 50000000; /* RMII uses 50 MHz */
1a001f8c:	4806      	ldr	r0, [pc, #24]	; (1a001fa8 <Chip_Clock_GetClockInputHz+0xb4>)
	default:
		break;
	}

	return rate;
}
1a001f8e:	bd08      	pop	{r3, pc}
1a001f90:	00b71b00 	.word	0x00b71b00
1a001f94:	40043000 	.word	0x40043000
1a001f98:	017d7840 	.word	0x017d7840
1a001f9c:	1a008110 	.word	0x1a008110
1a001fa0:	1a00810c 	.word	0x1a00810c
1a001fa4:	10000aec 	.word	0x10000aec
1a001fa8:	02faf080 	.word	0x02faf080

1a001fac <Chip_Clock_CalcMainPLLValue>:
	while(delay--) {}
}

/* Calculate the Main PLL div values */
int Chip_Clock_CalcMainPLLValue(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001fac:	b538      	push	{r3, r4, r5, lr}
1a001fae:	4605      	mov	r5, r0
1a001fb0:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a001fb2:	7908      	ldrb	r0, [r1, #4]
1a001fb4:	f7ff ff9e 	bl	1a001ef4 <Chip_Clock_GetClockInputHz>
1a001fb8:	6160      	str	r0, [r4, #20]

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a001fba:	4b19      	ldr	r3, [pc, #100]	; (1a002020 <Chip_Clock_CalcMainPLLValue+0x74>)
1a001fbc:	442b      	add	r3, r5
1a001fbe:	4a19      	ldr	r2, [pc, #100]	; (1a002024 <Chip_Clock_CalcMainPLLValue+0x78>)
1a001fc0:	4293      	cmp	r3, r2
1a001fc2:	d821      	bhi.n	1a002008 <Chip_Clock_CalcMainPLLValue+0x5c>
1a001fc4:	b318      	cbz	r0, 1a00200e <Chip_Clock_CalcMainPLLValue+0x62>
		return -1;
	}

	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a001fc6:	2380      	movs	r3, #128	; 0x80
1a001fc8:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a001fca:	2300      	movs	r3, #0
1a001fcc:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a001fce:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a001fd0:	fbb5 f3f0 	udiv	r3, r5, r0
1a001fd4:	6123      	str	r3, [r4, #16]

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a001fd6:	4a14      	ldr	r2, [pc, #80]	; (1a002028 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a001fd8:	4295      	cmp	r5, r2
1a001fda:	d903      	bls.n	1a001fe4 <Chip_Clock_CalcMainPLLValue+0x38>
1a001fdc:	fb03 f000 	mul.w	r0, r3, r0
1a001fe0:	42a8      	cmp	r0, r5
1a001fe2:	d007      	beq.n	1a001ff4 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a001fe4:	4628      	mov	r0, r5
1a001fe6:	4621      	mov	r1, r4
1a001fe8:	f7ff fe9c 	bl	1a001d24 <pll_get_frac>
		if (!ppll->nsel) {
1a001fec:	68a3      	ldr	r3, [r4, #8]
1a001fee:	b18b      	cbz	r3, 1a002014 <Chip_Clock_CalcMainPLLValue+0x68>
			return -1;
		}
		ppll->nsel --;
1a001ff0:	3b01      	subs	r3, #1
1a001ff2:	60a3      	str	r3, [r4, #8]
	}

	if (ppll->msel == 0) {
1a001ff4:	6923      	ldr	r3, [r4, #16]
1a001ff6:	b183      	cbz	r3, 1a00201a <Chip_Clock_CalcMainPLLValue+0x6e>
		return - 1;
	}

	if (ppll->psel) {
1a001ff8:	68e2      	ldr	r2, [r4, #12]
1a001ffa:	b10a      	cbz	r2, 1a002000 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a001ffc:	3a01      	subs	r2, #1
1a001ffe:	60e2      	str	r2, [r4, #12]
	}

	ppll->msel --;
1a002000:	3b01      	subs	r3, #1
1a002002:	6123      	str	r3, [r4, #16]

	return 0;
1a002004:	2000      	movs	r0, #0
1a002006:	bd38      	pop	{r3, r4, r5, pc}
{
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
		return -1;
1a002008:	f04f 30ff 	mov.w	r0, #4294967295
1a00200c:	bd38      	pop	{r3, r4, r5, pc}
1a00200e:	f04f 30ff 	mov.w	r0, #4294967295
1a002012:	bd38      	pop	{r3, r4, r5, pc}
	ppll->msel = freq / ppll->fin;

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
		pll_get_frac(freq, ppll);
		if (!ppll->nsel) {
			return -1;
1a002014:	f04f 30ff 	mov.w	r0, #4294967295
1a002018:	bd38      	pop	{r3, r4, r5, pc}
		}
		ppll->nsel --;
	}

	if (ppll->msel == 0) {
		return - 1;
1a00201a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	ppll->msel --;

	return 0;
}
1a00201e:	bd38      	pop	{r3, r4, r5, pc}
1a002020:	ff6b3a10 	.word	0xff6b3a10
1a002024:	0b940510 	.word	0x0b940510
1a002028:	094c5eff 	.word	0x094c5eff

1a00202c <Chip_Clock_GetMainPLLHz>:
	return freq;
}

/* Returns the frequency of the main PLL */
uint32_t Chip_Clock_GetMainPLLHz(void)
{
1a00202c:	b570      	push	{r4, r5, r6, lr}
1a00202e:	b082      	sub	sp, #8
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a002030:	4d16      	ldr	r5, [pc, #88]	; (1a00208c <Chip_Clock_GetMainPLLHz+0x60>)
1a002032:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a002034:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a002038:	f7ff ff5c 	bl	1a001ef4 <Chip_Clock_GetClockInputHz>
1a00203c:	4606      	mov	r6, r0
	uint32_t msel, nsel, psel, direct, fbsel;
	uint32_t m, n, p;
	const uint8_t ptab[] = {1, 2, 4, 8};
1a00203e:	4b14      	ldr	r3, [pc, #80]	; (1a002090 <Chip_Clock_GetMainPLLHz+0x64>)
1a002040:	6818      	ldr	r0, [r3, #0]
1a002042:	9001      	str	r0, [sp, #4]

	/* No lock? */
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a002044:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a002046:	f010 0001 	ands.w	r0, r0, #1
1a00204a:	d01d      	beq.n	1a002088 <Chip_Clock_GetMainPLLHz+0x5c>
		return 0;
	}

	msel = (PLLReg >> 16) & 0xFF;
1a00204c:	f3c4 4007 	ubfx	r0, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a002050:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a002054:	f3c4 2101 	ubfx	r1, r4, #8, #2
	direct = (PLLReg >> 7) & 0x1;
	fbsel = (PLLReg >> 6) & 0x1;
1a002058:	f3c4 1580 	ubfx	r5, r4, #6, #1

	m = msel + 1;
1a00205c:	1c43      	adds	r3, r0, #1
	n = nsel + 1;
1a00205e:	3201      	adds	r2, #1
	p = ptab[psel];
1a002060:	a802      	add	r0, sp, #8
1a002062:	4401      	add	r1, r0
1a002064:	f811 0c04 	ldrb.w	r0, [r1, #-4]

	if (direct || fbsel) {
1a002068:	f014 0f80 	tst.w	r4, #128	; 0x80
1a00206c:	d100      	bne.n	1a002070 <Chip_Clock_GetMainPLLHz+0x44>
1a00206e:	b125      	cbz	r5, 1a00207a <Chip_Clock_GetMainPLLHz+0x4e>
		return m * (freq / n);
1a002070:	fbb6 f0f2 	udiv	r0, r6, r2
1a002074:	fb03 f000 	mul.w	r0, r3, r0
1a002078:	e006      	b.n	1a002088 <Chip_Clock_GetMainPLLHz+0x5c>
	}

	return (m / (2 * p)) * (freq / n);
1a00207a:	0040      	lsls	r0, r0, #1
1a00207c:	fbb3 f3f0 	udiv	r3, r3, r0
1a002080:	fbb6 f0f2 	udiv	r0, r6, r2
1a002084:	fb00 f003 	mul.w	r0, r0, r3
}
1a002088:	b002      	add	sp, #8
1a00208a:	bd70      	pop	{r4, r5, r6, pc}
1a00208c:	40050000 	.word	0x40050000
1a002090:	1a0081dc 	.word	0x1a0081dc

1a002094 <Chip_Clock_GetDivRate>:
	return TestHz;
}

/* Returns clock rate out of a divider */
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
{
1a002094:	b538      	push	{r3, r4, r5, lr}
1a002096:	460c      	mov	r4, r1
	CHIP_CGU_CLKIN_T input;
	uint32_t div;

	input = Chip_Clock_GetDividerSource(divider);
1a002098:	4608      	mov	r0, r1
1a00209a:	f7ff ff0f 	bl	1a001ebc <Chip_Clock_GetDividerSource>
1a00209e:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0020a0:	4620      	mov	r0, r4
1a0020a2:	f7ff ff19 	bl	1a001ed8 <Chip_Clock_GetDividerDivisor>
1a0020a6:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0020a8:	4628      	mov	r0, r5
1a0020aa:	f7ff ff23 	bl	1a001ef4 <Chip_Clock_GetClockInputHz>
1a0020ae:	3401      	adds	r4, #1
}
1a0020b0:	fbb0 f0f4 	udiv	r0, r0, r4
1a0020b4:	bd38      	pop	{r3, r4, r5, pc}
1a0020b6:	bf00      	nop

1a0020b8 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0020b8:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0020ba:	0085      	lsls	r5, r0, #2
1a0020bc:	4c0d      	ldr	r4, [pc, #52]	; (1a0020f4 <Chip_Clock_SetBaseClock+0x3c>)
1a0020be:	5965      	ldr	r5, [r4, r5]

	if (BaseClock < CLK_BASE_NONE) {
1a0020c0:	281b      	cmp	r0, #27
1a0020c2:	d80f      	bhi.n	1a0020e4 <Chip_Clock_SetBaseClock+0x2c>
		if (Input != CLKINPUT_PD) {
1a0020c4:	2911      	cmp	r1, #17
1a0020c6:	d012      	beq.n	1a0020ee <Chip_Clock_SetBaseClock+0x36>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0020c8:	4c0b      	ldr	r4, [pc, #44]	; (1a0020f8 <Chip_Clock_SetBaseClock+0x40>)
1a0020ca:	402c      	ands	r4, r5

			if (autoblocken) {
1a0020cc:	b10a      	cbz	r2, 1a0020d2 <Chip_Clock_SetBaseClock+0x1a>
				reg |= (1 << 11);
1a0020ce:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
			}
			if (powerdn) {
1a0020d2:	b10b      	cbz	r3, 1a0020d8 <Chip_Clock_SetBaseClock+0x20>
				reg |= (1 << 0);
1a0020d4:	f044 0401 	orr.w	r4, r4, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a0020d8:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0020dc:	0080      	lsls	r0, r0, #2
1a0020de:	4b05      	ldr	r3, [pc, #20]	; (1a0020f4 <Chip_Clock_SetBaseClock+0x3c>)
1a0020e0:	501c      	str	r4, [r3, r0]
1a0020e2:	e004      	b.n	1a0020ee <Chip_Clock_SetBaseClock+0x36>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a0020e4:	f045 0501 	orr.w	r5, r5, #1
1a0020e8:	0080      	lsls	r0, r0, #2
1a0020ea:	4b02      	ldr	r3, [pc, #8]	; (1a0020f4 <Chip_Clock_SetBaseClock+0x3c>)
1a0020ec:	501d      	str	r5, [r3, r0]
	}
}
1a0020ee:	bc30      	pop	{r4, r5}
1a0020f0:	4770      	bx	lr
1a0020f2:	bf00      	nop
1a0020f4:	4005005c 	.word	0x4005005c
1a0020f8:	e0fff7fe 	.word	0xe0fff7fe

1a0020fc <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a0020fc:	281b      	cmp	r0, #27
1a0020fe:	d808      	bhi.n	1a002112 <Chip_Clock_GetBaseClock+0x16>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a002100:	0080      	lsls	r0, r0, #2
1a002102:	4b06      	ldr	r3, [pc, #24]	; (1a00211c <Chip_Clock_GetBaseClock+0x20>)
1a002104:	5818      	ldr	r0, [r3, r0]

	/* base clock is powered down? */
	if (reg & 1) {
1a002106:	f010 0f01 	tst.w	r0, #1
1a00210a:	d104      	bne.n	1a002116 <Chip_Clock_GetBaseClock+0x1a>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00210c:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002110:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
		return CLKINPUT_PD;
1a002112:	2011      	movs	r0, #17
1a002114:	4770      	bx	lr

	reg = LPC_CGU->BASE_CLK[BaseClock];

	/* base clock is powered down? */
	if (reg & 1) {
		return CLKINPUT_PD;
1a002116:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a002118:	4770      	bx	lr
1a00211a:	bf00      	nop
1a00211c:	4005005c 	.word	0x4005005c

1a002120 <Chip_Clock_GetBaseClocktHz>:
	return rate;
}

/* Returns the frequency of the specified base clock source */
uint32_t Chip_Clock_GetBaseClocktHz(CHIP_CGU_BASE_CLK_T clock)
{
1a002120:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a002122:	f7ff ffeb 	bl	1a0020fc <Chip_Clock_GetBaseClock>
1a002126:	f7ff fee5 	bl	1a001ef4 <Chip_Clock_GetClockInputHz>
}
1a00212a:	bd08      	pop	{r3, pc}

1a00212c <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a00212c:	b909      	cbnz	r1, 1a002132 <Chip_Clock_EnableOpts+0x6>
}

/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;
1a00212e:	2101      	movs	r1, #1
1a002130:	e000      	b.n	1a002134 <Chip_Clock_EnableOpts+0x8>

	if (autoen) {
		reg |= (1 << 1);
1a002132:	2103      	movs	r1, #3
	}
	if (wakeupen) {
1a002134:	b10a      	cbz	r2, 1a00213a <Chip_Clock_EnableOpts+0xe>
		reg |= (1 << 2);
1a002136:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a00213a:	2b02      	cmp	r3, #2
1a00213c:	d101      	bne.n	1a002142 <Chip_Clock_EnableOpts+0x16>
		reg |= (1 << 5);
1a00213e:	f041 0120 	orr.w	r1, r1, #32
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a002142:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002146:	d305      	bcc.n	1a002154 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a002148:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00214c:	4b04      	ldr	r3, [pc, #16]	; (1a002160 <Chip_Clock_EnableOpts+0x34>)
1a00214e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a002152:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a002154:	3020      	adds	r0, #32
1a002156:	4b03      	ldr	r3, [pc, #12]	; (1a002164 <Chip_Clock_EnableOpts+0x38>)
1a002158:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a00215c:	4770      	bx	lr
1a00215e:	bf00      	nop
1a002160:	40052000 	.word	0x40052000
1a002164:	40051000 	.word	0x40051000

1a002168 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a002168:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00216c:	d309      	bcc.n	1a002182 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a00216e:	4a09      	ldr	r2, [pc, #36]	; (1a002194 <Chip_Clock_Enable+0x2c>)
1a002170:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002174:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002178:	f043 0301 	orr.w	r3, r3, #1
1a00217c:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a002180:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a002182:	4a05      	ldr	r2, [pc, #20]	; (1a002198 <Chip_Clock_Enable+0x30>)
1a002184:	3020      	adds	r0, #32
1a002186:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00218a:	f043 0301 	orr.w	r3, r3, #1
1a00218e:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a002192:	4770      	bx	lr
1a002194:	40052000 	.word	0x40052000
1a002198:	40051000 	.word	0x40051000

1a00219c <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a00219c:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a00219e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0021a2:	d305      	bcc.n	1a0021b0 <Chip_Clock_GetRate+0x14>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0021a4:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0021a8:	4a0d      	ldr	r2, [pc, #52]	; (1a0021e0 <Chip_Clock_GetRate+0x44>)
1a0021aa:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0021ae:	e004      	b.n	1a0021ba <Chip_Clock_GetRate+0x1e>
	}
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0021b0:	f100 0320 	add.w	r3, r0, #32
1a0021b4:	4a0b      	ldr	r2, [pc, #44]	; (1a0021e4 <Chip_Clock_GetRate+0x48>)
1a0021b6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a0021ba:	f014 0f01 	tst.w	r4, #1
1a0021be:	d00c      	beq.n	1a0021da <Chip_Clock_GetRate+0x3e>
		/* Get base clock for this peripheral clock */
		baseclk = Chip_Clock_FindBaseClock(clk);
1a0021c0:	f7ff fe32 	bl	1a001e28 <Chip_Clock_FindBaseClock>

		/* Get base clock rate */
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0021c4:	f7ff ffac 	bl	1a002120 <Chip_Clock_GetBaseClocktHz>

		/* Get divider for this clock */
		if (((reg >> 5) & 0x7) == 0) {
1a0021c8:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0021cc:	d101      	bne.n	1a0021d2 <Chip_Clock_GetRate+0x36>
			div = 1;
1a0021ce:	2301      	movs	r3, #1
1a0021d0:	e000      	b.n	1a0021d4 <Chip_Clock_GetRate+0x38>
		}
		else {
			div = 2;/* No other dividers supported */
1a0021d2:	2302      	movs	r3, #2

		}
		rate = rate / div;
1a0021d4:	fbb0 f0f3 	udiv	r0, r0, r3
1a0021d8:	bd10      	pop	{r4, pc}
	}
	else {
		rate = 0;
1a0021da:	2000      	movs	r0, #0
	}

	return rate;
}
1a0021dc:	bd10      	pop	{r4, pc}
1a0021de:	bf00      	nop
1a0021e0:	40052000 	.word	0x40052000
1a0021e4:	40051000 	.word	0x40051000

1a0021e8 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0021e8:	b570      	push	{r4, r5, r6, lr}
1a0021ea:	b08a      	sub	sp, #40	; 0x28
1a0021ec:	4605      	mov	r5, r0
1a0021ee:	460e      	mov	r6, r1
1a0021f0:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0021f2:	f242 7310 	movw	r3, #10000	; 0x2710
1a0021f6:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0021f8:	2806      	cmp	r0, #6
1a0021fa:	d101      	bne.n	1a002200 <Chip_SetupCoreClock+0x18>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
1a0021fc:	f7ff fe38 	bl	1a001e70 <Chip_Clock_EnableCrystal>
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a002200:	2004      	movs	r0, #4
1a002202:	4629      	mov	r1, r5
1a002204:	2201      	movs	r2, #1
1a002206:	2300      	movs	r3, #0
1a002208:	f7ff ff56 	bl	1a0020b8 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a00220c:	4a47      	ldr	r2, [pc, #284]	; (1a00232c <Chip_SetupCoreClock+0x144>)
1a00220e:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a002210:	f043 0301 	orr.w	r3, r3, #1
1a002214:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a002216:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a00221a:	4630      	mov	r0, r6
1a00221c:	a901      	add	r1, sp, #4
1a00221e:	f7ff fec5 	bl	1a001fac <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a002222:	4b43      	ldr	r3, [pc, #268]	; (1a002330 <Chip_SetupCoreClock+0x148>)
1a002224:	429e      	cmp	r6, r3
1a002226:	d913      	bls.n	1a002250 <Chip_SetupCoreClock+0x68>
		if (ppll.ctrl & (1 << 6)) {
1a002228:	9b01      	ldr	r3, [sp, #4]
1a00222a:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00222e:	d000      	beq.n	1a002232 <Chip_SetupCoreClock+0x4a>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a002230:	e7fe      	b.n	1a002230 <Chip_SetupCoreClock+0x48>
		} else if (ppll.ctrl & (1 << 7)){
1a002232:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002236:	d005      	beq.n	1a002244 <Chip_SetupCoreClock+0x5c>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a002238:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00223c:	9301      	str	r3, [sp, #4]
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a00223e:	2500      	movs	r5, #0

	if (core_freq > 110000000UL) {
		if (ppll.ctrl & (1 << 6)) {
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
1a002240:	2601      	movs	r6, #1
1a002242:	e007      	b.n	1a002254 <Chip_SetupCoreClock+0x6c>
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
			ppll.psel++;
1a002244:	9b04      	ldr	r3, [sp, #16]
1a002246:	3301      	adds	r3, #1
1a002248:	9304      	str	r3, [sp, #16]
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
1a00224a:	2501      	movs	r5, #1
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a00224c:	2600      	movs	r6, #0
1a00224e:	e001      	b.n	1a002254 <Chip_SetupCoreClock+0x6c>
1a002250:	2500      	movs	r5, #0
1a002252:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002254:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002258:	9b01      	ldr	r3, [sp, #4]
1a00225a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00225e:	9a05      	ldr	r2, [sp, #20]
1a002260:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002264:	9a03      	ldr	r2, [sp, #12]
1a002266:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00226a:	9a04      	ldr	r2, [sp, #16]
1a00226c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002270:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002274:	4a2d      	ldr	r2, [pc, #180]	; (1a00232c <Chip_SetupCoreClock+0x144>)
1a002276:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a002278:	4b2c      	ldr	r3, [pc, #176]	; (1a00232c <Chip_SetupCoreClock+0x144>)
1a00227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a00227c:	f013 0f01 	tst.w	r3, #1
1a002280:	d0fa      	beq.n	1a002278 <Chip_SetupCoreClock+0x90>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a002282:	2004      	movs	r0, #4
1a002284:	2109      	movs	r1, #9
1a002286:	2201      	movs	r2, #1
1a002288:	2300      	movs	r3, #0
1a00228a:	f7ff ff15 	bl	1a0020b8 <Chip_Clock_SetBaseClock>

	if (direct) {
1a00228e:	b1ee      	cbz	r6, 1a0022cc <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002290:	f242 7310 	movw	r3, #10000	; 0x2710
1a002294:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a002296:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002298:	1e5a      	subs	r2, r3, #1
1a00229a:	9209      	str	r2, [sp, #36]	; 0x24
1a00229c:	2b00      	cmp	r3, #0
1a00229e:	d1fa      	bne.n	1a002296 <Chip_SetupCoreClock+0xae>
		ppll.ctrl |= 1 << 7;
1a0022a0:	9b01      	ldr	r3, [sp, #4]
1a0022a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0022a6:	9301      	str	r3, [sp, #4]
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0022a8:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0022ac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0022b0:	9a05      	ldr	r2, [sp, #20]
1a0022b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0022b6:	9a03      	ldr	r2, [sp, #12]
1a0022b8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0022bc:	9a04      	ldr	r2, [sp, #16]
1a0022be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0022c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0022c6:	4a19      	ldr	r2, [pc, #100]	; (1a00232c <Chip_SetupCoreClock+0x144>)
1a0022c8:	6453      	str	r3, [r2, #68]	; 0x44
1a0022ca:	e01c      	b.n	1a002306 <Chip_SetupCoreClock+0x11e>
		Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
	} else if (pdivide) {
1a0022cc:	b1dd      	cbz	r5, 1a002306 <Chip_SetupCoreClock+0x11e>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0022ce:	f242 7310 	movw	r3, #10000	; 0x2710
1a0022d2:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0022d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0022d6:	1e5a      	subs	r2, r3, #1
1a0022d8:	9209      	str	r2, [sp, #36]	; 0x24
1a0022da:	2b00      	cmp	r3, #0
1a0022dc:	d1fa      	bne.n	1a0022d4 <Chip_SetupCoreClock+0xec>
		ppll.psel--;
1a0022de:	9b04      	ldr	r3, [sp, #16]
1a0022e0:	1e59      	subs	r1, r3, #1
1a0022e2:	9104      	str	r1, [sp, #16]
1a0022e4:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0022e8:	9b01      	ldr	r3, [sp, #4]
1a0022ea:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
1a0022ee:	9b05      	ldr	r3, [sp, #20]
1a0022f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a0022f4:	9b03      	ldr	r3, [sp, #12]
1a0022f6:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
1a0022fa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
1a0022fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002302:	4a0a      	ldr	r2, [pc, #40]	; (1a00232c <Chip_SetupCoreClock+0x144>)
1a002304:	6453      	str	r3, [r2, #68]	; 0x44
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a002306:	b964      	cbnz	r4, 1a002322 <Chip_SetupCoreClock+0x13a>
1a002308:	e00e      	b.n	1a002328 <Chip_SetupCoreClock+0x140>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a00230a:	4a0a      	ldr	r2, [pc, #40]	; (1a002334 <Chip_SetupCoreClock+0x14c>)
1a00230c:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a002310:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a002314:	7859      	ldrb	r1, [r3, #1]
1a002316:	789a      	ldrb	r2, [r3, #2]
1a002318:	78db      	ldrb	r3, [r3, #3]
1a00231a:	f7ff fecd 	bl	1a0020b8 <Chip_Clock_SetBaseClock>

	if (setbase) {
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00231e:	3401      	adds	r4, #1
1a002320:	e000      	b.n	1a002324 <Chip_SetupCoreClock+0x13c>
1a002322:	2400      	movs	r4, #0
1a002324:	2c11      	cmp	r4, #17
1a002326:	d9f0      	bls.n	1a00230a <Chip_SetupCoreClock+0x122>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a002328:	b00a      	add	sp, #40	; 0x28
1a00232a:	bd70      	pop	{r4, r5, r6, pc}
1a00232c:	40050000 	.word	0x40050000
1a002330:	068e7780 	.word	0x068e7780
1a002334:	1a008254 	.word	0x1a008254

1a002338 <Chip_I2CM_XferHandler>:
	Chip_I2CM_SetDutyCycle(pI2C, (clockDiv >> 1), (clockDiv - (clockDiv >> 1)));
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a002338:	b410      	push	{r4}
 * @note	I2C controller clears STO bit when it sees STOP
 *          condition after a START condition on the bus.
 */
static INLINE uint32_t Chip_I2CM_GetCurState(LPC_I2C_T *pI2C)
{
	return pI2C->STAT & I2C_STAT_CODE_BITMASK;
1a00233a:	6843      	ldr	r3, [r0, #4]
1a00233c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	uint32_t cclr = I2C_CON_FLAGS;

	switch (Chip_I2CM_GetCurState(pI2C)) {
1a002340:	2b30      	cmp	r3, #48	; 0x30
1a002342:	d028      	beq.n	1a002396 <Chip_I2CM_XferHandler+0x5e>
1a002344:	d80e      	bhi.n	1a002364 <Chip_I2CM_XferHandler+0x2c>
1a002346:	2b10      	cmp	r3, #16
1a002348:	d01b      	beq.n	1a002382 <Chip_I2CM_XferHandler+0x4a>
1a00234a:	d804      	bhi.n	1a002356 <Chip_I2CM_XferHandler+0x1e>
1a00234c:	2b00      	cmp	r3, #0
1a00234e:	d05d      	beq.n	1a00240c <Chip_I2CM_XferHandler+0xd4>
1a002350:	2b08      	cmp	r3, #8
1a002352:	d016      	beq.n	1a002382 <Chip_I2CM_XferHandler+0x4a>
1a002354:	e05e      	b.n	1a002414 <Chip_I2CM_XferHandler+0xdc>
1a002356:	2b20      	cmp	r3, #32
1a002358:	d01d      	beq.n	1a002396 <Chip_I2CM_XferHandler+0x5e>
1a00235a:	2b28      	cmp	r3, #40	; 0x28
1a00235c:	d023      	beq.n	1a0023a6 <Chip_I2CM_XferHandler+0x6e>
1a00235e:	2b18      	cmp	r3, #24
1a002360:	d158      	bne.n	1a002414 <Chip_I2CM_XferHandler+0xdc>
1a002362:	e020      	b.n	1a0023a6 <Chip_I2CM_XferHandler+0x6e>
1a002364:	2b48      	cmp	r3, #72	; 0x48
1a002366:	d049      	beq.n	1a0023fc <Chip_I2CM_XferHandler+0xc4>
1a002368:	d804      	bhi.n	1a002374 <Chip_I2CM_XferHandler+0x3c>
1a00236a:	2b38      	cmp	r3, #56	; 0x38
1a00236c:	d04a      	beq.n	1a002404 <Chip_I2CM_XferHandler+0xcc>
1a00236e:	2b40      	cmp	r3, #64	; 0x40
1a002370:	d033      	beq.n	1a0023da <Chip_I2CM_XferHandler+0xa2>
1a002372:	e04f      	b.n	1a002414 <Chip_I2CM_XferHandler+0xdc>
1a002374:	2b58      	cmp	r3, #88	; 0x58
1a002376:	d028      	beq.n	1a0023ca <Chip_I2CM_XferHandler+0x92>
1a002378:	2bf8      	cmp	r3, #248	; 0xf8
1a00237a:	d05b      	beq.n	1a002434 <Chip_I2CM_XferHandler+0xfc>
1a00237c:	2b50      	cmp	r3, #80	; 0x50
1a00237e:	d149      	bne.n	1a002414 <Chip_I2CM_XferHandler+0xdc>
1a002380:	e023      	b.n	1a0023ca <Chip_I2CM_XferHandler+0x92>
	case 0x08:		/* Start condition on bus */
	case 0x10:		/* Repeated start condition */
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a002382:	780c      	ldrb	r4, [r1, #0]
1a002384:	888a      	ldrh	r2, [r1, #4]
1a002386:	fab2 f382 	clz	r3, r2
1a00238a:	095b      	lsrs	r3, r3, #5
1a00238c:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
1a002390:	6083      	str	r3, [r0, #8]
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
1a002392:	233c      	movs	r3, #60	; 0x3c

	switch (Chip_I2CM_GetCurState(pI2C)) {
	case 0x08:		/* Start condition on bus */
	case 0x10:		/* Repeated start condition */
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
		break;
1a002394:	e043      	b.n	1a00241e <Chip_I2CM_XferHandler+0xe6>

	/* Tx handling */
	case 0x20:		/* SLA+W sent NAK received */
	case 0x30:		/* DATA sent NAK received */
		if ((xfer->options & I2CM_XFER_OPTION_IGNORE_NACK) == 0) {
1a002396:	784b      	ldrb	r3, [r1, #1]
1a002398:	f013 0f01 	tst.w	r3, #1
1a00239c:	d103      	bne.n	1a0023a6 <Chip_I2CM_XferHandler+0x6e>
			xfer->status = I2CM_STATUS_NAK;
1a00239e:	2302      	movs	r3, #2
1a0023a0:	804b      	strh	r3, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a0023a2:	232c      	movs	r3, #44	; 0x2c
			break;
1a0023a4:	e03b      	b.n	1a00241e <Chip_I2CM_XferHandler+0xe6>
		}

	case 0x18:		/* SLA+W sent and ACK received */
	case 0x28:		/* DATA sent and ACK received */
		if (!xfer->txSz) {
1a0023a6:	888b      	ldrh	r3, [r1, #4]
1a0023a8:	b92b      	cbnz	r3, 1a0023b6 <Chip_I2CM_XferHandler+0x7e>
			if (xfer->rxSz) {
1a0023aa:	88cb      	ldrh	r3, [r1, #6]
1a0023ac:	2b00      	cmp	r3, #0
1a0023ae:	d135      	bne.n	1a00241c <Chip_I2CM_XferHandler+0xe4>
				cclr &= ~I2C_CON_STA;
			}
			else {
				xfer->status = I2CM_STATUS_OK;
1a0023b0:	804b      	strh	r3, [r1, #2]
				cclr &= ~I2C_CON_STO;
1a0023b2:	232c      	movs	r3, #44	; 0x2c
1a0023b4:	e033      	b.n	1a00241e <Chip_I2CM_XferHandler+0xe6>
			}

		}
		else {
			pI2C->DAT = *xfer->txBuff++;
1a0023b6:	688b      	ldr	r3, [r1, #8]
1a0023b8:	1c5a      	adds	r2, r3, #1
1a0023ba:	608a      	str	r2, [r1, #8]
1a0023bc:	781b      	ldrb	r3, [r3, #0]
1a0023be:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a0023c0:	888b      	ldrh	r3, [r1, #4]
1a0023c2:	3b01      	subs	r3, #1
1a0023c4:	808b      	strh	r3, [r1, #4]
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
1a0023c6:	233c      	movs	r3, #60	; 0x3c
1a0023c8:	e029      	b.n	1a00241e <Chip_I2CM_XferHandler+0xe6>
		break;

	/* Rx handling */
	case 0x58:		/* Data Received and NACK sent */
	case 0x50:		/* Data Received and ACK sent */
		*xfer->rxBuff++ = pI2C->DAT;
1a0023ca:	68cb      	ldr	r3, [r1, #12]
1a0023cc:	1c5a      	adds	r2, r3, #1
1a0023ce:	60ca      	str	r2, [r1, #12]
1a0023d0:	6882      	ldr	r2, [r0, #8]
1a0023d2:	701a      	strb	r2, [r3, #0]
		xfer->rxSz--;
1a0023d4:	88cb      	ldrh	r3, [r1, #6]
1a0023d6:	3b01      	subs	r3, #1
1a0023d8:	80cb      	strh	r3, [r1, #6]

	case 0x40:		/* SLA+R sent and ACK received */
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a0023da:	88ca      	ldrh	r2, [r1, #6]
1a0023dc:	2a01      	cmp	r2, #1
1a0023de:	d805      	bhi.n	1a0023ec <Chip_I2CM_XferHandler+0xb4>
1a0023e0:	784b      	ldrb	r3, [r1, #1]
1a0023e2:	f013 0f02 	tst.w	r3, #2
1a0023e6:	d103      	bne.n	1a0023f0 <Chip_I2CM_XferHandler+0xb8>
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
1a0023e8:	233c      	movs	r3, #60	; 0x3c
1a0023ea:	e002      	b.n	1a0023f2 <Chip_I2CM_XferHandler+0xba>
		*xfer->rxBuff++ = pI2C->DAT;
		xfer->rxSz--;

	case 0x40:		/* SLA+R sent and ACK received */
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
			cclr &= ~I2C_CON_AA;
1a0023ec:	2338      	movs	r3, #56	; 0x38
1a0023ee:	e000      	b.n	1a0023f2 <Chip_I2CM_XferHandler+0xba>
1a0023f0:	2338      	movs	r3, #56	; 0x38
		}
		if (xfer->rxSz == 0) {
1a0023f2:	b9a2      	cbnz	r2, 1a00241e <Chip_I2CM_XferHandler+0xe6>
			xfer->status = I2CM_STATUS_OK;
1a0023f4:	804a      	strh	r2, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a0023f6:	f023 0310 	bic.w	r3, r3, #16
1a0023fa:	e010      	b.n	1a00241e <Chip_I2CM_XferHandler+0xe6>
		}
		break;

	/* NAK Handling */
	case 0x48:		/* SLA+R sent NAK received */
		xfer->status = I2CM_STATUS_SLAVE_NAK;
1a0023fc:	2304      	movs	r3, #4
1a0023fe:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a002400:	232c      	movs	r3, #44	; 0x2c
		break;
1a002402:	e00c      	b.n	1a00241e <Chip_I2CM_XferHandler+0xe6>

	case 0x38:		/* Arbitration lost */
		xfer->status = I2CM_STATUS_ARBLOST;
1a002404:	2305      	movs	r3, #5
1a002406:	804b      	strh	r3, [r1, #2]
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
1a002408:	233c      	movs	r3, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
		break;

	case 0x38:		/* Arbitration lost */
		xfer->status = I2CM_STATUS_ARBLOST;
		break;
1a00240a:	e008      	b.n	1a00241e <Chip_I2CM_XferHandler+0xe6>

	case 0x00:		/* Bus Error */
		xfer->status = I2CM_STATUS_BUS_ERROR;
1a00240c:	2303      	movs	r3, #3
1a00240e:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a002410:	232c      	movs	r3, #44	; 0x2c
        break;
1a002412:	e004      	b.n	1a00241e <Chip_I2CM_XferHandler+0xe6>
    case 0xF8:
      return 0;
      
    default:
		xfer->status = I2CM_STATUS_ERROR;
1a002414:	2301      	movs	r3, #1
1a002416:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a002418:	232c      	movs	r3, #44	; 0x2c
        break;
1a00241a:	e000      	b.n	1a00241e <Chip_I2CM_XferHandler+0xe6>

	case 0x18:		/* SLA+W sent and ACK received */
	case 0x28:		/* DATA sent and ACK received */
		if (!xfer->txSz) {
			if (xfer->rxSz) {
				cclr &= ~I2C_CON_STA;
1a00241c:	231c      	movs	r3, #28
		cclr &= ~I2C_CON_STO;
        break;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a00241e:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a002422:	6002      	str	r2, [r0, #0]
	/* Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);
1a002424:	f003 032c 	and.w	r3, r3, #44	; 0x2c
1a002428:	6183      	str	r3, [r0, #24]

	return xfer->status != I2CM_STATUS_BUSY;
1a00242a:	8848      	ldrh	r0, [r1, #2]
1a00242c:	38ff      	subs	r0, #255	; 0xff
1a00242e:	bf18      	it	ne
1a002430:	2001      	movne	r0, #1
1a002432:	e000      	b.n	1a002436 <Chip_I2CM_XferHandler+0xfe>
	case 0x00:		/* Bus Error */
		xfer->status = I2CM_STATUS_BUS_ERROR;
		cclr &= ~I2C_CON_STO;
        break;
    case 0xF8:
      return 0;
1a002434:	2000      	movs	r0, #0
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
	/* Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);

	return xfer->status != I2CM_STATUS_BUSY;
}
1a002436:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00243a:	4770      	bx	lr

1a00243c <Chip_I2CM_Xfer>:

/* Transmit and Receive data in master mode */
void Chip_I2CM_Xfer(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	/* set the transfer status as busy */
	xfer->status = I2CM_STATUS_BUSY;
1a00243c:	23ff      	movs	r3, #255	; 0xff
1a00243e:	804b      	strh	r3, [r1, #2]
 * @note	This function clears all control/status flags.
 */
static INLINE void Chip_I2CM_ResetControl(LPC_I2C_T *pI2C)
{
	/* Reset STA, AA and SI. Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a002440:	232c      	movs	r3, #44	; 0x2c
1a002442:	6183      	str	r3, [r0, #24]
 * @note	This function sets the controller to transmit START condition when
 *          the bus becomes free.
 */
static INLINE void Chip_I2CM_SendStart(LPC_I2C_T *pI2C)
{
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a002444:	2360      	movs	r3, #96	; 0x60
1a002446:	6003      	str	r3, [r0, #0]
1a002448:	4770      	bx	lr
1a00244a:	bf00      	nop

1a00244c <Chip_I2CM_XferBlocking>:
	Chip_I2CM_SendStart(pI2C);
}

/* Transmit and Receive data in master mode */
uint32_t Chip_I2CM_XferBlocking(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a00244c:	b538      	push	{r3, r4, r5, lr}
1a00244e:	4604      	mov	r4, r0
1a002450:	460d      	mov	r5, r1
	uint32_t ret = 0;
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);
1a002452:	f7ff fff3 	bl	1a00243c <Chip_I2CM_Xfer>
}

/* Transmit and Receive data in master mode */
uint32_t Chip_I2CM_XferBlocking(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	uint32_t ret = 0;
1a002456:	2000      	movs	r0, #0
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);

	while (ret == 0) {
1a002458:	e007      	b.n	1a00246a <Chip_I2CM_XferBlocking+0x1e>
 * @return	Returns 0 if state didn't change
 * @note
 */
static INLINE uint32_t Chip_I2CM_StateChanged(LPC_I2C_T *pI2C)
{
	return pI2C->CONSET & I2C_CON_SI;
1a00245a:	6823      	ldr	r3, [r4, #0]
		/* wait for status change interrupt */
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
1a00245c:	f013 0f08 	tst.w	r3, #8
1a002460:	d0fb      	beq.n	1a00245a <Chip_I2CM_XferBlocking+0xe>
		/* call state change handler */
		ret = Chip_I2CM_XferHandler(pI2C, xfer);
1a002462:	4620      	mov	r0, r4
1a002464:	4629      	mov	r1, r5
1a002466:	f7ff ff67 	bl	1a002338 <Chip_I2CM_XferHandler>
{
	uint32_t ret = 0;
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);

	while (ret == 0) {
1a00246a:	2800      	cmp	r0, #0
1a00246c:	d0f5      	beq.n	1a00245a <Chip_I2CM_XferBlocking+0xe>
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
		/* call state change handler */
		ret = Chip_I2CM_XferHandler(pI2C, xfer);
	}
	return ret;
}
1a00246e:	bd38      	pop	{r3, r4, r5, pc}

1a002470 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a002470:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a002472:	4b10      	ldr	r3, [pc, #64]	; (1a0024b4 <fpuInit+0x44>)
1a002474:	681b      	ldr	r3, [r3, #0]
1a002476:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a002478:	4b0f      	ldr	r3, [pc, #60]	; (1a0024b8 <fpuInit+0x48>)
1a00247a:	681b      	ldr	r3, [r3, #0]
1a00247c:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a00247e:	9a02      	ldr	r2, [sp, #8]
1a002480:	4b0e      	ldr	r3, [pc, #56]	; (1a0024bc <fpuInit+0x4c>)
1a002482:	429a      	cmp	r2, r3
1a002484:	d105      	bne.n	1a002492 <fpuInit+0x22>
1a002486:	9a01      	ldr	r2, [sp, #4]
1a002488:	4b0d      	ldr	r3, [pc, #52]	; (1a0024c0 <fpuInit+0x50>)
1a00248a:	429a      	cmp	r2, r3
1a00248c:	d003      	beq.n	1a002496 <fpuInit+0x26>
1a00248e:	2300      	movs	r3, #0
1a002490:	e002      	b.n	1a002498 <fpuInit+0x28>
1a002492:	2300      	movs	r3, #0
1a002494:	e000      	b.n	1a002498 <fpuInit+0x28>
1a002496:	2301      	movs	r3, #1

	if (vfpPresent) {
1a002498:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00249c:	d008      	beq.n	1a0024b0 <fpuInit+0x40>
		Cpacr = *regCpacr;
1a00249e:	4a09      	ldr	r2, [pc, #36]	; (1a0024c4 <fpuInit+0x54>)
1a0024a0:	6813      	ldr	r3, [r2, #0]
1a0024a2:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a0024a4:	9b03      	ldr	r3, [sp, #12]
1a0024a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0024aa:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a0024ac:	9b03      	ldr	r3, [sp, #12]
1a0024ae:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a0024b0:	b004      	add	sp, #16
1a0024b2:	4770      	bx	lr
1a0024b4:	e000ef40 	.word	0xe000ef40
1a0024b8:	e000ef44 	.word	0xe000ef44
1a0024bc:	10110021 	.word	0x10110021
1a0024c0:	11000011 	.word	0x11000011
1a0024c4:	e000ed88 	.word	0xe000ed88

1a0024c8 <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a0024c8:	4770      	bx	lr
1a0024ca:	bf00      	nop

1a0024cc <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0024cc:	4b03      	ldr	r3, [pc, #12]	; (1a0024dc <Chip_SSP_GetClockIndex+0x10>)
1a0024ce:	4298      	cmp	r0, r3
1a0024d0:	d101      	bne.n	1a0024d6 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
1a0024d2:	20a5      	movs	r0, #165	; 0xa5
1a0024d4:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0024d6:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0024d8:	4770      	bx	lr
1a0024da:	bf00      	nop
1a0024dc:	400c5000 	.word	0x400c5000

1a0024e0 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0024e0:	4b04      	ldr	r3, [pc, #16]	; (1a0024f4 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0024e2:	4298      	cmp	r0, r3
1a0024e4:	d102      	bne.n	1a0024ec <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
1a0024e6:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0024ea:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0024ec:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0024f0:	4770      	bx	lr
1a0024f2:	bf00      	nop
1a0024f4:	400c5000 	.word	0x400c5000

1a0024f8 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0024f8:	6803      	ldr	r3, [r0, #0]
1a0024fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0024fe:	0209      	lsls	r1, r1, #8
1a002500:	b289      	uxth	r1, r1
1a002502:	430b      	orrs	r3, r1
1a002504:	6003      	str	r3, [r0, #0]
	pSSP->CPSR = prescale;
1a002506:	6102      	str	r2, [r0, #16]
1a002508:	4770      	bx	lr
1a00250a:	bf00      	nop

1a00250c <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00250c:	b570      	push	{r4, r5, r6, lr}
1a00250e:	4606      	mov	r6, r0
1a002510:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a002512:	f7ff ffe5 	bl	1a0024e0 <Chip_SSP_GetPeriphClockIndex>
1a002516:	f7ff fe41 	bl	1a00219c <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a00251a:	2202      	movs	r2, #2
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
1a00251c:	f04f 33ff 	mov.w	r3, #4294967295
{
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
1a002520:	2100      	movs	r1, #0
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a002522:	e00c      	b.n	1a00253e <Chip_SSP_SetBitRate+0x32>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a002524:	1c4c      	adds	r4, r1, #1
1a002526:	fb02 f304 	mul.w	r3, r2, r4
1a00252a:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a00252e:	42ab      	cmp	r3, r5
1a002530:	d905      	bls.n	1a00253e <Chip_SSP_SetBitRate+0x32>
			cr0_div++;
			if (cr0_div > 0xFF) {
1a002532:	2cff      	cmp	r4, #255	; 0xff
1a002534:	d902      	bls.n	1a00253c <Chip_SSP_SetBitRate+0x30>
				cr0_div = 0;
				prescale += 2;
1a002536:	3202      	adds	r2, #2
	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
			if (cr0_div > 0xFF) {
				cr0_div = 0;
1a002538:	2100      	movs	r1, #0
1a00253a:	e000      	b.n	1a00253e <Chip_SSP_SetBitRate+0x32>
	prescale = 2;

	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a00253c:	4621      	mov	r1, r4

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a00253e:	42ab      	cmp	r3, r5
1a002540:	d8f0      	bhi.n	1a002524 <Chip_SSP_SetBitRate+0x18>
				prescale += 2;
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a002542:	4630      	mov	r0, r6
1a002544:	f7ff ffd8 	bl	1a0024f8 <Chip_SSP_SetClockRate>
1a002548:	bd70      	pop	{r4, r5, r6, pc}
1a00254a:	bf00      	nop

1a00254c <Chip_SSP_Init>:
}

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a00254c:	b510      	push	{r4, lr}
1a00254e:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a002550:	f7ff ffbc 	bl	1a0024cc <Chip_SSP_GetClockIndex>
1a002554:	f7ff fe08 	bl	1a002168 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a002558:	4620      	mov	r0, r4
1a00255a:	f7ff ffc1 	bl	1a0024e0 <Chip_SSP_GetPeriphClockIndex>
1a00255e:	f7ff fe03 	bl	1a002168 <Chip_Clock_Enable>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002562:	6863      	ldr	r3, [r4, #4]
1a002564:	f023 0304 	bic.w	r3, r3, #4
1a002568:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00256a:	6823      	ldr	r3, [r4, #0]
1a00256c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002570:	f043 0307 	orr.w	r3, r3, #7
1a002574:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a002576:	4620      	mov	r0, r4
1a002578:	4901      	ldr	r1, [pc, #4]	; (1a002580 <Chip_SSP_Init+0x34>)
1a00257a:	f7ff ffc7 	bl	1a00250c <Chip_SSP_SetBitRate>
1a00257e:	bd10      	pop	{r4, pc}
1a002580:	000186a0 	.word	0x000186a0

1a002584 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a002584:	2901      	cmp	r1, #1
1a002586:	d109      	bne.n	1a00259c <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a002588:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00258c:	0080      	lsls	r0, r0, #2
1a00258e:	4b04      	ldr	r3, [pc, #16]	; (1a0025a0 <Chip_I2C_EventHandler+0x1c>)
1a002590:	4418      	add	r0, r3
1a002592:	6902      	ldr	r2, [r0, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a002594:	7d13      	ldrb	r3, [r2, #20]
1a002596:	b2db      	uxtb	r3, r3
1a002598:	2b04      	cmp	r3, #4
1a00259a:	d0fb      	beq.n	1a002594 <Chip_I2C_EventHandler+0x10>
1a00259c:	4770      	bx	lr
1a00259e:	bf00      	nop
1a0025a0:	10000094 	.word	0x10000094

1a0025a4 <handleMasterXferState>:
	return I2C_SLAVE_GENERAL;
}

/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
1a0025a4:	b410      	push	{r4}
}

/* Get current state of the I2C peripheral */
STATIC INLINE int getCurState(LPC_I2C_T *pI2C)
{
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a0025a6:	6843      	ldr	r3, [r0, #4]
1a0025a8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;

	switch (getCurState(pI2C)) {
1a0025ac:	2b58      	cmp	r3, #88	; 0x58
1a0025ae:	d871      	bhi.n	1a002694 <handleMasterXferState+0xf0>
1a0025b0:	e8df f003 	tbb	[pc, r3]
1a0025b4:	7070706c 	.word	0x7070706c
1a0025b8:	70707070 	.word	0x70707070
1a0025bc:	7070702f 	.word	0x7070702f
1a0025c0:	70707070 	.word	0x70707070
1a0025c4:	7070702f 	.word	0x7070702f
1a0025c8:	70707070 	.word	0x70707070
1a0025cc:	70707039 	.word	0x70707039
1a0025d0:	70707070 	.word	0x70707070
1a0025d4:	70707060 	.word	0x70707060
1a0025d8:	70707070 	.word	0x70707070
1a0025dc:	70707039 	.word	0x70707039
1a0025e0:	70707070 	.word	0x70707070
1a0025e4:	70707064 	.word	0x70707064
1a0025e8:	70707070 	.word	0x70707070
1a0025ec:	70707068 	.word	0x70707068
1a0025f0:	70707070 	.word	0x70707070
1a0025f4:	70707059 	.word	0x70707059
1a0025f8:	70707070 	.word	0x70707070
1a0025fc:	70707060 	.word	0x70707060
1a002600:	70707070 	.word	0x70707070
1a002604:	7070702d 	.word	0x7070702d
1a002608:	70707070 	.word	0x70707070
1a00260c:	4f          	.byte	0x4f
1a00260d:	00          	.byte	0x00
}

/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
1a00260e:	233c      	movs	r3, #60	; 0x3c
1a002610:	e020      	b.n	1a002654 <handleMasterXferState+0xb0>

	switch (getCurState(pI2C)) {
	case 0x08:		/* Start condition on bus */
	case 0x10:		/* Repeated start condition */
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a002612:	780a      	ldrb	r2, [r1, #0]
1a002614:	688b      	ldr	r3, [r1, #8]
1a002616:	fab3 f383 	clz	r3, r3
1a00261a:	095b      	lsrs	r3, r3, #5
1a00261c:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a002620:	6083      	str	r3, [r0, #8]
}

/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
1a002622:	233c      	movs	r3, #60	; 0x3c

	switch (getCurState(pI2C)) {
	case 0x08:		/* Start condition on bus */
	case 0x10:		/* Repeated start condition */
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
		break;
1a002624:	e037      	b.n	1a002696 <handleMasterXferState+0xf2>

	/* Tx handling */
	case 0x18:		/* SLA+W sent and ACK received */
	case 0x28:		/* DATA sent and ACK received */
		if (!xfer->txSz) {
1a002626:	688b      	ldr	r3, [r1, #8]
1a002628:	b94b      	cbnz	r3, 1a00263e <handleMasterXferState+0x9a>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a00262a:	690b      	ldr	r3, [r1, #16]
1a00262c:	b113      	cbz	r3, 1a002634 <handleMasterXferState+0x90>
1a00262e:	f06f 0320 	mvn.w	r3, #32
1a002632:	e001      	b.n	1a002638 <handleMasterXferState+0x94>
1a002634:	f06f 0310 	mvn.w	r3, #16
1a002638:	f003 033c 	and.w	r3, r3, #60	; 0x3c
1a00263c:	e02b      	b.n	1a002696 <handleMasterXferState+0xf2>
		}
		else {
			pI2C->DAT = *xfer->txBuff++;
1a00263e:	684b      	ldr	r3, [r1, #4]
1a002640:	1c5a      	adds	r2, r3, #1
1a002642:	604a      	str	r2, [r1, #4]
1a002644:	781b      	ldrb	r3, [r3, #0]
1a002646:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a002648:	688b      	ldr	r3, [r1, #8]
1a00264a:	3b01      	subs	r3, #1
1a00264c:	608b      	str	r3, [r1, #8]
}

/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
1a00264e:	233c      	movs	r3, #60	; 0x3c
1a002650:	e021      	b.n	1a002696 <handleMasterXferState+0xf2>
		}
		break;

	/* Rx handling */
	case 0x58:		/* Data Received and NACK sent */
		cclr &= ~I2C_CON_STO;
1a002652:	232c      	movs	r3, #44	; 0x2c

	case 0x50:		/* Data Received and ACK sent */
		*xfer->rxBuff++ = pI2C->DAT;
1a002654:	68ca      	ldr	r2, [r1, #12]
1a002656:	1c54      	adds	r4, r2, #1
1a002658:	60cc      	str	r4, [r1, #12]
1a00265a:	6884      	ldr	r4, [r0, #8]
1a00265c:	7014      	strb	r4, [r2, #0]
		xfer->rxSz--;
1a00265e:	690a      	ldr	r2, [r1, #16]
1a002660:	3a01      	subs	r2, #1
1a002662:	610a      	str	r2, [r1, #16]
1a002664:	e000      	b.n	1a002668 <handleMasterXferState+0xc4>
}

/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
1a002666:	233c      	movs	r3, #60	; 0x3c
	case 0x50:		/* Data Received and ACK sent */
		*xfer->rxBuff++ = pI2C->DAT;
		xfer->rxSz--;

	case 0x40:		/* SLA+R sent and ACK received */
		if (xfer->rxSz > 1) {
1a002668:	690a      	ldr	r2, [r1, #16]
1a00266a:	2a01      	cmp	r2, #1
1a00266c:	dd13      	ble.n	1a002696 <handleMasterXferState+0xf2>
			cclr &= ~I2C_CON_AA;
1a00266e:	f023 0304 	bic.w	r3, r3, #4
1a002672:	e010      	b.n	1a002696 <handleMasterXferState+0xf2>
		break;

	/* NAK Handling */
	case 0x20:		/* SLA+W sent NAK received */
	case 0x48:		/* SLA+R sent NAK received */
		xfer->status = I2C_STATUS_SLAVENAK;
1a002674:	2305      	movs	r3, #5
1a002676:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a002678:	232c      	movs	r3, #44	; 0x2c
		break;
1a00267a:	e00c      	b.n	1a002696 <handleMasterXferState+0xf2>

	case 0x30:		/* DATA sent NAK received */
		xfer->status = I2C_STATUS_NAK;
1a00267c:	2301      	movs	r3, #1
1a00267e:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a002680:	232c      	movs	r3, #44	; 0x2c
		break;
1a002682:	e008      	b.n	1a002696 <handleMasterXferState+0xf2>

	case 0x38:		/* Arbitration lost */
		xfer->status = I2C_STATUS_ARBLOST;
1a002684:	2302      	movs	r3, #2
1a002686:	750b      	strb	r3, [r1, #20]
}

/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
1a002688:	233c      	movs	r3, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
		break;

	case 0x38:		/* Arbitration lost */
		xfer->status = I2C_STATUS_ARBLOST;
		break;
1a00268a:	e004      	b.n	1a002696 <handleMasterXferState+0xf2>

	/* Bus Error */
	case 0x00:
		xfer->status = I2C_STATUS_BUSERR;
1a00268c:	2303      	movs	r3, #3
1a00268e:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a002690:	232c      	movs	r3, #44	; 0x2c
1a002692:	e000      	b.n	1a002696 <handleMasterXferState+0xf2>
}

/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
1a002694:	233c      	movs	r3, #60	; 0x3c
		xfer->status = I2C_STATUS_BUSERR;
		cclr &= ~I2C_CON_STO;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a002696:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a00269a:	6002      	str	r2, [r0, #0]
	pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a00269c:	f023 0210 	bic.w	r2, r3, #16
1a0026a0:	6182      	str	r2, [r0, #24]

	/* If stopped return 0 */
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a0026a2:	f013 0f10 	tst.w	r3, #16
1a0026a6:	d002      	beq.n	1a0026ae <handleMasterXferState+0x10a>
1a0026a8:	7d0b      	ldrb	r3, [r1, #20]
1a0026aa:	2b02      	cmp	r3, #2
1a0026ac:	d105      	bne.n	1a0026ba <handleMasterXferState+0x116>
		if (xfer->status == I2C_STATUS_BUSY) {
1a0026ae:	7d0b      	ldrb	r3, [r1, #20]
1a0026b0:	2b04      	cmp	r3, #4
1a0026b2:	d104      	bne.n	1a0026be <handleMasterXferState+0x11a>
			xfer->status = I2C_STATUS_DONE;
1a0026b4:	2000      	movs	r0, #0
1a0026b6:	7508      	strb	r0, [r1, #20]
1a0026b8:	e002      	b.n	1a0026c0 <handleMasterXferState+0x11c>
		}
		return 0;
	}
	return 1;
1a0026ba:	2001      	movs	r0, #1
1a0026bc:	e000      	b.n	1a0026c0 <handleMasterXferState+0x11c>
	/* If stopped return 0 */
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
		if (xfer->status == I2C_STATUS_BUSY) {
			xfer->status = I2C_STATUS_DONE;
		}
		return 0;
1a0026be:	2000      	movs	r0, #0
	}
	return 1;
}
1a0026c0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0026c4:	4770      	bx	lr
1a0026c6:	bf00      	nop

1a0026c8 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a0026c8:	b570      	push	{r4, r5, r6, lr}
1a0026ca:	4605      	mov	r5, r0
 * Private functions
 ****************************************************************************/

STATIC INLINE void enableClk(I2C_ID_T id)
{
	Chip_Clock_Enable(i2c[id].clk);
1a0026cc:	4e06      	ldr	r6, [pc, #24]	; (1a0026e8 <Chip_I2C_Init+0x20>)
1a0026ce:	00c4      	lsls	r4, r0, #3
1a0026d0:	1a23      	subs	r3, r4, r0
1a0026d2:	009b      	lsls	r3, r3, #2
1a0026d4:	4433      	add	r3, r6
1a0026d6:	8898      	ldrh	r0, [r3, #4]
1a0026d8:	f7ff fd46 	bl	1a002168 <Chip_Clock_Enable>
void Chip_I2C_Init(I2C_ID_T id)
{
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a0026dc:	1b60      	subs	r0, r4, r5
1a0026de:	0080      	lsls	r0, r0, #2
1a0026e0:	5833      	ldr	r3, [r6, r0]
1a0026e2:	226c      	movs	r2, #108	; 0x6c
1a0026e4:	619a      	str	r2, [r3, #24]
1a0026e6:	bd70      	pop	{r4, r5, r6, pc}
1a0026e8:	10000094 	.word	0x10000094

1a0026ec <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0026ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0026f0:	460c      	mov	r4, r1
}

/* Get the ADC Clock Rate */
STATIC INLINE uint32_t getClkRate(I2C_ID_T id)
{
	return Chip_Clock_GetRate(i2c[id].clk);
1a0026f2:	4f09      	ldr	r7, [pc, #36]	; (1a002718 <Chip_I2C_SetClockRate+0x2c>)
1a0026f4:	00c5      	lsls	r5, r0, #3
1a0026f6:	1a2e      	subs	r6, r5, r0
1a0026f8:	00b6      	lsls	r6, r6, #2
1a0026fa:	19bb      	adds	r3, r7, r6
1a0026fc:	8898      	ldrh	r0, [r3, #4]
1a0026fe:	f7ff fd4d 	bl	1a00219c <Chip_Clock_GetRate>
/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a002702:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a002706:	59bb      	ldr	r3, [r7, r6]
1a002708:	0842      	lsrs	r2, r0, #1
1a00270a:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a00270c:	59bb      	ldr	r3, [r7, r6]
1a00270e:	691a      	ldr	r2, [r3, #16]
1a002710:	1a80      	subs	r0, r0, r2
1a002712:	6158      	str	r0, [r3, #20]
1a002714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002718:	10000094 	.word	0x10000094

1a00271c <Chip_I2C_SetMasterEventHandler>:

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
	struct i2c_interface *iic = &i2c[id];
	if (!iic->mXfer) {
1a00271c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a002720:	009b      	lsls	r3, r3, #2
1a002722:	4a0a      	ldr	r2, [pc, #40]	; (1a00274c <Chip_I2C_SetMasterEventHandler+0x30>)
1a002724:	4413      	add	r3, r2
1a002726:	691b      	ldr	r3, [r3, #16]
1a002728:	b923      	cbnz	r3, 1a002734 <Chip_I2C_SetMasterEventHandler+0x18>
		iic->mEvent = event;
1a00272a:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a00272e:	009b      	lsls	r3, r3, #2
1a002730:	4413      	add	r3, r2
1a002732:	6099      	str	r1, [r3, #8]
	}
	return iic->mEvent == event;
1a002734:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a002738:	0080      	lsls	r0, r0, #2
1a00273a:	4b04      	ldr	r3, [pc, #16]	; (1a00274c <Chip_I2C_SetMasterEventHandler+0x30>)
1a00273c:	4418      	add	r0, r3
1a00273e:	6880      	ldr	r0, [r0, #8]
}
1a002740:	4288      	cmp	r0, r1
1a002742:	bf14      	ite	ne
1a002744:	2000      	movne	r0, #0
1a002746:	2001      	moveq	r0, #1
1a002748:	4770      	bx	lr
1a00274a:	bf00      	nop
1a00274c:	10000094 	.word	0x10000094

1a002750 <Chip_I2C_MasterStateHandler>:
	return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a002750:	b510      	push	{r4, lr}
1a002752:	4604      	mov	r4, r0
	if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a002754:	4a09      	ldr	r2, [pc, #36]	; (1a00277c <Chip_I2C_MasterStateHandler+0x2c>)
1a002756:	00c3      	lsls	r3, r0, #3
1a002758:	1a1b      	subs	r3, r3, r0
1a00275a:	009b      	lsls	r3, r3, #2
1a00275c:	18d1      	adds	r1, r2, r3
1a00275e:	58d0      	ldr	r0, [r2, r3]
1a002760:	6909      	ldr	r1, [r1, #16]
1a002762:	f7ff ff1f 	bl	1a0025a4 <handleMasterXferState>
1a002766:	b940      	cbnz	r0, 1a00277a <Chip_I2C_MasterStateHandler+0x2a>
		i2c[id].mEvent(id, I2C_EVENT_DONE);
1a002768:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
1a00276c:	009b      	lsls	r3, r3, #2
1a00276e:	4a03      	ldr	r2, [pc, #12]	; (1a00277c <Chip_I2C_MasterStateHandler+0x2c>)
1a002770:	4413      	add	r3, r2
1a002772:	689b      	ldr	r3, [r3, #8]
1a002774:	4620      	mov	r0, r4
1a002776:	2102      	movs	r1, #2
1a002778:	4798      	blx	r3
1a00277a:	bd10      	pop	{r4, pc}
1a00277c:	10000094 	.word	0x10000094

1a002780 <Chip_I2C_IsStateChanged>:
}

/* State change checking */
int Chip_I2C_IsStateChanged(I2C_ID_T id)
{
	return (LPC_I2Cx(id)->CONSET & I2C_CON_SI) != 0;
1a002780:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a002784:	0080      	lsls	r0, r0, #2
1a002786:	4b03      	ldr	r3, [pc, #12]	; (1a002794 <Chip_I2C_IsStateChanged+0x14>)
1a002788:	581b      	ldr	r3, [r3, r0]
1a00278a:	6818      	ldr	r0, [r3, #0]
}
1a00278c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
1a002790:	4770      	bx	lr
1a002792:	bf00      	nop
1a002794:	10000094 	.word	0x10000094

1a002798 <Chip_I2C_EventHandlerPolling>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a002798:	2901      	cmp	r1, #1
1a00279a:	d114      	bne.n	1a0027c6 <Chip_I2C_EventHandlerPolling+0x2e>
	while (*stat == I2C_STATUS_BUSY) {}
}

/* Chip polling event handler */
void Chip_I2C_EventHandlerPolling(I2C_ID_T id, I2C_EVENT_T event)
{
1a00279c:	b538      	push	{r3, r4, r5, lr}
1a00279e:	4604      	mov	r4, r0
	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
		return;
	}

	stat = &iic->mXfer->status;
1a0027a0:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a0027a4:	009b      	lsls	r3, r3, #2
1a0027a6:	4a08      	ldr	r2, [pc, #32]	; (1a0027c8 <Chip_I2C_EventHandlerPolling+0x30>)
1a0027a8:	4413      	add	r3, r2
1a0027aa:	691d      	ldr	r5, [r3, #16]
	/* Call the state change handler till xfer is done */
	while (*stat == I2C_STATUS_BUSY) {
1a0027ac:	e006      	b.n	1a0027bc <Chip_I2C_EventHandlerPolling+0x24>
		if (Chip_I2C_IsStateChanged(id)) {
1a0027ae:	4620      	mov	r0, r4
1a0027b0:	f7ff ffe6 	bl	1a002780 <Chip_I2C_IsStateChanged>
1a0027b4:	b110      	cbz	r0, 1a0027bc <Chip_I2C_EventHandlerPolling+0x24>
			Chip_I2C_MasterStateHandler(id);
1a0027b6:	4620      	mov	r0, r4
1a0027b8:	f7ff ffca 	bl	1a002750 <Chip_I2C_MasterStateHandler>
		return;
	}

	stat = &iic->mXfer->status;
	/* Call the state change handler till xfer is done */
	while (*stat == I2C_STATUS_BUSY) {
1a0027bc:	7d2b      	ldrb	r3, [r5, #20]
1a0027be:	b2db      	uxtb	r3, r3
1a0027c0:	2b04      	cmp	r3, #4
1a0027c2:	d0f4      	beq.n	1a0027ae <Chip_I2C_EventHandlerPolling+0x16>
1a0027c4:	bd38      	pop	{r3, r4, r5, pc}
1a0027c6:	4770      	bx	lr
1a0027c8:	10000094 	.word	0x10000094

1a0027cc <ResetISR>:
// not debug) by setting the define 'DONT_RESET_ON_RESTART'.
//
#ifndef DONT_RESET_ON_RESTART

    // Disable interrupts
    __asm volatile ("cpsid i");
1a0027cc:	b672      	cpsid	i
    // Note that we do not use the CMSIS register access mechanism,
    // as there is no guarantee that the project has been configured
    // to use CMSIS.

    // Write to LPC_RGU->RESET_CTRL0
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0027ce:	4a19      	ldr	r2, [pc, #100]	; (1a002834 <ResetISR+0x68>)
1a0027d0:	4b19      	ldr	r3, [pc, #100]	; (1a002838 <ResetISR+0x6c>)
1a0027d2:	601a      	str	r2, [r3, #0]
    // GPIO_RST|AES_RST|ETHERNET_RST|SDIO_RST|DMA_RST|
    // USB1_RST|USB0_RST|LCD_RST|M0_SUB_RST

    // Write to LPC_RGU->RESET_CTRL1
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0027d4:	4a19      	ldr	r2, [pc, #100]	; (1a00283c <ResetISR+0x70>)
1a0027d6:	3304      	adds	r3, #4
1a0027d8:	601a      	str	r2, [r3, #0]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0027da:	2300      	movs	r3, #0
1a0027dc:	e005      	b.n	1a0027ea <ResetISR+0x1e>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0027de:	f04f 31ff 	mov.w	r1, #4294967295
1a0027e2:	4a17      	ldr	r2, [pc, #92]	; (1a002840 <ResetISR+0x74>)
1a0027e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0027e8:	3301      	adds	r3, #1
1a0027ea:	2b07      	cmp	r3, #7
1a0027ec:	d9f7      	bls.n	1a0027de <ResetISR+0x12>
// Reset entry point for your code.
// Sets up a simple runtime environment and initializes the C/C++
// library.
//
//*****************************************************************************
void ResetISR(void) {
1a0027ee:	b510      	push	{r4, lr}
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
    }

    // Reenable interrupts
    __asm volatile ("cpsie i");
1a0027f0:	b662      	cpsie	i

#endif  // ifndef DONT_RESET_ON_RESTART
// *************************************************************

#if defined (__USE_LPCOPEN)
    SystemInit();
1a0027f2:	f7ff f8c1 	bl	1a001978 <SystemInit>
    //
    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;
1a0027f6:	4b13      	ldr	r3, [pc, #76]	; (1a002844 <ResetISR+0x78>)

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a0027f8:	e007      	b.n	1a00280a <ResetISR+0x3e>
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a0027fa:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0027fe:	6818      	ldr	r0, [r3, #0]
1a002800:	6859      	ldr	r1, [r3, #4]
1a002802:	689a      	ldr	r2, [r3, #8]
1a002804:	f7fd fcd2 	bl	1a0001ac <data_init>

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a002808:	4623      	mov	r3, r4

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a00280a:	4a0f      	ldr	r2, [pc, #60]	; (1a002848 <ResetISR+0x7c>)
1a00280c:	4293      	cmp	r3, r2
1a00280e:	d3f4      	bcc.n	1a0027fa <ResetISR+0x2e>
1a002810:	e006      	b.n	1a002820 <ResetISR+0x54>
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
1a002812:	461c      	mov	r4, r3
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
1a002814:	f854 0b08 	ldr.w	r0, [r4], #8
1a002818:	6859      	ldr	r1, [r3, #4]
1a00281a:	f7fd fcd5 	bl	1a0001c8 <bss_init>
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a00281e:	4623      	mov	r3, r4
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
1a002820:	4a0a      	ldr	r2, [pc, #40]	; (1a00284c <ResetISR+0x80>)
1a002822:	4293      	cmp	r3, r2
1a002824:	d3f5      	bcc.n	1a002812 <ResetISR+0x46>

#if defined (__USE_CMSIS)
    SystemInit();
#endif

    __libc_init_array();
1a002826:	f000 fefd 	bl	1a003624 <__libc_init_array>

#if defined (__REDLIB__)
    // Call the Redlib library, which in turn calls main()
    __main();
#else
    Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a00282a:	f7ff f81f 	bl	1a00186c <Board_Init>
    main();
1a00282e:	f7fd fd67 	bl	1a000300 <main>
    //
    // main() shouldn't return, but if it does, we'll just enter an infinite loop
    //
    while (1) {
        ;
    }
1a002832:	e7fe      	b.n	1a002832 <ResetISR+0x66>
1a002834:	10df1000 	.word	0x10df1000
1a002838:	40053100 	.word	0x40053100
1a00283c:	01dff7ff 	.word	0x01dff7ff
1a002840:	e000e280 	.word	0xe000e280
1a002844:	1a000114 	.word	0x1a000114
1a002848:	1a000150 	.word	0x1a000150
1a00284c:	1a000178 	.word	0x1a000178

1a002850 <_init>:
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
        *pulDest++ = 0;
}

void _init(void) {}
1a002850:	4770      	bx	lr
1a002852:	bf00      	nop

1a002854 <__aeabi_drsub>:
1a002854:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a002858:	e002      	b.n	1a002860 <__adddf3>
1a00285a:	bf00      	nop

1a00285c <__aeabi_dsub>:
1a00285c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a002860 <__adddf3>:
1a002860:	b530      	push	{r4, r5, lr}
1a002862:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a002866:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a00286a:	ea94 0f05 	teq	r4, r5
1a00286e:	bf08      	it	eq
1a002870:	ea90 0f02 	teqeq	r0, r2
1a002874:	bf1f      	itttt	ne
1a002876:	ea54 0c00 	orrsne.w	ip, r4, r0
1a00287a:	ea55 0c02 	orrsne.w	ip, r5, r2
1a00287e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a002882:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a002886:	f000 80e2 	beq.w	1a002a4e <__adddf3+0x1ee>
1a00288a:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a00288e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a002892:	bfb8      	it	lt
1a002894:	426d      	neglt	r5, r5
1a002896:	dd0c      	ble.n	1a0028b2 <__adddf3+0x52>
1a002898:	442c      	add	r4, r5
1a00289a:	ea80 0202 	eor.w	r2, r0, r2
1a00289e:	ea81 0303 	eor.w	r3, r1, r3
1a0028a2:	ea82 0000 	eor.w	r0, r2, r0
1a0028a6:	ea83 0101 	eor.w	r1, r3, r1
1a0028aa:	ea80 0202 	eor.w	r2, r0, r2
1a0028ae:	ea81 0303 	eor.w	r3, r1, r3
1a0028b2:	2d36      	cmp	r5, #54	; 0x36
1a0028b4:	bf88      	it	hi
1a0028b6:	bd30      	pophi	{r4, r5, pc}
1a0028b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a0028bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a0028c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a0028c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a0028c8:	d002      	beq.n	1a0028d0 <__adddf3+0x70>
1a0028ca:	4240      	negs	r0, r0
1a0028cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0028d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a0028d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a0028d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a0028dc:	d002      	beq.n	1a0028e4 <__adddf3+0x84>
1a0028de:	4252      	negs	r2, r2
1a0028e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a0028e4:	ea94 0f05 	teq	r4, r5
1a0028e8:	f000 80a7 	beq.w	1a002a3a <__adddf3+0x1da>
1a0028ec:	f1a4 0401 	sub.w	r4, r4, #1
1a0028f0:	f1d5 0e20 	rsbs	lr, r5, #32
1a0028f4:	db0d      	blt.n	1a002912 <__adddf3+0xb2>
1a0028f6:	fa02 fc0e 	lsl.w	ip, r2, lr
1a0028fa:	fa22 f205 	lsr.w	r2, r2, r5
1a0028fe:	1880      	adds	r0, r0, r2
1a002900:	f141 0100 	adc.w	r1, r1, #0
1a002904:	fa03 f20e 	lsl.w	r2, r3, lr
1a002908:	1880      	adds	r0, r0, r2
1a00290a:	fa43 f305 	asr.w	r3, r3, r5
1a00290e:	4159      	adcs	r1, r3
1a002910:	e00e      	b.n	1a002930 <__adddf3+0xd0>
1a002912:	f1a5 0520 	sub.w	r5, r5, #32
1a002916:	f10e 0e20 	add.w	lr, lr, #32
1a00291a:	2a01      	cmp	r2, #1
1a00291c:	fa03 fc0e 	lsl.w	ip, r3, lr
1a002920:	bf28      	it	cs
1a002922:	f04c 0c02 	orrcs.w	ip, ip, #2
1a002926:	fa43 f305 	asr.w	r3, r3, r5
1a00292a:	18c0      	adds	r0, r0, r3
1a00292c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a002930:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002934:	d507      	bpl.n	1a002946 <__adddf3+0xe6>
1a002936:	f04f 0e00 	mov.w	lr, #0
1a00293a:	f1dc 0c00 	rsbs	ip, ip, #0
1a00293e:	eb7e 0000 	sbcs.w	r0, lr, r0
1a002942:	eb6e 0101 	sbc.w	r1, lr, r1
1a002946:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a00294a:	d31b      	bcc.n	1a002984 <__adddf3+0x124>
1a00294c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a002950:	d30c      	bcc.n	1a00296c <__adddf3+0x10c>
1a002952:	0849      	lsrs	r1, r1, #1
1a002954:	ea5f 0030 	movs.w	r0, r0, rrx
1a002958:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a00295c:	f104 0401 	add.w	r4, r4, #1
1a002960:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a002964:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a002968:	f080 809a 	bcs.w	1a002aa0 <__adddf3+0x240>
1a00296c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a002970:	bf08      	it	eq
1a002972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a002976:	f150 0000 	adcs.w	r0, r0, #0
1a00297a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a00297e:	ea41 0105 	orr.w	r1, r1, r5
1a002982:	bd30      	pop	{r4, r5, pc}
1a002984:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a002988:	4140      	adcs	r0, r0
1a00298a:	eb41 0101 	adc.w	r1, r1, r1
1a00298e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002992:	f1a4 0401 	sub.w	r4, r4, #1
1a002996:	d1e9      	bne.n	1a00296c <__adddf3+0x10c>
1a002998:	f091 0f00 	teq	r1, #0
1a00299c:	bf04      	itt	eq
1a00299e:	4601      	moveq	r1, r0
1a0029a0:	2000      	moveq	r0, #0
1a0029a2:	fab1 f381 	clz	r3, r1
1a0029a6:	bf08      	it	eq
1a0029a8:	3320      	addeq	r3, #32
1a0029aa:	f1a3 030b 	sub.w	r3, r3, #11
1a0029ae:	f1b3 0220 	subs.w	r2, r3, #32
1a0029b2:	da0c      	bge.n	1a0029ce <__adddf3+0x16e>
1a0029b4:	320c      	adds	r2, #12
1a0029b6:	dd08      	ble.n	1a0029ca <__adddf3+0x16a>
1a0029b8:	f102 0c14 	add.w	ip, r2, #20
1a0029bc:	f1c2 020c 	rsb	r2, r2, #12
1a0029c0:	fa01 f00c 	lsl.w	r0, r1, ip
1a0029c4:	fa21 f102 	lsr.w	r1, r1, r2
1a0029c8:	e00c      	b.n	1a0029e4 <__adddf3+0x184>
1a0029ca:	f102 0214 	add.w	r2, r2, #20
1a0029ce:	bfd8      	it	le
1a0029d0:	f1c2 0c20 	rsble	ip, r2, #32
1a0029d4:	fa01 f102 	lsl.w	r1, r1, r2
1a0029d8:	fa20 fc0c 	lsr.w	ip, r0, ip
1a0029dc:	bfdc      	itt	le
1a0029de:	ea41 010c 	orrle.w	r1, r1, ip
1a0029e2:	4090      	lslle	r0, r2
1a0029e4:	1ae4      	subs	r4, r4, r3
1a0029e6:	bfa2      	ittt	ge
1a0029e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a0029ec:	4329      	orrge	r1, r5
1a0029ee:	bd30      	popge	{r4, r5, pc}
1a0029f0:	ea6f 0404 	mvn.w	r4, r4
1a0029f4:	3c1f      	subs	r4, #31
1a0029f6:	da1c      	bge.n	1a002a32 <__adddf3+0x1d2>
1a0029f8:	340c      	adds	r4, #12
1a0029fa:	dc0e      	bgt.n	1a002a1a <__adddf3+0x1ba>
1a0029fc:	f104 0414 	add.w	r4, r4, #20
1a002a00:	f1c4 0220 	rsb	r2, r4, #32
1a002a04:	fa20 f004 	lsr.w	r0, r0, r4
1a002a08:	fa01 f302 	lsl.w	r3, r1, r2
1a002a0c:	ea40 0003 	orr.w	r0, r0, r3
1a002a10:	fa21 f304 	lsr.w	r3, r1, r4
1a002a14:	ea45 0103 	orr.w	r1, r5, r3
1a002a18:	bd30      	pop	{r4, r5, pc}
1a002a1a:	f1c4 040c 	rsb	r4, r4, #12
1a002a1e:	f1c4 0220 	rsb	r2, r4, #32
1a002a22:	fa20 f002 	lsr.w	r0, r0, r2
1a002a26:	fa01 f304 	lsl.w	r3, r1, r4
1a002a2a:	ea40 0003 	orr.w	r0, r0, r3
1a002a2e:	4629      	mov	r1, r5
1a002a30:	bd30      	pop	{r4, r5, pc}
1a002a32:	fa21 f004 	lsr.w	r0, r1, r4
1a002a36:	4629      	mov	r1, r5
1a002a38:	bd30      	pop	{r4, r5, pc}
1a002a3a:	f094 0f00 	teq	r4, #0
1a002a3e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a002a42:	bf06      	itte	eq
1a002a44:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a002a48:	3401      	addeq	r4, #1
1a002a4a:	3d01      	subne	r5, #1
1a002a4c:	e74e      	b.n	1a0028ec <__adddf3+0x8c>
1a002a4e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a002a52:	bf18      	it	ne
1a002a54:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a002a58:	d029      	beq.n	1a002aae <__adddf3+0x24e>
1a002a5a:	ea94 0f05 	teq	r4, r5
1a002a5e:	bf08      	it	eq
1a002a60:	ea90 0f02 	teqeq	r0, r2
1a002a64:	d005      	beq.n	1a002a72 <__adddf3+0x212>
1a002a66:	ea54 0c00 	orrs.w	ip, r4, r0
1a002a6a:	bf04      	itt	eq
1a002a6c:	4619      	moveq	r1, r3
1a002a6e:	4610      	moveq	r0, r2
1a002a70:	bd30      	pop	{r4, r5, pc}
1a002a72:	ea91 0f03 	teq	r1, r3
1a002a76:	bf1e      	ittt	ne
1a002a78:	2100      	movne	r1, #0
1a002a7a:	2000      	movne	r0, #0
1a002a7c:	bd30      	popne	{r4, r5, pc}
1a002a7e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a002a82:	d105      	bne.n	1a002a90 <__adddf3+0x230>
1a002a84:	0040      	lsls	r0, r0, #1
1a002a86:	4149      	adcs	r1, r1
1a002a88:	bf28      	it	cs
1a002a8a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a002a8e:	bd30      	pop	{r4, r5, pc}
1a002a90:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a002a94:	bf3c      	itt	cc
1a002a96:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a002a9a:	bd30      	popcc	{r4, r5, pc}
1a002a9c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002aa0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a002aa4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002aa8:	f04f 0000 	mov.w	r0, #0
1a002aac:	bd30      	pop	{r4, r5, pc}
1a002aae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a002ab2:	bf1a      	itte	ne
1a002ab4:	4619      	movne	r1, r3
1a002ab6:	4610      	movne	r0, r2
1a002ab8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a002abc:	bf1c      	itt	ne
1a002abe:	460b      	movne	r3, r1
1a002ac0:	4602      	movne	r2, r0
1a002ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a002ac6:	bf06      	itte	eq
1a002ac8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a002acc:	ea91 0f03 	teqeq	r1, r3
1a002ad0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a002ad4:	bd30      	pop	{r4, r5, pc}
1a002ad6:	bf00      	nop

1a002ad8 <__aeabi_ui2d>:
1a002ad8:	f090 0f00 	teq	r0, #0
1a002adc:	bf04      	itt	eq
1a002ade:	2100      	moveq	r1, #0
1a002ae0:	4770      	bxeq	lr
1a002ae2:	b530      	push	{r4, r5, lr}
1a002ae4:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002ae8:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002aec:	f04f 0500 	mov.w	r5, #0
1a002af0:	f04f 0100 	mov.w	r1, #0
1a002af4:	e750      	b.n	1a002998 <__adddf3+0x138>
1a002af6:	bf00      	nop

1a002af8 <__aeabi_i2d>:
1a002af8:	f090 0f00 	teq	r0, #0
1a002afc:	bf04      	itt	eq
1a002afe:	2100      	moveq	r1, #0
1a002b00:	4770      	bxeq	lr
1a002b02:	b530      	push	{r4, r5, lr}
1a002b04:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002b08:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002b0c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a002b10:	bf48      	it	mi
1a002b12:	4240      	negmi	r0, r0
1a002b14:	f04f 0100 	mov.w	r1, #0
1a002b18:	e73e      	b.n	1a002998 <__adddf3+0x138>
1a002b1a:	bf00      	nop

1a002b1c <__aeabi_f2d>:
1a002b1c:	0042      	lsls	r2, r0, #1
1a002b1e:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a002b22:	ea4f 0131 	mov.w	r1, r1, rrx
1a002b26:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a002b2a:	bf1f      	itttt	ne
1a002b2c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a002b30:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a002b34:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a002b38:	4770      	bxne	lr
1a002b3a:	f092 0f00 	teq	r2, #0
1a002b3e:	bf14      	ite	ne
1a002b40:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a002b44:	4770      	bxeq	lr
1a002b46:	b530      	push	{r4, r5, lr}
1a002b48:	f44f 7460 	mov.w	r4, #896	; 0x380
1a002b4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002b50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a002b54:	e720      	b.n	1a002998 <__adddf3+0x138>
1a002b56:	bf00      	nop

1a002b58 <__aeabi_ul2d>:
1a002b58:	ea50 0201 	orrs.w	r2, r0, r1
1a002b5c:	bf08      	it	eq
1a002b5e:	4770      	bxeq	lr
1a002b60:	b530      	push	{r4, r5, lr}
1a002b62:	f04f 0500 	mov.w	r5, #0
1a002b66:	e00a      	b.n	1a002b7e <__aeabi_l2d+0x16>

1a002b68 <__aeabi_l2d>:
1a002b68:	ea50 0201 	orrs.w	r2, r0, r1
1a002b6c:	bf08      	it	eq
1a002b6e:	4770      	bxeq	lr
1a002b70:	b530      	push	{r4, r5, lr}
1a002b72:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a002b76:	d502      	bpl.n	1a002b7e <__aeabi_l2d+0x16>
1a002b78:	4240      	negs	r0, r0
1a002b7a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a002b7e:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002b82:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002b86:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a002b8a:	f43f aedc 	beq.w	1a002946 <__adddf3+0xe6>
1a002b8e:	f04f 0203 	mov.w	r2, #3
1a002b92:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a002b96:	bf18      	it	ne
1a002b98:	3203      	addne	r2, #3
1a002b9a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a002b9e:	bf18      	it	ne
1a002ba0:	3203      	addne	r2, #3
1a002ba2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a002ba6:	f1c2 0320 	rsb	r3, r2, #32
1a002baa:	fa00 fc03 	lsl.w	ip, r0, r3
1a002bae:	fa20 f002 	lsr.w	r0, r0, r2
1a002bb2:	fa01 fe03 	lsl.w	lr, r1, r3
1a002bb6:	ea40 000e 	orr.w	r0, r0, lr
1a002bba:	fa21 f102 	lsr.w	r1, r1, r2
1a002bbe:	4414      	add	r4, r2
1a002bc0:	e6c1      	b.n	1a002946 <__adddf3+0xe6>
1a002bc2:	bf00      	nop

1a002bc4 <__aeabi_d2f>:
1a002bc4:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a002bc8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
1a002bcc:	bf24      	itt	cs
1a002bce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
1a002bd2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
1a002bd6:	d90d      	bls.n	1a002bf4 <__aeabi_d2f+0x30>
1a002bd8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a002bdc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
1a002be0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
1a002be4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
1a002be8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
1a002bec:	bf08      	it	eq
1a002bee:	f020 0001 	biceq.w	r0, r0, #1
1a002bf2:	4770      	bx	lr
1a002bf4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
1a002bf8:	d121      	bne.n	1a002c3e <__aeabi_d2f+0x7a>
1a002bfa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
1a002bfe:	bfbc      	itt	lt
1a002c00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
1a002c04:	4770      	bxlt	lr
1a002c06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002c0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
1a002c0e:	f1c2 0218 	rsb	r2, r2, #24
1a002c12:	f1c2 0c20 	rsb	ip, r2, #32
1a002c16:	fa10 f30c 	lsls.w	r3, r0, ip
1a002c1a:	fa20 f002 	lsr.w	r0, r0, r2
1a002c1e:	bf18      	it	ne
1a002c20:	f040 0001 	orrne.w	r0, r0, #1
1a002c24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a002c28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
1a002c2c:	fa03 fc0c 	lsl.w	ip, r3, ip
1a002c30:	ea40 000c 	orr.w	r0, r0, ip
1a002c34:	fa23 f302 	lsr.w	r3, r3, r2
1a002c38:	ea4f 0343 	mov.w	r3, r3, lsl #1
1a002c3c:	e7cc      	b.n	1a002bd8 <__aeabi_d2f+0x14>
1a002c3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
1a002c42:	d107      	bne.n	1a002c54 <__aeabi_d2f+0x90>
1a002c44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
1a002c48:	bf1e      	ittt	ne
1a002c4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
1a002c4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
1a002c52:	4770      	bxne	lr
1a002c54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
1a002c58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a002c5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a002c60:	4770      	bx	lr
1a002c62:	bf00      	nop

1a002c64 <__aeabi_uldivmod>:
1a002c64:	b953      	cbnz	r3, 1a002c7c <__aeabi_uldivmod+0x18>
1a002c66:	b94a      	cbnz	r2, 1a002c7c <__aeabi_uldivmod+0x18>
1a002c68:	2900      	cmp	r1, #0
1a002c6a:	bf08      	it	eq
1a002c6c:	2800      	cmpeq	r0, #0
1a002c6e:	bf1c      	itt	ne
1a002c70:	f04f 31ff 	movne.w	r1, #4294967295
1a002c74:	f04f 30ff 	movne.w	r0, #4294967295
1a002c78:	f000 b83c 	b.w	1a002cf4 <__aeabi_idiv0>
1a002c7c:	b082      	sub	sp, #8
1a002c7e:	46ec      	mov	ip, sp
1a002c80:	e92d 5000 	stmdb	sp!, {ip, lr}
1a002c84:	f000 f81e 	bl	1a002cc4 <__gnu_uldivmod_helper>
1a002c88:	f8dd e004 	ldr.w	lr, [sp, #4]
1a002c8c:	b002      	add	sp, #8
1a002c8e:	bc0c      	pop	{r2, r3}
1a002c90:	4770      	bx	lr
1a002c92:	bf00      	nop

1a002c94 <__gnu_ldivmod_helper>:
1a002c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002c98:	9c06      	ldr	r4, [sp, #24]
1a002c9a:	4615      	mov	r5, r2
1a002c9c:	4606      	mov	r6, r0
1a002c9e:	460f      	mov	r7, r1
1a002ca0:	4698      	mov	r8, r3
1a002ca2:	f000 fa3b 	bl	1a00311c <__divdi3>
1a002ca6:	fb05 f301 	mul.w	r3, r5, r1
1a002caa:	fb00 3808 	mla	r8, r0, r8, r3
1a002cae:	fba5 2300 	umull	r2, r3, r5, r0
1a002cb2:	1ab2      	subs	r2, r6, r2
1a002cb4:	4443      	add	r3, r8
1a002cb6:	eb67 0303 	sbc.w	r3, r7, r3
1a002cba:	e9c4 2300 	strd	r2, r3, [r4]
1a002cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002cc2:	bf00      	nop

1a002cc4 <__gnu_uldivmod_helper>:
1a002cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002cc8:	9c06      	ldr	r4, [sp, #24]
1a002cca:	4690      	mov	r8, r2
1a002ccc:	4606      	mov	r6, r0
1a002cce:	460f      	mov	r7, r1
1a002cd0:	461d      	mov	r5, r3
1a002cd2:	f000 fb71 	bl	1a0033b8 <__udivdi3>
1a002cd6:	fb00 f505 	mul.w	r5, r0, r5
1a002cda:	fba0 2308 	umull	r2, r3, r0, r8
1a002cde:	fb08 5501 	mla	r5, r8, r1, r5
1a002ce2:	1ab2      	subs	r2, r6, r2
1a002ce4:	442b      	add	r3, r5
1a002ce6:	eb67 0303 	sbc.w	r3, r7, r3
1a002cea:	e9c4 2300 	strd	r2, r3, [r4]
1a002cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002cf2:	bf00      	nop

1a002cf4 <__aeabi_idiv0>:
1a002cf4:	4770      	bx	lr
1a002cf6:	bf00      	nop

1a002cf8 <__aeabi_dmul>:
1a002cf8:	b570      	push	{r4, r5, r6, lr}
1a002cfa:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a002cfe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a002d02:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a002d06:	bf1d      	ittte	ne
1a002d08:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a002d0c:	ea94 0f0c 	teqne	r4, ip
1a002d10:	ea95 0f0c 	teqne	r5, ip
1a002d14:	f000 f8de 	bleq	1a002ed4 <__aeabi_dmul+0x1dc>
1a002d18:	442c      	add	r4, r5
1a002d1a:	ea81 0603 	eor.w	r6, r1, r3
1a002d1e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a002d22:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a002d26:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a002d2a:	bf18      	it	ne
1a002d2c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a002d30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002d34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a002d38:	d038      	beq.n	1a002dac <__aeabi_dmul+0xb4>
1a002d3a:	fba0 ce02 	umull	ip, lr, r0, r2
1a002d3e:	f04f 0500 	mov.w	r5, #0
1a002d42:	fbe1 e502 	umlal	lr, r5, r1, r2
1a002d46:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a002d4a:	fbe0 e503 	umlal	lr, r5, r0, r3
1a002d4e:	f04f 0600 	mov.w	r6, #0
1a002d52:	fbe1 5603 	umlal	r5, r6, r1, r3
1a002d56:	f09c 0f00 	teq	ip, #0
1a002d5a:	bf18      	it	ne
1a002d5c:	f04e 0e01 	orrne.w	lr, lr, #1
1a002d60:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a002d64:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a002d68:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a002d6c:	d204      	bcs.n	1a002d78 <__aeabi_dmul+0x80>
1a002d6e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a002d72:	416d      	adcs	r5, r5
1a002d74:	eb46 0606 	adc.w	r6, r6, r6
1a002d78:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a002d7c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a002d80:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a002d84:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a002d88:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a002d8c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a002d90:	bf88      	it	hi
1a002d92:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a002d96:	d81e      	bhi.n	1a002dd6 <__aeabi_dmul+0xde>
1a002d98:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a002d9c:	bf08      	it	eq
1a002d9e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a002da2:	f150 0000 	adcs.w	r0, r0, #0
1a002da6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002daa:	bd70      	pop	{r4, r5, r6, pc}
1a002dac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a002db0:	ea46 0101 	orr.w	r1, r6, r1
1a002db4:	ea40 0002 	orr.w	r0, r0, r2
1a002db8:	ea81 0103 	eor.w	r1, r1, r3
1a002dbc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a002dc0:	bfc2      	ittt	gt
1a002dc2:	ebd4 050c 	rsbsgt	r5, r4, ip
1a002dc6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a002dca:	bd70      	popgt	{r4, r5, r6, pc}
1a002dcc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002dd0:	f04f 0e00 	mov.w	lr, #0
1a002dd4:	3c01      	subs	r4, #1
1a002dd6:	f300 80ab 	bgt.w	1a002f30 <__aeabi_dmul+0x238>
1a002dda:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a002dde:	bfde      	ittt	le
1a002de0:	2000      	movle	r0, #0
1a002de2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a002de6:	bd70      	pople	{r4, r5, r6, pc}
1a002de8:	f1c4 0400 	rsb	r4, r4, #0
1a002dec:	3c20      	subs	r4, #32
1a002dee:	da35      	bge.n	1a002e5c <__aeabi_dmul+0x164>
1a002df0:	340c      	adds	r4, #12
1a002df2:	dc1b      	bgt.n	1a002e2c <__aeabi_dmul+0x134>
1a002df4:	f104 0414 	add.w	r4, r4, #20
1a002df8:	f1c4 0520 	rsb	r5, r4, #32
1a002dfc:	fa00 f305 	lsl.w	r3, r0, r5
1a002e00:	fa20 f004 	lsr.w	r0, r0, r4
1a002e04:	fa01 f205 	lsl.w	r2, r1, r5
1a002e08:	ea40 0002 	orr.w	r0, r0, r2
1a002e0c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a002e10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a002e14:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a002e18:	fa21 f604 	lsr.w	r6, r1, r4
1a002e1c:	eb42 0106 	adc.w	r1, r2, r6
1a002e20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002e24:	bf08      	it	eq
1a002e26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002e2a:	bd70      	pop	{r4, r5, r6, pc}
1a002e2c:	f1c4 040c 	rsb	r4, r4, #12
1a002e30:	f1c4 0520 	rsb	r5, r4, #32
1a002e34:	fa00 f304 	lsl.w	r3, r0, r4
1a002e38:	fa20 f005 	lsr.w	r0, r0, r5
1a002e3c:	fa01 f204 	lsl.w	r2, r1, r4
1a002e40:	ea40 0002 	orr.w	r0, r0, r2
1a002e44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002e48:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a002e4c:	f141 0100 	adc.w	r1, r1, #0
1a002e50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002e54:	bf08      	it	eq
1a002e56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002e5a:	bd70      	pop	{r4, r5, r6, pc}
1a002e5c:	f1c4 0520 	rsb	r5, r4, #32
1a002e60:	fa00 f205 	lsl.w	r2, r0, r5
1a002e64:	ea4e 0e02 	orr.w	lr, lr, r2
1a002e68:	fa20 f304 	lsr.w	r3, r0, r4
1a002e6c:	fa01 f205 	lsl.w	r2, r1, r5
1a002e70:	ea43 0302 	orr.w	r3, r3, r2
1a002e74:	fa21 f004 	lsr.w	r0, r1, r4
1a002e78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002e7c:	fa21 f204 	lsr.w	r2, r1, r4
1a002e80:	ea20 0002 	bic.w	r0, r0, r2
1a002e84:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a002e88:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002e8c:	bf08      	it	eq
1a002e8e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002e92:	bd70      	pop	{r4, r5, r6, pc}
1a002e94:	f094 0f00 	teq	r4, #0
1a002e98:	d10f      	bne.n	1a002eba <__aeabi_dmul+0x1c2>
1a002e9a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a002e9e:	0040      	lsls	r0, r0, #1
1a002ea0:	eb41 0101 	adc.w	r1, r1, r1
1a002ea4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002ea8:	bf08      	it	eq
1a002eaa:	3c01      	subeq	r4, #1
1a002eac:	d0f7      	beq.n	1a002e9e <__aeabi_dmul+0x1a6>
1a002eae:	ea41 0106 	orr.w	r1, r1, r6
1a002eb2:	f095 0f00 	teq	r5, #0
1a002eb6:	bf18      	it	ne
1a002eb8:	4770      	bxne	lr
1a002eba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a002ebe:	0052      	lsls	r2, r2, #1
1a002ec0:	eb43 0303 	adc.w	r3, r3, r3
1a002ec4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a002ec8:	bf08      	it	eq
1a002eca:	3d01      	subeq	r5, #1
1a002ecc:	d0f7      	beq.n	1a002ebe <__aeabi_dmul+0x1c6>
1a002ece:	ea43 0306 	orr.w	r3, r3, r6
1a002ed2:	4770      	bx	lr
1a002ed4:	ea94 0f0c 	teq	r4, ip
1a002ed8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a002edc:	bf18      	it	ne
1a002ede:	ea95 0f0c 	teqne	r5, ip
1a002ee2:	d00c      	beq.n	1a002efe <__aeabi_dmul+0x206>
1a002ee4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002ee8:	bf18      	it	ne
1a002eea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002eee:	d1d1      	bne.n	1a002e94 <__aeabi_dmul+0x19c>
1a002ef0:	ea81 0103 	eor.w	r1, r1, r3
1a002ef4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002ef8:	f04f 0000 	mov.w	r0, #0
1a002efc:	bd70      	pop	{r4, r5, r6, pc}
1a002efe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002f02:	bf06      	itte	eq
1a002f04:	4610      	moveq	r0, r2
1a002f06:	4619      	moveq	r1, r3
1a002f08:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002f0c:	d019      	beq.n	1a002f42 <__aeabi_dmul+0x24a>
1a002f0e:	ea94 0f0c 	teq	r4, ip
1a002f12:	d102      	bne.n	1a002f1a <__aeabi_dmul+0x222>
1a002f14:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a002f18:	d113      	bne.n	1a002f42 <__aeabi_dmul+0x24a>
1a002f1a:	ea95 0f0c 	teq	r5, ip
1a002f1e:	d105      	bne.n	1a002f2c <__aeabi_dmul+0x234>
1a002f20:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a002f24:	bf1c      	itt	ne
1a002f26:	4610      	movne	r0, r2
1a002f28:	4619      	movne	r1, r3
1a002f2a:	d10a      	bne.n	1a002f42 <__aeabi_dmul+0x24a>
1a002f2c:	ea81 0103 	eor.w	r1, r1, r3
1a002f30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002f34:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a002f38:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002f3c:	f04f 0000 	mov.w	r0, #0
1a002f40:	bd70      	pop	{r4, r5, r6, pc}
1a002f42:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a002f46:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a002f4a:	bd70      	pop	{r4, r5, r6, pc}

1a002f4c <__aeabi_ddiv>:
1a002f4c:	b570      	push	{r4, r5, r6, lr}
1a002f4e:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a002f52:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a002f56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a002f5a:	bf1d      	ittte	ne
1a002f5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a002f60:	ea94 0f0c 	teqne	r4, ip
1a002f64:	ea95 0f0c 	teqne	r5, ip
1a002f68:	f000 f8a7 	bleq	1a0030ba <__aeabi_ddiv+0x16e>
1a002f6c:	eba4 0405 	sub.w	r4, r4, r5
1a002f70:	ea81 0e03 	eor.w	lr, r1, r3
1a002f74:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a002f78:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a002f7c:	f000 8088 	beq.w	1a003090 <__aeabi_ddiv+0x144>
1a002f80:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a002f84:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a002f88:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a002f8c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a002f90:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a002f94:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a002f98:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a002f9c:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a002fa0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a002fa4:	429d      	cmp	r5, r3
1a002fa6:	bf08      	it	eq
1a002fa8:	4296      	cmpeq	r6, r2
1a002faa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a002fae:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a002fb2:	d202      	bcs.n	1a002fba <__aeabi_ddiv+0x6e>
1a002fb4:	085b      	lsrs	r3, r3, #1
1a002fb6:	ea4f 0232 	mov.w	r2, r2, rrx
1a002fba:	1ab6      	subs	r6, r6, r2
1a002fbc:	eb65 0503 	sbc.w	r5, r5, r3
1a002fc0:	085b      	lsrs	r3, r3, #1
1a002fc2:	ea4f 0232 	mov.w	r2, r2, rrx
1a002fc6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a002fca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a002fce:	ebb6 0e02 	subs.w	lr, r6, r2
1a002fd2:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002fd6:	bf22      	ittt	cs
1a002fd8:	1ab6      	subcs	r6, r6, r2
1a002fda:	4675      	movcs	r5, lr
1a002fdc:	ea40 000c 	orrcs.w	r0, r0, ip
1a002fe0:	085b      	lsrs	r3, r3, #1
1a002fe2:	ea4f 0232 	mov.w	r2, r2, rrx
1a002fe6:	ebb6 0e02 	subs.w	lr, r6, r2
1a002fea:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002fee:	bf22      	ittt	cs
1a002ff0:	1ab6      	subcs	r6, r6, r2
1a002ff2:	4675      	movcs	r5, lr
1a002ff4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a002ff8:	085b      	lsrs	r3, r3, #1
1a002ffa:	ea4f 0232 	mov.w	r2, r2, rrx
1a002ffe:	ebb6 0e02 	subs.w	lr, r6, r2
1a003002:	eb75 0e03 	sbcs.w	lr, r5, r3
1a003006:	bf22      	ittt	cs
1a003008:	1ab6      	subcs	r6, r6, r2
1a00300a:	4675      	movcs	r5, lr
1a00300c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a003010:	085b      	lsrs	r3, r3, #1
1a003012:	ea4f 0232 	mov.w	r2, r2, rrx
1a003016:	ebb6 0e02 	subs.w	lr, r6, r2
1a00301a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a00301e:	bf22      	ittt	cs
1a003020:	1ab6      	subcs	r6, r6, r2
1a003022:	4675      	movcs	r5, lr
1a003024:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a003028:	ea55 0e06 	orrs.w	lr, r5, r6
1a00302c:	d018      	beq.n	1a003060 <__aeabi_ddiv+0x114>
1a00302e:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a003032:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a003036:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a00303a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a00303e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a003042:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a003046:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a00304a:	d1c0      	bne.n	1a002fce <__aeabi_ddiv+0x82>
1a00304c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a003050:	d10b      	bne.n	1a00306a <__aeabi_ddiv+0x11e>
1a003052:	ea41 0100 	orr.w	r1, r1, r0
1a003056:	f04f 0000 	mov.w	r0, #0
1a00305a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a00305e:	e7b6      	b.n	1a002fce <__aeabi_ddiv+0x82>
1a003060:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a003064:	bf04      	itt	eq
1a003066:	4301      	orreq	r1, r0
1a003068:	2000      	moveq	r0, #0
1a00306a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a00306e:	bf88      	it	hi
1a003070:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a003074:	f63f aeaf 	bhi.w	1a002dd6 <__aeabi_dmul+0xde>
1a003078:	ebb5 0c03 	subs.w	ip, r5, r3
1a00307c:	bf04      	itt	eq
1a00307e:	ebb6 0c02 	subseq.w	ip, r6, r2
1a003082:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a003086:	f150 0000 	adcs.w	r0, r0, #0
1a00308a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a00308e:	bd70      	pop	{r4, r5, r6, pc}
1a003090:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a003094:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a003098:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a00309c:	bfc2      	ittt	gt
1a00309e:	ebd4 050c 	rsbsgt	r5, r4, ip
1a0030a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a0030a6:	bd70      	popgt	{r4, r5, r6, pc}
1a0030a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0030ac:	f04f 0e00 	mov.w	lr, #0
1a0030b0:	3c01      	subs	r4, #1
1a0030b2:	e690      	b.n	1a002dd6 <__aeabi_dmul+0xde>
1a0030b4:	ea45 0e06 	orr.w	lr, r5, r6
1a0030b8:	e68d      	b.n	1a002dd6 <__aeabi_dmul+0xde>
1a0030ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a0030be:	ea94 0f0c 	teq	r4, ip
1a0030c2:	bf08      	it	eq
1a0030c4:	ea95 0f0c 	teqeq	r5, ip
1a0030c8:	f43f af3b 	beq.w	1a002f42 <__aeabi_dmul+0x24a>
1a0030cc:	ea94 0f0c 	teq	r4, ip
1a0030d0:	d10a      	bne.n	1a0030e8 <__aeabi_ddiv+0x19c>
1a0030d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a0030d6:	f47f af34 	bne.w	1a002f42 <__aeabi_dmul+0x24a>
1a0030da:	ea95 0f0c 	teq	r5, ip
1a0030de:	f47f af25 	bne.w	1a002f2c <__aeabi_dmul+0x234>
1a0030e2:	4610      	mov	r0, r2
1a0030e4:	4619      	mov	r1, r3
1a0030e6:	e72c      	b.n	1a002f42 <__aeabi_dmul+0x24a>
1a0030e8:	ea95 0f0c 	teq	r5, ip
1a0030ec:	d106      	bne.n	1a0030fc <__aeabi_ddiv+0x1b0>
1a0030ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a0030f2:	f43f aefd 	beq.w	1a002ef0 <__aeabi_dmul+0x1f8>
1a0030f6:	4610      	mov	r0, r2
1a0030f8:	4619      	mov	r1, r3
1a0030fa:	e722      	b.n	1a002f42 <__aeabi_dmul+0x24a>
1a0030fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a003100:	bf18      	it	ne
1a003102:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a003106:	f47f aec5 	bne.w	1a002e94 <__aeabi_dmul+0x19c>
1a00310a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a00310e:	f47f af0d 	bne.w	1a002f2c <__aeabi_dmul+0x234>
1a003112:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a003116:	f47f aeeb 	bne.w	1a002ef0 <__aeabi_dmul+0x1f8>
1a00311a:	e712      	b.n	1a002f42 <__aeabi_dmul+0x24a>

1a00311c <__divdi3>:
1a00311c:	2900      	cmp	r1, #0
1a00311e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a003122:	f2c0 80a6 	blt.w	1a003272 <__divdi3+0x156>
1a003126:	2600      	movs	r6, #0
1a003128:	2b00      	cmp	r3, #0
1a00312a:	f2c0 809c 	blt.w	1a003266 <__divdi3+0x14a>
1a00312e:	4688      	mov	r8, r1
1a003130:	4694      	mov	ip, r2
1a003132:	469e      	mov	lr, r3
1a003134:	4615      	mov	r5, r2
1a003136:	4604      	mov	r4, r0
1a003138:	460f      	mov	r7, r1
1a00313a:	2b00      	cmp	r3, #0
1a00313c:	d13d      	bne.n	1a0031ba <__divdi3+0x9e>
1a00313e:	428a      	cmp	r2, r1
1a003140:	d959      	bls.n	1a0031f6 <__divdi3+0xda>
1a003142:	fab2 f382 	clz	r3, r2
1a003146:	b13b      	cbz	r3, 1a003158 <__divdi3+0x3c>
1a003148:	f1c3 0220 	rsb	r2, r3, #32
1a00314c:	409f      	lsls	r7, r3
1a00314e:	fa20 f202 	lsr.w	r2, r0, r2
1a003152:	409d      	lsls	r5, r3
1a003154:	4317      	orrs	r7, r2
1a003156:	409c      	lsls	r4, r3
1a003158:	0c29      	lsrs	r1, r5, #16
1a00315a:	0c22      	lsrs	r2, r4, #16
1a00315c:	fbb7 fef1 	udiv	lr, r7, r1
1a003160:	b2a8      	uxth	r0, r5
1a003162:	fb01 771e 	mls	r7, r1, lr, r7
1a003166:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
1a00316a:	fb00 f30e 	mul.w	r3, r0, lr
1a00316e:	42bb      	cmp	r3, r7
1a003170:	d90a      	bls.n	1a003188 <__divdi3+0x6c>
1a003172:	197f      	adds	r7, r7, r5
1a003174:	f10e 32ff 	add.w	r2, lr, #4294967295
1a003178:	f080 8105 	bcs.w	1a003386 <__divdi3+0x26a>
1a00317c:	42bb      	cmp	r3, r7
1a00317e:	f240 8102 	bls.w	1a003386 <__divdi3+0x26a>
1a003182:	f1ae 0e02 	sub.w	lr, lr, #2
1a003186:	442f      	add	r7, r5
1a003188:	1aff      	subs	r7, r7, r3
1a00318a:	b2a4      	uxth	r4, r4
1a00318c:	fbb7 f3f1 	udiv	r3, r7, r1
1a003190:	fb01 7713 	mls	r7, r1, r3, r7
1a003194:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a003198:	fb00 f003 	mul.w	r0, r0, r3
1a00319c:	42b8      	cmp	r0, r7
1a00319e:	d908      	bls.n	1a0031b2 <__divdi3+0x96>
1a0031a0:	197f      	adds	r7, r7, r5
1a0031a2:	f103 32ff 	add.w	r2, r3, #4294967295
1a0031a6:	f080 80f0 	bcs.w	1a00338a <__divdi3+0x26e>
1a0031aa:	42b8      	cmp	r0, r7
1a0031ac:	f240 80ed 	bls.w	1a00338a <__divdi3+0x26e>
1a0031b0:	3b02      	subs	r3, #2
1a0031b2:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
1a0031b6:	2200      	movs	r2, #0
1a0031b8:	e003      	b.n	1a0031c2 <__divdi3+0xa6>
1a0031ba:	428b      	cmp	r3, r1
1a0031bc:	d90f      	bls.n	1a0031de <__divdi3+0xc2>
1a0031be:	2200      	movs	r2, #0
1a0031c0:	4613      	mov	r3, r2
1a0031c2:	1c34      	adds	r4, r6, #0
1a0031c4:	bf18      	it	ne
1a0031c6:	2401      	movne	r4, #1
1a0031c8:	4260      	negs	r0, r4
1a0031ca:	f04f 0500 	mov.w	r5, #0
1a0031ce:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
1a0031d2:	4058      	eors	r0, r3
1a0031d4:	4051      	eors	r1, r2
1a0031d6:	1900      	adds	r0, r0, r4
1a0031d8:	4169      	adcs	r1, r5
1a0031da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0031de:	fab3 f283 	clz	r2, r3
1a0031e2:	2a00      	cmp	r2, #0
1a0031e4:	f040 8086 	bne.w	1a0032f4 <__divdi3+0x1d8>
1a0031e8:	428b      	cmp	r3, r1
1a0031ea:	d302      	bcc.n	1a0031f2 <__divdi3+0xd6>
1a0031ec:	4584      	cmp	ip, r0
1a0031ee:	f200 80db 	bhi.w	1a0033a8 <__divdi3+0x28c>
1a0031f2:	2301      	movs	r3, #1
1a0031f4:	e7e5      	b.n	1a0031c2 <__divdi3+0xa6>
1a0031f6:	b912      	cbnz	r2, 1a0031fe <__divdi3+0xe2>
1a0031f8:	2301      	movs	r3, #1
1a0031fa:	fbb3 f5f2 	udiv	r5, r3, r2
1a0031fe:	fab5 f085 	clz	r0, r5
1a003202:	2800      	cmp	r0, #0
1a003204:	d13b      	bne.n	1a00327e <__divdi3+0x162>
1a003206:	1b78      	subs	r0, r7, r5
1a003208:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00320c:	fa1f fc85 	uxth.w	ip, r5
1a003210:	2201      	movs	r2, #1
1a003212:	fbb0 f8fe 	udiv	r8, r0, lr
1a003216:	0c21      	lsrs	r1, r4, #16
1a003218:	fb0e 0718 	mls	r7, lr, r8, r0
1a00321c:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
1a003220:	fb0c f308 	mul.w	r3, ip, r8
1a003224:	42bb      	cmp	r3, r7
1a003226:	d907      	bls.n	1a003238 <__divdi3+0x11c>
1a003228:	197f      	adds	r7, r7, r5
1a00322a:	f108 31ff 	add.w	r1, r8, #4294967295
1a00322e:	d202      	bcs.n	1a003236 <__divdi3+0x11a>
1a003230:	42bb      	cmp	r3, r7
1a003232:	f200 80bd 	bhi.w	1a0033b0 <__divdi3+0x294>
1a003236:	4688      	mov	r8, r1
1a003238:	1aff      	subs	r7, r7, r3
1a00323a:	b2a4      	uxth	r4, r4
1a00323c:	fbb7 f3fe 	udiv	r3, r7, lr
1a003240:	fb0e 7713 	mls	r7, lr, r3, r7
1a003244:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a003248:	fb0c fc03 	mul.w	ip, ip, r3
1a00324c:	45bc      	cmp	ip, r7
1a00324e:	d907      	bls.n	1a003260 <__divdi3+0x144>
1a003250:	197f      	adds	r7, r7, r5
1a003252:	f103 31ff 	add.w	r1, r3, #4294967295
1a003256:	d202      	bcs.n	1a00325e <__divdi3+0x142>
1a003258:	45bc      	cmp	ip, r7
1a00325a:	f200 80a7 	bhi.w	1a0033ac <__divdi3+0x290>
1a00325e:	460b      	mov	r3, r1
1a003260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003264:	e7ad      	b.n	1a0031c2 <__divdi3+0xa6>
1a003266:	4252      	negs	r2, r2
1a003268:	ea6f 0606 	mvn.w	r6, r6
1a00326c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a003270:	e75d      	b.n	1a00312e <__divdi3+0x12>
1a003272:	4240      	negs	r0, r0
1a003274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a003278:	f04f 36ff 	mov.w	r6, #4294967295
1a00327c:	e754      	b.n	1a003128 <__divdi3+0xc>
1a00327e:	f1c0 0220 	rsb	r2, r0, #32
1a003282:	fa24 f102 	lsr.w	r1, r4, r2
1a003286:	fa07 f300 	lsl.w	r3, r7, r0
1a00328a:	4085      	lsls	r5, r0
1a00328c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003290:	40d7      	lsrs	r7, r2
1a003292:	4319      	orrs	r1, r3
1a003294:	fbb7 f2fe 	udiv	r2, r7, lr
1a003298:	0c0b      	lsrs	r3, r1, #16
1a00329a:	fb0e 7712 	mls	r7, lr, r2, r7
1a00329e:	fa1f fc85 	uxth.w	ip, r5
1a0032a2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
1a0032a6:	fb0c f702 	mul.w	r7, ip, r2
1a0032aa:	429f      	cmp	r7, r3
1a0032ac:	fa04 f400 	lsl.w	r4, r4, r0
1a0032b0:	d907      	bls.n	1a0032c2 <__divdi3+0x1a6>
1a0032b2:	195b      	adds	r3, r3, r5
1a0032b4:	f102 30ff 	add.w	r0, r2, #4294967295
1a0032b8:	d274      	bcs.n	1a0033a4 <__divdi3+0x288>
1a0032ba:	429f      	cmp	r7, r3
1a0032bc:	d972      	bls.n	1a0033a4 <__divdi3+0x288>
1a0032be:	3a02      	subs	r2, #2
1a0032c0:	442b      	add	r3, r5
1a0032c2:	1bdf      	subs	r7, r3, r7
1a0032c4:	b289      	uxth	r1, r1
1a0032c6:	fbb7 f8fe 	udiv	r8, r7, lr
1a0032ca:	fb0e 7318 	mls	r3, lr, r8, r7
1a0032ce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a0032d2:	fb0c f708 	mul.w	r7, ip, r8
1a0032d6:	429f      	cmp	r7, r3
1a0032d8:	d908      	bls.n	1a0032ec <__divdi3+0x1d0>
1a0032da:	195b      	adds	r3, r3, r5
1a0032dc:	f108 31ff 	add.w	r1, r8, #4294967295
1a0032e0:	d25c      	bcs.n	1a00339c <__divdi3+0x280>
1a0032e2:	429f      	cmp	r7, r3
1a0032e4:	d95a      	bls.n	1a00339c <__divdi3+0x280>
1a0032e6:	f1a8 0802 	sub.w	r8, r8, #2
1a0032ea:	442b      	add	r3, r5
1a0032ec:	1bd8      	subs	r0, r3, r7
1a0032ee:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
1a0032f2:	e78e      	b.n	1a003212 <__divdi3+0xf6>
1a0032f4:	f1c2 0320 	rsb	r3, r2, #32
1a0032f8:	fa2c f103 	lsr.w	r1, ip, r3
1a0032fc:	fa0e fe02 	lsl.w	lr, lr, r2
1a003300:	fa20 f703 	lsr.w	r7, r0, r3
1a003304:	ea41 0e0e 	orr.w	lr, r1, lr
1a003308:	fa08 f002 	lsl.w	r0, r8, r2
1a00330c:	fa28 f103 	lsr.w	r1, r8, r3
1a003310:	ea4f 451e 	mov.w	r5, lr, lsr #16
1a003314:	4338      	orrs	r0, r7
1a003316:	fbb1 f8f5 	udiv	r8, r1, r5
1a00331a:	0c03      	lsrs	r3, r0, #16
1a00331c:	fb05 1118 	mls	r1, r5, r8, r1
1a003320:	fa1f f78e 	uxth.w	r7, lr
1a003324:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a003328:	fb07 f308 	mul.w	r3, r7, r8
1a00332c:	428b      	cmp	r3, r1
1a00332e:	fa0c fc02 	lsl.w	ip, ip, r2
1a003332:	d909      	bls.n	1a003348 <__divdi3+0x22c>
1a003334:	eb11 010e 	adds.w	r1, r1, lr
1a003338:	f108 39ff 	add.w	r9, r8, #4294967295
1a00333c:	d230      	bcs.n	1a0033a0 <__divdi3+0x284>
1a00333e:	428b      	cmp	r3, r1
1a003340:	d92e      	bls.n	1a0033a0 <__divdi3+0x284>
1a003342:	f1a8 0802 	sub.w	r8, r8, #2
1a003346:	4471      	add	r1, lr
1a003348:	1ac9      	subs	r1, r1, r3
1a00334a:	b280      	uxth	r0, r0
1a00334c:	fbb1 f3f5 	udiv	r3, r1, r5
1a003350:	fb05 1113 	mls	r1, r5, r3, r1
1a003354:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a003358:	fb07 f703 	mul.w	r7, r7, r3
1a00335c:	428f      	cmp	r7, r1
1a00335e:	d908      	bls.n	1a003372 <__divdi3+0x256>
1a003360:	eb11 010e 	adds.w	r1, r1, lr
1a003364:	f103 30ff 	add.w	r0, r3, #4294967295
1a003368:	d216      	bcs.n	1a003398 <__divdi3+0x27c>
1a00336a:	428f      	cmp	r7, r1
1a00336c:	d914      	bls.n	1a003398 <__divdi3+0x27c>
1a00336e:	3b02      	subs	r3, #2
1a003370:	4471      	add	r1, lr
1a003372:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003376:	1bc9      	subs	r1, r1, r7
1a003378:	fba3 890c 	umull	r8, r9, r3, ip
1a00337c:	4549      	cmp	r1, r9
1a00337e:	d309      	bcc.n	1a003394 <__divdi3+0x278>
1a003380:	d005      	beq.n	1a00338e <__divdi3+0x272>
1a003382:	2200      	movs	r2, #0
1a003384:	e71d      	b.n	1a0031c2 <__divdi3+0xa6>
1a003386:	4696      	mov	lr, r2
1a003388:	e6fe      	b.n	1a003188 <__divdi3+0x6c>
1a00338a:	4613      	mov	r3, r2
1a00338c:	e711      	b.n	1a0031b2 <__divdi3+0x96>
1a00338e:	4094      	lsls	r4, r2
1a003390:	4544      	cmp	r4, r8
1a003392:	d2f6      	bcs.n	1a003382 <__divdi3+0x266>
1a003394:	3b01      	subs	r3, #1
1a003396:	e7f4      	b.n	1a003382 <__divdi3+0x266>
1a003398:	4603      	mov	r3, r0
1a00339a:	e7ea      	b.n	1a003372 <__divdi3+0x256>
1a00339c:	4688      	mov	r8, r1
1a00339e:	e7a5      	b.n	1a0032ec <__divdi3+0x1d0>
1a0033a0:	46c8      	mov	r8, r9
1a0033a2:	e7d1      	b.n	1a003348 <__divdi3+0x22c>
1a0033a4:	4602      	mov	r2, r0
1a0033a6:	e78c      	b.n	1a0032c2 <__divdi3+0x1a6>
1a0033a8:	4613      	mov	r3, r2
1a0033aa:	e70a      	b.n	1a0031c2 <__divdi3+0xa6>
1a0033ac:	3b02      	subs	r3, #2
1a0033ae:	e757      	b.n	1a003260 <__divdi3+0x144>
1a0033b0:	f1a8 0802 	sub.w	r8, r8, #2
1a0033b4:	442f      	add	r7, r5
1a0033b6:	e73f      	b.n	1a003238 <__divdi3+0x11c>

1a0033b8 <__udivdi3>:
1a0033b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0033bc:	2b00      	cmp	r3, #0
1a0033be:	d144      	bne.n	1a00344a <__udivdi3+0x92>
1a0033c0:	428a      	cmp	r2, r1
1a0033c2:	4615      	mov	r5, r2
1a0033c4:	4604      	mov	r4, r0
1a0033c6:	d94f      	bls.n	1a003468 <__udivdi3+0xb0>
1a0033c8:	fab2 f782 	clz	r7, r2
1a0033cc:	460e      	mov	r6, r1
1a0033ce:	b14f      	cbz	r7, 1a0033e4 <__udivdi3+0x2c>
1a0033d0:	f1c7 0320 	rsb	r3, r7, #32
1a0033d4:	40b9      	lsls	r1, r7
1a0033d6:	fa20 f603 	lsr.w	r6, r0, r3
1a0033da:	fa02 f507 	lsl.w	r5, r2, r7
1a0033de:	430e      	orrs	r6, r1
1a0033e0:	fa00 f407 	lsl.w	r4, r0, r7
1a0033e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0033e8:	0c23      	lsrs	r3, r4, #16
1a0033ea:	fbb6 f0fe 	udiv	r0, r6, lr
1a0033ee:	b2af      	uxth	r7, r5
1a0033f0:	fb0e 6110 	mls	r1, lr, r0, r6
1a0033f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0033f8:	fb07 f100 	mul.w	r1, r7, r0
1a0033fc:	4299      	cmp	r1, r3
1a0033fe:	d909      	bls.n	1a003414 <__udivdi3+0x5c>
1a003400:	195b      	adds	r3, r3, r5
1a003402:	f100 32ff 	add.w	r2, r0, #4294967295
1a003406:	f080 80ec 	bcs.w	1a0035e2 <__udivdi3+0x22a>
1a00340a:	4299      	cmp	r1, r3
1a00340c:	f240 80e9 	bls.w	1a0035e2 <__udivdi3+0x22a>
1a003410:	3802      	subs	r0, #2
1a003412:	442b      	add	r3, r5
1a003414:	1a5a      	subs	r2, r3, r1
1a003416:	b2a4      	uxth	r4, r4
1a003418:	fbb2 f3fe 	udiv	r3, r2, lr
1a00341c:	fb0e 2213 	mls	r2, lr, r3, r2
1a003420:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
1a003424:	fb07 f703 	mul.w	r7, r7, r3
1a003428:	4297      	cmp	r7, r2
1a00342a:	d908      	bls.n	1a00343e <__udivdi3+0x86>
1a00342c:	1952      	adds	r2, r2, r5
1a00342e:	f103 31ff 	add.w	r1, r3, #4294967295
1a003432:	f080 80d8 	bcs.w	1a0035e6 <__udivdi3+0x22e>
1a003436:	4297      	cmp	r7, r2
1a003438:	f240 80d5 	bls.w	1a0035e6 <__udivdi3+0x22e>
1a00343c:	3b02      	subs	r3, #2
1a00343e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a003442:	2600      	movs	r6, #0
1a003444:	4631      	mov	r1, r6
1a003446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00344a:	428b      	cmp	r3, r1
1a00344c:	d847      	bhi.n	1a0034de <__udivdi3+0x126>
1a00344e:	fab3 f683 	clz	r6, r3
1a003452:	2e00      	cmp	r6, #0
1a003454:	d148      	bne.n	1a0034e8 <__udivdi3+0x130>
1a003456:	428b      	cmp	r3, r1
1a003458:	d302      	bcc.n	1a003460 <__udivdi3+0xa8>
1a00345a:	4282      	cmp	r2, r0
1a00345c:	f200 80cd 	bhi.w	1a0035fa <__udivdi3+0x242>
1a003460:	2001      	movs	r0, #1
1a003462:	4631      	mov	r1, r6
1a003464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003468:	b912      	cbnz	r2, 1a003470 <__udivdi3+0xb8>
1a00346a:	2501      	movs	r5, #1
1a00346c:	fbb5 f5f2 	udiv	r5, r5, r2
1a003470:	fab5 f885 	clz	r8, r5
1a003474:	f1b8 0f00 	cmp.w	r8, #0
1a003478:	d177      	bne.n	1a00356a <__udivdi3+0x1b2>
1a00347a:	1b4a      	subs	r2, r1, r5
1a00347c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003480:	b2af      	uxth	r7, r5
1a003482:	2601      	movs	r6, #1
1a003484:	fbb2 f0fe 	udiv	r0, r2, lr
1a003488:	0c23      	lsrs	r3, r4, #16
1a00348a:	fb0e 2110 	mls	r1, lr, r0, r2
1a00348e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a003492:	fb07 f300 	mul.w	r3, r7, r0
1a003496:	428b      	cmp	r3, r1
1a003498:	d907      	bls.n	1a0034aa <__udivdi3+0xf2>
1a00349a:	1949      	adds	r1, r1, r5
1a00349c:	f100 32ff 	add.w	r2, r0, #4294967295
1a0034a0:	d202      	bcs.n	1a0034a8 <__udivdi3+0xf0>
1a0034a2:	428b      	cmp	r3, r1
1a0034a4:	f200 80ba 	bhi.w	1a00361c <__udivdi3+0x264>
1a0034a8:	4610      	mov	r0, r2
1a0034aa:	1ac9      	subs	r1, r1, r3
1a0034ac:	b2a4      	uxth	r4, r4
1a0034ae:	fbb1 f3fe 	udiv	r3, r1, lr
1a0034b2:	fb0e 1113 	mls	r1, lr, r3, r1
1a0034b6:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
1a0034ba:	fb07 f703 	mul.w	r7, r7, r3
1a0034be:	42a7      	cmp	r7, r4
1a0034c0:	d908      	bls.n	1a0034d4 <__udivdi3+0x11c>
1a0034c2:	1964      	adds	r4, r4, r5
1a0034c4:	f103 32ff 	add.w	r2, r3, #4294967295
1a0034c8:	f080 808f 	bcs.w	1a0035ea <__udivdi3+0x232>
1a0034cc:	42a7      	cmp	r7, r4
1a0034ce:	f240 808c 	bls.w	1a0035ea <__udivdi3+0x232>
1a0034d2:	3b02      	subs	r3, #2
1a0034d4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a0034d8:	4631      	mov	r1, r6
1a0034da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0034de:	2600      	movs	r6, #0
1a0034e0:	4630      	mov	r0, r6
1a0034e2:	4631      	mov	r1, r6
1a0034e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0034e8:	f1c6 0420 	rsb	r4, r6, #32
1a0034ec:	fa22 f504 	lsr.w	r5, r2, r4
1a0034f0:	40b3      	lsls	r3, r6
1a0034f2:	432b      	orrs	r3, r5
1a0034f4:	fa20 fc04 	lsr.w	ip, r0, r4
1a0034f8:	fa01 f706 	lsl.w	r7, r1, r6
1a0034fc:	fa21 f504 	lsr.w	r5, r1, r4
1a003500:	ea4f 4e13 	mov.w	lr, r3, lsr #16
1a003504:	ea4c 0707 	orr.w	r7, ip, r7
1a003508:	fbb5 f8fe 	udiv	r8, r5, lr
1a00350c:	0c39      	lsrs	r1, r7, #16
1a00350e:	fb0e 5518 	mls	r5, lr, r8, r5
1a003512:	fa1f fc83 	uxth.w	ip, r3
1a003516:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
1a00351a:	fb0c f108 	mul.w	r1, ip, r8
1a00351e:	42a9      	cmp	r1, r5
1a003520:	fa02 f206 	lsl.w	r2, r2, r6
1a003524:	d904      	bls.n	1a003530 <__udivdi3+0x178>
1a003526:	18ed      	adds	r5, r5, r3
1a003528:	f108 34ff 	add.w	r4, r8, #4294967295
1a00352c:	d367      	bcc.n	1a0035fe <__udivdi3+0x246>
1a00352e:	46a0      	mov	r8, r4
1a003530:	1a6d      	subs	r5, r5, r1
1a003532:	b2bf      	uxth	r7, r7
1a003534:	fbb5 f4fe 	udiv	r4, r5, lr
1a003538:	fb0e 5514 	mls	r5, lr, r4, r5
1a00353c:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
1a003540:	fb0c fc04 	mul.w	ip, ip, r4
1a003544:	458c      	cmp	ip, r1
1a003546:	d904      	bls.n	1a003552 <__udivdi3+0x19a>
1a003548:	18c9      	adds	r1, r1, r3
1a00354a:	f104 35ff 	add.w	r5, r4, #4294967295
1a00354e:	d35c      	bcc.n	1a00360a <__udivdi3+0x252>
1a003550:	462c      	mov	r4, r5
1a003552:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
1a003556:	ebcc 0101 	rsb	r1, ip, r1
1a00355a:	fba4 2302 	umull	r2, r3, r4, r2
1a00355e:	4299      	cmp	r1, r3
1a003560:	d348      	bcc.n	1a0035f4 <__udivdi3+0x23c>
1a003562:	d044      	beq.n	1a0035ee <__udivdi3+0x236>
1a003564:	4620      	mov	r0, r4
1a003566:	2600      	movs	r6, #0
1a003568:	e76c      	b.n	1a003444 <__udivdi3+0x8c>
1a00356a:	f1c8 0420 	rsb	r4, r8, #32
1a00356e:	fa01 f308 	lsl.w	r3, r1, r8
1a003572:	fa05 f508 	lsl.w	r5, r5, r8
1a003576:	fa20 f704 	lsr.w	r7, r0, r4
1a00357a:	40e1      	lsrs	r1, r4
1a00357c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003580:	431f      	orrs	r7, r3
1a003582:	fbb1 f6fe 	udiv	r6, r1, lr
1a003586:	0c3a      	lsrs	r2, r7, #16
1a003588:	fb0e 1116 	mls	r1, lr, r6, r1
1a00358c:	fa1f fc85 	uxth.w	ip, r5
1a003590:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
1a003594:	fb0c f206 	mul.w	r2, ip, r6
1a003598:	429a      	cmp	r2, r3
1a00359a:	fa00 f408 	lsl.w	r4, r0, r8
1a00359e:	d907      	bls.n	1a0035b0 <__udivdi3+0x1f8>
1a0035a0:	195b      	adds	r3, r3, r5
1a0035a2:	f106 31ff 	add.w	r1, r6, #4294967295
1a0035a6:	d237      	bcs.n	1a003618 <__udivdi3+0x260>
1a0035a8:	429a      	cmp	r2, r3
1a0035aa:	d935      	bls.n	1a003618 <__udivdi3+0x260>
1a0035ac:	3e02      	subs	r6, #2
1a0035ae:	442b      	add	r3, r5
1a0035b0:	1a9b      	subs	r3, r3, r2
1a0035b2:	b2bf      	uxth	r7, r7
1a0035b4:	fbb3 f0fe 	udiv	r0, r3, lr
1a0035b8:	fb0e 3310 	mls	r3, lr, r0, r3
1a0035bc:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
1a0035c0:	fb0c f100 	mul.w	r1, ip, r0
1a0035c4:	4299      	cmp	r1, r3
1a0035c6:	d907      	bls.n	1a0035d8 <__udivdi3+0x220>
1a0035c8:	195b      	adds	r3, r3, r5
1a0035ca:	f100 32ff 	add.w	r2, r0, #4294967295
1a0035ce:	d221      	bcs.n	1a003614 <__udivdi3+0x25c>
1a0035d0:	4299      	cmp	r1, r3
1a0035d2:	d91f      	bls.n	1a003614 <__udivdi3+0x25c>
1a0035d4:	3802      	subs	r0, #2
1a0035d6:	442b      	add	r3, r5
1a0035d8:	1a5a      	subs	r2, r3, r1
1a0035da:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
1a0035de:	4667      	mov	r7, ip
1a0035e0:	e750      	b.n	1a003484 <__udivdi3+0xcc>
1a0035e2:	4610      	mov	r0, r2
1a0035e4:	e716      	b.n	1a003414 <__udivdi3+0x5c>
1a0035e6:	460b      	mov	r3, r1
1a0035e8:	e729      	b.n	1a00343e <__udivdi3+0x86>
1a0035ea:	4613      	mov	r3, r2
1a0035ec:	e772      	b.n	1a0034d4 <__udivdi3+0x11c>
1a0035ee:	40b0      	lsls	r0, r6
1a0035f0:	4290      	cmp	r0, r2
1a0035f2:	d2b7      	bcs.n	1a003564 <__udivdi3+0x1ac>
1a0035f4:	1e60      	subs	r0, r4, #1
1a0035f6:	2600      	movs	r6, #0
1a0035f8:	e724      	b.n	1a003444 <__udivdi3+0x8c>
1a0035fa:	4630      	mov	r0, r6
1a0035fc:	e722      	b.n	1a003444 <__udivdi3+0x8c>
1a0035fe:	42a9      	cmp	r1, r5
1a003600:	d995      	bls.n	1a00352e <__udivdi3+0x176>
1a003602:	f1a8 0802 	sub.w	r8, r8, #2
1a003606:	441d      	add	r5, r3
1a003608:	e792      	b.n	1a003530 <__udivdi3+0x178>
1a00360a:	458c      	cmp	ip, r1
1a00360c:	d9a0      	bls.n	1a003550 <__udivdi3+0x198>
1a00360e:	3c02      	subs	r4, #2
1a003610:	4419      	add	r1, r3
1a003612:	e79e      	b.n	1a003552 <__udivdi3+0x19a>
1a003614:	4610      	mov	r0, r2
1a003616:	e7df      	b.n	1a0035d8 <__udivdi3+0x220>
1a003618:	460e      	mov	r6, r1
1a00361a:	e7c9      	b.n	1a0035b0 <__udivdi3+0x1f8>
1a00361c:	3802      	subs	r0, #2
1a00361e:	4429      	add	r1, r5
1a003620:	e743      	b.n	1a0034aa <__udivdi3+0xf2>
1a003622:	bf00      	nop

1a003624 <__libc_init_array>:
1a003624:	b570      	push	{r4, r5, r6, lr}
1a003626:	4e0f      	ldr	r6, [pc, #60]	; (1a003664 <__libc_init_array+0x40>)
1a003628:	4d0f      	ldr	r5, [pc, #60]	; (1a003668 <__libc_init_array+0x44>)
1a00362a:	1b76      	subs	r6, r6, r5
1a00362c:	10b6      	asrs	r6, r6, #2
1a00362e:	bf18      	it	ne
1a003630:	2400      	movne	r4, #0
1a003632:	d005      	beq.n	1a003640 <__libc_init_array+0x1c>
1a003634:	3401      	adds	r4, #1
1a003636:	f855 3b04 	ldr.w	r3, [r5], #4
1a00363a:	4798      	blx	r3
1a00363c:	42a6      	cmp	r6, r4
1a00363e:	d1f9      	bne.n	1a003634 <__libc_init_array+0x10>
1a003640:	4e0a      	ldr	r6, [pc, #40]	; (1a00366c <__libc_init_array+0x48>)
1a003642:	4d0b      	ldr	r5, [pc, #44]	; (1a003670 <__libc_init_array+0x4c>)
1a003644:	1b76      	subs	r6, r6, r5
1a003646:	f7ff f903 	bl	1a002850 <_init>
1a00364a:	10b6      	asrs	r6, r6, #2
1a00364c:	bf18      	it	ne
1a00364e:	2400      	movne	r4, #0
1a003650:	d006      	beq.n	1a003660 <__libc_init_array+0x3c>
1a003652:	3401      	adds	r4, #1
1a003654:	f855 3b04 	ldr.w	r3, [r5], #4
1a003658:	4798      	blx	r3
1a00365a:	42a6      	cmp	r6, r4
1a00365c:	d1f9      	bne.n	1a003652 <__libc_init_array+0x2e>
1a00365e:	bd70      	pop	{r4, r5, r6, pc}
1a003660:	bd70      	pop	{r4, r5, r6, pc}
1a003662:	bf00      	nop
1a003664:	1a008420 	.word	0x1a008420
1a003668:	1a008420 	.word	0x1a008420
1a00366c:	1a008420 	.word	0x1a008420
1a003670:	1a008420 	.word	0x1a008420

1a003674 <memcpy>:
1a003674:	4684      	mov	ip, r0
1a003676:	ea41 0300 	orr.w	r3, r1, r0
1a00367a:	f013 0303 	ands.w	r3, r3, #3
1a00367e:	d16d      	bne.n	1a00375c <memcpy+0xe8>
1a003680:	3a40      	subs	r2, #64	; 0x40
1a003682:	d341      	bcc.n	1a003708 <memcpy+0x94>
1a003684:	f851 3b04 	ldr.w	r3, [r1], #4
1a003688:	f840 3b04 	str.w	r3, [r0], #4
1a00368c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003690:	f840 3b04 	str.w	r3, [r0], #4
1a003694:	f851 3b04 	ldr.w	r3, [r1], #4
1a003698:	f840 3b04 	str.w	r3, [r0], #4
1a00369c:	f851 3b04 	ldr.w	r3, [r1], #4
1a0036a0:	f840 3b04 	str.w	r3, [r0], #4
1a0036a4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0036a8:	f840 3b04 	str.w	r3, [r0], #4
1a0036ac:	f851 3b04 	ldr.w	r3, [r1], #4
1a0036b0:	f840 3b04 	str.w	r3, [r0], #4
1a0036b4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0036b8:	f840 3b04 	str.w	r3, [r0], #4
1a0036bc:	f851 3b04 	ldr.w	r3, [r1], #4
1a0036c0:	f840 3b04 	str.w	r3, [r0], #4
1a0036c4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0036c8:	f840 3b04 	str.w	r3, [r0], #4
1a0036cc:	f851 3b04 	ldr.w	r3, [r1], #4
1a0036d0:	f840 3b04 	str.w	r3, [r0], #4
1a0036d4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0036d8:	f840 3b04 	str.w	r3, [r0], #4
1a0036dc:	f851 3b04 	ldr.w	r3, [r1], #4
1a0036e0:	f840 3b04 	str.w	r3, [r0], #4
1a0036e4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0036e8:	f840 3b04 	str.w	r3, [r0], #4
1a0036ec:	f851 3b04 	ldr.w	r3, [r1], #4
1a0036f0:	f840 3b04 	str.w	r3, [r0], #4
1a0036f4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0036f8:	f840 3b04 	str.w	r3, [r0], #4
1a0036fc:	f851 3b04 	ldr.w	r3, [r1], #4
1a003700:	f840 3b04 	str.w	r3, [r0], #4
1a003704:	3a40      	subs	r2, #64	; 0x40
1a003706:	d2bd      	bcs.n	1a003684 <memcpy+0x10>
1a003708:	3230      	adds	r2, #48	; 0x30
1a00370a:	d311      	bcc.n	1a003730 <memcpy+0xbc>
1a00370c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003710:	f840 3b04 	str.w	r3, [r0], #4
1a003714:	f851 3b04 	ldr.w	r3, [r1], #4
1a003718:	f840 3b04 	str.w	r3, [r0], #4
1a00371c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003720:	f840 3b04 	str.w	r3, [r0], #4
1a003724:	f851 3b04 	ldr.w	r3, [r1], #4
1a003728:	f840 3b04 	str.w	r3, [r0], #4
1a00372c:	3a10      	subs	r2, #16
1a00372e:	d2ed      	bcs.n	1a00370c <memcpy+0x98>
1a003730:	320c      	adds	r2, #12
1a003732:	d305      	bcc.n	1a003740 <memcpy+0xcc>
1a003734:	f851 3b04 	ldr.w	r3, [r1], #4
1a003738:	f840 3b04 	str.w	r3, [r0], #4
1a00373c:	3a04      	subs	r2, #4
1a00373e:	d2f9      	bcs.n	1a003734 <memcpy+0xc0>
1a003740:	3204      	adds	r2, #4
1a003742:	d008      	beq.n	1a003756 <memcpy+0xe2>
1a003744:	07d2      	lsls	r2, r2, #31
1a003746:	bf1c      	itt	ne
1a003748:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a00374c:	f800 3b01 	strbne.w	r3, [r0], #1
1a003750:	d301      	bcc.n	1a003756 <memcpy+0xe2>
1a003752:	880b      	ldrh	r3, [r1, #0]
1a003754:	8003      	strh	r3, [r0, #0]
1a003756:	4660      	mov	r0, ip
1a003758:	4770      	bx	lr
1a00375a:	bf00      	nop
1a00375c:	2a08      	cmp	r2, #8
1a00375e:	d313      	bcc.n	1a003788 <memcpy+0x114>
1a003760:	078b      	lsls	r3, r1, #30
1a003762:	d08d      	beq.n	1a003680 <memcpy+0xc>
1a003764:	f010 0303 	ands.w	r3, r0, #3
1a003768:	d08a      	beq.n	1a003680 <memcpy+0xc>
1a00376a:	f1c3 0304 	rsb	r3, r3, #4
1a00376e:	1ad2      	subs	r2, r2, r3
1a003770:	07db      	lsls	r3, r3, #31
1a003772:	bf1c      	itt	ne
1a003774:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a003778:	f800 3b01 	strbne.w	r3, [r0], #1
1a00377c:	d380      	bcc.n	1a003680 <memcpy+0xc>
1a00377e:	f831 3b02 	ldrh.w	r3, [r1], #2
1a003782:	f820 3b02 	strh.w	r3, [r0], #2
1a003786:	e77b      	b.n	1a003680 <memcpy+0xc>
1a003788:	3a04      	subs	r2, #4
1a00378a:	d3d9      	bcc.n	1a003740 <memcpy+0xcc>
1a00378c:	3a01      	subs	r2, #1
1a00378e:	f811 3b01 	ldrb.w	r3, [r1], #1
1a003792:	f800 3b01 	strb.w	r3, [r0], #1
1a003796:	d2f9      	bcs.n	1a00378c <memcpy+0x118>
1a003798:	780b      	ldrb	r3, [r1, #0]
1a00379a:	7003      	strb	r3, [r0, #0]
1a00379c:	784b      	ldrb	r3, [r1, #1]
1a00379e:	7043      	strb	r3, [r0, #1]
1a0037a0:	788b      	ldrb	r3, [r1, #2]
1a0037a2:	7083      	strb	r3, [r0, #2]
1a0037a4:	4660      	mov	r0, ip
1a0037a6:	4770      	bx	lr

1a0037a8 <memset>:
1a0037a8:	b470      	push	{r4, r5, r6}
1a0037aa:	0784      	lsls	r4, r0, #30
1a0037ac:	d046      	beq.n	1a00383c <memset+0x94>
1a0037ae:	1e54      	subs	r4, r2, #1
1a0037b0:	2a00      	cmp	r2, #0
1a0037b2:	d041      	beq.n	1a003838 <memset+0x90>
1a0037b4:	b2cd      	uxtb	r5, r1
1a0037b6:	4603      	mov	r3, r0
1a0037b8:	e002      	b.n	1a0037c0 <memset+0x18>
1a0037ba:	1e62      	subs	r2, r4, #1
1a0037bc:	b3e4      	cbz	r4, 1a003838 <memset+0x90>
1a0037be:	4614      	mov	r4, r2
1a0037c0:	f803 5b01 	strb.w	r5, [r3], #1
1a0037c4:	079a      	lsls	r2, r3, #30
1a0037c6:	d1f8      	bne.n	1a0037ba <memset+0x12>
1a0037c8:	2c03      	cmp	r4, #3
1a0037ca:	d92e      	bls.n	1a00382a <memset+0x82>
1a0037cc:	b2cd      	uxtb	r5, r1
1a0037ce:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a0037d2:	2c0f      	cmp	r4, #15
1a0037d4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a0037d8:	d919      	bls.n	1a00380e <memset+0x66>
1a0037da:	f103 0210 	add.w	r2, r3, #16
1a0037de:	4626      	mov	r6, r4
1a0037e0:	3e10      	subs	r6, #16
1a0037e2:	2e0f      	cmp	r6, #15
1a0037e4:	f842 5c10 	str.w	r5, [r2, #-16]
1a0037e8:	f842 5c0c 	str.w	r5, [r2, #-12]
1a0037ec:	f842 5c08 	str.w	r5, [r2, #-8]
1a0037f0:	f842 5c04 	str.w	r5, [r2, #-4]
1a0037f4:	f102 0210 	add.w	r2, r2, #16
1a0037f8:	d8f2      	bhi.n	1a0037e0 <memset+0x38>
1a0037fa:	f1a4 0210 	sub.w	r2, r4, #16
1a0037fe:	f022 020f 	bic.w	r2, r2, #15
1a003802:	f004 040f 	and.w	r4, r4, #15
1a003806:	3210      	adds	r2, #16
1a003808:	2c03      	cmp	r4, #3
1a00380a:	4413      	add	r3, r2
1a00380c:	d90d      	bls.n	1a00382a <memset+0x82>
1a00380e:	461e      	mov	r6, r3
1a003810:	4622      	mov	r2, r4
1a003812:	3a04      	subs	r2, #4
1a003814:	2a03      	cmp	r2, #3
1a003816:	f846 5b04 	str.w	r5, [r6], #4
1a00381a:	d8fa      	bhi.n	1a003812 <memset+0x6a>
1a00381c:	1f22      	subs	r2, r4, #4
1a00381e:	f022 0203 	bic.w	r2, r2, #3
1a003822:	3204      	adds	r2, #4
1a003824:	4413      	add	r3, r2
1a003826:	f004 0403 	and.w	r4, r4, #3
1a00382a:	b12c      	cbz	r4, 1a003838 <memset+0x90>
1a00382c:	b2c9      	uxtb	r1, r1
1a00382e:	441c      	add	r4, r3
1a003830:	f803 1b01 	strb.w	r1, [r3], #1
1a003834:	42a3      	cmp	r3, r4
1a003836:	d1fb      	bne.n	1a003830 <memset+0x88>
1a003838:	bc70      	pop	{r4, r5, r6}
1a00383a:	4770      	bx	lr
1a00383c:	4614      	mov	r4, r2
1a00383e:	4603      	mov	r3, r0
1a003840:	e7c2      	b.n	1a0037c8 <memset+0x20>
1a003842:	bf00      	nop

1a003844 <printf>:
1a003844:	b40f      	push	{r0, r1, r2, r3}
1a003846:	b500      	push	{lr}
1a003848:	4907      	ldr	r1, [pc, #28]	; (1a003868 <printf+0x24>)
1a00384a:	b083      	sub	sp, #12
1a00384c:	ab04      	add	r3, sp, #16
1a00384e:	6808      	ldr	r0, [r1, #0]
1a003850:	f853 2b04 	ldr.w	r2, [r3], #4
1a003854:	6881      	ldr	r1, [r0, #8]
1a003856:	9301      	str	r3, [sp, #4]
1a003858:	f000 f86e 	bl	1a003938 <_vfprintf_r>
1a00385c:	b003      	add	sp, #12
1a00385e:	f85d eb04 	ldr.w	lr, [sp], #4
1a003862:	b004      	add	sp, #16
1a003864:	4770      	bx	lr
1a003866:	bf00      	nop
1a003868:	100004f8 	.word	0x100004f8

1a00386c <_puts_r>:
1a00386c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00386e:	4604      	mov	r4, r0
1a003870:	b089      	sub	sp, #36	; 0x24
1a003872:	4608      	mov	r0, r1
1a003874:	460d      	mov	r5, r1
1a003876:	f000 f82f 	bl	1a0038d8 <strlen>
1a00387a:	68a3      	ldr	r3, [r4, #8]
1a00387c:	4f11      	ldr	r7, [pc, #68]	; (1a0038c4 <_puts_r+0x58>)
1a00387e:	899a      	ldrh	r2, [r3, #12]
1a003880:	9504      	str	r5, [sp, #16]
1a003882:	2102      	movs	r1, #2
1a003884:	f100 0e01 	add.w	lr, r0, #1
1a003888:	2601      	movs	r6, #1
1a00388a:	ad04      	add	r5, sp, #16
1a00388c:	9102      	str	r1, [sp, #8]
1a00388e:	0491      	lsls	r1, r2, #18
1a003890:	9005      	str	r0, [sp, #20]
1a003892:	f8cd e00c 	str.w	lr, [sp, #12]
1a003896:	9706      	str	r7, [sp, #24]
1a003898:	9607      	str	r6, [sp, #28]
1a00389a:	9501      	str	r5, [sp, #4]
1a00389c:	d406      	bmi.n	1a0038ac <_puts_r+0x40>
1a00389e:	6e59      	ldr	r1, [r3, #100]	; 0x64
1a0038a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a0038a4:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a0038a8:	819a      	strh	r2, [r3, #12]
1a0038aa:	6659      	str	r1, [r3, #100]	; 0x64
1a0038ac:	4620      	mov	r0, r4
1a0038ae:	4619      	mov	r1, r3
1a0038b0:	aa01      	add	r2, sp, #4
1a0038b2:	f002 fd4b 	bl	1a00634c <__sfvwrite_r>
1a0038b6:	2800      	cmp	r0, #0
1a0038b8:	bf14      	ite	ne
1a0038ba:	f04f 30ff 	movne.w	r0, #4294967295
1a0038be:	200a      	moveq	r0, #10
1a0038c0:	b009      	add	sp, #36	; 0x24
1a0038c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0038c4:	1a007f50 	.word	0x1a007f50

1a0038c8 <puts>:
1a0038c8:	4b02      	ldr	r3, [pc, #8]	; (1a0038d4 <puts+0xc>)
1a0038ca:	4601      	mov	r1, r0
1a0038cc:	6818      	ldr	r0, [r3, #0]
1a0038ce:	f7ff bfcd 	b.w	1a00386c <_puts_r>
1a0038d2:	bf00      	nop
1a0038d4:	100004f8 	.word	0x100004f8

1a0038d8 <strlen>:
1a0038d8:	f020 0103 	bic.w	r1, r0, #3
1a0038dc:	f010 0003 	ands.w	r0, r0, #3
1a0038e0:	f1c0 0000 	rsb	r0, r0, #0
1a0038e4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0038e8:	f100 0c04 	add.w	ip, r0, #4
1a0038ec:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
1a0038f0:	f06f 0200 	mvn.w	r2, #0
1a0038f4:	bf1c      	itt	ne
1a0038f6:	fa22 f20c 	lsrne.w	r2, r2, ip
1a0038fa:	4313      	orrne	r3, r2
1a0038fc:	f04f 0c01 	mov.w	ip, #1
1a003900:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
1a003904:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
1a003908:	eba3 020c 	sub.w	r2, r3, ip
1a00390c:	ea22 0203 	bic.w	r2, r2, r3
1a003910:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
1a003914:	bf04      	itt	eq
1a003916:	f851 3b04 	ldreq.w	r3, [r1], #4
1a00391a:	3004      	addeq	r0, #4
1a00391c:	d0f4      	beq.n	1a003908 <strlen+0x30>
1a00391e:	f1c2 0100 	rsb	r1, r2, #0
1a003922:	ea02 0201 	and.w	r2, r2, r1
1a003926:	fab2 f282 	clz	r2, r2
1a00392a:	f1c2 021f 	rsb	r2, r2, #31
1a00392e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
1a003932:	4770      	bx	lr
1a003934:	0000      	movs	r0, r0
	...

1a003938 <_vfprintf_r>:
1a003938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00393c:	b0bd      	sub	sp, #244	; 0xf4
1a00393e:	461c      	mov	r4, r3
1a003940:	4689      	mov	r9, r1
1a003942:	9204      	str	r2, [sp, #16]
1a003944:	4607      	mov	r7, r0
1a003946:	f002 fec1 	bl	1a0066cc <_localeconv_r>
1a00394a:	6803      	ldr	r3, [r0, #0]
1a00394c:	9311      	str	r3, [sp, #68]	; 0x44
1a00394e:	4618      	mov	r0, r3
1a003950:	f7ff ffc2 	bl	1a0038d8 <strlen>
1a003954:	9408      	str	r4, [sp, #32]
1a003956:	9012      	str	r0, [sp, #72]	; 0x48
1a003958:	b11f      	cbz	r7, 1a003962 <_vfprintf_r+0x2a>
1a00395a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a00395c:	2b00      	cmp	r3, #0
1a00395e:	f000 80f3 	beq.w	1a003b48 <_vfprintf_r+0x210>
1a003962:	f8b9 200c 	ldrh.w	r2, [r9, #12]
1a003966:	b293      	uxth	r3, r2
1a003968:	049e      	lsls	r6, r3, #18
1a00396a:	d40a      	bmi.n	1a003982 <_vfprintf_r+0x4a>
1a00396c:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a003970:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
1a003974:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a003978:	f8a9 300c 	strh.w	r3, [r9, #12]
1a00397c:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
1a003980:	b29b      	uxth	r3, r3
1a003982:	071d      	lsls	r5, r3, #28
1a003984:	f140 80aa 	bpl.w	1a003adc <_vfprintf_r+0x1a4>
1a003988:	f8d9 2010 	ldr.w	r2, [r9, #16]
1a00398c:	2a00      	cmp	r2, #0
1a00398e:	f000 80a5 	beq.w	1a003adc <_vfprintf_r+0x1a4>
1a003992:	f003 031a 	and.w	r3, r3, #26
1a003996:	2b0a      	cmp	r3, #10
1a003998:	f000 80ac 	beq.w	1a003af4 <_vfprintf_r+0x1bc>
1a00399c:	ed9f 7b6e 	vldr	d7, [pc, #440]	; 1a003b58 <_vfprintf_r+0x220>
1a0039a0:	2300      	movs	r3, #0
1a0039a2:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
1a0039a6:	930d      	str	r3, [sp, #52]	; 0x34
1a0039a8:	9321      	str	r3, [sp, #132]	; 0x84
1a0039aa:	9320      	str	r3, [sp, #128]	; 0x80
1a0039ac:	9310      	str	r3, [sp, #64]	; 0x40
1a0039ae:	9313      	str	r3, [sp, #76]	; 0x4c
1a0039b0:	9305      	str	r3, [sp, #20]
1a0039b2:	ab2c      	add	r3, sp, #176	; 0xb0
1a0039b4:	931f      	str	r3, [sp, #124]	; 0x7c
1a0039b6:	461c      	mov	r4, r3
1a0039b8:	46b8      	mov	r8, r7
1a0039ba:	9d04      	ldr	r5, [sp, #16]
1a0039bc:	782b      	ldrb	r3, [r5, #0]
1a0039be:	2b00      	cmp	r3, #0
1a0039c0:	f000 80c6 	beq.w	1a003b50 <_vfprintf_r+0x218>
1a0039c4:	2b25      	cmp	r3, #37	; 0x25
1a0039c6:	d102      	bne.n	1a0039ce <_vfprintf_r+0x96>
1a0039c8:	e0c2      	b.n	1a003b50 <_vfprintf_r+0x218>
1a0039ca:	2b25      	cmp	r3, #37	; 0x25
1a0039cc:	d003      	beq.n	1a0039d6 <_vfprintf_r+0x9e>
1a0039ce:	f815 3f01 	ldrb.w	r3, [r5, #1]!
1a0039d2:	2b00      	cmp	r3, #0
1a0039d4:	d1f9      	bne.n	1a0039ca <_vfprintf_r+0x92>
1a0039d6:	9b04      	ldr	r3, [sp, #16]
1a0039d8:	1aee      	subs	r6, r5, r3
1a0039da:	b17e      	cbz	r6, 1a0039fc <_vfprintf_r+0xc4>
1a0039dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a0039de:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a0039e0:	9904      	ldr	r1, [sp, #16]
1a0039e2:	6021      	str	r1, [r4, #0]
1a0039e4:	3301      	adds	r3, #1
1a0039e6:	4432      	add	r2, r6
1a0039e8:	2b07      	cmp	r3, #7
1a0039ea:	6066      	str	r6, [r4, #4]
1a0039ec:	9221      	str	r2, [sp, #132]	; 0x84
1a0039ee:	9320      	str	r3, [sp, #128]	; 0x80
1a0039f0:	f300 8093 	bgt.w	1a003b1a <_vfprintf_r+0x1e2>
1a0039f4:	3408      	adds	r4, #8
1a0039f6:	9b05      	ldr	r3, [sp, #20]
1a0039f8:	4433      	add	r3, r6
1a0039fa:	9305      	str	r3, [sp, #20]
1a0039fc:	782b      	ldrb	r3, [r5, #0]
1a0039fe:	2b00      	cmp	r3, #0
1a003a00:	f000 8093 	beq.w	1a003b2a <_vfprintf_r+0x1f2>
1a003a04:	2300      	movs	r3, #0
1a003a06:	1c69      	adds	r1, r5, #1
1a003a08:	f04f 3aff 	mov.w	sl, #4294967295
1a003a0c:	786d      	ldrb	r5, [r5, #1]
1a003a0e:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
1a003a12:	461a      	mov	r2, r3
1a003a14:	9306      	str	r3, [sp, #24]
1a003a16:	9302      	str	r3, [sp, #8]
1a003a18:	4656      	mov	r6, sl
1a003a1a:	1c4b      	adds	r3, r1, #1
1a003a1c:	f1a5 0120 	sub.w	r1, r5, #32
1a003a20:	2958      	cmp	r1, #88	; 0x58
1a003a22:	f200 83cd 	bhi.w	1a0041c0 <_vfprintf_r+0x888>
1a003a26:	e8df f011 	tbh	[pc, r1, lsl #1]
1a003a2a:	025c      	.short	0x025c
1a003a2c:	03cb03cb 	.word	0x03cb03cb
1a003a30:	03cb0302 	.word	0x03cb0302
1a003a34:	03cb03cb 	.word	0x03cb03cb
1a003a38:	03cb03cb 	.word	0x03cb03cb
1a003a3c:	030903cb 	.word	0x030903cb
1a003a40:	03cb02d2 	.word	0x03cb02d2
1a003a44:	035301f8 	.word	0x035301f8
1a003a48:	02d603cb 	.word	0x02d603cb
1a003a4c:	02dd02dd 	.word	0x02dd02dd
1a003a50:	02dd02dd 	.word	0x02dd02dd
1a003a54:	02dd02dd 	.word	0x02dd02dd
1a003a58:	02dd02dd 	.word	0x02dd02dd
1a003a5c:	03cb02dd 	.word	0x03cb02dd
1a003a60:	03cb03cb 	.word	0x03cb03cb
1a003a64:	03cb03cb 	.word	0x03cb03cb
1a003a68:	03cb03cb 	.word	0x03cb03cb
1a003a6c:	03cb03cb 	.word	0x03cb03cb
1a003a70:	027103cb 	.word	0x027103cb
1a003a74:	03cb0293 	.word	0x03cb0293
1a003a78:	03cb0293 	.word	0x03cb0293
1a003a7c:	03cb03cb 	.word	0x03cb03cb
1a003a80:	02cb03cb 	.word	0x02cb03cb
1a003a84:	03cb03cb 	.word	0x03cb03cb
1a003a88:	03cb036e 	.word	0x03cb036e
1a003a8c:	03cb03cb 	.word	0x03cb03cb
1a003a90:	03cb03cb 	.word	0x03cb03cb
1a003a94:	03cb03b5 	.word	0x03cb03b5
1a003a98:	038b03cb 	.word	0x038b03cb
1a003a9c:	03cb03cb 	.word	0x03cb03cb
1a003aa0:	03cb03cb 	.word	0x03cb03cb
1a003aa4:	03cb03cb 	.word	0x03cb03cb
1a003aa8:	03cb03cb 	.word	0x03cb03cb
1a003aac:	03cb03cb 	.word	0x03cb03cb
1a003ab0:	031703a0 	.word	0x031703a0
1a003ab4:	02930293 	.word	0x02930293
1a003ab8:	03300293 	.word	0x03300293
1a003abc:	03cb0317 	.word	0x03cb0317
1a003ac0:	033703cb 	.word	0x033703cb
1a003ac4:	034103cb 	.word	0x034103cb
1a003ac8:	02ec01ff 	.word	0x02ec01ff
1a003acc:	03cb0263 	.word	0x03cb0263
1a003ad0:	03cb0211 	.word	0x03cb0211
1a003ad4:	03cb009b 	.word	0x03cb009b
1a003ad8:	023603cb 	.word	0x023603cb
1a003adc:	4638      	mov	r0, r7
1a003ade:	4649      	mov	r1, r9
1a003ae0:	f001 f97a 	bl	1a004dd8 <__swsetup_r>
1a003ae4:	b9a0      	cbnz	r0, 1a003b10 <_vfprintf_r+0x1d8>
1a003ae6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a003aea:	f003 031a 	and.w	r3, r3, #26
1a003aee:	2b0a      	cmp	r3, #10
1a003af0:	f47f af54 	bne.w	1a00399c <_vfprintf_r+0x64>
1a003af4:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
1a003af8:	2b00      	cmp	r3, #0
1a003afa:	f6ff af4f 	blt.w	1a00399c <_vfprintf_r+0x64>
1a003afe:	4638      	mov	r0, r7
1a003b00:	4649      	mov	r1, r9
1a003b02:	9a04      	ldr	r2, [sp, #16]
1a003b04:	4623      	mov	r3, r4
1a003b06:	f001 f92b 	bl	1a004d60 <__sbprintf>
1a003b0a:	b03d      	add	sp, #244	; 0xf4
1a003b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003b10:	f04f 30ff 	mov.w	r0, #4294967295
1a003b14:	b03d      	add	sp, #244	; 0xf4
1a003b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003b1a:	4640      	mov	r0, r8
1a003b1c:	4649      	mov	r1, r9
1a003b1e:	aa1f      	add	r2, sp, #124	; 0x7c
1a003b20:	f003 ff24 	bl	1a00796c <__sprint_r>
1a003b24:	b940      	cbnz	r0, 1a003b38 <_vfprintf_r+0x200>
1a003b26:	ac2c      	add	r4, sp, #176	; 0xb0
1a003b28:	e765      	b.n	1a0039f6 <_vfprintf_r+0xbe>
1a003b2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a003b2c:	b123      	cbz	r3, 1a003b38 <_vfprintf_r+0x200>
1a003b2e:	4640      	mov	r0, r8
1a003b30:	4649      	mov	r1, r9
1a003b32:	aa1f      	add	r2, sp, #124	; 0x7c
1a003b34:	f003 ff1a 	bl	1a00796c <__sprint_r>
1a003b38:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a003b3c:	065a      	lsls	r2, r3, #25
1a003b3e:	d4e7      	bmi.n	1a003b10 <_vfprintf_r+0x1d8>
1a003b40:	9805      	ldr	r0, [sp, #20]
1a003b42:	b03d      	add	sp, #244	; 0xf4
1a003b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003b48:	4638      	mov	r0, r7
1a003b4a:	f002 facf 	bl	1a0060ec <__sinit>
1a003b4e:	e708      	b.n	1a003962 <_vfprintf_r+0x2a>
1a003b50:	9d04      	ldr	r5, [sp, #16]
1a003b52:	e753      	b.n	1a0039fc <_vfprintf_r+0xc4>
1a003b54:	f3af 8000 	nop.w
	...
1a003b60:	9304      	str	r3, [sp, #16]
1a003b62:	9b02      	ldr	r3, [sp, #8]
1a003b64:	46b2      	mov	sl, r6
1a003b66:	069e      	lsls	r6, r3, #26
1a003b68:	f140 831e 	bpl.w	1a0041a8 <_vfprintf_r+0x870>
1a003b6c:	9f08      	ldr	r7, [sp, #32]
1a003b6e:	3707      	adds	r7, #7
1a003b70:	f027 0307 	bic.w	r3, r7, #7
1a003b74:	f103 0208 	add.w	r2, r3, #8
1a003b78:	e9d3 6700 	ldrd	r6, r7, [r3]
1a003b7c:	9208      	str	r2, [sp, #32]
1a003b7e:	2301      	movs	r3, #1
1a003b80:	f04f 0c00 	mov.w	ip, #0
1a003b84:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
1a003b88:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
1a003b8c:	f1ba 0f00 	cmp.w	sl, #0
1a003b90:	db03      	blt.n	1a003b9a <_vfprintf_r+0x262>
1a003b92:	9a02      	ldr	r2, [sp, #8]
1a003b94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a003b98:	9202      	str	r2, [sp, #8]
1a003b9a:	ea56 0207 	orrs.w	r2, r6, r7
1a003b9e:	f040 831f 	bne.w	1a0041e0 <_vfprintf_r+0x8a8>
1a003ba2:	f1ba 0f00 	cmp.w	sl, #0
1a003ba6:	f000 841c 	beq.w	1a0043e2 <_vfprintf_r+0xaaa>
1a003baa:	2b01      	cmp	r3, #1
1a003bac:	f000 8320 	beq.w	1a0041f0 <_vfprintf_r+0x8b8>
1a003bb0:	2b02      	cmp	r3, #2
1a003bb2:	f000 8452 	beq.w	1a00445a <_vfprintf_r+0xb22>
1a003bb6:	a92c      	add	r1, sp, #176	; 0xb0
1a003bb8:	08f2      	lsrs	r2, r6, #3
1a003bba:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
1a003bbe:	08f8      	lsrs	r0, r7, #3
1a003bc0:	f006 0307 	and.w	r3, r6, #7
1a003bc4:	4607      	mov	r7, r0
1a003bc6:	4616      	mov	r6, r2
1a003bc8:	3330      	adds	r3, #48	; 0x30
1a003bca:	ea56 0207 	orrs.w	r2, r6, r7
1a003bce:	f801 3d01 	strb.w	r3, [r1, #-1]!
1a003bd2:	d1f1      	bne.n	1a003bb8 <_vfprintf_r+0x280>
1a003bd4:	9a02      	ldr	r2, [sp, #8]
1a003bd6:	910a      	str	r1, [sp, #40]	; 0x28
1a003bd8:	07d0      	lsls	r0, r2, #31
1a003bda:	f100 84f9 	bmi.w	1a0045d0 <_vfprintf_r+0xc98>
1a003bde:	ab2c      	add	r3, sp, #176	; 0xb0
1a003be0:	1a5b      	subs	r3, r3, r1
1a003be2:	9307      	str	r3, [sp, #28]
1a003be4:	9a07      	ldr	r2, [sp, #28]
1a003be6:	4592      	cmp	sl, r2
1a003be8:	4653      	mov	r3, sl
1a003bea:	bfb8      	it	lt
1a003bec:	4613      	movlt	r3, r2
1a003bee:	9303      	str	r3, [sp, #12]
1a003bf0:	2300      	movs	r3, #0
1a003bf2:	930c      	str	r3, [sp, #48]	; 0x30
1a003bf4:	f1bc 0f00 	cmp.w	ip, #0
1a003bf8:	d002      	beq.n	1a003c00 <_vfprintf_r+0x2c8>
1a003bfa:	9b03      	ldr	r3, [sp, #12]
1a003bfc:	3301      	adds	r3, #1
1a003bfe:	9303      	str	r3, [sp, #12]
1a003c00:	9b02      	ldr	r3, [sp, #8]
1a003c02:	f013 0302 	ands.w	r3, r3, #2
1a003c06:	9309      	str	r3, [sp, #36]	; 0x24
1a003c08:	d002      	beq.n	1a003c10 <_vfprintf_r+0x2d8>
1a003c0a:	9b03      	ldr	r3, [sp, #12]
1a003c0c:	3302      	adds	r3, #2
1a003c0e:	9303      	str	r3, [sp, #12]
1a003c10:	9b02      	ldr	r3, [sp, #8]
1a003c12:	f013 0684 	ands.w	r6, r3, #132	; 0x84
1a003c16:	f040 82e0 	bne.w	1a0041da <_vfprintf_r+0x8a2>
1a003c1a:	9b06      	ldr	r3, [sp, #24]
1a003c1c:	9a03      	ldr	r2, [sp, #12]
1a003c1e:	ebc2 0a03 	rsb	sl, r2, r3
1a003c22:	f1ba 0f00 	cmp.w	sl, #0
1a003c26:	f340 82d8 	ble.w	1a0041da <_vfprintf_r+0x8a2>
1a003c2a:	f1ba 0f10 	cmp.w	sl, #16
1a003c2e:	9921      	ldr	r1, [sp, #132]	; 0x84
1a003c30:	9a20      	ldr	r2, [sp, #128]	; 0x80
1a003c32:	4fb3      	ldr	r7, [pc, #716]	; (1a003f00 <_vfprintf_r+0x5c8>)
1a003c34:	bfc8      	it	gt
1a003c36:	f04f 0b10 	movgt.w	fp, #16
1a003c3a:	dc07      	bgt.n	1a003c4c <_vfprintf_r+0x314>
1a003c3c:	e01e      	b.n	1a003c7c <_vfprintf_r+0x344>
1a003c3e:	f1aa 0a10 	sub.w	sl, sl, #16
1a003c42:	f1ba 0f10 	cmp.w	sl, #16
1a003c46:	f104 0408 	add.w	r4, r4, #8
1a003c4a:	dd17      	ble.n	1a003c7c <_vfprintf_r+0x344>
1a003c4c:	3201      	adds	r2, #1
1a003c4e:	3110      	adds	r1, #16
1a003c50:	2a07      	cmp	r2, #7
1a003c52:	9121      	str	r1, [sp, #132]	; 0x84
1a003c54:	9220      	str	r2, [sp, #128]	; 0x80
1a003c56:	e884 0880 	stmia.w	r4, {r7, fp}
1a003c5a:	ddf0      	ble.n	1a003c3e <_vfprintf_r+0x306>
1a003c5c:	4640      	mov	r0, r8
1a003c5e:	4649      	mov	r1, r9
1a003c60:	aa1f      	add	r2, sp, #124	; 0x7c
1a003c62:	f003 fe83 	bl	1a00796c <__sprint_r>
1a003c66:	2800      	cmp	r0, #0
1a003c68:	f47f af66 	bne.w	1a003b38 <_vfprintf_r+0x200>
1a003c6c:	f1aa 0a10 	sub.w	sl, sl, #16
1a003c70:	f1ba 0f10 	cmp.w	sl, #16
1a003c74:	9921      	ldr	r1, [sp, #132]	; 0x84
1a003c76:	9a20      	ldr	r2, [sp, #128]	; 0x80
1a003c78:	ac2c      	add	r4, sp, #176	; 0xb0
1a003c7a:	dce7      	bgt.n	1a003c4c <_vfprintf_r+0x314>
1a003c7c:	3201      	adds	r2, #1
1a003c7e:	eb0a 0b01 	add.w	fp, sl, r1
1a003c82:	2a07      	cmp	r2, #7
1a003c84:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a003c88:	9220      	str	r2, [sp, #128]	; 0x80
1a003c8a:	e884 0480 	stmia.w	r4, {r7, sl}
1a003c8e:	f300 844a 	bgt.w	1a004526 <_vfprintf_r+0xbee>
1a003c92:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
1a003c96:	3408      	adds	r4, #8
1a003c98:	f1bc 0f00 	cmp.w	ip, #0
1a003c9c:	d00f      	beq.n	1a003cbe <_vfprintf_r+0x386>
1a003c9e:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a003ca0:	3301      	adds	r3, #1
1a003ca2:	f10b 0b01 	add.w	fp, fp, #1
1a003ca6:	f10d 015f 	add.w	r1, sp, #95	; 0x5f
1a003caa:	2201      	movs	r2, #1
1a003cac:	2b07      	cmp	r3, #7
1a003cae:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a003cb2:	9320      	str	r3, [sp, #128]	; 0x80
1a003cb4:	e884 0006 	stmia.w	r4, {r1, r2}
1a003cb8:	f300 83b1 	bgt.w	1a00441e <_vfprintf_r+0xae6>
1a003cbc:	3408      	adds	r4, #8
1a003cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003cc0:	b173      	cbz	r3, 1a003ce0 <_vfprintf_r+0x3a8>
1a003cc2:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a003cc4:	3301      	adds	r3, #1
1a003cc6:	f10b 0b02 	add.w	fp, fp, #2
1a003cca:	a918      	add	r1, sp, #96	; 0x60
1a003ccc:	2202      	movs	r2, #2
1a003cce:	2b07      	cmp	r3, #7
1a003cd0:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a003cd4:	9320      	str	r3, [sp, #128]	; 0x80
1a003cd6:	e884 0006 	stmia.w	r4, {r1, r2}
1a003cda:	f300 83ac 	bgt.w	1a004436 <_vfprintf_r+0xafe>
1a003cde:	3408      	adds	r4, #8
1a003ce0:	2e80      	cmp	r6, #128	; 0x80
1a003ce2:	f000 82f0 	beq.w	1a0042c6 <_vfprintf_r+0x98e>
1a003ce6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a003ce8:	9a07      	ldr	r2, [sp, #28]
1a003cea:	ebc2 0a03 	rsb	sl, r2, r3
1a003cee:	f1ba 0f00 	cmp.w	sl, #0
1a003cf2:	dd32      	ble.n	1a003d5a <_vfprintf_r+0x422>
1a003cf4:	f1ba 0f10 	cmp.w	sl, #16
1a003cf8:	9a20      	ldr	r2, [sp, #128]	; 0x80
1a003cfa:	4f82      	ldr	r7, [pc, #520]	; (1a003f04 <_vfprintf_r+0x5cc>)
1a003cfc:	dd22      	ble.n	1a003d44 <_vfprintf_r+0x40c>
1a003cfe:	2610      	movs	r6, #16
1a003d00:	465b      	mov	r3, fp
1a003d02:	e006      	b.n	1a003d12 <_vfprintf_r+0x3da>
1a003d04:	f1aa 0a10 	sub.w	sl, sl, #16
1a003d08:	f1ba 0f10 	cmp.w	sl, #16
1a003d0c:	f104 0408 	add.w	r4, r4, #8
1a003d10:	dd17      	ble.n	1a003d42 <_vfprintf_r+0x40a>
1a003d12:	3201      	adds	r2, #1
1a003d14:	3310      	adds	r3, #16
1a003d16:	2a07      	cmp	r2, #7
1a003d18:	9321      	str	r3, [sp, #132]	; 0x84
1a003d1a:	9220      	str	r2, [sp, #128]	; 0x80
1a003d1c:	6027      	str	r7, [r4, #0]
1a003d1e:	6066      	str	r6, [r4, #4]
1a003d20:	ddf0      	ble.n	1a003d04 <_vfprintf_r+0x3cc>
1a003d22:	4640      	mov	r0, r8
1a003d24:	4649      	mov	r1, r9
1a003d26:	aa1f      	add	r2, sp, #124	; 0x7c
1a003d28:	f003 fe20 	bl	1a00796c <__sprint_r>
1a003d2c:	2800      	cmp	r0, #0
1a003d2e:	f47f af03 	bne.w	1a003b38 <_vfprintf_r+0x200>
1a003d32:	f1aa 0a10 	sub.w	sl, sl, #16
1a003d36:	f1ba 0f10 	cmp.w	sl, #16
1a003d3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a003d3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
1a003d3e:	ac2c      	add	r4, sp, #176	; 0xb0
1a003d40:	dce7      	bgt.n	1a003d12 <_vfprintf_r+0x3da>
1a003d42:	469b      	mov	fp, r3
1a003d44:	3201      	adds	r2, #1
1a003d46:	44d3      	add	fp, sl
1a003d48:	2a07      	cmp	r2, #7
1a003d4a:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a003d4e:	9220      	str	r2, [sp, #128]	; 0x80
1a003d50:	e884 0480 	stmia.w	r4, {r7, sl}
1a003d54:	f300 8357 	bgt.w	1a004406 <_vfprintf_r+0xace>
1a003d58:	3408      	adds	r4, #8
1a003d5a:	9b02      	ldr	r3, [sp, #8]
1a003d5c:	05db      	lsls	r3, r3, #23
1a003d5e:	f100 825b 	bmi.w	1a004218 <_vfprintf_r+0x8e0>
1a003d62:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a003d64:	9907      	ldr	r1, [sp, #28]
1a003d66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a003d68:	6022      	str	r2, [r4, #0]
1a003d6a:	3301      	adds	r3, #1
1a003d6c:	448b      	add	fp, r1
1a003d6e:	2b07      	cmp	r3, #7
1a003d70:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a003d74:	6061      	str	r1, [r4, #4]
1a003d76:	9320      	str	r3, [sp, #128]	; 0x80
1a003d78:	f300 831d 	bgt.w	1a0043b6 <_vfprintf_r+0xa7e>
1a003d7c:	3408      	adds	r4, #8
1a003d7e:	9b02      	ldr	r3, [sp, #8]
1a003d80:	0759      	lsls	r1, r3, #29
1a003d82:	d53a      	bpl.n	1a003dfa <_vfprintf_r+0x4c2>
1a003d84:	9b06      	ldr	r3, [sp, #24]
1a003d86:	9a03      	ldr	r2, [sp, #12]
1a003d88:	1a9d      	subs	r5, r3, r2
1a003d8a:	2d00      	cmp	r5, #0
1a003d8c:	dd35      	ble.n	1a003dfa <_vfprintf_r+0x4c2>
1a003d8e:	2d10      	cmp	r5, #16
1a003d90:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a003d92:	4f5b      	ldr	r7, [pc, #364]	; (1a003f00 <_vfprintf_r+0x5c8>)
1a003d94:	dd1e      	ble.n	1a003dd4 <_vfprintf_r+0x49c>
1a003d96:	2610      	movs	r6, #16
1a003d98:	465a      	mov	r2, fp
1a003d9a:	e004      	b.n	1a003da6 <_vfprintf_r+0x46e>
1a003d9c:	3d10      	subs	r5, #16
1a003d9e:	2d10      	cmp	r5, #16
1a003da0:	f104 0408 	add.w	r4, r4, #8
1a003da4:	dd15      	ble.n	1a003dd2 <_vfprintf_r+0x49a>
1a003da6:	3301      	adds	r3, #1
1a003da8:	3210      	adds	r2, #16
1a003daa:	2b07      	cmp	r3, #7
1a003dac:	9221      	str	r2, [sp, #132]	; 0x84
1a003dae:	9320      	str	r3, [sp, #128]	; 0x80
1a003db0:	6027      	str	r7, [r4, #0]
1a003db2:	6066      	str	r6, [r4, #4]
1a003db4:	ddf2      	ble.n	1a003d9c <_vfprintf_r+0x464>
1a003db6:	4640      	mov	r0, r8
1a003db8:	4649      	mov	r1, r9
1a003dba:	aa1f      	add	r2, sp, #124	; 0x7c
1a003dbc:	f003 fdd6 	bl	1a00796c <__sprint_r>
1a003dc0:	2800      	cmp	r0, #0
1a003dc2:	f47f aeb9 	bne.w	1a003b38 <_vfprintf_r+0x200>
1a003dc6:	3d10      	subs	r5, #16
1a003dc8:	2d10      	cmp	r5, #16
1a003dca:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a003dcc:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a003dce:	ac2c      	add	r4, sp, #176	; 0xb0
1a003dd0:	dce9      	bgt.n	1a003da6 <_vfprintf_r+0x46e>
1a003dd2:	4693      	mov	fp, r2
1a003dd4:	3301      	adds	r3, #1
1a003dd6:	44ab      	add	fp, r5
1a003dd8:	2b07      	cmp	r3, #7
1a003dda:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a003dde:	9320      	str	r3, [sp, #128]	; 0x80
1a003de0:	6027      	str	r7, [r4, #0]
1a003de2:	6065      	str	r5, [r4, #4]
1a003de4:	dd09      	ble.n	1a003dfa <_vfprintf_r+0x4c2>
1a003de6:	4640      	mov	r0, r8
1a003de8:	4649      	mov	r1, r9
1a003dea:	aa1f      	add	r2, sp, #124	; 0x7c
1a003dec:	f003 fdbe 	bl	1a00796c <__sprint_r>
1a003df0:	2800      	cmp	r0, #0
1a003df2:	f47f aea1 	bne.w	1a003b38 <_vfprintf_r+0x200>
1a003df6:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
1a003dfa:	9b05      	ldr	r3, [sp, #20]
1a003dfc:	9a03      	ldr	r2, [sp, #12]
1a003dfe:	9906      	ldr	r1, [sp, #24]
1a003e00:	428a      	cmp	r2, r1
1a003e02:	bfac      	ite	ge
1a003e04:	189b      	addge	r3, r3, r2
1a003e06:	185b      	addlt	r3, r3, r1
1a003e08:	9305      	str	r3, [sp, #20]
1a003e0a:	f1bb 0f00 	cmp.w	fp, #0
1a003e0e:	f040 82de 	bne.w	1a0043ce <_vfprintf_r+0xa96>
1a003e12:	2300      	movs	r3, #0
1a003e14:	9320      	str	r3, [sp, #128]	; 0x80
1a003e16:	ac2c      	add	r4, sp, #176	; 0xb0
1a003e18:	e5cf      	b.n	1a0039ba <_vfprintf_r+0x82>
1a003e1a:	4619      	mov	r1, r3
1a003e1c:	9802      	ldr	r0, [sp, #8]
1a003e1e:	781d      	ldrb	r5, [r3, #0]
1a003e20:	f040 0004 	orr.w	r0, r0, #4
1a003e24:	9002      	str	r0, [sp, #8]
1a003e26:	e5f8      	b.n	1a003a1a <_vfprintf_r+0xe2>
1a003e28:	9304      	str	r3, [sp, #16]
1a003e2a:	9b02      	ldr	r3, [sp, #8]
1a003e2c:	f013 0320 	ands.w	r3, r3, #32
1a003e30:	46b2      	mov	sl, r6
1a003e32:	f000 8173 	beq.w	1a00411c <_vfprintf_r+0x7e4>
1a003e36:	9f08      	ldr	r7, [sp, #32]
1a003e38:	3707      	adds	r7, #7
1a003e3a:	f027 0307 	bic.w	r3, r7, #7
1a003e3e:	f103 0208 	add.w	r2, r3, #8
1a003e42:	e9d3 6700 	ldrd	r6, r7, [r3]
1a003e46:	9208      	str	r2, [sp, #32]
1a003e48:	2300      	movs	r3, #0
1a003e4a:	e699      	b.n	1a003b80 <_vfprintf_r+0x248>
1a003e4c:	9a08      	ldr	r2, [sp, #32]
1a003e4e:	9304      	str	r3, [sp, #16]
1a003e50:	6813      	ldr	r3, [r2, #0]
1a003e52:	930a      	str	r3, [sp, #40]	; 0x28
1a003e54:	f04f 0b00 	mov.w	fp, #0
1a003e58:	f88d b05f 	strb.w	fp, [sp, #95]	; 0x5f
1a003e5c:	1d17      	adds	r7, r2, #4
1a003e5e:	2b00      	cmp	r3, #0
1a003e60:	f000 865e 	beq.w	1a004b20 <_vfprintf_r+0x11e8>
1a003e64:	2e00      	cmp	r6, #0
1a003e66:	980a      	ldr	r0, [sp, #40]	; 0x28
1a003e68:	f2c0 8612 	blt.w	1a004a90 <_vfprintf_r+0x1158>
1a003e6c:	4659      	mov	r1, fp
1a003e6e:	4632      	mov	r2, r6
1a003e70:	f002 ff32 	bl	1a006cd8 <memchr>
1a003e74:	2800      	cmp	r0, #0
1a003e76:	f000 868f 	beq.w	1a004b98 <_vfprintf_r+0x1260>
1a003e7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a003e7c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
1a003e80:	1ac3      	subs	r3, r0, r3
1a003e82:	9307      	str	r3, [sp, #28]
1a003e84:	9708      	str	r7, [sp, #32]
1a003e86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a003e8a:	9303      	str	r3, [sp, #12]
1a003e8c:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
1a003e90:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
1a003e94:	e6ae      	b.n	1a003bf4 <_vfprintf_r+0x2bc>
1a003e96:	9304      	str	r3, [sp, #16]
1a003e98:	4b1b      	ldr	r3, [pc, #108]	; (1a003f08 <_vfprintf_r+0x5d0>)
1a003e9a:	9310      	str	r3, [sp, #64]	; 0x40
1a003e9c:	9b02      	ldr	r3, [sp, #8]
1a003e9e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
1a003ea2:	0699      	lsls	r1, r3, #26
1a003ea4:	46b2      	mov	sl, r6
1a003ea6:	f140 8155 	bpl.w	1a004154 <_vfprintf_r+0x81c>
1a003eaa:	9f08      	ldr	r7, [sp, #32]
1a003eac:	3707      	adds	r7, #7
1a003eae:	f027 0307 	bic.w	r3, r7, #7
1a003eb2:	e9d3 6700 	ldrd	r6, r7, [r3]
1a003eb6:	f103 0208 	add.w	r2, r3, #8
1a003eba:	9208      	str	r2, [sp, #32]
1a003ebc:	9b02      	ldr	r3, [sp, #8]
1a003ebe:	07db      	lsls	r3, r3, #31
1a003ec0:	f140 82e4 	bpl.w	1a00448c <_vfprintf_r+0xb54>
1a003ec4:	ea56 0307 	orrs.w	r3, r6, r7
1a003ec8:	f000 82e0 	beq.w	1a00448c <_vfprintf_r+0xb54>
1a003ecc:	9a02      	ldr	r2, [sp, #8]
1a003ece:	f88d 5061 	strb.w	r5, [sp, #97]	; 0x61
1a003ed2:	2330      	movs	r3, #48	; 0x30
1a003ed4:	f042 0202 	orr.w	r2, r2, #2
1a003ed8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
1a003edc:	9202      	str	r2, [sp, #8]
1a003ede:	2302      	movs	r3, #2
1a003ee0:	e64e      	b.n	1a003b80 <_vfprintf_r+0x248>
1a003ee2:	781d      	ldrb	r5, [r3, #0]
1a003ee4:	4619      	mov	r1, r3
1a003ee6:	2a00      	cmp	r2, #0
1a003ee8:	f47f ad97 	bne.w	1a003a1a <_vfprintf_r+0xe2>
1a003eec:	2220      	movs	r2, #32
1a003eee:	e594      	b.n	1a003a1a <_vfprintf_r+0xe2>
1a003ef0:	9902      	ldr	r1, [sp, #8]
1a003ef2:	f041 0120 	orr.w	r1, r1, #32
1a003ef6:	9102      	str	r1, [sp, #8]
1a003ef8:	781d      	ldrb	r5, [r3, #0]
1a003efa:	4619      	mov	r1, r3
1a003efc:	e58d      	b.n	1a003a1a <_vfprintf_r+0xe2>
1a003efe:	bf00      	nop
1a003f00:	1a0082f0 	.word	0x1a0082f0
1a003f04:	1a00829c 	.word	0x1a00829c
1a003f08:	1a0082d0 	.word	0x1a0082d0
1a003f0c:	9304      	str	r3, [sp, #16]
1a003f0e:	9b02      	ldr	r3, [sp, #8]
1a003f10:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
1a003f14:	f043 0310 	orr.w	r3, r3, #16
1a003f18:	9302      	str	r3, [sp, #8]
1a003f1a:	9b02      	ldr	r3, [sp, #8]
1a003f1c:	0698      	lsls	r0, r3, #26
1a003f1e:	46b2      	mov	sl, r6
1a003f20:	f140 80a2 	bpl.w	1a004068 <_vfprintf_r+0x730>
1a003f24:	9f08      	ldr	r7, [sp, #32]
1a003f26:	3707      	adds	r7, #7
1a003f28:	f027 0707 	bic.w	r7, r7, #7
1a003f2c:	e9d7 2300 	ldrd	r2, r3, [r7]
1a003f30:	f107 0108 	add.w	r1, r7, #8
1a003f34:	9108      	str	r1, [sp, #32]
1a003f36:	4616      	mov	r6, r2
1a003f38:	461f      	mov	r7, r3
1a003f3a:	2a00      	cmp	r2, #0
1a003f3c:	f173 0300 	sbcs.w	r3, r3, #0
1a003f40:	f2c0 841c 	blt.w	1a00477c <_vfprintf_r+0xe44>
1a003f44:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
1a003f48:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
1a003f4c:	2301      	movs	r3, #1
1a003f4e:	e61d      	b.n	1a003b8c <_vfprintf_r+0x254>
1a003f50:	9304      	str	r3, [sp, #16]
1a003f52:	9b02      	ldr	r3, [sp, #8]
1a003f54:	9f08      	ldr	r7, [sp, #32]
1a003f56:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
1a003f5a:	071b      	lsls	r3, r3, #28
1a003f5c:	46b2      	mov	sl, r6
1a003f5e:	46b3      	mov	fp, r6
1a003f60:	f107 0707 	add.w	r7, r7, #7
1a003f64:	f140 849b 	bpl.w	1a00489e <_vfprintf_r+0xf66>
1a003f68:	f027 0307 	bic.w	r3, r7, #7
1a003f6c:	ed93 7b00 	vldr	d7, [r3]
1a003f70:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
1a003f74:	f103 0208 	add.w	r2, r3, #8
1a003f78:	9208      	str	r2, [sp, #32]
1a003f7a:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
1a003f7e:	f003 fc49 	bl	1a007814 <__fpclassifyd>
1a003f82:	2801      	cmp	r0, #1
1a003f84:	f040 8408 	bne.w	1a004798 <_vfprintf_r+0xe60>
1a003f88:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a003f8c:	2200      	movs	r2, #0
1a003f8e:	2300      	movs	r3, #0
1a003f90:	f003 fec0 	bl	1a007d14 <__aeabi_dcmplt>
1a003f94:	2800      	cmp	r0, #0
1a003f96:	f040 85ec 	bne.w	1a004b72 <_vfprintf_r+0x123a>
1a003f9a:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
1a003f9e:	9e02      	ldr	r6, [sp, #8]
1a003fa0:	4a99      	ldr	r2, [pc, #612]	; (1a004208 <_vfprintf_r+0x8d0>)
1a003fa2:	4b9a      	ldr	r3, [pc, #616]	; (1a00420c <_vfprintf_r+0x8d4>)
1a003fa4:	2103      	movs	r1, #3
1a003fa6:	2000      	movs	r0, #0
1a003fa8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
1a003fac:	2d47      	cmp	r5, #71	; 0x47
1a003fae:	bfd8      	it	le
1a003fb0:	461a      	movle	r2, r3
1a003fb2:	9103      	str	r1, [sp, #12]
1a003fb4:	900b      	str	r0, [sp, #44]	; 0x2c
1a003fb6:	9602      	str	r6, [sp, #8]
1a003fb8:	920a      	str	r2, [sp, #40]	; 0x28
1a003fba:	9107      	str	r1, [sp, #28]
1a003fbc:	900c      	str	r0, [sp, #48]	; 0x30
1a003fbe:	e619      	b.n	1a003bf4 <_vfprintf_r+0x2bc>
1a003fc0:	9902      	ldr	r1, [sp, #8]
1a003fc2:	f041 0108 	orr.w	r1, r1, #8
1a003fc6:	9102      	str	r1, [sp, #8]
1a003fc8:	781d      	ldrb	r5, [r3, #0]
1a003fca:	4619      	mov	r1, r3
1a003fcc:	e525      	b.n	1a003a1a <_vfprintf_r+0xe2>
1a003fce:	781d      	ldrb	r5, [r3, #0]
1a003fd0:	4619      	mov	r1, r3
1a003fd2:	222b      	movs	r2, #43	; 0x2b
1a003fd4:	e521      	b.n	1a003a1a <_vfprintf_r+0xe2>
1a003fd6:	9902      	ldr	r1, [sp, #8]
1a003fd8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
1a003fdc:	9102      	str	r1, [sp, #8]
1a003fde:	781d      	ldrb	r5, [r3, #0]
1a003fe0:	4619      	mov	r1, r3
1a003fe2:	e51a      	b.n	1a003a1a <_vfprintf_r+0xe2>
1a003fe4:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
1a003fe8:	2100      	movs	r1, #0
1a003fea:	f813 5b01 	ldrb.w	r5, [r3], #1
1a003fee:	eb01 0181 	add.w	r1, r1, r1, lsl #2
1a003ff2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
1a003ff6:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
1a003ffa:	2809      	cmp	r0, #9
1a003ffc:	d9f5      	bls.n	1a003fea <_vfprintf_r+0x6b2>
1a003ffe:	9106      	str	r1, [sp, #24]
1a004000:	e50c      	b.n	1a003a1c <_vfprintf_r+0xe4>
1a004002:	9908      	ldr	r1, [sp, #32]
1a004004:	9304      	str	r3, [sp, #16]
1a004006:	2330      	movs	r3, #48	; 0x30
1a004008:	9a02      	ldr	r2, [sp, #8]
1a00400a:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
1a00400e:	460b      	mov	r3, r1
1a004010:	3304      	adds	r3, #4
1a004012:	2578      	movs	r5, #120	; 0x78
1a004014:	f042 0202 	orr.w	r2, r2, #2
1a004018:	9308      	str	r3, [sp, #32]
1a00401a:	4b7d      	ldr	r3, [pc, #500]	; (1a004210 <_vfprintf_r+0x8d8>)
1a00401c:	9310      	str	r3, [sp, #64]	; 0x40
1a00401e:	46b2      	mov	sl, r6
1a004020:	9202      	str	r2, [sp, #8]
1a004022:	680e      	ldr	r6, [r1, #0]
1a004024:	f88d 5061 	strb.w	r5, [sp, #97]	; 0x61
1a004028:	2700      	movs	r7, #0
1a00402a:	2302      	movs	r3, #2
1a00402c:	e5a8      	b.n	1a003b80 <_vfprintf_r+0x248>
1a00402e:	9902      	ldr	r1, [sp, #8]
1a004030:	f041 0101 	orr.w	r1, r1, #1
1a004034:	9102      	str	r1, [sp, #8]
1a004036:	781d      	ldrb	r5, [r3, #0]
1a004038:	4619      	mov	r1, r3
1a00403a:	e4ee      	b.n	1a003a1a <_vfprintf_r+0xe2>
1a00403c:	9d08      	ldr	r5, [sp, #32]
1a00403e:	6829      	ldr	r1, [r5, #0]
1a004040:	9106      	str	r1, [sp, #24]
1a004042:	4608      	mov	r0, r1
1a004044:	2800      	cmp	r0, #0
1a004046:	4629      	mov	r1, r5
1a004048:	f101 0104 	add.w	r1, r1, #4
1a00404c:	f2c0 84ee 	blt.w	1a004a2c <_vfprintf_r+0x10f4>
1a004050:	9108      	str	r1, [sp, #32]
1a004052:	781d      	ldrb	r5, [r3, #0]
1a004054:	4619      	mov	r1, r3
1a004056:	e4e0      	b.n	1a003a1a <_vfprintf_r+0xe2>
1a004058:	9304      	str	r3, [sp, #16]
1a00405a:	9b02      	ldr	r3, [sp, #8]
1a00405c:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
1a004060:	0698      	lsls	r0, r3, #26
1a004062:	46b2      	mov	sl, r6
1a004064:	f53f af5e 	bmi.w	1a003f24 <_vfprintf_r+0x5ec>
1a004068:	9b02      	ldr	r3, [sp, #8]
1a00406a:	06d9      	lsls	r1, r3, #27
1a00406c:	f100 829b 	bmi.w	1a0045a6 <_vfprintf_r+0xc6e>
1a004070:	9b02      	ldr	r3, [sp, #8]
1a004072:	065a      	lsls	r2, r3, #25
1a004074:	f140 8297 	bpl.w	1a0045a6 <_vfprintf_r+0xc6e>
1a004078:	9908      	ldr	r1, [sp, #32]
1a00407a:	f9b1 6000 	ldrsh.w	r6, [r1]
1a00407e:	3104      	adds	r1, #4
1a004080:	17f7      	asrs	r7, r6, #31
1a004082:	4632      	mov	r2, r6
1a004084:	463b      	mov	r3, r7
1a004086:	9108      	str	r1, [sp, #32]
1a004088:	e757      	b.n	1a003f3a <_vfprintf_r+0x602>
1a00408a:	9902      	ldr	r1, [sp, #8]
1a00408c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
1a004090:	9102      	str	r1, [sp, #8]
1a004092:	781d      	ldrb	r5, [r3, #0]
1a004094:	4619      	mov	r1, r3
1a004096:	e4c0      	b.n	1a003a1a <_vfprintf_r+0xe2>
1a004098:	781d      	ldrb	r5, [r3, #0]
1a00409a:	9902      	ldr	r1, [sp, #8]
1a00409c:	2d6c      	cmp	r5, #108	; 0x6c
1a00409e:	f000 84be 	beq.w	1a004a1e <_vfprintf_r+0x10e6>
1a0040a2:	f041 0110 	orr.w	r1, r1, #16
1a0040a6:	9102      	str	r1, [sp, #8]
1a0040a8:	4619      	mov	r1, r3
1a0040aa:	e4b6      	b.n	1a003a1a <_vfprintf_r+0xe2>
1a0040ac:	9304      	str	r3, [sp, #16]
1a0040ae:	9b02      	ldr	r3, [sp, #8]
1a0040b0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
1a0040b4:	069a      	lsls	r2, r3, #26
1a0040b6:	f140 83fd 	bpl.w	1a0048b4 <_vfprintf_r+0xf7c>
1a0040ba:	9a08      	ldr	r2, [sp, #32]
1a0040bc:	9905      	ldr	r1, [sp, #20]
1a0040be:	6813      	ldr	r3, [r2, #0]
1a0040c0:	17cf      	asrs	r7, r1, #31
1a0040c2:	4608      	mov	r0, r1
1a0040c4:	3204      	adds	r2, #4
1a0040c6:	4639      	mov	r1, r7
1a0040c8:	9208      	str	r2, [sp, #32]
1a0040ca:	e9c3 0100 	strd	r0, r1, [r3]
1a0040ce:	e474      	b.n	1a0039ba <_vfprintf_r+0x82>
1a0040d0:	781d      	ldrb	r5, [r3, #0]
1a0040d2:	2d2a      	cmp	r5, #42	; 0x2a
1a0040d4:	f103 0101 	add.w	r1, r3, #1
1a0040d8:	f000 862a 	beq.w	1a004d30 <_vfprintf_r+0x13f8>
1a0040dc:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
1a0040e0:	2809      	cmp	r0, #9
1a0040e2:	460b      	mov	r3, r1
1a0040e4:	f04f 0600 	mov.w	r6, #0
1a0040e8:	f63f ac98 	bhi.w	1a003a1c <_vfprintf_r+0xe4>
1a0040ec:	f813 5b01 	ldrb.w	r5, [r3], #1
1a0040f0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
1a0040f4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
1a0040f8:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
1a0040fc:	2809      	cmp	r0, #9
1a0040fe:	d9f5      	bls.n	1a0040ec <_vfprintf_r+0x7b4>
1a004100:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
1a004104:	e48a      	b.n	1a003a1c <_vfprintf_r+0xe4>
1a004106:	9304      	str	r3, [sp, #16]
1a004108:	9b02      	ldr	r3, [sp, #8]
1a00410a:	f043 0310 	orr.w	r3, r3, #16
1a00410e:	9302      	str	r3, [sp, #8]
1a004110:	9b02      	ldr	r3, [sp, #8]
1a004112:	f013 0320 	ands.w	r3, r3, #32
1a004116:	46b2      	mov	sl, r6
1a004118:	f47f ae8d 	bne.w	1a003e36 <_vfprintf_r+0x4fe>
1a00411c:	9a02      	ldr	r2, [sp, #8]
1a00411e:	f012 0210 	ands.w	r2, r2, #16
1a004122:	f040 8238 	bne.w	1a004596 <_vfprintf_r+0xc5e>
1a004126:	9b02      	ldr	r3, [sp, #8]
1a004128:	f013 0340 	ands.w	r3, r3, #64	; 0x40
1a00412c:	f000 8233 	beq.w	1a004596 <_vfprintf_r+0xc5e>
1a004130:	9908      	ldr	r1, [sp, #32]
1a004132:	4613      	mov	r3, r2
1a004134:	460a      	mov	r2, r1
1a004136:	3204      	adds	r2, #4
1a004138:	880e      	ldrh	r6, [r1, #0]
1a00413a:	9208      	str	r2, [sp, #32]
1a00413c:	2700      	movs	r7, #0
1a00413e:	e51f      	b.n	1a003b80 <_vfprintf_r+0x248>
1a004140:	9304      	str	r3, [sp, #16]
1a004142:	4b34      	ldr	r3, [pc, #208]	; (1a004214 <_vfprintf_r+0x8dc>)
1a004144:	9310      	str	r3, [sp, #64]	; 0x40
1a004146:	9b02      	ldr	r3, [sp, #8]
1a004148:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
1a00414c:	0699      	lsls	r1, r3, #26
1a00414e:	46b2      	mov	sl, r6
1a004150:	f53f aeab 	bmi.w	1a003eaa <_vfprintf_r+0x572>
1a004154:	9b02      	ldr	r3, [sp, #8]
1a004156:	06da      	lsls	r2, r3, #27
1a004158:	f140 83d1 	bpl.w	1a0048fe <_vfprintf_r+0xfc6>
1a00415c:	9a08      	ldr	r2, [sp, #32]
1a00415e:	4613      	mov	r3, r2
1a004160:	3304      	adds	r3, #4
1a004162:	6816      	ldr	r6, [r2, #0]
1a004164:	9308      	str	r3, [sp, #32]
1a004166:	2700      	movs	r7, #0
1a004168:	e6a8      	b.n	1a003ebc <_vfprintf_r+0x584>
1a00416a:	9908      	ldr	r1, [sp, #32]
1a00416c:	9304      	str	r3, [sp, #16]
1a00416e:	680a      	ldr	r2, [r1, #0]
1a004170:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
1a004174:	2300      	movs	r3, #0
1a004176:	2201      	movs	r2, #1
1a004178:	3104      	adds	r1, #4
1a00417a:	469c      	mov	ip, r3
1a00417c:	9203      	str	r2, [sp, #12]
1a00417e:	9108      	str	r1, [sp, #32]
1a004180:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
1a004184:	ab22      	add	r3, sp, #136	; 0x88
1a004186:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
1a00418a:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
1a00418e:	9207      	str	r2, [sp, #28]
1a004190:	930a      	str	r3, [sp, #40]	; 0x28
1a004192:	e535      	b.n	1a003c00 <_vfprintf_r+0x2c8>
1a004194:	9304      	str	r3, [sp, #16]
1a004196:	9b02      	ldr	r3, [sp, #8]
1a004198:	f043 0310 	orr.w	r3, r3, #16
1a00419c:	9302      	str	r3, [sp, #8]
1a00419e:	9b02      	ldr	r3, [sp, #8]
1a0041a0:	46b2      	mov	sl, r6
1a0041a2:	069e      	lsls	r6, r3, #26
1a0041a4:	f53f ace2 	bmi.w	1a003b6c <_vfprintf_r+0x234>
1a0041a8:	9b02      	ldr	r3, [sp, #8]
1a0041aa:	06d8      	lsls	r0, r3, #27
1a0041ac:	f140 8399 	bpl.w	1a0048e2 <_vfprintf_r+0xfaa>
1a0041b0:	9a08      	ldr	r2, [sp, #32]
1a0041b2:	4613      	mov	r3, r2
1a0041b4:	3204      	adds	r2, #4
1a0041b6:	681e      	ldr	r6, [r3, #0]
1a0041b8:	9208      	str	r2, [sp, #32]
1a0041ba:	2301      	movs	r3, #1
1a0041bc:	2700      	movs	r7, #0
1a0041be:	e4df      	b.n	1a003b80 <_vfprintf_r+0x248>
1a0041c0:	9304      	str	r3, [sp, #16]
1a0041c2:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
1a0041c6:	2d00      	cmp	r5, #0
1a0041c8:	f43f acaf 	beq.w	1a003b2a <_vfprintf_r+0x1f2>
1a0041cc:	2300      	movs	r3, #0
1a0041ce:	2201      	movs	r2, #1
1a0041d0:	469c      	mov	ip, r3
1a0041d2:	9203      	str	r2, [sp, #12]
1a0041d4:	f88d 5088 	strb.w	r5, [sp, #136]	; 0x88
1a0041d8:	e7d2      	b.n	1a004180 <_vfprintf_r+0x848>
1a0041da:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
1a0041de:	e55b      	b.n	1a003c98 <_vfprintf_r+0x360>
1a0041e0:	2b01      	cmp	r3, #1
1a0041e2:	f47f ace5 	bne.w	1a003bb0 <_vfprintf_r+0x278>
1a0041e6:	2f00      	cmp	r7, #0
1a0041e8:	bf08      	it	eq
1a0041ea:	2e0a      	cmpeq	r6, #10
1a0041ec:	f080 81ff 	bcs.w	1a0045ee <_vfprintf_r+0xcb6>
1a0041f0:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
1a0041f4:	3630      	adds	r6, #48	; 0x30
1a0041f6:	f80b 6d41 	strb.w	r6, [fp, #-65]!
1a0041fa:	ab2c      	add	r3, sp, #176	; 0xb0
1a0041fc:	ebcb 0303 	rsb	r3, fp, r3
1a004200:	9307      	str	r3, [sp, #28]
1a004202:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
1a004206:	e4ed      	b.n	1a003be4 <_vfprintf_r+0x2ac>
1a004208:	1a0082b0 	.word	0x1a0082b0
1a00420c:	1a0082ac 	.word	0x1a0082ac
1a004210:	1a0082d0 	.word	0x1a0082d0
1a004214:	1a0082bc 	.word	0x1a0082bc
1a004218:	2d65      	cmp	r5, #101	; 0x65
1a00421a:	f340 808a 	ble.w	1a004332 <_vfprintf_r+0x9fa>
1a00421e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a004222:	2200      	movs	r2, #0
1a004224:	2300      	movs	r3, #0
1a004226:	f003 fd6b 	bl	1a007d00 <__aeabi_dcmpeq>
1a00422a:	2800      	cmp	r0, #0
1a00422c:	f000 8131 	beq.w	1a004492 <_vfprintf_r+0xb5a>
1a004230:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a004232:	4aae      	ldr	r2, [pc, #696]	; (1a0044ec <_vfprintf_r+0xbb4>)
1a004234:	6022      	str	r2, [r4, #0]
1a004236:	3301      	adds	r3, #1
1a004238:	f10b 0b01 	add.w	fp, fp, #1
1a00423c:	2201      	movs	r2, #1
1a00423e:	2b07      	cmp	r3, #7
1a004240:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a004244:	9320      	str	r3, [sp, #128]	; 0x80
1a004246:	6062      	str	r2, [r4, #4]
1a004248:	f300 8372 	bgt.w	1a004930 <_vfprintf_r+0xff8>
1a00424c:	3408      	adds	r4, #8
1a00424e:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a004250:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a004252:	4293      	cmp	r3, r2
1a004254:	db03      	blt.n	1a00425e <_vfprintf_r+0x926>
1a004256:	9b02      	ldr	r3, [sp, #8]
1a004258:	07df      	lsls	r7, r3, #31
1a00425a:	f57f ad90 	bpl.w	1a003d7e <_vfprintf_r+0x446>
1a00425e:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a004260:	9912      	ldr	r1, [sp, #72]	; 0x48
1a004262:	9a11      	ldr	r2, [sp, #68]	; 0x44
1a004264:	6022      	str	r2, [r4, #0]
1a004266:	3301      	adds	r3, #1
1a004268:	448b      	add	fp, r1
1a00426a:	2b07      	cmp	r3, #7
1a00426c:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a004270:	6061      	str	r1, [r4, #4]
1a004272:	9320      	str	r3, [sp, #128]	; 0x80
1a004274:	f300 83e1 	bgt.w	1a004a3a <_vfprintf_r+0x1102>
1a004278:	3408      	adds	r4, #8
1a00427a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a00427c:	1e5d      	subs	r5, r3, #1
1a00427e:	2d00      	cmp	r5, #0
1a004280:	f77f ad7d 	ble.w	1a003d7e <_vfprintf_r+0x446>
1a004284:	2d10      	cmp	r5, #16
1a004286:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a004288:	4f99      	ldr	r7, [pc, #612]	; (1a0044f0 <_vfprintf_r+0xbb8>)
1a00428a:	f340 8196 	ble.w	1a0045ba <_vfprintf_r+0xc82>
1a00428e:	2610      	movs	r6, #16
1a004290:	465a      	mov	r2, fp
1a004292:	e004      	b.n	1a00429e <_vfprintf_r+0x966>
1a004294:	3408      	adds	r4, #8
1a004296:	3d10      	subs	r5, #16
1a004298:	2d10      	cmp	r5, #16
1a00429a:	f340 818d 	ble.w	1a0045b8 <_vfprintf_r+0xc80>
1a00429e:	3301      	adds	r3, #1
1a0042a0:	3210      	adds	r2, #16
1a0042a2:	2b07      	cmp	r3, #7
1a0042a4:	9221      	str	r2, [sp, #132]	; 0x84
1a0042a6:	9320      	str	r3, [sp, #128]	; 0x80
1a0042a8:	6027      	str	r7, [r4, #0]
1a0042aa:	6066      	str	r6, [r4, #4]
1a0042ac:	ddf2      	ble.n	1a004294 <_vfprintf_r+0x95c>
1a0042ae:	4640      	mov	r0, r8
1a0042b0:	4649      	mov	r1, r9
1a0042b2:	aa1f      	add	r2, sp, #124	; 0x7c
1a0042b4:	f003 fb5a 	bl	1a00796c <__sprint_r>
1a0042b8:	2800      	cmp	r0, #0
1a0042ba:	f47f ac3d 	bne.w	1a003b38 <_vfprintf_r+0x200>
1a0042be:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a0042c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a0042c2:	ac2c      	add	r4, sp, #176	; 0xb0
1a0042c4:	e7e7      	b.n	1a004296 <_vfprintf_r+0x95e>
1a0042c6:	9b06      	ldr	r3, [sp, #24]
1a0042c8:	9a03      	ldr	r2, [sp, #12]
1a0042ca:	1a9e      	subs	r6, r3, r2
1a0042cc:	2e00      	cmp	r6, #0
1a0042ce:	f77f ad0a 	ble.w	1a003ce6 <_vfprintf_r+0x3ae>
1a0042d2:	2e10      	cmp	r6, #16
1a0042d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
1a0042d6:	4f86      	ldr	r7, [pc, #536]	; (1a0044f0 <_vfprintf_r+0xbb8>)
1a0042d8:	dd1f      	ble.n	1a00431a <_vfprintf_r+0x9e2>
1a0042da:	f04f 0a10 	mov.w	sl, #16
1a0042de:	465b      	mov	r3, fp
1a0042e0:	e004      	b.n	1a0042ec <_vfprintf_r+0x9b4>
1a0042e2:	3e10      	subs	r6, #16
1a0042e4:	2e10      	cmp	r6, #16
1a0042e6:	f104 0408 	add.w	r4, r4, #8
1a0042ea:	dd15      	ble.n	1a004318 <_vfprintf_r+0x9e0>
1a0042ec:	3201      	adds	r2, #1
1a0042ee:	3310      	adds	r3, #16
1a0042f0:	2a07      	cmp	r2, #7
1a0042f2:	9321      	str	r3, [sp, #132]	; 0x84
1a0042f4:	9220      	str	r2, [sp, #128]	; 0x80
1a0042f6:	e884 0480 	stmia.w	r4, {r7, sl}
1a0042fa:	ddf2      	ble.n	1a0042e2 <_vfprintf_r+0x9aa>
1a0042fc:	4640      	mov	r0, r8
1a0042fe:	4649      	mov	r1, r9
1a004300:	aa1f      	add	r2, sp, #124	; 0x7c
1a004302:	f003 fb33 	bl	1a00796c <__sprint_r>
1a004306:	2800      	cmp	r0, #0
1a004308:	f47f ac16 	bne.w	1a003b38 <_vfprintf_r+0x200>
1a00430c:	3e10      	subs	r6, #16
1a00430e:	2e10      	cmp	r6, #16
1a004310:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a004312:	9a20      	ldr	r2, [sp, #128]	; 0x80
1a004314:	ac2c      	add	r4, sp, #176	; 0xb0
1a004316:	dce9      	bgt.n	1a0042ec <_vfprintf_r+0x9b4>
1a004318:	469b      	mov	fp, r3
1a00431a:	3201      	adds	r2, #1
1a00431c:	44b3      	add	fp, r6
1a00431e:	2a07      	cmp	r2, #7
1a004320:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a004324:	9220      	str	r2, [sp, #128]	; 0x80
1a004326:	6027      	str	r7, [r4, #0]
1a004328:	6066      	str	r6, [r4, #4]
1a00432a:	f300 821a 	bgt.w	1a004762 <_vfprintf_r+0xe2a>
1a00432e:	3408      	adds	r4, #8
1a004330:	e4d9      	b.n	1a003ce6 <_vfprintf_r+0x3ae>
1a004332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a004334:	9d20      	ldr	r5, [sp, #128]	; 0x80
1a004336:	2b01      	cmp	r3, #1
1a004338:	f340 81d5 	ble.w	1a0046e6 <_vfprintf_r+0xdae>
1a00433c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00433e:	6023      	str	r3, [r4, #0]
1a004340:	3501      	adds	r5, #1
1a004342:	f10b 0601 	add.w	r6, fp, #1
1a004346:	2301      	movs	r3, #1
1a004348:	2d07      	cmp	r5, #7
1a00434a:	9621      	str	r6, [sp, #132]	; 0x84
1a00434c:	9520      	str	r5, [sp, #128]	; 0x80
1a00434e:	6063      	str	r3, [r4, #4]
1a004350:	f300 81e5 	bgt.w	1a00471e <_vfprintf_r+0xde6>
1a004354:	3408      	adds	r4, #8
1a004356:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a004358:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a00435a:	6023      	str	r3, [r4, #0]
1a00435c:	3501      	adds	r5, #1
1a00435e:	4416      	add	r6, r2
1a004360:	2d07      	cmp	r5, #7
1a004362:	9621      	str	r6, [sp, #132]	; 0x84
1a004364:	9520      	str	r5, [sp, #128]	; 0x80
1a004366:	6062      	str	r2, [r4, #4]
1a004368:	f300 81ef 	bgt.w	1a00474a <_vfprintf_r+0xe12>
1a00436c:	3408      	adds	r4, #8
1a00436e:	2300      	movs	r3, #0
1a004370:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a004374:	2200      	movs	r2, #0
1a004376:	f003 fcc3 	bl	1a007d00 <__aeabi_dcmpeq>
1a00437a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a00437c:	2800      	cmp	r0, #0
1a00437e:	f040 80e1 	bne.w	1a004544 <_vfprintf_r+0xc0c>
1a004382:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a004384:	3b01      	subs	r3, #1
1a004386:	3501      	adds	r5, #1
1a004388:	3201      	adds	r2, #1
1a00438a:	441e      	add	r6, r3
1a00438c:	2d07      	cmp	r5, #7
1a00438e:	9520      	str	r5, [sp, #128]	; 0x80
1a004390:	9621      	str	r6, [sp, #132]	; 0x84
1a004392:	6022      	str	r2, [r4, #0]
1a004394:	6063      	str	r3, [r4, #4]
1a004396:	f300 81b6 	bgt.w	1a004706 <_vfprintf_r+0xdce>
1a00439a:	3408      	adds	r4, #8
1a00439c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a00439e:	6062      	str	r2, [r4, #4]
1a0043a0:	3501      	adds	r5, #1
1a0043a2:	eb06 0b02 	add.w	fp, r6, r2
1a0043a6:	ab1b      	add	r3, sp, #108	; 0x6c
1a0043a8:	2d07      	cmp	r5, #7
1a0043aa:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a0043ae:	9520      	str	r5, [sp, #128]	; 0x80
1a0043b0:	6023      	str	r3, [r4, #0]
1a0043b2:	f77f ace3 	ble.w	1a003d7c <_vfprintf_r+0x444>
1a0043b6:	4640      	mov	r0, r8
1a0043b8:	4649      	mov	r1, r9
1a0043ba:	aa1f      	add	r2, sp, #124	; 0x7c
1a0043bc:	f003 fad6 	bl	1a00796c <__sprint_r>
1a0043c0:	2800      	cmp	r0, #0
1a0043c2:	f47f abb9 	bne.w	1a003b38 <_vfprintf_r+0x200>
1a0043c6:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
1a0043ca:	ac2c      	add	r4, sp, #176	; 0xb0
1a0043cc:	e4d7      	b.n	1a003d7e <_vfprintf_r+0x446>
1a0043ce:	4640      	mov	r0, r8
1a0043d0:	4649      	mov	r1, r9
1a0043d2:	aa1f      	add	r2, sp, #124	; 0x7c
1a0043d4:	f003 faca 	bl	1a00796c <__sprint_r>
1a0043d8:	2800      	cmp	r0, #0
1a0043da:	f43f ad1a 	beq.w	1a003e12 <_vfprintf_r+0x4da>
1a0043de:	f7ff bbab 	b.w	1a003b38 <_vfprintf_r+0x200>
1a0043e2:	2b00      	cmp	r3, #0
1a0043e4:	d133      	bne.n	1a00444e <_vfprintf_r+0xb16>
1a0043e6:	9b02      	ldr	r3, [sp, #8]
1a0043e8:	07da      	lsls	r2, r3, #31
1a0043ea:	d530      	bpl.n	1a00444e <_vfprintf_r+0xb16>
1a0043ec:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
1a0043f0:	2330      	movs	r3, #48	; 0x30
1a0043f2:	f80b 3d41 	strb.w	r3, [fp, #-65]!
1a0043f6:	ab2c      	add	r3, sp, #176	; 0xb0
1a0043f8:	ebcb 0303 	rsb	r3, fp, r3
1a0043fc:	9307      	str	r3, [sp, #28]
1a0043fe:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
1a004402:	f7ff bbef 	b.w	1a003be4 <_vfprintf_r+0x2ac>
1a004406:	4640      	mov	r0, r8
1a004408:	4649      	mov	r1, r9
1a00440a:	aa1f      	add	r2, sp, #124	; 0x7c
1a00440c:	f003 faae 	bl	1a00796c <__sprint_r>
1a004410:	2800      	cmp	r0, #0
1a004412:	f47f ab91 	bne.w	1a003b38 <_vfprintf_r+0x200>
1a004416:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
1a00441a:	ac2c      	add	r4, sp, #176	; 0xb0
1a00441c:	e49d      	b.n	1a003d5a <_vfprintf_r+0x422>
1a00441e:	4640      	mov	r0, r8
1a004420:	4649      	mov	r1, r9
1a004422:	aa1f      	add	r2, sp, #124	; 0x7c
1a004424:	f003 faa2 	bl	1a00796c <__sprint_r>
1a004428:	2800      	cmp	r0, #0
1a00442a:	f47f ab85 	bne.w	1a003b38 <_vfprintf_r+0x200>
1a00442e:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
1a004432:	ac2c      	add	r4, sp, #176	; 0xb0
1a004434:	e443      	b.n	1a003cbe <_vfprintf_r+0x386>
1a004436:	4640      	mov	r0, r8
1a004438:	4649      	mov	r1, r9
1a00443a:	aa1f      	add	r2, sp, #124	; 0x7c
1a00443c:	f003 fa96 	bl	1a00796c <__sprint_r>
1a004440:	2800      	cmp	r0, #0
1a004442:	f47f ab79 	bne.w	1a003b38 <_vfprintf_r+0x200>
1a004446:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
1a00444a:	ac2c      	add	r4, sp, #176	; 0xb0
1a00444c:	e448      	b.n	1a003ce0 <_vfprintf_r+0x3a8>
1a00444e:	ab2c      	add	r3, sp, #176	; 0xb0
1a004450:	f8cd a01c 	str.w	sl, [sp, #28]
1a004454:	930a      	str	r3, [sp, #40]	; 0x28
1a004456:	f7ff bbc5 	b.w	1a003be4 <_vfprintf_r+0x2ac>
1a00445a:	9810      	ldr	r0, [sp, #64]	; 0x40
1a00445c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
1a004460:	0933      	lsrs	r3, r6, #4
1a004462:	f006 010f 	and.w	r1, r6, #15
1a004466:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
1a00446a:	093a      	lsrs	r2, r7, #4
1a00446c:	461e      	mov	r6, r3
1a00446e:	4617      	mov	r7, r2
1a004470:	5c43      	ldrb	r3, [r0, r1]
1a004472:	f80b 3d01 	strb.w	r3, [fp, #-1]!
1a004476:	ea56 0307 	orrs.w	r3, r6, r7
1a00447a:	d1f1      	bne.n	1a004460 <_vfprintf_r+0xb28>
1a00447c:	465a      	mov	r2, fp
1a00447e:	ab2c      	add	r3, sp, #176	; 0xb0
1a004480:	1a9b      	subs	r3, r3, r2
1a004482:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
1a004486:	9307      	str	r3, [sp, #28]
1a004488:	f7ff bbac 	b.w	1a003be4 <_vfprintf_r+0x2ac>
1a00448c:	2302      	movs	r3, #2
1a00448e:	f7ff bb77 	b.w	1a003b80 <_vfprintf_r+0x248>
1a004492:	9d19      	ldr	r5, [sp, #100]	; 0x64
1a004494:	2d00      	cmp	r5, #0
1a004496:	f340 8257 	ble.w	1a004948 <_vfprintf_r+0x1010>
1a00449a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a00449c:	990c      	ldr	r1, [sp, #48]	; 0x30
1a00449e:	428a      	cmp	r2, r1
1a0044a0:	4613      	mov	r3, r2
1a0044a2:	bfa8      	it	ge
1a0044a4:	460b      	movge	r3, r1
1a0044a6:	461d      	mov	r5, r3
1a0044a8:	990a      	ldr	r1, [sp, #40]	; 0x28
1a0044aa:	2d00      	cmp	r5, #0
1a0044ac:	eb01 0a02 	add.w	sl, r1, r2
1a0044b0:	dd0b      	ble.n	1a0044ca <_vfprintf_r+0xb92>
1a0044b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a0044b4:	6021      	str	r1, [r4, #0]
1a0044b6:	3301      	adds	r3, #1
1a0044b8:	44ab      	add	fp, r5
1a0044ba:	2b07      	cmp	r3, #7
1a0044bc:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a0044c0:	6065      	str	r5, [r4, #4]
1a0044c2:	9320      	str	r3, [sp, #128]	; 0x80
1a0044c4:	f300 8309 	bgt.w	1a004ada <_vfprintf_r+0x11a2>
1a0044c8:	3408      	adds	r4, #8
1a0044ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0044cc:	2d00      	cmp	r5, #0
1a0044ce:	bfa8      	it	ge
1a0044d0:	1b5b      	subge	r3, r3, r5
1a0044d2:	2b00      	cmp	r3, #0
1a0044d4:	461d      	mov	r5, r3
1a0044d6:	f340 80b0 	ble.w	1a00463a <_vfprintf_r+0xd02>
1a0044da:	2d10      	cmp	r5, #16
1a0044dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a0044de:	4f04      	ldr	r7, [pc, #16]	; (1a0044f0 <_vfprintf_r+0xbb8>)
1a0044e0:	f340 821a 	ble.w	1a004918 <_vfprintf_r+0xfe0>
1a0044e4:	2610      	movs	r6, #16
1a0044e6:	465a      	mov	r2, fp
1a0044e8:	e009      	b.n	1a0044fe <_vfprintf_r+0xbc6>
1a0044ea:	bf00      	nop
1a0044ec:	1a0082ec 	.word	0x1a0082ec
1a0044f0:	1a00829c 	.word	0x1a00829c
1a0044f4:	3408      	adds	r4, #8
1a0044f6:	3d10      	subs	r5, #16
1a0044f8:	2d10      	cmp	r5, #16
1a0044fa:	f340 820c 	ble.w	1a004916 <_vfprintf_r+0xfde>
1a0044fe:	3301      	adds	r3, #1
1a004500:	3210      	adds	r2, #16
1a004502:	2b07      	cmp	r3, #7
1a004504:	9221      	str	r2, [sp, #132]	; 0x84
1a004506:	9320      	str	r3, [sp, #128]	; 0x80
1a004508:	6027      	str	r7, [r4, #0]
1a00450a:	6066      	str	r6, [r4, #4]
1a00450c:	ddf2      	ble.n	1a0044f4 <_vfprintf_r+0xbbc>
1a00450e:	4640      	mov	r0, r8
1a004510:	4649      	mov	r1, r9
1a004512:	aa1f      	add	r2, sp, #124	; 0x7c
1a004514:	f003 fa2a 	bl	1a00796c <__sprint_r>
1a004518:	2800      	cmp	r0, #0
1a00451a:	f47f ab0d 	bne.w	1a003b38 <_vfprintf_r+0x200>
1a00451e:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a004520:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a004522:	ac2c      	add	r4, sp, #176	; 0xb0
1a004524:	e7e7      	b.n	1a0044f6 <_vfprintf_r+0xbbe>
1a004526:	4640      	mov	r0, r8
1a004528:	4649      	mov	r1, r9
1a00452a:	aa1f      	add	r2, sp, #124	; 0x7c
1a00452c:	f003 fa1e 	bl	1a00796c <__sprint_r>
1a004530:	2800      	cmp	r0, #0
1a004532:	f47f ab01 	bne.w	1a003b38 <_vfprintf_r+0x200>
1a004536:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
1a00453a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
1a00453e:	ac2c      	add	r4, sp, #176	; 0xb0
1a004540:	f7ff bbaa 	b.w	1a003c98 <_vfprintf_r+0x360>
1a004544:	f103 3aff 	add.w	sl, r3, #4294967295
1a004548:	f1ba 0f00 	cmp.w	sl, #0
1a00454c:	f77f af26 	ble.w	1a00439c <_vfprintf_r+0xa64>
1a004550:	f1ba 0f10 	cmp.w	sl, #16
1a004554:	4f8f      	ldr	r7, [pc, #572]	; (1a004794 <_vfprintf_r+0xe5c>)
1a004556:	bfc8      	it	gt
1a004558:	f04f 0b10 	movgt.w	fp, #16
1a00455c:	dc07      	bgt.n	1a00456e <_vfprintf_r+0xc36>
1a00455e:	e0ea      	b.n	1a004736 <_vfprintf_r+0xdfe>
1a004560:	3408      	adds	r4, #8
1a004562:	f1aa 0a10 	sub.w	sl, sl, #16
1a004566:	f1ba 0f10 	cmp.w	sl, #16
1a00456a:	f340 80e4 	ble.w	1a004736 <_vfprintf_r+0xdfe>
1a00456e:	3501      	adds	r5, #1
1a004570:	3610      	adds	r6, #16
1a004572:	2d07      	cmp	r5, #7
1a004574:	9621      	str	r6, [sp, #132]	; 0x84
1a004576:	9520      	str	r5, [sp, #128]	; 0x80
1a004578:	e884 0880 	stmia.w	r4, {r7, fp}
1a00457c:	ddf0      	ble.n	1a004560 <_vfprintf_r+0xc28>
1a00457e:	4640      	mov	r0, r8
1a004580:	4649      	mov	r1, r9
1a004582:	aa1f      	add	r2, sp, #124	; 0x7c
1a004584:	f003 f9f2 	bl	1a00796c <__sprint_r>
1a004588:	2800      	cmp	r0, #0
1a00458a:	f47f aad5 	bne.w	1a003b38 <_vfprintf_r+0x200>
1a00458e:	9e21      	ldr	r6, [sp, #132]	; 0x84
1a004590:	9d20      	ldr	r5, [sp, #128]	; 0x80
1a004592:	ac2c      	add	r4, sp, #176	; 0xb0
1a004594:	e7e5      	b.n	1a004562 <_vfprintf_r+0xc2a>
1a004596:	9908      	ldr	r1, [sp, #32]
1a004598:	460a      	mov	r2, r1
1a00459a:	3204      	adds	r2, #4
1a00459c:	680e      	ldr	r6, [r1, #0]
1a00459e:	9208      	str	r2, [sp, #32]
1a0045a0:	2700      	movs	r7, #0
1a0045a2:	f7ff baed 	b.w	1a003b80 <_vfprintf_r+0x248>
1a0045a6:	9a08      	ldr	r2, [sp, #32]
1a0045a8:	6816      	ldr	r6, [r2, #0]
1a0045aa:	4613      	mov	r3, r2
1a0045ac:	3304      	adds	r3, #4
1a0045ae:	17f7      	asrs	r7, r6, #31
1a0045b0:	9308      	str	r3, [sp, #32]
1a0045b2:	4632      	mov	r2, r6
1a0045b4:	463b      	mov	r3, r7
1a0045b6:	e4c0      	b.n	1a003f3a <_vfprintf_r+0x602>
1a0045b8:	4693      	mov	fp, r2
1a0045ba:	3301      	adds	r3, #1
1a0045bc:	44ab      	add	fp, r5
1a0045be:	2b07      	cmp	r3, #7
1a0045c0:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a0045c4:	9320      	str	r3, [sp, #128]	; 0x80
1a0045c6:	6027      	str	r7, [r4, #0]
1a0045c8:	6065      	str	r5, [r4, #4]
1a0045ca:	f77f abd7 	ble.w	1a003d7c <_vfprintf_r+0x444>
1a0045ce:	e6f2      	b.n	1a0043b6 <_vfprintf_r+0xa7e>
1a0045d0:	2b30      	cmp	r3, #48	; 0x30
1a0045d2:	f000 823e 	beq.w	1a004a52 <_vfprintf_r+0x111a>
1a0045d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0045d8:	3b01      	subs	r3, #1
1a0045da:	461a      	mov	r2, r3
1a0045dc:	a82c      	add	r0, sp, #176	; 0xb0
1a0045de:	930a      	str	r3, [sp, #40]	; 0x28
1a0045e0:	1a82      	subs	r2, r0, r2
1a0045e2:	2330      	movs	r3, #48	; 0x30
1a0045e4:	9207      	str	r2, [sp, #28]
1a0045e6:	f801 3c01 	strb.w	r3, [r1, #-1]
1a0045ea:	f7ff bafb 	b.w	1a003be4 <_vfprintf_r+0x2ac>
1a0045ee:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
1a0045f2:	f8cd c00c 	str.w	ip, [sp, #12]
1a0045f6:	4630      	mov	r0, r6
1a0045f8:	4639      	mov	r1, r7
1a0045fa:	220a      	movs	r2, #10
1a0045fc:	2300      	movs	r3, #0
1a0045fe:	f7fe fb31 	bl	1a002c64 <__aeabi_uldivmod>
1a004602:	3230      	adds	r2, #48	; 0x30
1a004604:	4630      	mov	r0, r6
1a004606:	4639      	mov	r1, r7
1a004608:	f80b 2d01 	strb.w	r2, [fp, #-1]!
1a00460c:	2300      	movs	r3, #0
1a00460e:	220a      	movs	r2, #10
1a004610:	f7fe fb28 	bl	1a002c64 <__aeabi_uldivmod>
1a004614:	4606      	mov	r6, r0
1a004616:	460f      	mov	r7, r1
1a004618:	ea56 0307 	orrs.w	r3, r6, r7
1a00461c:	d1eb      	bne.n	1a0045f6 <_vfprintf_r+0xcbe>
1a00461e:	f8dd c00c 	ldr.w	ip, [sp, #12]
1a004622:	e72b      	b.n	1a00447c <_vfprintf_r+0xb44>
1a004624:	4640      	mov	r0, r8
1a004626:	4649      	mov	r1, r9
1a004628:	aa1f      	add	r2, sp, #124	; 0x7c
1a00462a:	f003 f99f 	bl	1a00796c <__sprint_r>
1a00462e:	2800      	cmp	r0, #0
1a004630:	f47f aa82 	bne.w	1a003b38 <_vfprintf_r+0x200>
1a004634:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
1a004638:	ac2c      	add	r4, sp, #176	; 0xb0
1a00463a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a00463c:	990c      	ldr	r1, [sp, #48]	; 0x30
1a00463e:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a004640:	440a      	add	r2, r1
1a004642:	4616      	mov	r6, r2
1a004644:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a004646:	4293      	cmp	r3, r2
1a004648:	db3e      	blt.n	1a0046c8 <_vfprintf_r+0xd90>
1a00464a:	9a02      	ldr	r2, [sp, #8]
1a00464c:	07d5      	lsls	r5, r2, #31
1a00464e:	d43b      	bmi.n	1a0046c8 <_vfprintf_r+0xd90>
1a004650:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a004652:	ebc6 050a 	rsb	r5, r6, sl
1a004656:	1ad3      	subs	r3, r2, r3
1a004658:	429d      	cmp	r5, r3
1a00465a:	bfa8      	it	ge
1a00465c:	461d      	movge	r5, r3
1a00465e:	2d00      	cmp	r5, #0
1a004660:	462f      	mov	r7, r5
1a004662:	dd0b      	ble.n	1a00467c <_vfprintf_r+0xd44>
1a004664:	9a20      	ldr	r2, [sp, #128]	; 0x80
1a004666:	6026      	str	r6, [r4, #0]
1a004668:	3201      	adds	r2, #1
1a00466a:	44ab      	add	fp, r5
1a00466c:	2a07      	cmp	r2, #7
1a00466e:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a004672:	6065      	str	r5, [r4, #4]
1a004674:	9220      	str	r2, [sp, #128]	; 0x80
1a004676:	f300 8266 	bgt.w	1a004b46 <_vfprintf_r+0x120e>
1a00467a:	3408      	adds	r4, #8
1a00467c:	2f00      	cmp	r7, #0
1a00467e:	bfac      	ite	ge
1a004680:	1bdd      	subge	r5, r3, r7
1a004682:	461d      	movlt	r5, r3
1a004684:	2d00      	cmp	r5, #0
1a004686:	f77f ab7a 	ble.w	1a003d7e <_vfprintf_r+0x446>
1a00468a:	2d10      	cmp	r5, #16
1a00468c:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a00468e:	4f41      	ldr	r7, [pc, #260]	; (1a004794 <_vfprintf_r+0xe5c>)
1a004690:	dd93      	ble.n	1a0045ba <_vfprintf_r+0xc82>
1a004692:	2610      	movs	r6, #16
1a004694:	465a      	mov	r2, fp
1a004696:	e003      	b.n	1a0046a0 <_vfprintf_r+0xd68>
1a004698:	3408      	adds	r4, #8
1a00469a:	3d10      	subs	r5, #16
1a00469c:	2d10      	cmp	r5, #16
1a00469e:	dd8b      	ble.n	1a0045b8 <_vfprintf_r+0xc80>
1a0046a0:	3301      	adds	r3, #1
1a0046a2:	3210      	adds	r2, #16
1a0046a4:	2b07      	cmp	r3, #7
1a0046a6:	9221      	str	r2, [sp, #132]	; 0x84
1a0046a8:	9320      	str	r3, [sp, #128]	; 0x80
1a0046aa:	6027      	str	r7, [r4, #0]
1a0046ac:	6066      	str	r6, [r4, #4]
1a0046ae:	ddf3      	ble.n	1a004698 <_vfprintf_r+0xd60>
1a0046b0:	4640      	mov	r0, r8
1a0046b2:	4649      	mov	r1, r9
1a0046b4:	aa1f      	add	r2, sp, #124	; 0x7c
1a0046b6:	f003 f959 	bl	1a00796c <__sprint_r>
1a0046ba:	2800      	cmp	r0, #0
1a0046bc:	f47f aa3c 	bne.w	1a003b38 <_vfprintf_r+0x200>
1a0046c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a0046c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a0046c4:	ac2c      	add	r4, sp, #176	; 0xb0
1a0046c6:	e7e8      	b.n	1a00469a <_vfprintf_r+0xd62>
1a0046c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
1a0046ca:	9812      	ldr	r0, [sp, #72]	; 0x48
1a0046cc:	9911      	ldr	r1, [sp, #68]	; 0x44
1a0046ce:	6021      	str	r1, [r4, #0]
1a0046d0:	3201      	adds	r2, #1
1a0046d2:	4483      	add	fp, r0
1a0046d4:	2a07      	cmp	r2, #7
1a0046d6:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a0046da:	6060      	str	r0, [r4, #4]
1a0046dc:	9220      	str	r2, [sp, #128]	; 0x80
1a0046de:	f300 8208 	bgt.w	1a004af2 <_vfprintf_r+0x11ba>
1a0046e2:	3408      	adds	r4, #8
1a0046e4:	e7b4      	b.n	1a004650 <_vfprintf_r+0xd18>
1a0046e6:	9b02      	ldr	r3, [sp, #8]
1a0046e8:	07d8      	lsls	r0, r3, #31
1a0046ea:	f53f ae27 	bmi.w	1a00433c <_vfprintf_r+0xa04>
1a0046ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0046f0:	6023      	str	r3, [r4, #0]
1a0046f2:	3501      	adds	r5, #1
1a0046f4:	f10b 0601 	add.w	r6, fp, #1
1a0046f8:	2301      	movs	r3, #1
1a0046fa:	2d07      	cmp	r5, #7
1a0046fc:	9621      	str	r6, [sp, #132]	; 0x84
1a0046fe:	9520      	str	r5, [sp, #128]	; 0x80
1a004700:	6063      	str	r3, [r4, #4]
1a004702:	f77f ae4a 	ble.w	1a00439a <_vfprintf_r+0xa62>
1a004706:	4640      	mov	r0, r8
1a004708:	4649      	mov	r1, r9
1a00470a:	aa1f      	add	r2, sp, #124	; 0x7c
1a00470c:	f003 f92e 	bl	1a00796c <__sprint_r>
1a004710:	2800      	cmp	r0, #0
1a004712:	f47f aa11 	bne.w	1a003b38 <_vfprintf_r+0x200>
1a004716:	9e21      	ldr	r6, [sp, #132]	; 0x84
1a004718:	9d20      	ldr	r5, [sp, #128]	; 0x80
1a00471a:	ac2c      	add	r4, sp, #176	; 0xb0
1a00471c:	e63e      	b.n	1a00439c <_vfprintf_r+0xa64>
1a00471e:	4640      	mov	r0, r8
1a004720:	4649      	mov	r1, r9
1a004722:	aa1f      	add	r2, sp, #124	; 0x7c
1a004724:	f003 f922 	bl	1a00796c <__sprint_r>
1a004728:	2800      	cmp	r0, #0
1a00472a:	f47f aa05 	bne.w	1a003b38 <_vfprintf_r+0x200>
1a00472e:	9e21      	ldr	r6, [sp, #132]	; 0x84
1a004730:	9d20      	ldr	r5, [sp, #128]	; 0x80
1a004732:	ac2c      	add	r4, sp, #176	; 0xb0
1a004734:	e60f      	b.n	1a004356 <_vfprintf_r+0xa1e>
1a004736:	3501      	adds	r5, #1
1a004738:	4456      	add	r6, sl
1a00473a:	2d07      	cmp	r5, #7
1a00473c:	9621      	str	r6, [sp, #132]	; 0x84
1a00473e:	9520      	str	r5, [sp, #128]	; 0x80
1a004740:	e884 0480 	stmia.w	r4, {r7, sl}
1a004744:	f77f ae29 	ble.w	1a00439a <_vfprintf_r+0xa62>
1a004748:	e7dd      	b.n	1a004706 <_vfprintf_r+0xdce>
1a00474a:	4640      	mov	r0, r8
1a00474c:	4649      	mov	r1, r9
1a00474e:	aa1f      	add	r2, sp, #124	; 0x7c
1a004750:	f003 f90c 	bl	1a00796c <__sprint_r>
1a004754:	2800      	cmp	r0, #0
1a004756:	f47f a9ef 	bne.w	1a003b38 <_vfprintf_r+0x200>
1a00475a:	9e21      	ldr	r6, [sp, #132]	; 0x84
1a00475c:	9d20      	ldr	r5, [sp, #128]	; 0x80
1a00475e:	ac2c      	add	r4, sp, #176	; 0xb0
1a004760:	e605      	b.n	1a00436e <_vfprintf_r+0xa36>
1a004762:	4640      	mov	r0, r8
1a004764:	4649      	mov	r1, r9
1a004766:	aa1f      	add	r2, sp, #124	; 0x7c
1a004768:	f003 f900 	bl	1a00796c <__sprint_r>
1a00476c:	2800      	cmp	r0, #0
1a00476e:	f47f a9e3 	bne.w	1a003b38 <_vfprintf_r+0x200>
1a004772:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
1a004776:	ac2c      	add	r4, sp, #176	; 0xb0
1a004778:	f7ff bab5 	b.w	1a003ce6 <_vfprintf_r+0x3ae>
1a00477c:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
1a004780:	4276      	negs	r6, r6
1a004782:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
1a004786:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
1a00478a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
1a00478e:	2301      	movs	r3, #1
1a004790:	f7ff b9fc 	b.w	1a003b8c <_vfprintf_r+0x254>
1a004794:	1a00829c 	.word	0x1a00829c
1a004798:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
1a00479c:	f003 f83a 	bl	1a007814 <__fpclassifyd>
1a0047a0:	2800      	cmp	r0, #0
1a0047a2:	f000 8116 	beq.w	1a0049d2 <_vfprintf_r+0x109a>
1a0047a6:	f025 0320 	bic.w	r3, r5, #32
1a0047aa:	f1ba 3fff 	cmp.w	sl, #4294967295
1a0047ae:	9303      	str	r3, [sp, #12]
1a0047b0:	f000 8260 	beq.w	1a004c74 <_vfprintf_r+0x133c>
1a0047b4:	2b47      	cmp	r3, #71	; 0x47
1a0047b6:	d105      	bne.n	1a0047c4 <_vfprintf_r+0xe8c>
1a0047b8:	f1ba 0f00 	cmp.w	sl, #0
1a0047bc:	bf14      	ite	ne
1a0047be:	46d3      	movne	fp, sl
1a0047c0:	f04f 0b01 	moveq.w	fp, #1
1a0047c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0047c6:	9a02      	ldr	r2, [sp, #8]
1a0047c8:	2b00      	cmp	r3, #0
1a0047ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
1a0047ce:	9209      	str	r2, [sp, #36]	; 0x24
1a0047d0:	f2c0 8260 	blt.w	1a004c94 <_vfprintf_r+0x135c>
1a0047d4:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
1a0047d8:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
1a0047dc:	f04f 0a00 	mov.w	sl, #0
1a0047e0:	2d66      	cmp	r5, #102	; 0x66
1a0047e2:	f000 815e 	beq.w	1a004aa2 <_vfprintf_r+0x116a>
1a0047e6:	2d46      	cmp	r5, #70	; 0x46
1a0047e8:	f000 815b 	beq.w	1a004aa2 <_vfprintf_r+0x116a>
1a0047ec:	9b03      	ldr	r3, [sp, #12]
1a0047ee:	2b45      	cmp	r3, #69	; 0x45
1a0047f0:	bf0c      	ite	eq
1a0047f2:	f10b 0701 	addeq.w	r7, fp, #1
1a0047f6:	465f      	movne	r7, fp
1a0047f8:	aa1a      	add	r2, sp, #104	; 0x68
1a0047fa:	ab1d      	add	r3, sp, #116	; 0x74
1a0047fc:	e88d 000c 	stmia.w	sp, {r2, r3}
1a004800:	4640      	mov	r0, r8
1a004802:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
1a004806:	2102      	movs	r1, #2
1a004808:	463a      	mov	r2, r7
1a00480a:	ab19      	add	r3, sp, #100	; 0x64
1a00480c:	f000 fbdc 	bl	1a004fc8 <_dtoa_r>
1a004810:	2d67      	cmp	r5, #103	; 0x67
1a004812:	900a      	str	r0, [sp, #40]	; 0x28
1a004814:	d002      	beq.n	1a00481c <_vfprintf_r+0xee4>
1a004816:	2d47      	cmp	r5, #71	; 0x47
1a004818:	f040 8151 	bne.w	1a004abe <_vfprintf_r+0x1186>
1a00481c:	9b02      	ldr	r3, [sp, #8]
1a00481e:	07db      	lsls	r3, r3, #31
1a004820:	f140 8241 	bpl.w	1a004ca6 <_vfprintf_r+0x136e>
1a004824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004826:	19de      	adds	r6, r3, r7
1a004828:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
1a00482c:	2200      	movs	r2, #0
1a00482e:	2300      	movs	r3, #0
1a004830:	f003 fa66 	bl	1a007d00 <__aeabi_dcmpeq>
1a004834:	2800      	cmp	r0, #0
1a004836:	f040 81ad 	bne.w	1a004b94 <_vfprintf_r+0x125c>
1a00483a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
1a00483c:	429e      	cmp	r6, r3
1a00483e:	d906      	bls.n	1a00484e <_vfprintf_r+0xf16>
1a004840:	2130      	movs	r1, #48	; 0x30
1a004842:	1c5a      	adds	r2, r3, #1
1a004844:	921d      	str	r2, [sp, #116]	; 0x74
1a004846:	7019      	strb	r1, [r3, #0]
1a004848:	9b1d      	ldr	r3, [sp, #116]	; 0x74
1a00484a:	429e      	cmp	r6, r3
1a00484c:	d8f9      	bhi.n	1a004842 <_vfprintf_r+0xf0a>
1a00484e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a004850:	1a9b      	subs	r3, r3, r2
1a004852:	930d      	str	r3, [sp, #52]	; 0x34
1a004854:	9b03      	ldr	r3, [sp, #12]
1a004856:	2b47      	cmp	r3, #71	; 0x47
1a004858:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a00485a:	f000 8183 	beq.w	1a004b64 <_vfprintf_r+0x122c>
1a00485e:	2d65      	cmp	r5, #101	; 0x65
1a004860:	f340 81a6 	ble.w	1a004bb0 <_vfprintf_r+0x1278>
1a004864:	2d66      	cmp	r5, #102	; 0x66
1a004866:	930c      	str	r3, [sp, #48]	; 0x30
1a004868:	f000 821f 	beq.w	1a004caa <_vfprintf_r+0x1372>
1a00486c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a00486e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a004870:	4293      	cmp	r3, r2
1a004872:	f300 8202 	bgt.w	1a004c7a <_vfprintf_r+0x1342>
1a004876:	9b02      	ldr	r3, [sp, #8]
1a004878:	07d9      	lsls	r1, r3, #31
1a00487a:	f100 8239 	bmi.w	1a004cf0 <_vfprintf_r+0x13b8>
1a00487e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
1a004882:	9207      	str	r2, [sp, #28]
1a004884:	f1ba 0f00 	cmp.w	sl, #0
1a004888:	f040 8179 	bne.w	1a004b7e <_vfprintf_r+0x1246>
1a00488c:	9303      	str	r3, [sp, #12]
1a00488e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004890:	9302      	str	r3, [sp, #8]
1a004892:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
1a004896:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
1a00489a:	f7ff b9ab 	b.w	1a003bf4 <_vfprintf_r+0x2bc>
1a00489e:	f027 0707 	bic.w	r7, r7, #7
1a0048a2:	ed97 7b00 	vldr	d7, [r7]
1a0048a6:	f107 0308 	add.w	r3, r7, #8
1a0048aa:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
1a0048ae:	9308      	str	r3, [sp, #32]
1a0048b0:	f7ff bb63 	b.w	1a003f7a <_vfprintf_r+0x642>
1a0048b4:	9b02      	ldr	r3, [sp, #8]
1a0048b6:	06db      	lsls	r3, r3, #27
1a0048b8:	d40b      	bmi.n	1a0048d2 <_vfprintf_r+0xf9a>
1a0048ba:	9b02      	ldr	r3, [sp, #8]
1a0048bc:	065f      	lsls	r7, r3, #25
1a0048be:	d508      	bpl.n	1a0048d2 <_vfprintf_r+0xf9a>
1a0048c0:	9a08      	ldr	r2, [sp, #32]
1a0048c2:	6813      	ldr	r3, [r2, #0]
1a0048c4:	3204      	adds	r2, #4
1a0048c6:	9208      	str	r2, [sp, #32]
1a0048c8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
1a0048cc:	801a      	strh	r2, [r3, #0]
1a0048ce:	f7ff b874 	b.w	1a0039ba <_vfprintf_r+0x82>
1a0048d2:	9a08      	ldr	r2, [sp, #32]
1a0048d4:	6813      	ldr	r3, [r2, #0]
1a0048d6:	3204      	adds	r2, #4
1a0048d8:	9208      	str	r2, [sp, #32]
1a0048da:	9a05      	ldr	r2, [sp, #20]
1a0048dc:	601a      	str	r2, [r3, #0]
1a0048de:	f7ff b86c 	b.w	1a0039ba <_vfprintf_r+0x82>
1a0048e2:	9b02      	ldr	r3, [sp, #8]
1a0048e4:	9a08      	ldr	r2, [sp, #32]
1a0048e6:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0048ea:	4613      	mov	r3, r2
1a0048ec:	f43f ac62 	beq.w	1a0041b4 <_vfprintf_r+0x87c>
1a0048f0:	8816      	ldrh	r6, [r2, #0]
1a0048f2:	3204      	adds	r2, #4
1a0048f4:	2700      	movs	r7, #0
1a0048f6:	2301      	movs	r3, #1
1a0048f8:	9208      	str	r2, [sp, #32]
1a0048fa:	f7ff b941 	b.w	1a003b80 <_vfprintf_r+0x248>
1a0048fe:	9b02      	ldr	r3, [sp, #8]
1a004900:	9a08      	ldr	r2, [sp, #32]
1a004902:	f013 0f40 	tst.w	r3, #64	; 0x40
1a004906:	4613      	mov	r3, r2
1a004908:	d076      	beq.n	1a0049f8 <_vfprintf_r+0x10c0>
1a00490a:	3304      	adds	r3, #4
1a00490c:	8816      	ldrh	r6, [r2, #0]
1a00490e:	9308      	str	r3, [sp, #32]
1a004910:	2700      	movs	r7, #0
1a004912:	f7ff bad3 	b.w	1a003ebc <_vfprintf_r+0x584>
1a004916:	4693      	mov	fp, r2
1a004918:	3301      	adds	r3, #1
1a00491a:	44ab      	add	fp, r5
1a00491c:	2b07      	cmp	r3, #7
1a00491e:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a004922:	9320      	str	r3, [sp, #128]	; 0x80
1a004924:	6027      	str	r7, [r4, #0]
1a004926:	6065      	str	r5, [r4, #4]
1a004928:	f73f ae7c 	bgt.w	1a004624 <_vfprintf_r+0xcec>
1a00492c:	3408      	adds	r4, #8
1a00492e:	e684      	b.n	1a00463a <_vfprintf_r+0xd02>
1a004930:	4640      	mov	r0, r8
1a004932:	4649      	mov	r1, r9
1a004934:	aa1f      	add	r2, sp, #124	; 0x7c
1a004936:	f003 f819 	bl	1a00796c <__sprint_r>
1a00493a:	2800      	cmp	r0, #0
1a00493c:	f47f a8fc 	bne.w	1a003b38 <_vfprintf_r+0x200>
1a004940:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
1a004944:	ac2c      	add	r4, sp, #176	; 0xb0
1a004946:	e482      	b.n	1a00424e <_vfprintf_r+0x916>
1a004948:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a00494a:	4ab0      	ldr	r2, [pc, #704]	; (1a004c0c <_vfprintf_r+0x12d4>)
1a00494c:	6022      	str	r2, [r4, #0]
1a00494e:	3301      	adds	r3, #1
1a004950:	f10b 0b01 	add.w	fp, fp, #1
1a004954:	2201      	movs	r2, #1
1a004956:	2b07      	cmp	r3, #7
1a004958:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a00495c:	9320      	str	r3, [sp, #128]	; 0x80
1a00495e:	6062      	str	r2, [r4, #4]
1a004960:	dc50      	bgt.n	1a004a04 <_vfprintf_r+0x10cc>
1a004962:	3408      	adds	r4, #8
1a004964:	b92d      	cbnz	r5, 1a004972 <_vfprintf_r+0x103a>
1a004966:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a004968:	b91b      	cbnz	r3, 1a004972 <_vfprintf_r+0x103a>
1a00496a:	9b02      	ldr	r3, [sp, #8]
1a00496c:	07de      	lsls	r6, r3, #31
1a00496e:	f57f aa06 	bpl.w	1a003d7e <_vfprintf_r+0x446>
1a004972:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a004974:	9912      	ldr	r1, [sp, #72]	; 0x48
1a004976:	9a11      	ldr	r2, [sp, #68]	; 0x44
1a004978:	6022      	str	r2, [r4, #0]
1a00497a:	3301      	adds	r3, #1
1a00497c:	eb0b 0201 	add.w	r2, fp, r1
1a004980:	2b07      	cmp	r3, #7
1a004982:	9221      	str	r2, [sp, #132]	; 0x84
1a004984:	6061      	str	r1, [r4, #4]
1a004986:	9320      	str	r3, [sp, #128]	; 0x80
1a004988:	f300 8167 	bgt.w	1a004c5a <_vfprintf_r+0x1322>
1a00498c:	3408      	adds	r4, #8
1a00498e:	426d      	negs	r5, r5
1a004990:	2d00      	cmp	r5, #0
1a004992:	dd6f      	ble.n	1a004a74 <_vfprintf_r+0x113c>
1a004994:	2d10      	cmp	r5, #16
1a004996:	4f9e      	ldr	r7, [pc, #632]	; (1a004c10 <_vfprintf_r+0x12d8>)
1a004998:	bfc8      	it	gt
1a00499a:	2610      	movgt	r6, #16
1a00499c:	dc05      	bgt.n	1a0049aa <_vfprintf_r+0x1072>
1a00499e:	e0b5      	b.n	1a004b0c <_vfprintf_r+0x11d4>
1a0049a0:	3408      	adds	r4, #8
1a0049a2:	3d10      	subs	r5, #16
1a0049a4:	2d10      	cmp	r5, #16
1a0049a6:	f340 80b1 	ble.w	1a004b0c <_vfprintf_r+0x11d4>
1a0049aa:	3301      	adds	r3, #1
1a0049ac:	3210      	adds	r2, #16
1a0049ae:	2b07      	cmp	r3, #7
1a0049b0:	9221      	str	r2, [sp, #132]	; 0x84
1a0049b2:	9320      	str	r3, [sp, #128]	; 0x80
1a0049b4:	6027      	str	r7, [r4, #0]
1a0049b6:	6066      	str	r6, [r4, #4]
1a0049b8:	ddf2      	ble.n	1a0049a0 <_vfprintf_r+0x1068>
1a0049ba:	4640      	mov	r0, r8
1a0049bc:	4649      	mov	r1, r9
1a0049be:	aa1f      	add	r2, sp, #124	; 0x7c
1a0049c0:	f002 ffd4 	bl	1a00796c <__sprint_r>
1a0049c4:	2800      	cmp	r0, #0
1a0049c6:	f47f a8b7 	bne.w	1a003b38 <_vfprintf_r+0x200>
1a0049ca:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a0049cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a0049ce:	ac2c      	add	r4, sp, #176	; 0xb0
1a0049d0:	e7e7      	b.n	1a0049a2 <_vfprintf_r+0x106a>
1a0049d2:	9e02      	ldr	r6, [sp, #8]
1a0049d4:	4a8f      	ldr	r2, [pc, #572]	; (1a004c14 <_vfprintf_r+0x12dc>)
1a0049d6:	4b90      	ldr	r3, [pc, #576]	; (1a004c18 <_vfprintf_r+0x12e0>)
1a0049d8:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
1a0049dc:	900b      	str	r0, [sp, #44]	; 0x2c
1a0049de:	2103      	movs	r1, #3
1a0049e0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
1a0049e4:	2d47      	cmp	r5, #71	; 0x47
1a0049e6:	bfd8      	it	le
1a0049e8:	461a      	movle	r2, r3
1a0049ea:	9103      	str	r1, [sp, #12]
1a0049ec:	9602      	str	r6, [sp, #8]
1a0049ee:	900c      	str	r0, [sp, #48]	; 0x30
1a0049f0:	920a      	str	r2, [sp, #40]	; 0x28
1a0049f2:	9107      	str	r1, [sp, #28]
1a0049f4:	f7ff b8fe 	b.w	1a003bf4 <_vfprintf_r+0x2bc>
1a0049f8:	3304      	adds	r3, #4
1a0049fa:	6816      	ldr	r6, [r2, #0]
1a0049fc:	9308      	str	r3, [sp, #32]
1a0049fe:	2700      	movs	r7, #0
1a004a00:	f7ff ba5c 	b.w	1a003ebc <_vfprintf_r+0x584>
1a004a04:	4640      	mov	r0, r8
1a004a06:	4649      	mov	r1, r9
1a004a08:	aa1f      	add	r2, sp, #124	; 0x7c
1a004a0a:	f002 ffaf 	bl	1a00796c <__sprint_r>
1a004a0e:	2800      	cmp	r0, #0
1a004a10:	f47f a892 	bne.w	1a003b38 <_vfprintf_r+0x200>
1a004a14:	9d19      	ldr	r5, [sp, #100]	; 0x64
1a004a16:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
1a004a1a:	ac2c      	add	r4, sp, #176	; 0xb0
1a004a1c:	e7a2      	b.n	1a004964 <_vfprintf_r+0x102c>
1a004a1e:	f041 0120 	orr.w	r1, r1, #32
1a004a22:	9102      	str	r1, [sp, #8]
1a004a24:	785d      	ldrb	r5, [r3, #1]
1a004a26:	1c59      	adds	r1, r3, #1
1a004a28:	f7fe bff7 	b.w	1a003a1a <_vfprintf_r+0xe2>
1a004a2c:	9806      	ldr	r0, [sp, #24]
1a004a2e:	9108      	str	r1, [sp, #32]
1a004a30:	4240      	negs	r0, r0
1a004a32:	9006      	str	r0, [sp, #24]
1a004a34:	4619      	mov	r1, r3
1a004a36:	f7ff b9f1 	b.w	1a003e1c <_vfprintf_r+0x4e4>
1a004a3a:	4640      	mov	r0, r8
1a004a3c:	4649      	mov	r1, r9
1a004a3e:	aa1f      	add	r2, sp, #124	; 0x7c
1a004a40:	f002 ff94 	bl	1a00796c <__sprint_r>
1a004a44:	2800      	cmp	r0, #0
1a004a46:	f47f a877 	bne.w	1a003b38 <_vfprintf_r+0x200>
1a004a4a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
1a004a4e:	ac2c      	add	r4, sp, #176	; 0xb0
1a004a50:	e413      	b.n	1a00427a <_vfprintf_r+0x942>
1a004a52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a004a54:	ab2c      	add	r3, sp, #176	; 0xb0
1a004a56:	1a9b      	subs	r3, r3, r2
1a004a58:	9307      	str	r3, [sp, #28]
1a004a5a:	f7ff b8c3 	b.w	1a003be4 <_vfprintf_r+0x2ac>
1a004a5e:	4640      	mov	r0, r8
1a004a60:	4649      	mov	r1, r9
1a004a62:	aa1f      	add	r2, sp, #124	; 0x7c
1a004a64:	f002 ff82 	bl	1a00796c <__sprint_r>
1a004a68:	2800      	cmp	r0, #0
1a004a6a:	f47f a865 	bne.w	1a003b38 <_vfprintf_r+0x200>
1a004a6e:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a004a70:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a004a72:	ac2c      	add	r4, sp, #176	; 0xb0
1a004a74:	980d      	ldr	r0, [sp, #52]	; 0x34
1a004a76:	6060      	str	r0, [r4, #4]
1a004a78:	3301      	adds	r3, #1
1a004a7a:	eb02 0b00 	add.w	fp, r2, r0
1a004a7e:	2b07      	cmp	r3, #7
1a004a80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a004a82:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a004a86:	9320      	str	r3, [sp, #128]	; 0x80
1a004a88:	6022      	str	r2, [r4, #0]
1a004a8a:	f77f a977 	ble.w	1a003d7c <_vfprintf_r+0x444>
1a004a8e:	e492      	b.n	1a0043b6 <_vfprintf_r+0xa7e>
1a004a90:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
1a004a94:	f7fe ff20 	bl	1a0038d8 <strlen>
1a004a98:	9708      	str	r7, [sp, #32]
1a004a9a:	9007      	str	r0, [sp, #28]
1a004a9c:	4603      	mov	r3, r0
1a004a9e:	f7ff b9f2 	b.w	1a003e86 <_vfprintf_r+0x54e>
1a004aa2:	aa1a      	add	r2, sp, #104	; 0x68
1a004aa4:	ab1d      	add	r3, sp, #116	; 0x74
1a004aa6:	e88d 000c 	stmia.w	sp, {r2, r3}
1a004aaa:	4640      	mov	r0, r8
1a004aac:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
1a004ab0:	2103      	movs	r1, #3
1a004ab2:	465a      	mov	r2, fp
1a004ab4:	ab19      	add	r3, sp, #100	; 0x64
1a004ab6:	f000 fa87 	bl	1a004fc8 <_dtoa_r>
1a004aba:	465f      	mov	r7, fp
1a004abc:	900a      	str	r0, [sp, #40]	; 0x28
1a004abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004ac0:	19de      	adds	r6, r3, r7
1a004ac2:	9b03      	ldr	r3, [sp, #12]
1a004ac4:	2b46      	cmp	r3, #70	; 0x46
1a004ac6:	f47f aeaf 	bne.w	1a004828 <_vfprintf_r+0xef0>
1a004aca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004acc:	781b      	ldrb	r3, [r3, #0]
1a004ace:	2b30      	cmp	r3, #48	; 0x30
1a004ad0:	f000 8100 	beq.w	1a004cd4 <_vfprintf_r+0x139c>
1a004ad4:	9f19      	ldr	r7, [sp, #100]	; 0x64
1a004ad6:	443e      	add	r6, r7
1a004ad8:	e6a6      	b.n	1a004828 <_vfprintf_r+0xef0>
1a004ada:	4640      	mov	r0, r8
1a004adc:	4649      	mov	r1, r9
1a004ade:	aa1f      	add	r2, sp, #124	; 0x7c
1a004ae0:	f002 ff44 	bl	1a00796c <__sprint_r>
1a004ae4:	2800      	cmp	r0, #0
1a004ae6:	f47f a827 	bne.w	1a003b38 <_vfprintf_r+0x200>
1a004aea:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
1a004aee:	ac2c      	add	r4, sp, #176	; 0xb0
1a004af0:	e4eb      	b.n	1a0044ca <_vfprintf_r+0xb92>
1a004af2:	4640      	mov	r0, r8
1a004af4:	4649      	mov	r1, r9
1a004af6:	aa1f      	add	r2, sp, #124	; 0x7c
1a004af8:	f002 ff38 	bl	1a00796c <__sprint_r>
1a004afc:	2800      	cmp	r0, #0
1a004afe:	f47f a81b 	bne.w	1a003b38 <_vfprintf_r+0x200>
1a004b02:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a004b04:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
1a004b08:	ac2c      	add	r4, sp, #176	; 0xb0
1a004b0a:	e5a1      	b.n	1a004650 <_vfprintf_r+0xd18>
1a004b0c:	3301      	adds	r3, #1
1a004b0e:	442a      	add	r2, r5
1a004b10:	2b07      	cmp	r3, #7
1a004b12:	9221      	str	r2, [sp, #132]	; 0x84
1a004b14:	9320      	str	r3, [sp, #128]	; 0x80
1a004b16:	6027      	str	r7, [r4, #0]
1a004b18:	6065      	str	r5, [r4, #4]
1a004b1a:	dca0      	bgt.n	1a004a5e <_vfprintf_r+0x1126>
1a004b1c:	3408      	adds	r4, #8
1a004b1e:	e7a9      	b.n	1a004a74 <_vfprintf_r+0x113c>
1a004b20:	2e06      	cmp	r6, #6
1a004b22:	4633      	mov	r3, r6
1a004b24:	bf28      	it	cs
1a004b26:	2306      	movcs	r3, #6
1a004b28:	9307      	str	r3, [sp, #28]
1a004b2a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a004b2e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
1a004b32:	9303      	str	r3, [sp, #12]
1a004b34:	4b39      	ldr	r3, [pc, #228]	; (1a004c1c <_vfprintf_r+0x12e4>)
1a004b36:	9708      	str	r7, [sp, #32]
1a004b38:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
1a004b3c:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
1a004b40:	930a      	str	r3, [sp, #40]	; 0x28
1a004b42:	f7ff b857 	b.w	1a003bf4 <_vfprintf_r+0x2bc>
1a004b46:	4640      	mov	r0, r8
1a004b48:	4649      	mov	r1, r9
1a004b4a:	aa1f      	add	r2, sp, #124	; 0x7c
1a004b4c:	f002 ff0e 	bl	1a00796c <__sprint_r>
1a004b50:	2800      	cmp	r0, #0
1a004b52:	f47e aff1 	bne.w	1a003b38 <_vfprintf_r+0x200>
1a004b56:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a004b58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a004b5a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
1a004b5e:	1ad3      	subs	r3, r2, r3
1a004b60:	ac2c      	add	r4, sp, #176	; 0xb0
1a004b62:	e58b      	b.n	1a00467c <_vfprintf_r+0xd44>
1a004b64:	1cdf      	adds	r7, r3, #3
1a004b66:	db22      	blt.n	1a004bae <_vfprintf_r+0x1276>
1a004b68:	459b      	cmp	fp, r3
1a004b6a:	db20      	blt.n	1a004bae <_vfprintf_r+0x1276>
1a004b6c:	930c      	str	r3, [sp, #48]	; 0x30
1a004b6e:	2567      	movs	r5, #103	; 0x67
1a004b70:	e67c      	b.n	1a00486c <_vfprintf_r+0xf34>
1a004b72:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
1a004b76:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
1a004b7a:	f7ff ba10 	b.w	1a003f9e <_vfprintf_r+0x666>
1a004b7e:	9303      	str	r3, [sp, #12]
1a004b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004b82:	9302      	str	r3, [sp, #8]
1a004b84:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
1a004b88:	2300      	movs	r3, #0
1a004b8a:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
1a004b8e:	930b      	str	r3, [sp, #44]	; 0x2c
1a004b90:	f7ff b833 	b.w	1a003bfa <_vfprintf_r+0x2c2>
1a004b94:	4633      	mov	r3, r6
1a004b96:	e65a      	b.n	1a00484e <_vfprintf_r+0xf16>
1a004b98:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a004b9c:	900b      	str	r0, [sp, #44]	; 0x2c
1a004b9e:	9708      	str	r7, [sp, #32]
1a004ba0:	900c      	str	r0, [sp, #48]	; 0x30
1a004ba2:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
1a004ba6:	9303      	str	r3, [sp, #12]
1a004ba8:	9607      	str	r6, [sp, #28]
1a004baa:	f7ff b823 	b.w	1a003bf4 <_vfprintf_r+0x2bc>
1a004bae:	3d02      	subs	r5, #2
1a004bb0:	3b01      	subs	r3, #1
1a004bb2:	2b00      	cmp	r3, #0
1a004bb4:	9319      	str	r3, [sp, #100]	; 0x64
1a004bb6:	bfba      	itte	lt
1a004bb8:	425b      	neglt	r3, r3
1a004bba:	222d      	movlt	r2, #45	; 0x2d
1a004bbc:	222b      	movge	r2, #43	; 0x2b
1a004bbe:	2b09      	cmp	r3, #9
1a004bc0:	f88d 506c 	strb.w	r5, [sp, #108]	; 0x6c
1a004bc4:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
1a004bc8:	f340 8098 	ble.w	1a004cfc <_vfprintf_r+0x13c4>
1a004bcc:	f10d 067b 	add.w	r6, sp, #123	; 0x7b
1a004bd0:	4630      	mov	r0, r6
1a004bd2:	4a13      	ldr	r2, [pc, #76]	; (1a004c20 <_vfprintf_r+0x12e8>)
1a004bd4:	fb82 2103 	smull	r2, r1, r2, r3
1a004bd8:	17da      	asrs	r2, r3, #31
1a004bda:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
1a004bde:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a004be2:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
1a004be6:	f103 0130 	add.w	r1, r3, #48	; 0x30
1a004bea:	2a09      	cmp	r2, #9
1a004bec:	4613      	mov	r3, r2
1a004bee:	f800 1d01 	strb.w	r1, [r0, #-1]!
1a004bf2:	dcee      	bgt.n	1a004bd2 <_vfprintf_r+0x129a>
1a004bf4:	4602      	mov	r2, r0
1a004bf6:	3330      	adds	r3, #48	; 0x30
1a004bf8:	b2d9      	uxtb	r1, r3
1a004bfa:	f802 1d01 	strb.w	r1, [r2, #-1]!
1a004bfe:	4296      	cmp	r6, r2
1a004c00:	f240 80a9 	bls.w	1a004d56 <_vfprintf_r+0x141e>
1a004c04:	f10d 026e 	add.w	r2, sp, #110	; 0x6e
1a004c08:	4603      	mov	r3, r0
1a004c0a:	e00d      	b.n	1a004c28 <_vfprintf_r+0x12f0>
1a004c0c:	1a0082ec 	.word	0x1a0082ec
1a004c10:	1a00829c 	.word	0x1a00829c
1a004c14:	1a0082b8 	.word	0x1a0082b8
1a004c18:	1a0082b4 	.word	0x1a0082b4
1a004c1c:	1a0082e4 	.word	0x1a0082e4
1a004c20:	66666667 	.word	0x66666667
1a004c24:	f813 1b01 	ldrb.w	r1, [r3], #1
1a004c28:	f802 1b01 	strb.w	r1, [r2], #1
1a004c2c:	42b3      	cmp	r3, r6
1a004c2e:	d1f9      	bne.n	1a004c24 <_vfprintf_r+0x12ec>
1a004c30:	ab1f      	add	r3, sp, #124	; 0x7c
1a004c32:	1a1b      	subs	r3, r3, r0
1a004c34:	f10d 026e 	add.w	r2, sp, #110	; 0x6e
1a004c38:	4413      	add	r3, r2
1a004c3a:	aa1b      	add	r2, sp, #108	; 0x6c
1a004c3c:	1a9b      	subs	r3, r3, r2
1a004c3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a004c40:	9313      	str	r3, [sp, #76]	; 0x4c
1a004c42:	2a01      	cmp	r2, #1
1a004c44:	4413      	add	r3, r2
1a004c46:	9307      	str	r3, [sp, #28]
1a004c48:	dd69      	ble.n	1a004d1e <_vfprintf_r+0x13e6>
1a004c4a:	9b07      	ldr	r3, [sp, #28]
1a004c4c:	2200      	movs	r2, #0
1a004c4e:	3301      	adds	r3, #1
1a004c50:	9307      	str	r3, [sp, #28]
1a004c52:	920c      	str	r2, [sp, #48]	; 0x30
1a004c54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a004c58:	e614      	b.n	1a004884 <_vfprintf_r+0xf4c>
1a004c5a:	4640      	mov	r0, r8
1a004c5c:	4649      	mov	r1, r9
1a004c5e:	aa1f      	add	r2, sp, #124	; 0x7c
1a004c60:	f002 fe84 	bl	1a00796c <__sprint_r>
1a004c64:	2800      	cmp	r0, #0
1a004c66:	f47e af67 	bne.w	1a003b38 <_vfprintf_r+0x200>
1a004c6a:	9d19      	ldr	r5, [sp, #100]	; 0x64
1a004c6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a004c6e:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a004c70:	ac2c      	add	r4, sp, #176	; 0xb0
1a004c72:	e68c      	b.n	1a00498e <_vfprintf_r+0x1056>
1a004c74:	f04f 0b06 	mov.w	fp, #6
1a004c78:	e5a4      	b.n	1a0047c4 <_vfprintf_r+0xe8c>
1a004c7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a004c7c:	2b00      	cmp	r3, #0
1a004c7e:	bfd8      	it	le
1a004c80:	f1c3 0602 	rsble	r6, r3, #2
1a004c84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a004c86:	bfc8      	it	gt
1a004c88:	2601      	movgt	r6, #1
1a004c8a:	18f3      	adds	r3, r6, r3
1a004c8c:	9307      	str	r3, [sp, #28]
1a004c8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a004c92:	e5f7      	b.n	1a004884 <_vfprintf_r+0xf4c>
1a004c94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a004c98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
1a004c9c:	9014      	str	r0, [sp, #80]	; 0x50
1a004c9e:	9315      	str	r3, [sp, #84]	; 0x54
1a004ca0:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
1a004ca4:	e59c      	b.n	1a0047e0 <_vfprintf_r+0xea8>
1a004ca6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
1a004ca8:	e5d1      	b.n	1a00484e <_vfprintf_r+0xf16>
1a004caa:	2b00      	cmp	r3, #0
1a004cac:	dd2e      	ble.n	1a004d0c <_vfprintf_r+0x13d4>
1a004cae:	f1bb 0f00 	cmp.w	fp, #0
1a004cb2:	d107      	bne.n	1a004cc4 <_vfprintf_r+0x138c>
1a004cb4:	9b02      	ldr	r3, [sp, #8]
1a004cb6:	07de      	lsls	r6, r3, #31
1a004cb8:	d404      	bmi.n	1a004cc4 <_vfprintf_r+0x138c>
1a004cba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a004cbc:	9207      	str	r2, [sp, #28]
1a004cbe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
1a004cc2:	e5df      	b.n	1a004884 <_vfprintf_r+0xf4c>
1a004cc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a004cc6:	f10b 0601 	add.w	r6, fp, #1
1a004cca:	4433      	add	r3, r6
1a004ccc:	9307      	str	r3, [sp, #28]
1a004cce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a004cd2:	e5d7      	b.n	1a004884 <_vfprintf_r+0xf4c>
1a004cd4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
1a004cd8:	2200      	movs	r2, #0
1a004cda:	2300      	movs	r3, #0
1a004cdc:	f003 f810 	bl	1a007d00 <__aeabi_dcmpeq>
1a004ce0:	2800      	cmp	r0, #0
1a004ce2:	f47f aef7 	bne.w	1a004ad4 <_vfprintf_r+0x119c>
1a004ce6:	f1c7 0701 	rsb	r7, r7, #1
1a004cea:	9719      	str	r7, [sp, #100]	; 0x64
1a004cec:	443e      	add	r6, r7
1a004cee:	e59b      	b.n	1a004828 <_vfprintf_r+0xef0>
1a004cf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a004cf2:	3301      	adds	r3, #1
1a004cf4:	9307      	str	r3, [sp, #28]
1a004cf6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a004cfa:	e5c3      	b.n	1a004884 <_vfprintf_r+0xf4c>
1a004cfc:	3330      	adds	r3, #48	; 0x30
1a004cfe:	2230      	movs	r2, #48	; 0x30
1a004d00:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
1a004d04:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
1a004d08:	ab1c      	add	r3, sp, #112	; 0x70
1a004d0a:	e796      	b.n	1a004c3a <_vfprintf_r+0x1302>
1a004d0c:	f1bb 0f00 	cmp.w	fp, #0
1a004d10:	d11b      	bne.n	1a004d4a <_vfprintf_r+0x1412>
1a004d12:	9b02      	ldr	r3, [sp, #8]
1a004d14:	07d8      	lsls	r0, r3, #31
1a004d16:	d418      	bmi.n	1a004d4a <_vfprintf_r+0x1412>
1a004d18:	2301      	movs	r3, #1
1a004d1a:	9307      	str	r3, [sp, #28]
1a004d1c:	e5b2      	b.n	1a004884 <_vfprintf_r+0xf4c>
1a004d1e:	9b02      	ldr	r3, [sp, #8]
1a004d20:	f013 0301 	ands.w	r3, r3, #1
1a004d24:	d191      	bne.n	1a004c4a <_vfprintf_r+0x1312>
1a004d26:	930c      	str	r3, [sp, #48]	; 0x30
1a004d28:	9b07      	ldr	r3, [sp, #28]
1a004d2a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a004d2e:	e5a9      	b.n	1a004884 <_vfprintf_r+0xf4c>
1a004d30:	9d08      	ldr	r5, [sp, #32]
1a004d32:	682e      	ldr	r6, [r5, #0]
1a004d34:	4628      	mov	r0, r5
1a004d36:	3004      	adds	r0, #4
1a004d38:	2e00      	cmp	r6, #0
1a004d3a:	785d      	ldrb	r5, [r3, #1]
1a004d3c:	9008      	str	r0, [sp, #32]
1a004d3e:	f6be ae6c 	bge.w	1a003a1a <_vfprintf_r+0xe2>
1a004d42:	f04f 36ff 	mov.w	r6, #4294967295
1a004d46:	f7fe be68 	b.w	1a003a1a <_vfprintf_r+0xe2>
1a004d4a:	f10b 0302 	add.w	r3, fp, #2
1a004d4e:	9307      	str	r3, [sp, #28]
1a004d50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a004d54:	e596      	b.n	1a004884 <_vfprintf_r+0xf4c>
1a004d56:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
1a004d5a:	e76e      	b.n	1a004c3a <_vfprintf_r+0x1302>
1a004d5c:	f3af 8000 	nop.w

1a004d60 <__sbprintf>:
1a004d60:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
1a004d64:	460c      	mov	r4, r1
1a004d66:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
1a004d6a:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
1a004d6e:	69e7      	ldr	r7, [r4, #28]
1a004d70:	6e49      	ldr	r1, [r1, #100]	; 0x64
1a004d72:	f8b4 900e 	ldrh.w	r9, [r4, #14]
1a004d76:	9119      	str	r1, [sp, #100]	; 0x64
1a004d78:	ad1a      	add	r5, sp, #104	; 0x68
1a004d7a:	f44f 6680 	mov.w	r6, #1024	; 0x400
1a004d7e:	f02e 0e02 	bic.w	lr, lr, #2
1a004d82:	f04f 0c00 	mov.w	ip, #0
1a004d86:	9707      	str	r7, [sp, #28]
1a004d88:	4669      	mov	r1, sp
1a004d8a:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a004d8c:	9500      	str	r5, [sp, #0]
1a004d8e:	9504      	str	r5, [sp, #16]
1a004d90:	9602      	str	r6, [sp, #8]
1a004d92:	9605      	str	r6, [sp, #20]
1a004d94:	f8ad e00c 	strh.w	lr, [sp, #12]
1a004d98:	f8ad 900e 	strh.w	r9, [sp, #14]
1a004d9c:	9709      	str	r7, [sp, #36]	; 0x24
1a004d9e:	f8cd c018 	str.w	ip, [sp, #24]
1a004da2:	4606      	mov	r6, r0
1a004da4:	f7fe fdc8 	bl	1a003938 <_vfprintf_r>
1a004da8:	1e05      	subs	r5, r0, #0
1a004daa:	db07      	blt.n	1a004dbc <__sbprintf+0x5c>
1a004dac:	4630      	mov	r0, r6
1a004dae:	4669      	mov	r1, sp
1a004db0:	f001 f908 	bl	1a005fc4 <_fflush_r>
1a004db4:	2800      	cmp	r0, #0
1a004db6:	bf18      	it	ne
1a004db8:	f04f 35ff 	movne.w	r5, #4294967295
1a004dbc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
1a004dc0:	065b      	lsls	r3, r3, #25
1a004dc2:	d503      	bpl.n	1a004dcc <__sbprintf+0x6c>
1a004dc4:	89a3      	ldrh	r3, [r4, #12]
1a004dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004dca:	81a3      	strh	r3, [r4, #12]
1a004dcc:	4628      	mov	r0, r5
1a004dce:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
1a004dd2:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
1a004dd6:	bf00      	nop

1a004dd8 <__swsetup_r>:
1a004dd8:	b538      	push	{r3, r4, r5, lr}
1a004dda:	4b2f      	ldr	r3, [pc, #188]	; (1a004e98 <__swsetup_r+0xc0>)
1a004ddc:	681b      	ldr	r3, [r3, #0]
1a004dde:	4605      	mov	r5, r0
1a004de0:	460c      	mov	r4, r1
1a004de2:	b113      	cbz	r3, 1a004dea <__swsetup_r+0x12>
1a004de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1a004de6:	2a00      	cmp	r2, #0
1a004de8:	d036      	beq.n	1a004e58 <__swsetup_r+0x80>
1a004dea:	89a2      	ldrh	r2, [r4, #12]
1a004dec:	b293      	uxth	r3, r2
1a004dee:	0718      	lsls	r0, r3, #28
1a004df0:	d50c      	bpl.n	1a004e0c <__swsetup_r+0x34>
1a004df2:	6920      	ldr	r0, [r4, #16]
1a004df4:	b1a8      	cbz	r0, 1a004e22 <__swsetup_r+0x4a>
1a004df6:	f013 0201 	ands.w	r2, r3, #1
1a004dfa:	d01e      	beq.n	1a004e3a <__swsetup_r+0x62>
1a004dfc:	6963      	ldr	r3, [r4, #20]
1a004dfe:	2200      	movs	r2, #0
1a004e00:	425b      	negs	r3, r3
1a004e02:	61a3      	str	r3, [r4, #24]
1a004e04:	60a2      	str	r2, [r4, #8]
1a004e06:	b1f0      	cbz	r0, 1a004e46 <__swsetup_r+0x6e>
1a004e08:	2000      	movs	r0, #0
1a004e0a:	bd38      	pop	{r3, r4, r5, pc}
1a004e0c:	06d9      	lsls	r1, r3, #27
1a004e0e:	d53b      	bpl.n	1a004e88 <__swsetup_r+0xb0>
1a004e10:	0758      	lsls	r0, r3, #29
1a004e12:	d425      	bmi.n	1a004e60 <__swsetup_r+0x88>
1a004e14:	6920      	ldr	r0, [r4, #16]
1a004e16:	f042 0308 	orr.w	r3, r2, #8
1a004e1a:	81a3      	strh	r3, [r4, #12]
1a004e1c:	b29b      	uxth	r3, r3
1a004e1e:	2800      	cmp	r0, #0
1a004e20:	d1e9      	bne.n	1a004df6 <__swsetup_r+0x1e>
1a004e22:	f403 7220 	and.w	r2, r3, #640	; 0x280
1a004e26:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
1a004e2a:	d0e4      	beq.n	1a004df6 <__swsetup_r+0x1e>
1a004e2c:	4628      	mov	r0, r5
1a004e2e:	4621      	mov	r1, r4
1a004e30:	f001 fc50 	bl	1a0066d4 <__smakebuf_r>
1a004e34:	89a3      	ldrh	r3, [r4, #12]
1a004e36:	6920      	ldr	r0, [r4, #16]
1a004e38:	e7dd      	b.n	1a004df6 <__swsetup_r+0x1e>
1a004e3a:	0799      	lsls	r1, r3, #30
1a004e3c:	bf58      	it	pl
1a004e3e:	6962      	ldrpl	r2, [r4, #20]
1a004e40:	60a2      	str	r2, [r4, #8]
1a004e42:	2800      	cmp	r0, #0
1a004e44:	d1e0      	bne.n	1a004e08 <__swsetup_r+0x30>
1a004e46:	89a3      	ldrh	r3, [r4, #12]
1a004e48:	061a      	lsls	r2, r3, #24
1a004e4a:	d5de      	bpl.n	1a004e0a <__swsetup_r+0x32>
1a004e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004e50:	81a3      	strh	r3, [r4, #12]
1a004e52:	f04f 30ff 	mov.w	r0, #4294967295
1a004e56:	bd38      	pop	{r3, r4, r5, pc}
1a004e58:	4618      	mov	r0, r3
1a004e5a:	f001 f947 	bl	1a0060ec <__sinit>
1a004e5e:	e7c4      	b.n	1a004dea <__swsetup_r+0x12>
1a004e60:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a004e62:	b149      	cbz	r1, 1a004e78 <__swsetup_r+0xa0>
1a004e64:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a004e68:	4299      	cmp	r1, r3
1a004e6a:	d003      	beq.n	1a004e74 <__swsetup_r+0x9c>
1a004e6c:	4628      	mov	r0, r5
1a004e6e:	f001 f995 	bl	1a00619c <_free_r>
1a004e72:	89a2      	ldrh	r2, [r4, #12]
1a004e74:	2300      	movs	r3, #0
1a004e76:	6323      	str	r3, [r4, #48]	; 0x30
1a004e78:	f022 0224 	bic.w	r2, r2, #36	; 0x24
1a004e7c:	2300      	movs	r3, #0
1a004e7e:	6920      	ldr	r0, [r4, #16]
1a004e80:	6063      	str	r3, [r4, #4]
1a004e82:	b292      	uxth	r2, r2
1a004e84:	6020      	str	r0, [r4, #0]
1a004e86:	e7c6      	b.n	1a004e16 <__swsetup_r+0x3e>
1a004e88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
1a004e8c:	2309      	movs	r3, #9
1a004e8e:	602b      	str	r3, [r5, #0]
1a004e90:	f04f 30ff 	mov.w	r0, #4294967295
1a004e94:	81a2      	strh	r2, [r4, #12]
1a004e96:	bd38      	pop	{r3, r4, r5, pc}
1a004e98:	100004f8 	.word	0x100004f8

1a004e9c <quorem>:
1a004e9c:	6902      	ldr	r2, [r0, #16]
1a004e9e:	690b      	ldr	r3, [r1, #16]
1a004ea0:	4293      	cmp	r3, r2
1a004ea2:	f300 808f 	bgt.w	1a004fc4 <quorem+0x128>
1a004ea6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004eaa:	f103 38ff 	add.w	r8, r3, #4294967295
1a004eae:	f101 0714 	add.w	r7, r1, #20
1a004eb2:	f100 0b14 	add.w	fp, r0, #20
1a004eb6:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
1a004eba:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
1a004ebe:	ea4f 0488 	mov.w	r4, r8, lsl #2
1a004ec2:	b083      	sub	sp, #12
1a004ec4:	3201      	adds	r2, #1
1a004ec6:	fbb3 f9f2 	udiv	r9, r3, r2
1a004eca:	eb0b 0304 	add.w	r3, fp, r4
1a004ece:	9400      	str	r4, [sp, #0]
1a004ed0:	eb07 0a04 	add.w	sl, r7, r4
1a004ed4:	9301      	str	r3, [sp, #4]
1a004ed6:	f1b9 0f00 	cmp.w	r9, #0
1a004eda:	d03b      	beq.n	1a004f54 <quorem+0xb8>
1a004edc:	2600      	movs	r6, #0
1a004ede:	4632      	mov	r2, r6
1a004ee0:	46bc      	mov	ip, r7
1a004ee2:	46de      	mov	lr, fp
1a004ee4:	4634      	mov	r4, r6
1a004ee6:	f85c 6b04 	ldr.w	r6, [ip], #4
1a004eea:	f8de 5000 	ldr.w	r5, [lr]
1a004eee:	b2b3      	uxth	r3, r6
1a004ef0:	0c36      	lsrs	r6, r6, #16
1a004ef2:	fb03 4409 	mla	r4, r3, r9, r4
1a004ef6:	fb06 f609 	mul.w	r6, r6, r9
1a004efa:	eb06 4614 	add.w	r6, r6, r4, lsr #16
1a004efe:	b2a3      	uxth	r3, r4
1a004f00:	1ad3      	subs	r3, r2, r3
1a004f02:	b2b4      	uxth	r4, r6
1a004f04:	fa13 f385 	uxtah	r3, r3, r5
1a004f08:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
1a004f0c:	eb04 4423 	add.w	r4, r4, r3, asr #16
1a004f10:	b29b      	uxth	r3, r3
1a004f12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
1a004f16:	45e2      	cmp	sl, ip
1a004f18:	ea4f 4224 	mov.w	r2, r4, asr #16
1a004f1c:	f84e 3b04 	str.w	r3, [lr], #4
1a004f20:	ea4f 4416 	mov.w	r4, r6, lsr #16
1a004f24:	d2df      	bcs.n	1a004ee6 <quorem+0x4a>
1a004f26:	9b00      	ldr	r3, [sp, #0]
1a004f28:	f85b 3003 	ldr.w	r3, [fp, r3]
1a004f2c:	b993      	cbnz	r3, 1a004f54 <quorem+0xb8>
1a004f2e:	9c01      	ldr	r4, [sp, #4]
1a004f30:	1f23      	subs	r3, r4, #4
1a004f32:	459b      	cmp	fp, r3
1a004f34:	d20c      	bcs.n	1a004f50 <quorem+0xb4>
1a004f36:	f854 3c04 	ldr.w	r3, [r4, #-4]
1a004f3a:	b94b      	cbnz	r3, 1a004f50 <quorem+0xb4>
1a004f3c:	f1a4 0308 	sub.w	r3, r4, #8
1a004f40:	e002      	b.n	1a004f48 <quorem+0xac>
1a004f42:	681a      	ldr	r2, [r3, #0]
1a004f44:	3b04      	subs	r3, #4
1a004f46:	b91a      	cbnz	r2, 1a004f50 <quorem+0xb4>
1a004f48:	459b      	cmp	fp, r3
1a004f4a:	f108 38ff 	add.w	r8, r8, #4294967295
1a004f4e:	d3f8      	bcc.n	1a004f42 <quorem+0xa6>
1a004f50:	f8c0 8010 	str.w	r8, [r0, #16]
1a004f54:	4604      	mov	r4, r0
1a004f56:	f002 f97b 	bl	1a007250 <__mcmp>
1a004f5a:	2800      	cmp	r0, #0
1a004f5c:	db2e      	blt.n	1a004fbc <quorem+0x120>
1a004f5e:	f109 0901 	add.w	r9, r9, #1
1a004f62:	465d      	mov	r5, fp
1a004f64:	2300      	movs	r3, #0
1a004f66:	f857 1b04 	ldr.w	r1, [r7], #4
1a004f6a:	6828      	ldr	r0, [r5, #0]
1a004f6c:	b28a      	uxth	r2, r1
1a004f6e:	1a9a      	subs	r2, r3, r2
1a004f70:	0c09      	lsrs	r1, r1, #16
1a004f72:	fa12 f280 	uxtah	r2, r2, r0
1a004f76:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
1a004f7a:	eb03 4322 	add.w	r3, r3, r2, asr #16
1a004f7e:	b291      	uxth	r1, r2
1a004f80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a004f84:	45ba      	cmp	sl, r7
1a004f86:	f845 1b04 	str.w	r1, [r5], #4
1a004f8a:	ea4f 4323 	mov.w	r3, r3, asr #16
1a004f8e:	d2ea      	bcs.n	1a004f66 <quorem+0xca>
1a004f90:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
1a004f94:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
1a004f98:	b982      	cbnz	r2, 1a004fbc <quorem+0x120>
1a004f9a:	1f1a      	subs	r2, r3, #4
1a004f9c:	4593      	cmp	fp, r2
1a004f9e:	d20b      	bcs.n	1a004fb8 <quorem+0x11c>
1a004fa0:	f853 2c04 	ldr.w	r2, [r3, #-4]
1a004fa4:	b942      	cbnz	r2, 1a004fb8 <quorem+0x11c>
1a004fa6:	3b08      	subs	r3, #8
1a004fa8:	e002      	b.n	1a004fb0 <quorem+0x114>
1a004faa:	681a      	ldr	r2, [r3, #0]
1a004fac:	3b04      	subs	r3, #4
1a004fae:	b91a      	cbnz	r2, 1a004fb8 <quorem+0x11c>
1a004fb0:	459b      	cmp	fp, r3
1a004fb2:	f108 38ff 	add.w	r8, r8, #4294967295
1a004fb6:	d3f8      	bcc.n	1a004faa <quorem+0x10e>
1a004fb8:	f8c4 8010 	str.w	r8, [r4, #16]
1a004fbc:	4648      	mov	r0, r9
1a004fbe:	b003      	add	sp, #12
1a004fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004fc4:	2000      	movs	r0, #0
1a004fc6:	4770      	bx	lr

1a004fc8 <_dtoa_r>:
1a004fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004fcc:	b099      	sub	sp, #100	; 0x64
1a004fce:	4604      	mov	r4, r0
1a004fd0:	9103      	str	r1, [sp, #12]
1a004fd2:	6c01      	ldr	r1, [r0, #64]	; 0x40
1a004fd4:	9d22      	ldr	r5, [sp, #136]	; 0x88
1a004fd6:	9304      	str	r3, [sp, #16]
1a004fd8:	4692      	mov	sl, r2
1a004fda:	ed8d 0b00 	vstr	d0, [sp]
1a004fde:	b141      	cbz	r1, 1a004ff2 <_dtoa_r+0x2a>
1a004fe0:	6c42      	ldr	r2, [r0, #68]	; 0x44
1a004fe2:	604a      	str	r2, [r1, #4]
1a004fe4:	2301      	movs	r3, #1
1a004fe6:	4093      	lsls	r3, r2
1a004fe8:	608b      	str	r3, [r1, #8]
1a004fea:	f001 ff4d 	bl	1a006e88 <_Bfree>
1a004fee:	2300      	movs	r3, #0
1a004ff0:	6423      	str	r3, [r4, #64]	; 0x40
1a004ff2:	e9dd 2300 	ldrd	r2, r3, [sp]
1a004ff6:	2b00      	cmp	r3, #0
1a004ff8:	4699      	mov	r9, r3
1a004ffa:	db36      	blt.n	1a00506a <_dtoa_r+0xa2>
1a004ffc:	2300      	movs	r3, #0
1a004ffe:	602b      	str	r3, [r5, #0]
1a005000:	4ba5      	ldr	r3, [pc, #660]	; (1a005298 <_dtoa_r+0x2d0>)
1a005002:	461a      	mov	r2, r3
1a005004:	ea09 0303 	and.w	r3, r9, r3
1a005008:	4293      	cmp	r3, r2
1a00500a:	d017      	beq.n	1a00503c <_dtoa_r+0x74>
1a00500c:	e9dd 6700 	ldrd	r6, r7, [sp]
1a005010:	2200      	movs	r2, #0
1a005012:	2300      	movs	r3, #0
1a005014:	4630      	mov	r0, r6
1a005016:	4639      	mov	r1, r7
1a005018:	f002 fe72 	bl	1a007d00 <__aeabi_dcmpeq>
1a00501c:	4680      	mov	r8, r0
1a00501e:	2800      	cmp	r0, #0
1a005020:	d02b      	beq.n	1a00507a <_dtoa_r+0xb2>
1a005022:	9a04      	ldr	r2, [sp, #16]
1a005024:	2301      	movs	r3, #1
1a005026:	6013      	str	r3, [r2, #0]
1a005028:	9b23      	ldr	r3, [sp, #140]	; 0x8c
1a00502a:	2b00      	cmp	r3, #0
1a00502c:	f000 80cc 	beq.w	1a0051c8 <_dtoa_r+0x200>
1a005030:	489a      	ldr	r0, [pc, #616]	; (1a00529c <_dtoa_r+0x2d4>)
1a005032:	6018      	str	r0, [r3, #0]
1a005034:	3801      	subs	r0, #1
1a005036:	b019      	add	sp, #100	; 0x64
1a005038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00503c:	9a04      	ldr	r2, [sp, #16]
1a00503e:	f242 730f 	movw	r3, #9999	; 0x270f
1a005042:	6013      	str	r3, [r2, #0]
1a005044:	9b00      	ldr	r3, [sp, #0]
1a005046:	2b00      	cmp	r3, #0
1a005048:	f000 80a7 	beq.w	1a00519a <_dtoa_r+0x1d2>
1a00504c:	4894      	ldr	r0, [pc, #592]	; (1a0052a0 <_dtoa_r+0x2d8>)
1a00504e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
1a005050:	2b00      	cmp	r3, #0
1a005052:	d0f0      	beq.n	1a005036 <_dtoa_r+0x6e>
1a005054:	78c3      	ldrb	r3, [r0, #3]
1a005056:	2b00      	cmp	r3, #0
1a005058:	f000 80b8 	beq.w	1a0051cc <_dtoa_r+0x204>
1a00505c:	f100 0308 	add.w	r3, r0, #8
1a005060:	9a23      	ldr	r2, [sp, #140]	; 0x8c
1a005062:	6013      	str	r3, [r2, #0]
1a005064:	b019      	add	sp, #100	; 0x64
1a005066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00506a:	9a01      	ldr	r2, [sp, #4]
1a00506c:	2301      	movs	r3, #1
1a00506e:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
1a005072:	602b      	str	r3, [r5, #0]
1a005074:	f8cd 9004 	str.w	r9, [sp, #4]
1a005078:	e7c2      	b.n	1a005000 <_dtoa_r+0x38>
1a00507a:	4620      	mov	r0, r4
1a00507c:	ec47 6b10 	vmov	d0, r6, r7
1a005080:	a917      	add	r1, sp, #92	; 0x5c
1a005082:	aa16      	add	r2, sp, #88	; 0x58
1a005084:	f002 f972 	bl	1a00736c <__d2b>
1a005088:	ea5f 5519 	movs.w	r5, r9, lsr #20
1a00508c:	4683      	mov	fp, r0
1a00508e:	f040 808d 	bne.w	1a0051ac <_dtoa_r+0x1e4>
1a005092:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
1a005096:	9d17      	ldr	r5, [sp, #92]	; 0x5c
1a005098:	f46f 6382 	mvn.w	r3, #1040	; 0x410
1a00509c:	4445      	add	r5, r8
1a00509e:	429d      	cmp	r5, r3
1a0050a0:	f2c0 829e 	blt.w	1a0055e0 <_dtoa_r+0x618>
1a0050a4:	4a7f      	ldr	r2, [pc, #508]	; (1a0052a4 <_dtoa_r+0x2dc>)
1a0050a6:	1b52      	subs	r2, r2, r5
1a0050a8:	fa09 f902 	lsl.w	r9, r9, r2
1a0050ac:	9a00      	ldr	r2, [sp, #0]
1a0050ae:	f205 4312 	addw	r3, r5, #1042	; 0x412
1a0050b2:	fa22 f003 	lsr.w	r0, r2, r3
1a0050b6:	ea49 0000 	orr.w	r0, r9, r0
1a0050ba:	f7fd fd0d 	bl	1a002ad8 <__aeabi_ui2d>
1a0050be:	2301      	movs	r3, #1
1a0050c0:	3d01      	subs	r5, #1
1a0050c2:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
1a0050c6:	930f      	str	r3, [sp, #60]	; 0x3c
1a0050c8:	2200      	movs	r2, #0
1a0050ca:	4b77      	ldr	r3, [pc, #476]	; (1a0052a8 <_dtoa_r+0x2e0>)
1a0050cc:	f7fd fbc6 	bl	1a00285c <__aeabi_dsub>
1a0050d0:	a36b      	add	r3, pc, #428	; (adr r3, 1a005280 <_dtoa_r+0x2b8>)
1a0050d2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0050d6:	f7fd fe0f 	bl	1a002cf8 <__aeabi_dmul>
1a0050da:	a36b      	add	r3, pc, #428	; (adr r3, 1a005288 <_dtoa_r+0x2c0>)
1a0050dc:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0050e0:	f7fd fbbe 	bl	1a002860 <__adddf3>
1a0050e4:	4606      	mov	r6, r0
1a0050e6:	4628      	mov	r0, r5
1a0050e8:	460f      	mov	r7, r1
1a0050ea:	f7fd fd05 	bl	1a002af8 <__aeabi_i2d>
1a0050ee:	a368      	add	r3, pc, #416	; (adr r3, 1a005290 <_dtoa_r+0x2c8>)
1a0050f0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0050f4:	f7fd fe00 	bl	1a002cf8 <__aeabi_dmul>
1a0050f8:	4602      	mov	r2, r0
1a0050fa:	460b      	mov	r3, r1
1a0050fc:	4630      	mov	r0, r6
1a0050fe:	4639      	mov	r1, r7
1a005100:	f7fd fbae 	bl	1a002860 <__adddf3>
1a005104:	4606      	mov	r6, r0
1a005106:	460f      	mov	r7, r1
1a005108:	f002 fe2c 	bl	1a007d64 <__aeabi_d2iz>
1a00510c:	4639      	mov	r1, r7
1a00510e:	9005      	str	r0, [sp, #20]
1a005110:	2200      	movs	r2, #0
1a005112:	4630      	mov	r0, r6
1a005114:	2300      	movs	r3, #0
1a005116:	f002 fdfd 	bl	1a007d14 <__aeabi_dcmplt>
1a00511a:	2800      	cmp	r0, #0
1a00511c:	f040 81ab 	bne.w	1a005476 <_dtoa_r+0x4ae>
1a005120:	9b05      	ldr	r3, [sp, #20]
1a005122:	2b16      	cmp	r3, #22
1a005124:	f200 81a4 	bhi.w	1a005470 <_dtoa_r+0x4a8>
1a005128:	9a05      	ldr	r2, [sp, #20]
1a00512a:	4b60      	ldr	r3, [pc, #384]	; (1a0052ac <_dtoa_r+0x2e4>)
1a00512c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a005130:	e9d3 0100 	ldrd	r0, r1, [r3]
1a005134:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005138:	f002 fe0a 	bl	1a007d50 <__aeabi_dcmpgt>
1a00513c:	2800      	cmp	r0, #0
1a00513e:	f000 8255 	beq.w	1a0055ec <_dtoa_r+0x624>
1a005142:	9b05      	ldr	r3, [sp, #20]
1a005144:	3b01      	subs	r3, #1
1a005146:	9305      	str	r3, [sp, #20]
1a005148:	2300      	movs	r3, #0
1a00514a:	930d      	str	r3, [sp, #52]	; 0x34
1a00514c:	ebc5 0508 	rsb	r5, r5, r8
1a005150:	1e6b      	subs	r3, r5, #1
1a005152:	9306      	str	r3, [sp, #24]
1a005154:	f100 81a6 	bmi.w	1a0054a4 <_dtoa_r+0x4dc>
1a005158:	2300      	movs	r3, #0
1a00515a:	9307      	str	r3, [sp, #28]
1a00515c:	9b05      	ldr	r3, [sp, #20]
1a00515e:	2b00      	cmp	r3, #0
1a005160:	f2c0 8197 	blt.w	1a005492 <_dtoa_r+0x4ca>
1a005164:	9a06      	ldr	r2, [sp, #24]
1a005166:	930c      	str	r3, [sp, #48]	; 0x30
1a005168:	4611      	mov	r1, r2
1a00516a:	4419      	add	r1, r3
1a00516c:	2300      	movs	r3, #0
1a00516e:	9106      	str	r1, [sp, #24]
1a005170:	930a      	str	r3, [sp, #40]	; 0x28
1a005172:	9b03      	ldr	r3, [sp, #12]
1a005174:	2b09      	cmp	r3, #9
1a005176:	d82b      	bhi.n	1a0051d0 <_dtoa_r+0x208>
1a005178:	2b05      	cmp	r3, #5
1a00517a:	f340 8673 	ble.w	1a005e64 <_dtoa_r+0xe9c>
1a00517e:	3b04      	subs	r3, #4
1a005180:	9303      	str	r3, [sp, #12]
1a005182:	2700      	movs	r7, #0
1a005184:	9b03      	ldr	r3, [sp, #12]
1a005186:	3b02      	subs	r3, #2
1a005188:	2b03      	cmp	r3, #3
1a00518a:	f200 8651 	bhi.w	1a005e30 <_dtoa_r+0xe68>
1a00518e:	e8df f013 	tbh	[pc, r3, lsl #1]
1a005192:	03d1      	.short	0x03d1
1a005194:	02b603c4 	.word	0x02b603c4
1a005198:	0666      	.short	0x0666
1a00519a:	4b41      	ldr	r3, [pc, #260]	; (1a0052a0 <_dtoa_r+0x2d8>)
1a00519c:	4a44      	ldr	r2, [pc, #272]	; (1a0052b0 <_dtoa_r+0x2e8>)
1a00519e:	f3c9 0013 	ubfx	r0, r9, #0, #20
1a0051a2:	2800      	cmp	r0, #0
1a0051a4:	bf14      	ite	ne
1a0051a6:	4618      	movne	r0, r3
1a0051a8:	4610      	moveq	r0, r2
1a0051aa:	e750      	b.n	1a00504e <_dtoa_r+0x86>
1a0051ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
1a0051b0:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
1a0051b4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
1a0051b8:	4630      	mov	r0, r6
1a0051ba:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
1a0051be:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
1a0051c2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
1a0051c6:	e77f      	b.n	1a0050c8 <_dtoa_r+0x100>
1a0051c8:	483a      	ldr	r0, [pc, #232]	; (1a0052b4 <_dtoa_r+0x2ec>)
1a0051ca:	e734      	b.n	1a005036 <_dtoa_r+0x6e>
1a0051cc:	1cc3      	adds	r3, r0, #3
1a0051ce:	e747      	b.n	1a005060 <_dtoa_r+0x98>
1a0051d0:	2100      	movs	r1, #0
1a0051d2:	6461      	str	r1, [r4, #68]	; 0x44
1a0051d4:	4620      	mov	r0, r4
1a0051d6:	468a      	mov	sl, r1
1a0051d8:	9103      	str	r1, [sp, #12]
1a0051da:	f001 fe2f 	bl	1a006e3c <_Balloc>
1a0051de:	f04f 33ff 	mov.w	r3, #4294967295
1a0051e2:	9308      	str	r3, [sp, #32]
1a0051e4:	930e      	str	r3, [sp, #56]	; 0x38
1a0051e6:	2301      	movs	r3, #1
1a0051e8:	9009      	str	r0, [sp, #36]	; 0x24
1a0051ea:	6420      	str	r0, [r4, #64]	; 0x40
1a0051ec:	930b      	str	r3, [sp, #44]	; 0x2c
1a0051ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1a0051f0:	2b00      	cmp	r3, #0
1a0051f2:	f2c0 80d3 	blt.w	1a00539c <_dtoa_r+0x3d4>
1a0051f6:	9a05      	ldr	r2, [sp, #20]
1a0051f8:	2a0e      	cmp	r2, #14
1a0051fa:	f300 80cf 	bgt.w	1a00539c <_dtoa_r+0x3d4>
1a0051fe:	4b2b      	ldr	r3, [pc, #172]	; (1a0052ac <_dtoa_r+0x2e4>)
1a005200:	f1ba 0f00 	cmp.w	sl, #0
1a005204:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a005208:	e9d3 8900 	ldrd	r8, r9, [r3]
1a00520c:	f2c0 8395 	blt.w	1a00593a <_dtoa_r+0x972>
1a005210:	e9dd 6700 	ldrd	r6, r7, [sp]
1a005214:	4642      	mov	r2, r8
1a005216:	464b      	mov	r3, r9
1a005218:	4630      	mov	r0, r6
1a00521a:	4639      	mov	r1, r7
1a00521c:	f7fd fe96 	bl	1a002f4c <__aeabi_ddiv>
1a005220:	f002 fda0 	bl	1a007d64 <__aeabi_d2iz>
1a005224:	4682      	mov	sl, r0
1a005226:	f7fd fc67 	bl	1a002af8 <__aeabi_i2d>
1a00522a:	4642      	mov	r2, r8
1a00522c:	464b      	mov	r3, r9
1a00522e:	f7fd fd63 	bl	1a002cf8 <__aeabi_dmul>
1a005232:	460b      	mov	r3, r1
1a005234:	4602      	mov	r2, r0
1a005236:	4639      	mov	r1, r7
1a005238:	4630      	mov	r0, r6
1a00523a:	f7fd fb0f 	bl	1a00285c <__aeabi_dsub>
1a00523e:	9d09      	ldr	r5, [sp, #36]	; 0x24
1a005240:	f10a 0330 	add.w	r3, sl, #48	; 0x30
1a005244:	702b      	strb	r3, [r5, #0]
1a005246:	9b08      	ldr	r3, [sp, #32]
1a005248:	2b01      	cmp	r3, #1
1a00524a:	4606      	mov	r6, r0
1a00524c:	460f      	mov	r7, r1
1a00524e:	f105 0501 	add.w	r5, r5, #1
1a005252:	d063      	beq.n	1a00531c <_dtoa_r+0x354>
1a005254:	2200      	movs	r2, #0
1a005256:	4b18      	ldr	r3, [pc, #96]	; (1a0052b8 <_dtoa_r+0x2f0>)
1a005258:	f7fd fd4e 	bl	1a002cf8 <__aeabi_dmul>
1a00525c:	2200      	movs	r2, #0
1a00525e:	2300      	movs	r3, #0
1a005260:	4606      	mov	r6, r0
1a005262:	460f      	mov	r7, r1
1a005264:	f002 fd4c 	bl	1a007d00 <__aeabi_dcmpeq>
1a005268:	2800      	cmp	r0, #0
1a00526a:	f040 8084 	bne.w	1a005376 <_dtoa_r+0x3ae>
1a00526e:	f8cd b000 	str.w	fp, [sp]
1a005272:	9403      	str	r4, [sp, #12]
1a005274:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
1a005278:	9c08      	ldr	r4, [sp, #32]
1a00527a:	e02a      	b.n	1a0052d2 <_dtoa_r+0x30a>
1a00527c:	f3af 8000 	nop.w
1a005280:	636f4361 	.word	0x636f4361
1a005284:	3fd287a7 	.word	0x3fd287a7
1a005288:	8b60c8b3 	.word	0x8b60c8b3
1a00528c:	3fc68a28 	.word	0x3fc68a28
1a005290:	509f79fb 	.word	0x509f79fb
1a005294:	3fd34413 	.word	0x3fd34413
1a005298:	7ff00000 	.word	0x7ff00000
1a00529c:	1a0082ed 	.word	0x1a0082ed
1a0052a0:	1a00830c 	.word	0x1a00830c
1a0052a4:	fffffc0e 	.word	0xfffffc0e
1a0052a8:	3ff80000 	.word	0x3ff80000
1a0052ac:	1a008330 	.word	0x1a008330
1a0052b0:	1a008300 	.word	0x1a008300
1a0052b4:	1a0082ec 	.word	0x1a0082ec
1a0052b8:	40240000 	.word	0x40240000
1a0052bc:	f7fd fd1c 	bl	1a002cf8 <__aeabi_dmul>
1a0052c0:	2200      	movs	r2, #0
1a0052c2:	2300      	movs	r3, #0
1a0052c4:	4606      	mov	r6, r0
1a0052c6:	460f      	mov	r7, r1
1a0052c8:	f002 fd1a 	bl	1a007d00 <__aeabi_dcmpeq>
1a0052cc:	2800      	cmp	r0, #0
1a0052ce:	f040 83e4 	bne.w	1a005a9a <_dtoa_r+0xad2>
1a0052d2:	4642      	mov	r2, r8
1a0052d4:	464b      	mov	r3, r9
1a0052d6:	4630      	mov	r0, r6
1a0052d8:	4639      	mov	r1, r7
1a0052da:	f7fd fe37 	bl	1a002f4c <__aeabi_ddiv>
1a0052de:	f002 fd41 	bl	1a007d64 <__aeabi_d2iz>
1a0052e2:	4682      	mov	sl, r0
1a0052e4:	f7fd fc08 	bl	1a002af8 <__aeabi_i2d>
1a0052e8:	4642      	mov	r2, r8
1a0052ea:	464b      	mov	r3, r9
1a0052ec:	f7fd fd04 	bl	1a002cf8 <__aeabi_dmul>
1a0052f0:	4602      	mov	r2, r0
1a0052f2:	460b      	mov	r3, r1
1a0052f4:	4630      	mov	r0, r6
1a0052f6:	4639      	mov	r1, r7
1a0052f8:	f7fd fab0 	bl	1a00285c <__aeabi_dsub>
1a0052fc:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
1a005300:	f805 eb01 	strb.w	lr, [r5], #1
1a005304:	ebcb 0e05 	rsb	lr, fp, r5
1a005308:	4574      	cmp	r4, lr
1a00530a:	4606      	mov	r6, r0
1a00530c:	460f      	mov	r7, r1
1a00530e:	f04f 0200 	mov.w	r2, #0
1a005312:	4bb7      	ldr	r3, [pc, #732]	; (1a0055f0 <_dtoa_r+0x628>)
1a005314:	d1d2      	bne.n	1a0052bc <_dtoa_r+0x2f4>
1a005316:	f8dd b000 	ldr.w	fp, [sp]
1a00531a:	9c03      	ldr	r4, [sp, #12]
1a00531c:	4632      	mov	r2, r6
1a00531e:	463b      	mov	r3, r7
1a005320:	4630      	mov	r0, r6
1a005322:	4639      	mov	r1, r7
1a005324:	f7fd fa9c 	bl	1a002860 <__adddf3>
1a005328:	4606      	mov	r6, r0
1a00532a:	460f      	mov	r7, r1
1a00532c:	4640      	mov	r0, r8
1a00532e:	4649      	mov	r1, r9
1a005330:	4632      	mov	r2, r6
1a005332:	463b      	mov	r3, r7
1a005334:	f002 fcee 	bl	1a007d14 <__aeabi_dcmplt>
1a005338:	b948      	cbnz	r0, 1a00534e <_dtoa_r+0x386>
1a00533a:	4640      	mov	r0, r8
1a00533c:	4649      	mov	r1, r9
1a00533e:	4632      	mov	r2, r6
1a005340:	463b      	mov	r3, r7
1a005342:	f002 fcdd 	bl	1a007d00 <__aeabi_dcmpeq>
1a005346:	b1b0      	cbz	r0, 1a005376 <_dtoa_r+0x3ae>
1a005348:	f01a 0f01 	tst.w	sl, #1
1a00534c:	d013      	beq.n	1a005376 <_dtoa_r+0x3ae>
1a00534e:	f815 8c01 	ldrb.w	r8, [r5, #-1]
1a005352:	9909      	ldr	r1, [sp, #36]	; 0x24
1a005354:	1e6b      	subs	r3, r5, #1
1a005356:	e004      	b.n	1a005362 <_dtoa_r+0x39a>
1a005358:	428b      	cmp	r3, r1
1a00535a:	f000 8448 	beq.w	1a005bee <_dtoa_r+0xc26>
1a00535e:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
1a005362:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
1a005366:	f103 0501 	add.w	r5, r3, #1
1a00536a:	461a      	mov	r2, r3
1a00536c:	d0f4      	beq.n	1a005358 <_dtoa_r+0x390>
1a00536e:	f108 0301 	add.w	r3, r8, #1
1a005372:	b2db      	uxtb	r3, r3
1a005374:	7013      	strb	r3, [r2, #0]
1a005376:	4620      	mov	r0, r4
1a005378:	4659      	mov	r1, fp
1a00537a:	f001 fd85 	bl	1a006e88 <_Bfree>
1a00537e:	2200      	movs	r2, #0
1a005380:	9b05      	ldr	r3, [sp, #20]
1a005382:	702a      	strb	r2, [r5, #0]
1a005384:	9a04      	ldr	r2, [sp, #16]
1a005386:	3301      	adds	r3, #1
1a005388:	6013      	str	r3, [r2, #0]
1a00538a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
1a00538c:	2b00      	cmp	r3, #0
1a00538e:	f000 834b 	beq.w	1a005a28 <_dtoa_r+0xa60>
1a005392:	9809      	ldr	r0, [sp, #36]	; 0x24
1a005394:	601d      	str	r5, [r3, #0]
1a005396:	b019      	add	sp, #100	; 0x64
1a005398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00539c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a00539e:	2a00      	cmp	r2, #0
1a0053a0:	f000 8085 	beq.w	1a0054ae <_dtoa_r+0x4e6>
1a0053a4:	9a03      	ldr	r2, [sp, #12]
1a0053a6:	2a01      	cmp	r2, #1
1a0053a8:	f340 830a 	ble.w	1a0059c0 <_dtoa_r+0x9f8>
1a0053ac:	9b08      	ldr	r3, [sp, #32]
1a0053ae:	1e5f      	subs	r7, r3, #1
1a0053b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0053b2:	42bb      	cmp	r3, r7
1a0053b4:	f2c0 83a6 	blt.w	1a005b04 <_dtoa_r+0xb3c>
1a0053b8:	1bdf      	subs	r7, r3, r7
1a0053ba:	9b08      	ldr	r3, [sp, #32]
1a0053bc:	2b00      	cmp	r3, #0
1a0053be:	f2c0 84a4 	blt.w	1a005d0a <_dtoa_r+0xd42>
1a0053c2:	9d07      	ldr	r5, [sp, #28]
1a0053c4:	9b08      	ldr	r3, [sp, #32]
1a0053c6:	9a07      	ldr	r2, [sp, #28]
1a0053c8:	441a      	add	r2, r3
1a0053ca:	9207      	str	r2, [sp, #28]
1a0053cc:	9a06      	ldr	r2, [sp, #24]
1a0053ce:	4620      	mov	r0, r4
1a0053d0:	441a      	add	r2, r3
1a0053d2:	2101      	movs	r1, #1
1a0053d4:	9206      	str	r2, [sp, #24]
1a0053d6:	f001 fdf1 	bl	1a006fbc <__i2b>
1a0053da:	4606      	mov	r6, r0
1a0053dc:	b165      	cbz	r5, 1a0053f8 <_dtoa_r+0x430>
1a0053de:	9906      	ldr	r1, [sp, #24]
1a0053e0:	2900      	cmp	r1, #0
1a0053e2:	460b      	mov	r3, r1
1a0053e4:	dd08      	ble.n	1a0053f8 <_dtoa_r+0x430>
1a0053e6:	42a9      	cmp	r1, r5
1a0053e8:	9a07      	ldr	r2, [sp, #28]
1a0053ea:	bfa8      	it	ge
1a0053ec:	462b      	movge	r3, r5
1a0053ee:	1ad2      	subs	r2, r2, r3
1a0053f0:	1aed      	subs	r5, r5, r3
1a0053f2:	1acb      	subs	r3, r1, r3
1a0053f4:	9207      	str	r2, [sp, #28]
1a0053f6:	9306      	str	r3, [sp, #24]
1a0053f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0053fa:	2b00      	cmp	r3, #0
1a0053fc:	dd1a      	ble.n	1a005434 <_dtoa_r+0x46c>
1a0053fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a005400:	2b00      	cmp	r3, #0
1a005402:	f000 8378 	beq.w	1a005af6 <_dtoa_r+0xb2e>
1a005406:	2f00      	cmp	r7, #0
1a005408:	dd10      	ble.n	1a00542c <_dtoa_r+0x464>
1a00540a:	4631      	mov	r1, r6
1a00540c:	463a      	mov	r2, r7
1a00540e:	4620      	mov	r0, r4
1a005410:	f001 fe78 	bl	1a007104 <__pow5mult>
1a005414:	4606      	mov	r6, r0
1a005416:	465a      	mov	r2, fp
1a005418:	4631      	mov	r1, r6
1a00541a:	4620      	mov	r0, r4
1a00541c:	f001 fdd8 	bl	1a006fd0 <__multiply>
1a005420:	4659      	mov	r1, fp
1a005422:	4680      	mov	r8, r0
1a005424:	4620      	mov	r0, r4
1a005426:	f001 fd2f 	bl	1a006e88 <_Bfree>
1a00542a:	46c3      	mov	fp, r8
1a00542c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00542e:	1bda      	subs	r2, r3, r7
1a005430:	f040 82a5 	bne.w	1a00597e <_dtoa_r+0x9b6>
1a005434:	4620      	mov	r0, r4
1a005436:	2101      	movs	r1, #1
1a005438:	f001 fdc0 	bl	1a006fbc <__i2b>
1a00543c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00543e:	2b00      	cmp	r3, #0
1a005440:	4680      	mov	r8, r0
1a005442:	dd38      	ble.n	1a0054b6 <_dtoa_r+0x4ee>
1a005444:	4601      	mov	r1, r0
1a005446:	461a      	mov	r2, r3
1a005448:	4620      	mov	r0, r4
1a00544a:	f001 fe5b 	bl	1a007104 <__pow5mult>
1a00544e:	9b03      	ldr	r3, [sp, #12]
1a005450:	2b01      	cmp	r3, #1
1a005452:	4680      	mov	r8, r0
1a005454:	f340 8299 	ble.w	1a00598a <_dtoa_r+0x9c2>
1a005458:	f04f 0900 	mov.w	r9, #0
1a00545c:	f8d8 3010 	ldr.w	r3, [r8, #16]
1a005460:	eb08 0383 	add.w	r3, r8, r3, lsl #2
1a005464:	6918      	ldr	r0, [r3, #16]
1a005466:	f001 fd5b 	bl	1a006f20 <__hi0bits>
1a00546a:	f1c0 0020 	rsb	r0, r0, #32
1a00546e:	e02c      	b.n	1a0054ca <_dtoa_r+0x502>
1a005470:	2301      	movs	r3, #1
1a005472:	930d      	str	r3, [sp, #52]	; 0x34
1a005474:	e66a      	b.n	1a00514c <_dtoa_r+0x184>
1a005476:	9805      	ldr	r0, [sp, #20]
1a005478:	f7fd fb3e 	bl	1a002af8 <__aeabi_i2d>
1a00547c:	4632      	mov	r2, r6
1a00547e:	463b      	mov	r3, r7
1a005480:	f002 fc3e 	bl	1a007d00 <__aeabi_dcmpeq>
1a005484:	2800      	cmp	r0, #0
1a005486:	f47f ae4b 	bne.w	1a005120 <_dtoa_r+0x158>
1a00548a:	9b05      	ldr	r3, [sp, #20]
1a00548c:	3b01      	subs	r3, #1
1a00548e:	9305      	str	r3, [sp, #20]
1a005490:	e646      	b.n	1a005120 <_dtoa_r+0x158>
1a005492:	9a07      	ldr	r2, [sp, #28]
1a005494:	9b05      	ldr	r3, [sp, #20]
1a005496:	1ad2      	subs	r2, r2, r3
1a005498:	425b      	negs	r3, r3
1a00549a:	930a      	str	r3, [sp, #40]	; 0x28
1a00549c:	2300      	movs	r3, #0
1a00549e:	9207      	str	r2, [sp, #28]
1a0054a0:	930c      	str	r3, [sp, #48]	; 0x30
1a0054a2:	e666      	b.n	1a005172 <_dtoa_r+0x1aa>
1a0054a4:	425b      	negs	r3, r3
1a0054a6:	9307      	str	r3, [sp, #28]
1a0054a8:	2300      	movs	r3, #0
1a0054aa:	9306      	str	r3, [sp, #24]
1a0054ac:	e656      	b.n	1a00515c <_dtoa_r+0x194>
1a0054ae:	9f0a      	ldr	r7, [sp, #40]	; 0x28
1a0054b0:	9d07      	ldr	r5, [sp, #28]
1a0054b2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
1a0054b4:	e792      	b.n	1a0053dc <_dtoa_r+0x414>
1a0054b6:	9b03      	ldr	r3, [sp, #12]
1a0054b8:	2b01      	cmp	r3, #1
1a0054ba:	f340 82b8 	ble.w	1a005a2e <_dtoa_r+0xa66>
1a0054be:	f04f 0900 	mov.w	r9, #0
1a0054c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0054c4:	2b00      	cmp	r3, #0
1a0054c6:	d1c9      	bne.n	1a00545c <_dtoa_r+0x494>
1a0054c8:	2001      	movs	r0, #1
1a0054ca:	9b06      	ldr	r3, [sp, #24]
1a0054cc:	4418      	add	r0, r3
1a0054ce:	f010 001f 	ands.w	r0, r0, #31
1a0054d2:	f000 8083 	beq.w	1a0055dc <_dtoa_r+0x614>
1a0054d6:	f1c0 0320 	rsb	r3, r0, #32
1a0054da:	2b04      	cmp	r3, #4
1a0054dc:	f340 84b9 	ble.w	1a005e52 <_dtoa_r+0xe8a>
1a0054e0:	f1c0 001c 	rsb	r0, r0, #28
1a0054e4:	9b07      	ldr	r3, [sp, #28]
1a0054e6:	4403      	add	r3, r0
1a0054e8:	9307      	str	r3, [sp, #28]
1a0054ea:	9b06      	ldr	r3, [sp, #24]
1a0054ec:	4403      	add	r3, r0
1a0054ee:	4405      	add	r5, r0
1a0054f0:	9306      	str	r3, [sp, #24]
1a0054f2:	9b07      	ldr	r3, [sp, #28]
1a0054f4:	2b00      	cmp	r3, #0
1a0054f6:	dd05      	ble.n	1a005504 <_dtoa_r+0x53c>
1a0054f8:	4659      	mov	r1, fp
1a0054fa:	461a      	mov	r2, r3
1a0054fc:	4620      	mov	r0, r4
1a0054fe:	f001 fe51 	bl	1a0071a4 <__lshift>
1a005502:	4683      	mov	fp, r0
1a005504:	9b06      	ldr	r3, [sp, #24]
1a005506:	2b00      	cmp	r3, #0
1a005508:	dd05      	ble.n	1a005516 <_dtoa_r+0x54e>
1a00550a:	4641      	mov	r1, r8
1a00550c:	461a      	mov	r2, r3
1a00550e:	4620      	mov	r0, r4
1a005510:	f001 fe48 	bl	1a0071a4 <__lshift>
1a005514:	4680      	mov	r8, r0
1a005516:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a005518:	2b00      	cmp	r3, #0
1a00551a:	f040 826a 	bne.w	1a0059f2 <_dtoa_r+0xa2a>
1a00551e:	9b08      	ldr	r3, [sp, #32]
1a005520:	2b00      	cmp	r3, #0
1a005522:	f340 8297 	ble.w	1a005a54 <_dtoa_r+0xa8c>
1a005526:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a005528:	2b00      	cmp	r3, #0
1a00552a:	d171      	bne.n	1a005610 <_dtoa_r+0x648>
1a00552c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
1a005530:	9f08      	ldr	r7, [sp, #32]
1a005532:	464d      	mov	r5, r9
1a005534:	e002      	b.n	1a00553c <_dtoa_r+0x574>
1a005536:	f001 fcb1 	bl	1a006e9c <__multadd>
1a00553a:	4683      	mov	fp, r0
1a00553c:	4641      	mov	r1, r8
1a00553e:	4658      	mov	r0, fp
1a005540:	f7ff fcac 	bl	1a004e9c <quorem>
1a005544:	f100 0c30 	add.w	ip, r0, #48	; 0x30
1a005548:	f805 cb01 	strb.w	ip, [r5], #1
1a00554c:	ebc9 0305 	rsb	r3, r9, r5
1a005550:	42bb      	cmp	r3, r7
1a005552:	4620      	mov	r0, r4
1a005554:	4659      	mov	r1, fp
1a005556:	f04f 020a 	mov.w	r2, #10
1a00555a:	f04f 0300 	mov.w	r3, #0
1a00555e:	dbea      	blt.n	1a005536 <_dtoa_r+0x56e>
1a005560:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005562:	9a08      	ldr	r2, [sp, #32]
1a005564:	2a01      	cmp	r2, #1
1a005566:	bfac      	ite	ge
1a005568:	189b      	addge	r3, r3, r2
1a00556a:	3301      	addlt	r3, #1
1a00556c:	461d      	mov	r5, r3
1a00556e:	f04f 0a00 	mov.w	sl, #0
1a005572:	4659      	mov	r1, fp
1a005574:	2201      	movs	r2, #1
1a005576:	4620      	mov	r0, r4
1a005578:	f8cd c000 	str.w	ip, [sp]
1a00557c:	f001 fe12 	bl	1a0071a4 <__lshift>
1a005580:	4641      	mov	r1, r8
1a005582:	4683      	mov	fp, r0
1a005584:	f001 fe64 	bl	1a007250 <__mcmp>
1a005588:	2800      	cmp	r0, #0
1a00558a:	f8dd c000 	ldr.w	ip, [sp]
1a00558e:	f340 82ef 	ble.w	1a005b70 <_dtoa_r+0xba8>
1a005592:	f815 2c01 	ldrb.w	r2, [r5, #-1]
1a005596:	9909      	ldr	r1, [sp, #36]	; 0x24
1a005598:	1e6b      	subs	r3, r5, #1
1a00559a:	e004      	b.n	1a0055a6 <_dtoa_r+0x5de>
1a00559c:	428b      	cmp	r3, r1
1a00559e:	f000 8275 	beq.w	1a005a8c <_dtoa_r+0xac4>
1a0055a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1a0055a6:	2a39      	cmp	r2, #57	; 0x39
1a0055a8:	f103 0501 	add.w	r5, r3, #1
1a0055ac:	d0f6      	beq.n	1a00559c <_dtoa_r+0x5d4>
1a0055ae:	3201      	adds	r2, #1
1a0055b0:	701a      	strb	r2, [r3, #0]
1a0055b2:	4641      	mov	r1, r8
1a0055b4:	4620      	mov	r0, r4
1a0055b6:	f001 fc67 	bl	1a006e88 <_Bfree>
1a0055ba:	2e00      	cmp	r6, #0
1a0055bc:	f43f aedb 	beq.w	1a005376 <_dtoa_r+0x3ae>
1a0055c0:	f1ba 0f00 	cmp.w	sl, #0
1a0055c4:	d005      	beq.n	1a0055d2 <_dtoa_r+0x60a>
1a0055c6:	45b2      	cmp	sl, r6
1a0055c8:	d003      	beq.n	1a0055d2 <_dtoa_r+0x60a>
1a0055ca:	4651      	mov	r1, sl
1a0055cc:	4620      	mov	r0, r4
1a0055ce:	f001 fc5b 	bl	1a006e88 <_Bfree>
1a0055d2:	4631      	mov	r1, r6
1a0055d4:	4620      	mov	r0, r4
1a0055d6:	f001 fc57 	bl	1a006e88 <_Bfree>
1a0055da:	e6cc      	b.n	1a005376 <_dtoa_r+0x3ae>
1a0055dc:	201c      	movs	r0, #28
1a0055de:	e781      	b.n	1a0054e4 <_dtoa_r+0x51c>
1a0055e0:	4b04      	ldr	r3, [pc, #16]	; (1a0055f4 <_dtoa_r+0x62c>)
1a0055e2:	9a00      	ldr	r2, [sp, #0]
1a0055e4:	1b5b      	subs	r3, r3, r5
1a0055e6:	fa02 f003 	lsl.w	r0, r2, r3
1a0055ea:	e566      	b.n	1a0050ba <_dtoa_r+0xf2>
1a0055ec:	900d      	str	r0, [sp, #52]	; 0x34
1a0055ee:	e5ad      	b.n	1a00514c <_dtoa_r+0x184>
1a0055f0:	40240000 	.word	0x40240000
1a0055f4:	fffffbee 	.word	0xfffffbee
1a0055f8:	4631      	mov	r1, r6
1a0055fa:	2300      	movs	r3, #0
1a0055fc:	4620      	mov	r0, r4
1a0055fe:	220a      	movs	r2, #10
1a005600:	f001 fc4c 	bl	1a006e9c <__multadd>
1a005604:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005606:	2b00      	cmp	r3, #0
1a005608:	4606      	mov	r6, r0
1a00560a:	f340 840b 	ble.w	1a005e24 <_dtoa_r+0xe5c>
1a00560e:	9308      	str	r3, [sp, #32]
1a005610:	2d00      	cmp	r5, #0
1a005612:	dd05      	ble.n	1a005620 <_dtoa_r+0x658>
1a005614:	4631      	mov	r1, r6
1a005616:	462a      	mov	r2, r5
1a005618:	4620      	mov	r0, r4
1a00561a:	f001 fdc3 	bl	1a0071a4 <__lshift>
1a00561e:	4606      	mov	r6, r0
1a005620:	f1b9 0f00 	cmp.w	r9, #0
1a005624:	f040 82ed 	bne.w	1a005c02 <_dtoa_r+0xc3a>
1a005628:	46b1      	mov	r9, r6
1a00562a:	9b08      	ldr	r3, [sp, #32]
1a00562c:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a00562e:	3b01      	subs	r3, #1
1a005630:	18d3      	adds	r3, r2, r3
1a005632:	9308      	str	r3, [sp, #32]
1a005634:	9b00      	ldr	r3, [sp, #0]
1a005636:	f003 0301 	and.w	r3, r3, #1
1a00563a:	930a      	str	r3, [sp, #40]	; 0x28
1a00563c:	4617      	mov	r7, r2
1a00563e:	4641      	mov	r1, r8
1a005640:	4658      	mov	r0, fp
1a005642:	f7ff fc2b 	bl	1a004e9c <quorem>
1a005646:	4631      	mov	r1, r6
1a005648:	4605      	mov	r5, r0
1a00564a:	4658      	mov	r0, fp
1a00564c:	f001 fe00 	bl	1a007250 <__mcmp>
1a005650:	464a      	mov	r2, r9
1a005652:	4682      	mov	sl, r0
1a005654:	4641      	mov	r1, r8
1a005656:	4620      	mov	r0, r4
1a005658:	f001 fe1e 	bl	1a007298 <__mdiff>
1a00565c:	68c2      	ldr	r2, [r0, #12]
1a00565e:	4603      	mov	r3, r0
1a005660:	f105 0c30 	add.w	ip, r5, #48	; 0x30
1a005664:	2a00      	cmp	r2, #0
1a005666:	f040 81ba 	bne.w	1a0059de <_dtoa_r+0xa16>
1a00566a:	4619      	mov	r1, r3
1a00566c:	4658      	mov	r0, fp
1a00566e:	f8cd c01c 	str.w	ip, [sp, #28]
1a005672:	9306      	str	r3, [sp, #24]
1a005674:	f001 fdec 	bl	1a007250 <__mcmp>
1a005678:	9b06      	ldr	r3, [sp, #24]
1a00567a:	9000      	str	r0, [sp, #0]
1a00567c:	4619      	mov	r1, r3
1a00567e:	4620      	mov	r0, r4
1a005680:	f001 fc02 	bl	1a006e88 <_Bfree>
1a005684:	9a00      	ldr	r2, [sp, #0]
1a005686:	f8dd c01c 	ldr.w	ip, [sp, #28]
1a00568a:	b92a      	cbnz	r2, 1a005698 <_dtoa_r+0x6d0>
1a00568c:	9b03      	ldr	r3, [sp, #12]
1a00568e:	b91b      	cbnz	r3, 1a005698 <_dtoa_r+0x6d0>
1a005690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005692:	2b00      	cmp	r3, #0
1a005694:	f000 83aa 	beq.w	1a005dec <_dtoa_r+0xe24>
1a005698:	f1ba 0f00 	cmp.w	sl, #0
1a00569c:	f2c0 824a 	blt.w	1a005b34 <_dtoa_r+0xb6c>
1a0056a0:	d105      	bne.n	1a0056ae <_dtoa_r+0x6e6>
1a0056a2:	9b03      	ldr	r3, [sp, #12]
1a0056a4:	b91b      	cbnz	r3, 1a0056ae <_dtoa_r+0x6e6>
1a0056a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0056a8:	2b00      	cmp	r3, #0
1a0056aa:	f000 8243 	beq.w	1a005b34 <_dtoa_r+0xb6c>
1a0056ae:	2a00      	cmp	r2, #0
1a0056b0:	f300 82bb 	bgt.w	1a005c2a <_dtoa_r+0xc62>
1a0056b4:	9b08      	ldr	r3, [sp, #32]
1a0056b6:	f887 c000 	strb.w	ip, [r7]
1a0056ba:	f107 0a01 	add.w	sl, r7, #1
1a0056be:	429f      	cmp	r7, r3
1a0056c0:	4655      	mov	r5, sl
1a0056c2:	f000 82be 	beq.w	1a005c42 <_dtoa_r+0xc7a>
1a0056c6:	4659      	mov	r1, fp
1a0056c8:	220a      	movs	r2, #10
1a0056ca:	2300      	movs	r3, #0
1a0056cc:	4620      	mov	r0, r4
1a0056ce:	f001 fbe5 	bl	1a006e9c <__multadd>
1a0056d2:	454e      	cmp	r6, r9
1a0056d4:	4683      	mov	fp, r0
1a0056d6:	4631      	mov	r1, r6
1a0056d8:	4620      	mov	r0, r4
1a0056da:	f04f 020a 	mov.w	r2, #10
1a0056de:	f04f 0300 	mov.w	r3, #0
1a0056e2:	f000 8176 	beq.w	1a0059d2 <_dtoa_r+0xa0a>
1a0056e6:	f001 fbd9 	bl	1a006e9c <__multadd>
1a0056ea:	4649      	mov	r1, r9
1a0056ec:	4606      	mov	r6, r0
1a0056ee:	220a      	movs	r2, #10
1a0056f0:	4620      	mov	r0, r4
1a0056f2:	2300      	movs	r3, #0
1a0056f4:	f001 fbd2 	bl	1a006e9c <__multadd>
1a0056f8:	4657      	mov	r7, sl
1a0056fa:	4681      	mov	r9, r0
1a0056fc:	e79f      	b.n	1a00563e <_dtoa_r+0x676>
1a0056fe:	2301      	movs	r3, #1
1a005700:	930b      	str	r3, [sp, #44]	; 0x2c
1a005702:	f1ba 0f00 	cmp.w	sl, #0
1a005706:	f340 820c 	ble.w	1a005b22 <_dtoa_r+0xb5a>
1a00570a:	4656      	mov	r6, sl
1a00570c:	4655      	mov	r5, sl
1a00570e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
1a005712:	f8cd a020 	str.w	sl, [sp, #32]
1a005716:	2100      	movs	r1, #0
1a005718:	2e17      	cmp	r6, #23
1a00571a:	6461      	str	r1, [r4, #68]	; 0x44
1a00571c:	d90a      	bls.n	1a005734 <_dtoa_r+0x76c>
1a00571e:	2201      	movs	r2, #1
1a005720:	2304      	movs	r3, #4
1a005722:	005b      	lsls	r3, r3, #1
1a005724:	f103 0014 	add.w	r0, r3, #20
1a005728:	4286      	cmp	r6, r0
1a00572a:	4611      	mov	r1, r2
1a00572c:	f102 0201 	add.w	r2, r2, #1
1a005730:	d2f7      	bcs.n	1a005722 <_dtoa_r+0x75a>
1a005732:	6461      	str	r1, [r4, #68]	; 0x44
1a005734:	4620      	mov	r0, r4
1a005736:	f001 fb81 	bl	1a006e3c <_Balloc>
1a00573a:	2d0e      	cmp	r5, #14
1a00573c:	9009      	str	r0, [sp, #36]	; 0x24
1a00573e:	6420      	str	r0, [r4, #64]	; 0x40
1a005740:	f63f ad55 	bhi.w	1a0051ee <_dtoa_r+0x226>
1a005744:	2f00      	cmp	r7, #0
1a005746:	f43f ad52 	beq.w	1a0051ee <_dtoa_r+0x226>
1a00574a:	ed9d 7b00 	vldr	d7, [sp]
1a00574e:	9905      	ldr	r1, [sp, #20]
1a005750:	2900      	cmp	r1, #0
1a005752:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a005756:	f340 8223 	ble.w	1a005ba0 <_dtoa_r+0xbd8>
1a00575a:	4bb7      	ldr	r3, [pc, #732]	; (1a005a38 <_dtoa_r+0xa70>)
1a00575c:	f001 020f 	and.w	r2, r1, #15
1a005760:	110d      	asrs	r5, r1, #4
1a005762:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a005766:	06e9      	lsls	r1, r5, #27
1a005768:	e9d3 6700 	ldrd	r6, r7, [r3]
1a00576c:	f140 81d2 	bpl.w	1a005b14 <_dtoa_r+0xb4c>
1a005770:	4bb2      	ldr	r3, [pc, #712]	; (1a005a3c <_dtoa_r+0xa74>)
1a005772:	ec51 0b17 	vmov	r0, r1, d7
1a005776:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
1a00577a:	f7fd fbe7 	bl	1a002f4c <__aeabi_ddiv>
1a00577e:	e9cd 0100 	strd	r0, r1, [sp]
1a005782:	f005 050f 	and.w	r5, r5, #15
1a005786:	f04f 0803 	mov.w	r8, #3
1a00578a:	b18d      	cbz	r5, 1a0057b0 <_dtoa_r+0x7e8>
1a00578c:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 1a005a3c <_dtoa_r+0xa74>
1a005790:	4630      	mov	r0, r6
1a005792:	4639      	mov	r1, r7
1a005794:	07ea      	lsls	r2, r5, #31
1a005796:	d505      	bpl.n	1a0057a4 <_dtoa_r+0x7dc>
1a005798:	e9d9 2300 	ldrd	r2, r3, [r9]
1a00579c:	f7fd faac 	bl	1a002cf8 <__aeabi_dmul>
1a0057a0:	f108 0801 	add.w	r8, r8, #1
1a0057a4:	106d      	asrs	r5, r5, #1
1a0057a6:	f109 0908 	add.w	r9, r9, #8
1a0057aa:	d1f3      	bne.n	1a005794 <_dtoa_r+0x7cc>
1a0057ac:	4606      	mov	r6, r0
1a0057ae:	460f      	mov	r7, r1
1a0057b0:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0057b4:	4632      	mov	r2, r6
1a0057b6:	463b      	mov	r3, r7
1a0057b8:	f7fd fbc8 	bl	1a002f4c <__aeabi_ddiv>
1a0057bc:	e9cd 0100 	strd	r0, r1, [sp]
1a0057c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0057c2:	b143      	cbz	r3, 1a0057d6 <_dtoa_r+0x80e>
1a0057c4:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0057c8:	2200      	movs	r2, #0
1a0057ca:	4b9d      	ldr	r3, [pc, #628]	; (1a005a40 <_dtoa_r+0xa78>)
1a0057cc:	f002 faa2 	bl	1a007d14 <__aeabi_dcmplt>
1a0057d0:	2800      	cmp	r0, #0
1a0057d2:	f040 82ae 	bne.w	1a005d32 <_dtoa_r+0xd6a>
1a0057d6:	4640      	mov	r0, r8
1a0057d8:	f7fd f98e 	bl	1a002af8 <__aeabi_i2d>
1a0057dc:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0057e0:	f7fd fa8a 	bl	1a002cf8 <__aeabi_dmul>
1a0057e4:	4b97      	ldr	r3, [pc, #604]	; (1a005a44 <_dtoa_r+0xa7c>)
1a0057e6:	2200      	movs	r2, #0
1a0057e8:	f7fd f83a 	bl	1a002860 <__adddf3>
1a0057ec:	9b08      	ldr	r3, [sp, #32]
1a0057ee:	4606      	mov	r6, r0
1a0057f0:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
1a0057f4:	2b00      	cmp	r3, #0
1a0057f6:	f000 8162 	beq.w	1a005abe <_dtoa_r+0xaf6>
1a0057fa:	9b05      	ldr	r3, [sp, #20]
1a0057fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
1a005800:	9314      	str	r3, [sp, #80]	; 0x50
1a005802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a005804:	2b00      	cmp	r3, #0
1a005806:	f000 8223 	beq.w	1a005c50 <_dtoa_r+0xc88>
1a00580a:	4b8b      	ldr	r3, [pc, #556]	; (1a005a38 <_dtoa_r+0xa70>)
1a00580c:	498e      	ldr	r1, [pc, #568]	; (1a005a48 <_dtoa_r+0xa80>)
1a00580e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
1a005812:	e953 2302 	ldrd	r2, r3, [r3, #-8]
1a005816:	2000      	movs	r0, #0
1a005818:	f7fd fb98 	bl	1a002f4c <__aeabi_ddiv>
1a00581c:	4632      	mov	r2, r6
1a00581e:	463b      	mov	r3, r7
1a005820:	f7fd f81c 	bl	1a00285c <__aeabi_dsub>
1a005824:	e9dd 6700 	ldrd	r6, r7, [sp]
1a005828:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
1a00582c:	4639      	mov	r1, r7
1a00582e:	4630      	mov	r0, r6
1a005830:	f002 fa98 	bl	1a007d64 <__aeabi_d2iz>
1a005834:	4605      	mov	r5, r0
1a005836:	f7fd f95f 	bl	1a002af8 <__aeabi_i2d>
1a00583a:	3530      	adds	r5, #48	; 0x30
1a00583c:	4602      	mov	r2, r0
1a00583e:	460b      	mov	r3, r1
1a005840:	4630      	mov	r0, r6
1a005842:	4639      	mov	r1, r7
1a005844:	f7fd f80a 	bl	1a00285c <__aeabi_dsub>
1a005848:	fa5f f885 	uxtb.w	r8, r5
1a00584c:	9d09      	ldr	r5, [sp, #36]	; 0x24
1a00584e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
1a005852:	f885 8000 	strb.w	r8, [r5]
1a005856:	4606      	mov	r6, r0
1a005858:	460f      	mov	r7, r1
1a00585a:	3501      	adds	r5, #1
1a00585c:	f002 fa5a 	bl	1a007d14 <__aeabi_dcmplt>
1a005860:	2800      	cmp	r0, #0
1a005862:	f040 82a7 	bne.w	1a005db4 <_dtoa_r+0xdec>
1a005866:	4632      	mov	r2, r6
1a005868:	463b      	mov	r3, r7
1a00586a:	2000      	movs	r0, #0
1a00586c:	4974      	ldr	r1, [pc, #464]	; (1a005a40 <_dtoa_r+0xa78>)
1a00586e:	f7fc fff5 	bl	1a00285c <__aeabi_dsub>
1a005872:	4602      	mov	r2, r0
1a005874:	460b      	mov	r3, r1
1a005876:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a00587a:	f002 fa69 	bl	1a007d50 <__aeabi_dcmpgt>
1a00587e:	2800      	cmp	r0, #0
1a005880:	f040 82ad 	bne.w	1a005dde <_dtoa_r+0xe16>
1a005884:	f1b9 0f01 	cmp.w	r9, #1
1a005888:	f340 8184 	ble.w	1a005b94 <_dtoa_r+0xbcc>
1a00588c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00588e:	f8cd b000 	str.w	fp, [sp]
1a005892:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
1a005896:	4499      	add	r9, r3
1a005898:	46a0      	mov	r8, r4
1a00589a:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
1a00589e:	e00d      	b.n	1a0058bc <_dtoa_r+0x8f4>
1a0058a0:	2000      	movs	r0, #0
1a0058a2:	4967      	ldr	r1, [pc, #412]	; (1a005a40 <_dtoa_r+0xa78>)
1a0058a4:	f7fc ffda 	bl	1a00285c <__aeabi_dsub>
1a0058a8:	4652      	mov	r2, sl
1a0058aa:	465b      	mov	r3, fp
1a0058ac:	f002 fa32 	bl	1a007d14 <__aeabi_dcmplt>
1a0058b0:	2800      	cmp	r0, #0
1a0058b2:	f040 828f 	bne.w	1a005dd4 <_dtoa_r+0xe0c>
1a0058b6:	454d      	cmp	r5, r9
1a0058b8:	f000 8167 	beq.w	1a005b8a <_dtoa_r+0xbc2>
1a0058bc:	4650      	mov	r0, sl
1a0058be:	4659      	mov	r1, fp
1a0058c0:	2200      	movs	r2, #0
1a0058c2:	4b62      	ldr	r3, [pc, #392]	; (1a005a4c <_dtoa_r+0xa84>)
1a0058c4:	f7fd fa18 	bl	1a002cf8 <__aeabi_dmul>
1a0058c8:	2200      	movs	r2, #0
1a0058ca:	4b60      	ldr	r3, [pc, #384]	; (1a005a4c <_dtoa_r+0xa84>)
1a0058cc:	4682      	mov	sl, r0
1a0058ce:	468b      	mov	fp, r1
1a0058d0:	4630      	mov	r0, r6
1a0058d2:	4639      	mov	r1, r7
1a0058d4:	f7fd fa10 	bl	1a002cf8 <__aeabi_dmul>
1a0058d8:	460f      	mov	r7, r1
1a0058da:	4606      	mov	r6, r0
1a0058dc:	f002 fa42 	bl	1a007d64 <__aeabi_d2iz>
1a0058e0:	4604      	mov	r4, r0
1a0058e2:	f7fd f909 	bl	1a002af8 <__aeabi_i2d>
1a0058e6:	4602      	mov	r2, r0
1a0058e8:	460b      	mov	r3, r1
1a0058ea:	4630      	mov	r0, r6
1a0058ec:	4639      	mov	r1, r7
1a0058ee:	f7fc ffb5 	bl	1a00285c <__aeabi_dsub>
1a0058f2:	3430      	adds	r4, #48	; 0x30
1a0058f4:	b2e4      	uxtb	r4, r4
1a0058f6:	4652      	mov	r2, sl
1a0058f8:	465b      	mov	r3, fp
1a0058fa:	f805 4b01 	strb.w	r4, [r5], #1
1a0058fe:	4606      	mov	r6, r0
1a005900:	460f      	mov	r7, r1
1a005902:	f002 fa07 	bl	1a007d14 <__aeabi_dcmplt>
1a005906:	4632      	mov	r2, r6
1a005908:	463b      	mov	r3, r7
1a00590a:	2800      	cmp	r0, #0
1a00590c:	d0c8      	beq.n	1a0058a0 <_dtoa_r+0x8d8>
1a00590e:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a005910:	f8dd b000 	ldr.w	fp, [sp]
1a005914:	9305      	str	r3, [sp, #20]
1a005916:	4644      	mov	r4, r8
1a005918:	e52d      	b.n	1a005376 <_dtoa_r+0x3ae>
1a00591a:	2300      	movs	r3, #0
1a00591c:	930b      	str	r3, [sp, #44]	; 0x2c
1a00591e:	9b05      	ldr	r3, [sp, #20]
1a005920:	4453      	add	r3, sl
1a005922:	930e      	str	r3, [sp, #56]	; 0x38
1a005924:	3301      	adds	r3, #1
1a005926:	2b00      	cmp	r3, #0
1a005928:	9308      	str	r3, [sp, #32]
1a00592a:	f340 8101 	ble.w	1a005b30 <_dtoa_r+0xb68>
1a00592e:	9d08      	ldr	r5, [sp, #32]
1a005930:	462e      	mov	r6, r5
1a005932:	e6f0      	b.n	1a005716 <_dtoa_r+0x74e>
1a005934:	2300      	movs	r3, #0
1a005936:	930b      	str	r3, [sp, #44]	; 0x2c
1a005938:	e6e3      	b.n	1a005702 <_dtoa_r+0x73a>
1a00593a:	9b08      	ldr	r3, [sp, #32]
1a00593c:	2b00      	cmp	r3, #0
1a00593e:	f73f ac67 	bgt.w	1a005210 <_dtoa_r+0x248>
1a005942:	f040 80d4 	bne.w	1a005aee <_dtoa_r+0xb26>
1a005946:	4640      	mov	r0, r8
1a005948:	2200      	movs	r2, #0
1a00594a:	4b41      	ldr	r3, [pc, #260]	; (1a005a50 <_dtoa_r+0xa88>)
1a00594c:	4649      	mov	r1, r9
1a00594e:	f7fd f9d3 	bl	1a002cf8 <__aeabi_dmul>
1a005952:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005956:	f002 f9f1 	bl	1a007d3c <__aeabi_dcmpge>
1a00595a:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a00595e:	4646      	mov	r6, r8
1a005960:	2800      	cmp	r0, #0
1a005962:	f000 808b 	beq.w	1a005a7c <_dtoa_r+0xab4>
1a005966:	ea6f 030a 	mvn.w	r3, sl
1a00596a:	9d09      	ldr	r5, [sp, #36]	; 0x24
1a00596c:	9305      	str	r3, [sp, #20]
1a00596e:	4641      	mov	r1, r8
1a005970:	4620      	mov	r0, r4
1a005972:	f001 fa89 	bl	1a006e88 <_Bfree>
1a005976:	2e00      	cmp	r6, #0
1a005978:	f47f ae2b 	bne.w	1a0055d2 <_dtoa_r+0x60a>
1a00597c:	e4fb      	b.n	1a005376 <_dtoa_r+0x3ae>
1a00597e:	4659      	mov	r1, fp
1a005980:	4620      	mov	r0, r4
1a005982:	f001 fbbf 	bl	1a007104 <__pow5mult>
1a005986:	4683      	mov	fp, r0
1a005988:	e554      	b.n	1a005434 <_dtoa_r+0x46c>
1a00598a:	9b00      	ldr	r3, [sp, #0]
1a00598c:	2b00      	cmp	r3, #0
1a00598e:	f47f ad63 	bne.w	1a005458 <_dtoa_r+0x490>
1a005992:	9b01      	ldr	r3, [sp, #4]
1a005994:	f3c3 0313 	ubfx	r3, r3, #0, #20
1a005998:	2b00      	cmp	r3, #0
1a00599a:	f47f ad90 	bne.w	1a0054be <_dtoa_r+0x4f6>
1a00599e:	9b01      	ldr	r3, [sp, #4]
1a0059a0:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
1a0059a4:	0d3f      	lsrs	r7, r7, #20
1a0059a6:	053f      	lsls	r7, r7, #20
1a0059a8:	2f00      	cmp	r7, #0
1a0059aa:	f000 821c 	beq.w	1a005de6 <_dtoa_r+0xe1e>
1a0059ae:	9b07      	ldr	r3, [sp, #28]
1a0059b0:	3301      	adds	r3, #1
1a0059b2:	9307      	str	r3, [sp, #28]
1a0059b4:	9b06      	ldr	r3, [sp, #24]
1a0059b6:	3301      	adds	r3, #1
1a0059b8:	9306      	str	r3, [sp, #24]
1a0059ba:	f04f 0901 	mov.w	r9, #1
1a0059be:	e580      	b.n	1a0054c2 <_dtoa_r+0x4fa>
1a0059c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1a0059c2:	2a00      	cmp	r2, #0
1a0059c4:	f000 81a7 	beq.w	1a005d16 <_dtoa_r+0xd4e>
1a0059c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
1a0059cc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
1a0059ce:	9d07      	ldr	r5, [sp, #28]
1a0059d0:	e4f9      	b.n	1a0053c6 <_dtoa_r+0x3fe>
1a0059d2:	f001 fa63 	bl	1a006e9c <__multadd>
1a0059d6:	4657      	mov	r7, sl
1a0059d8:	4606      	mov	r6, r0
1a0059da:	4681      	mov	r9, r0
1a0059dc:	e62f      	b.n	1a00563e <_dtoa_r+0x676>
1a0059de:	4601      	mov	r1, r0
1a0059e0:	4620      	mov	r0, r4
1a0059e2:	f8cd c000 	str.w	ip, [sp]
1a0059e6:	f001 fa4f 	bl	1a006e88 <_Bfree>
1a0059ea:	2201      	movs	r2, #1
1a0059ec:	f8dd c000 	ldr.w	ip, [sp]
1a0059f0:	e652      	b.n	1a005698 <_dtoa_r+0x6d0>
1a0059f2:	4658      	mov	r0, fp
1a0059f4:	4641      	mov	r1, r8
1a0059f6:	f001 fc2b 	bl	1a007250 <__mcmp>
1a0059fa:	2800      	cmp	r0, #0
1a0059fc:	f6bf ad8f 	bge.w	1a00551e <_dtoa_r+0x556>
1a005a00:	9f05      	ldr	r7, [sp, #20]
1a005a02:	4659      	mov	r1, fp
1a005a04:	2300      	movs	r3, #0
1a005a06:	4620      	mov	r0, r4
1a005a08:	220a      	movs	r2, #10
1a005a0a:	3f01      	subs	r7, #1
1a005a0c:	9705      	str	r7, [sp, #20]
1a005a0e:	f001 fa45 	bl	1a006e9c <__multadd>
1a005a12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a005a14:	4683      	mov	fp, r0
1a005a16:	2b00      	cmp	r3, #0
1a005a18:	f47f adee 	bne.w	1a0055f8 <_dtoa_r+0x630>
1a005a1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005a1e:	2b00      	cmp	r3, #0
1a005a20:	f340 81f5 	ble.w	1a005e0e <_dtoa_r+0xe46>
1a005a24:	9308      	str	r3, [sp, #32]
1a005a26:	e581      	b.n	1a00552c <_dtoa_r+0x564>
1a005a28:	9809      	ldr	r0, [sp, #36]	; 0x24
1a005a2a:	f7ff bb04 	b.w	1a005036 <_dtoa_r+0x6e>
1a005a2e:	9b00      	ldr	r3, [sp, #0]
1a005a30:	2b00      	cmp	r3, #0
1a005a32:	f47f ad44 	bne.w	1a0054be <_dtoa_r+0x4f6>
1a005a36:	e7ac      	b.n	1a005992 <_dtoa_r+0x9ca>
1a005a38:	1a008330 	.word	0x1a008330
1a005a3c:	1a0083f8 	.word	0x1a0083f8
1a005a40:	3ff00000 	.word	0x3ff00000
1a005a44:	401c0000 	.word	0x401c0000
1a005a48:	3fe00000 	.word	0x3fe00000
1a005a4c:	40240000 	.word	0x40240000
1a005a50:	40140000 	.word	0x40140000
1a005a54:	9b03      	ldr	r3, [sp, #12]
1a005a56:	2b02      	cmp	r3, #2
1a005a58:	f77f ad65 	ble.w	1a005526 <_dtoa_r+0x55e>
1a005a5c:	9b08      	ldr	r3, [sp, #32]
1a005a5e:	2b00      	cmp	r3, #0
1a005a60:	d181      	bne.n	1a005966 <_dtoa_r+0x99e>
1a005a62:	4641      	mov	r1, r8
1a005a64:	2205      	movs	r2, #5
1a005a66:	4620      	mov	r0, r4
1a005a68:	f001 fa18 	bl	1a006e9c <__multadd>
1a005a6c:	4680      	mov	r8, r0
1a005a6e:	4641      	mov	r1, r8
1a005a70:	4658      	mov	r0, fp
1a005a72:	f001 fbed 	bl	1a007250 <__mcmp>
1a005a76:	2800      	cmp	r0, #0
1a005a78:	f77f af75 	ble.w	1a005966 <_dtoa_r+0x99e>
1a005a7c:	9a05      	ldr	r2, [sp, #20]
1a005a7e:	9909      	ldr	r1, [sp, #36]	; 0x24
1a005a80:	2331      	movs	r3, #49	; 0x31
1a005a82:	3201      	adds	r2, #1
1a005a84:	9205      	str	r2, [sp, #20]
1a005a86:	700b      	strb	r3, [r1, #0]
1a005a88:	1c4d      	adds	r5, r1, #1
1a005a8a:	e770      	b.n	1a00596e <_dtoa_r+0x9a6>
1a005a8c:	9a05      	ldr	r2, [sp, #20]
1a005a8e:	3201      	adds	r2, #1
1a005a90:	9205      	str	r2, [sp, #20]
1a005a92:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a005a94:	2331      	movs	r3, #49	; 0x31
1a005a96:	7013      	strb	r3, [r2, #0]
1a005a98:	e58b      	b.n	1a0055b2 <_dtoa_r+0x5ea>
1a005a9a:	f8dd b000 	ldr.w	fp, [sp]
1a005a9e:	9c03      	ldr	r4, [sp, #12]
1a005aa0:	e469      	b.n	1a005376 <_dtoa_r+0x3ae>
1a005aa2:	4640      	mov	r0, r8
1a005aa4:	f7fd f828 	bl	1a002af8 <__aeabi_i2d>
1a005aa8:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005aac:	f7fd f924 	bl	1a002cf8 <__aeabi_dmul>
1a005ab0:	2200      	movs	r2, #0
1a005ab2:	4bc2      	ldr	r3, [pc, #776]	; (1a005dbc <_dtoa_r+0xdf4>)
1a005ab4:	f7fc fed4 	bl	1a002860 <__adddf3>
1a005ab8:	4606      	mov	r6, r0
1a005aba:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
1a005abe:	2200      	movs	r2, #0
1a005ac0:	4bbf      	ldr	r3, [pc, #764]	; (1a005dc0 <_dtoa_r+0xdf8>)
1a005ac2:	e9dd 0100 	ldrd	r0, r1, [sp]
1a005ac6:	f7fc fec9 	bl	1a00285c <__aeabi_dsub>
1a005aca:	4632      	mov	r2, r6
1a005acc:	463b      	mov	r3, r7
1a005ace:	4680      	mov	r8, r0
1a005ad0:	4689      	mov	r9, r1
1a005ad2:	f002 f93d 	bl	1a007d50 <__aeabi_dcmpgt>
1a005ad6:	2800      	cmp	r0, #0
1a005ad8:	f040 80b6 	bne.w	1a005c48 <_dtoa_r+0xc80>
1a005adc:	4632      	mov	r2, r6
1a005ade:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
1a005ae2:	4640      	mov	r0, r8
1a005ae4:	4649      	mov	r1, r9
1a005ae6:	f002 f915 	bl	1a007d14 <__aeabi_dcmplt>
1a005aea:	2800      	cmp	r0, #0
1a005aec:	d052      	beq.n	1a005b94 <_dtoa_r+0xbcc>
1a005aee:	f04f 0800 	mov.w	r8, #0
1a005af2:	4646      	mov	r6, r8
1a005af4:	e737      	b.n	1a005966 <_dtoa_r+0x99e>
1a005af6:	4659      	mov	r1, fp
1a005af8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a005afa:	4620      	mov	r0, r4
1a005afc:	f001 fb02 	bl	1a007104 <__pow5mult>
1a005b00:	4683      	mov	fp, r0
1a005b02:	e497      	b.n	1a005434 <_dtoa_r+0x46c>
1a005b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005b06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a005b08:	970a      	str	r7, [sp, #40]	; 0x28
1a005b0a:	1afb      	subs	r3, r7, r3
1a005b0c:	441a      	add	r2, r3
1a005b0e:	920c      	str	r2, [sp, #48]	; 0x30
1a005b10:	2700      	movs	r7, #0
1a005b12:	e452      	b.n	1a0053ba <_dtoa_r+0x3f2>
1a005b14:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a005b18:	f04f 0802 	mov.w	r8, #2
1a005b1c:	ed8d 7b00 	vstr	d7, [sp]
1a005b20:	e633      	b.n	1a00578a <_dtoa_r+0x7c2>
1a005b22:	2501      	movs	r5, #1
1a005b24:	950e      	str	r5, [sp, #56]	; 0x38
1a005b26:	9508      	str	r5, [sp, #32]
1a005b28:	46aa      	mov	sl, r5
1a005b2a:	2100      	movs	r1, #0
1a005b2c:	6461      	str	r1, [r4, #68]	; 0x44
1a005b2e:	e601      	b.n	1a005734 <_dtoa_r+0x76c>
1a005b30:	461d      	mov	r5, r3
1a005b32:	e7fa      	b.n	1a005b2a <_dtoa_r+0xb62>
1a005b34:	2a00      	cmp	r2, #0
1a005b36:	dd15      	ble.n	1a005b64 <_dtoa_r+0xb9c>
1a005b38:	4659      	mov	r1, fp
1a005b3a:	2201      	movs	r2, #1
1a005b3c:	4620      	mov	r0, r4
1a005b3e:	f8cd c000 	str.w	ip, [sp]
1a005b42:	f001 fb2f 	bl	1a0071a4 <__lshift>
1a005b46:	4641      	mov	r1, r8
1a005b48:	4683      	mov	fp, r0
1a005b4a:	f001 fb81 	bl	1a007250 <__mcmp>
1a005b4e:	2800      	cmp	r0, #0
1a005b50:	f8dd c000 	ldr.w	ip, [sp]
1a005b54:	f340 8154 	ble.w	1a005e00 <_dtoa_r+0xe38>
1a005b58:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
1a005b5c:	f000 8111 	beq.w	1a005d82 <_dtoa_r+0xdba>
1a005b60:	f10c 0c01 	add.w	ip, ip, #1
1a005b64:	46b2      	mov	sl, r6
1a005b66:	f887 c000 	strb.w	ip, [r7]
1a005b6a:	1c7d      	adds	r5, r7, #1
1a005b6c:	464e      	mov	r6, r9
1a005b6e:	e520      	b.n	1a0055b2 <_dtoa_r+0x5ea>
1a005b70:	d104      	bne.n	1a005b7c <_dtoa_r+0xbb4>
1a005b72:	f01c 0f01 	tst.w	ip, #1
1a005b76:	d001      	beq.n	1a005b7c <_dtoa_r+0xbb4>
1a005b78:	e50b      	b.n	1a005592 <_dtoa_r+0x5ca>
1a005b7a:	4615      	mov	r5, r2
1a005b7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
1a005b80:	2b30      	cmp	r3, #48	; 0x30
1a005b82:	f105 32ff 	add.w	r2, r5, #4294967295
1a005b86:	d0f8      	beq.n	1a005b7a <_dtoa_r+0xbb2>
1a005b88:	e513      	b.n	1a0055b2 <_dtoa_r+0x5ea>
1a005b8a:	f8dd b000 	ldr.w	fp, [sp]
1a005b8e:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
1a005b92:	4644      	mov	r4, r8
1a005b94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
1a005b98:	e9cd 2300 	strd	r2, r3, [sp]
1a005b9c:	f7ff bb27 	b.w	1a0051ee <_dtoa_r+0x226>
1a005ba0:	9b05      	ldr	r3, [sp, #20]
1a005ba2:	425d      	negs	r5, r3
1a005ba4:	2d00      	cmp	r5, #0
1a005ba6:	f000 80bd 	beq.w	1a005d24 <_dtoa_r+0xd5c>
1a005baa:	4b86      	ldr	r3, [pc, #536]	; (1a005dc4 <_dtoa_r+0xdfc>)
1a005bac:	f005 020f 	and.w	r2, r5, #15
1a005bb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a005bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005bb8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a005bbc:	f7fd f89c 	bl	1a002cf8 <__aeabi_dmul>
1a005bc0:	112d      	asrs	r5, r5, #4
1a005bc2:	e9cd 0100 	strd	r0, r1, [sp]
1a005bc6:	f000 8127 	beq.w	1a005e18 <_dtoa_r+0xe50>
1a005bca:	4e7f      	ldr	r6, [pc, #508]	; (1a005dc8 <_dtoa_r+0xe00>)
1a005bcc:	f04f 0802 	mov.w	r8, #2
1a005bd0:	07eb      	lsls	r3, r5, #31
1a005bd2:	d505      	bpl.n	1a005be0 <_dtoa_r+0xc18>
1a005bd4:	e9d6 2300 	ldrd	r2, r3, [r6]
1a005bd8:	f7fd f88e 	bl	1a002cf8 <__aeabi_dmul>
1a005bdc:	f108 0801 	add.w	r8, r8, #1
1a005be0:	106d      	asrs	r5, r5, #1
1a005be2:	f106 0608 	add.w	r6, r6, #8
1a005be6:	d1f3      	bne.n	1a005bd0 <_dtoa_r+0xc08>
1a005be8:	e9cd 0100 	strd	r0, r1, [sp]
1a005bec:	e5e8      	b.n	1a0057c0 <_dtoa_r+0x7f8>
1a005bee:	9a05      	ldr	r2, [sp, #20]
1a005bf0:	3201      	adds	r2, #1
1a005bf2:	9205      	str	r2, [sp, #20]
1a005bf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a005bf6:	2330      	movs	r3, #48	; 0x30
1a005bf8:	7013      	strb	r3, [r2, #0]
1a005bfa:	2331      	movs	r3, #49	; 0x31
1a005bfc:	7013      	strb	r3, [r2, #0]
1a005bfe:	f7ff bbba 	b.w	1a005376 <_dtoa_r+0x3ae>
1a005c02:	6871      	ldr	r1, [r6, #4]
1a005c04:	4620      	mov	r0, r4
1a005c06:	f001 f919 	bl	1a006e3c <_Balloc>
1a005c0a:	6933      	ldr	r3, [r6, #16]
1a005c0c:	1c9a      	adds	r2, r3, #2
1a005c0e:	4605      	mov	r5, r0
1a005c10:	0092      	lsls	r2, r2, #2
1a005c12:	f106 010c 	add.w	r1, r6, #12
1a005c16:	300c      	adds	r0, #12
1a005c18:	f7fd fd2c 	bl	1a003674 <memcpy>
1a005c1c:	4620      	mov	r0, r4
1a005c1e:	4629      	mov	r1, r5
1a005c20:	2201      	movs	r2, #1
1a005c22:	f001 fabf 	bl	1a0071a4 <__lshift>
1a005c26:	4681      	mov	r9, r0
1a005c28:	e4ff      	b.n	1a00562a <_dtoa_r+0x662>
1a005c2a:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
1a005c2e:	f000 80a8 	beq.w	1a005d82 <_dtoa_r+0xdba>
1a005c32:	f10c 0c01 	add.w	ip, ip, #1
1a005c36:	46b2      	mov	sl, r6
1a005c38:	f887 c000 	strb.w	ip, [r7]
1a005c3c:	1c7d      	adds	r5, r7, #1
1a005c3e:	464e      	mov	r6, r9
1a005c40:	e4b7      	b.n	1a0055b2 <_dtoa_r+0x5ea>
1a005c42:	46b2      	mov	sl, r6
1a005c44:	464e      	mov	r6, r9
1a005c46:	e494      	b.n	1a005572 <_dtoa_r+0x5aa>
1a005c48:	f04f 0800 	mov.w	r8, #0
1a005c4c:	4646      	mov	r6, r8
1a005c4e:	e715      	b.n	1a005a7c <_dtoa_r+0xab4>
1a005c50:	495c      	ldr	r1, [pc, #368]	; (1a005dc4 <_dtoa_r+0xdfc>)
1a005c52:	f109 33ff 	add.w	r3, r9, #4294967295
1a005c56:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
1a005c5a:	4632      	mov	r2, r6
1a005c5c:	9315      	str	r3, [sp, #84]	; 0x54
1a005c5e:	e9d1 0100 	ldrd	r0, r1, [r1]
1a005c62:	463b      	mov	r3, r7
1a005c64:	f7fd f848 	bl	1a002cf8 <__aeabi_dmul>
1a005c68:	e9dd 6700 	ldrd	r6, r7, [sp]
1a005c6c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
1a005c70:	4639      	mov	r1, r7
1a005c72:	4630      	mov	r0, r6
1a005c74:	f002 f876 	bl	1a007d64 <__aeabi_d2iz>
1a005c78:	4605      	mov	r5, r0
1a005c7a:	f7fc ff3d 	bl	1a002af8 <__aeabi_i2d>
1a005c7e:	4602      	mov	r2, r0
1a005c80:	460b      	mov	r3, r1
1a005c82:	4630      	mov	r0, r6
1a005c84:	4639      	mov	r1, r7
1a005c86:	f7fc fde9 	bl	1a00285c <__aeabi_dsub>
1a005c8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a005c8c:	3530      	adds	r5, #48	; 0x30
1a005c8e:	f1b9 0f01 	cmp.w	r9, #1
1a005c92:	7015      	strb	r5, [r2, #0]
1a005c94:	4606      	mov	r6, r0
1a005c96:	460f      	mov	r7, r1
1a005c98:	f102 0501 	add.w	r5, r2, #1
1a005c9c:	d023      	beq.n	1a005ce6 <_dtoa_r+0xd1e>
1a005c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005ca0:	f8cd b000 	str.w	fp, [sp]
1a005ca4:	444b      	add	r3, r9
1a005ca6:	4698      	mov	r8, r3
1a005ca8:	46a9      	mov	r9, r5
1a005caa:	46ab      	mov	fp, r5
1a005cac:	2200      	movs	r2, #0
1a005cae:	4b47      	ldr	r3, [pc, #284]	; (1a005dcc <_dtoa_r+0xe04>)
1a005cb0:	f7fd f822 	bl	1a002cf8 <__aeabi_dmul>
1a005cb4:	460f      	mov	r7, r1
1a005cb6:	4606      	mov	r6, r0
1a005cb8:	f002 f854 	bl	1a007d64 <__aeabi_d2iz>
1a005cbc:	4605      	mov	r5, r0
1a005cbe:	f7fc ff1b 	bl	1a002af8 <__aeabi_i2d>
1a005cc2:	3530      	adds	r5, #48	; 0x30
1a005cc4:	4602      	mov	r2, r0
1a005cc6:	460b      	mov	r3, r1
1a005cc8:	4630      	mov	r0, r6
1a005cca:	4639      	mov	r1, r7
1a005ccc:	f7fc fdc6 	bl	1a00285c <__aeabi_dsub>
1a005cd0:	f809 5b01 	strb.w	r5, [r9], #1
1a005cd4:	45c1      	cmp	r9, r8
1a005cd6:	d1e9      	bne.n	1a005cac <_dtoa_r+0xce4>
1a005cd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a005cda:	465d      	mov	r5, fp
1a005cdc:	f8dd b000 	ldr.w	fp, [sp]
1a005ce0:	4606      	mov	r6, r0
1a005ce2:	460f      	mov	r7, r1
1a005ce4:	441d      	add	r5, r3
1a005ce6:	2200      	movs	r2, #0
1a005ce8:	4b39      	ldr	r3, [pc, #228]	; (1a005dd0 <_dtoa_r+0xe08>)
1a005cea:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a005cee:	f7fc fdb7 	bl	1a002860 <__adddf3>
1a005cf2:	4632      	mov	r2, r6
1a005cf4:	463b      	mov	r3, r7
1a005cf6:	f002 f80d 	bl	1a007d14 <__aeabi_dcmplt>
1a005cfa:	2800      	cmp	r0, #0
1a005cfc:	d047      	beq.n	1a005d8e <_dtoa_r+0xdc6>
1a005cfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a005d00:	9305      	str	r3, [sp, #20]
1a005d02:	f815 8c01 	ldrb.w	r8, [r5, #-1]
1a005d06:	f7ff bb24 	b.w	1a005352 <_dtoa_r+0x38a>
1a005d0a:	9b07      	ldr	r3, [sp, #28]
1a005d0c:	9a08      	ldr	r2, [sp, #32]
1a005d0e:	1a9d      	subs	r5, r3, r2
1a005d10:	2300      	movs	r3, #0
1a005d12:	f7ff bb58 	b.w	1a0053c6 <_dtoa_r+0x3fe>
1a005d16:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a005d18:	9f0a      	ldr	r7, [sp, #40]	; 0x28
1a005d1a:	9d07      	ldr	r5, [sp, #28]
1a005d1c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
1a005d20:	f7ff bb51 	b.w	1a0053c6 <_dtoa_r+0x3fe>
1a005d24:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a005d28:	f04f 0802 	mov.w	r8, #2
1a005d2c:	ed8d 7b00 	vstr	d7, [sp]
1a005d30:	e546      	b.n	1a0057c0 <_dtoa_r+0x7f8>
1a005d32:	9b08      	ldr	r3, [sp, #32]
1a005d34:	2b00      	cmp	r3, #0
1a005d36:	f43f aeb4 	beq.w	1a005aa2 <_dtoa_r+0xada>
1a005d3a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
1a005d3c:	2d00      	cmp	r5, #0
1a005d3e:	f77f af29 	ble.w	1a005b94 <_dtoa_r+0xbcc>
1a005d42:	2200      	movs	r2, #0
1a005d44:	4b21      	ldr	r3, [pc, #132]	; (1a005dcc <_dtoa_r+0xe04>)
1a005d46:	e9dd 0100 	ldrd	r0, r1, [sp]
1a005d4a:	f7fc ffd5 	bl	1a002cf8 <__aeabi_dmul>
1a005d4e:	4606      	mov	r6, r0
1a005d50:	460f      	mov	r7, r1
1a005d52:	f108 0001 	add.w	r0, r8, #1
1a005d56:	e9cd 6700 	strd	r6, r7, [sp]
1a005d5a:	f7fc fecd 	bl	1a002af8 <__aeabi_i2d>
1a005d5e:	4602      	mov	r2, r0
1a005d60:	460b      	mov	r3, r1
1a005d62:	4630      	mov	r0, r6
1a005d64:	4639      	mov	r1, r7
1a005d66:	f7fc ffc7 	bl	1a002cf8 <__aeabi_dmul>
1a005d6a:	4b14      	ldr	r3, [pc, #80]	; (1a005dbc <_dtoa_r+0xdf4>)
1a005d6c:	2200      	movs	r2, #0
1a005d6e:	f7fc fd77 	bl	1a002860 <__adddf3>
1a005d72:	9b05      	ldr	r3, [sp, #20]
1a005d74:	3b01      	subs	r3, #1
1a005d76:	4606      	mov	r6, r0
1a005d78:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
1a005d7c:	9314      	str	r3, [sp, #80]	; 0x50
1a005d7e:	46a9      	mov	r9, r5
1a005d80:	e53f      	b.n	1a005802 <_dtoa_r+0x83a>
1a005d82:	2239      	movs	r2, #57	; 0x39
1a005d84:	46b2      	mov	sl, r6
1a005d86:	703a      	strb	r2, [r7, #0]
1a005d88:	464e      	mov	r6, r9
1a005d8a:	1c7d      	adds	r5, r7, #1
1a005d8c:	e403      	b.n	1a005596 <_dtoa_r+0x5ce>
1a005d8e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
1a005d92:	2000      	movs	r0, #0
1a005d94:	490e      	ldr	r1, [pc, #56]	; (1a005dd0 <_dtoa_r+0xe08>)
1a005d96:	f7fc fd61 	bl	1a00285c <__aeabi_dsub>
1a005d9a:	4632      	mov	r2, r6
1a005d9c:	463b      	mov	r3, r7
1a005d9e:	f001 ffd7 	bl	1a007d50 <__aeabi_dcmpgt>
1a005da2:	b908      	cbnz	r0, 1a005da8 <_dtoa_r+0xde0>
1a005da4:	e6f6      	b.n	1a005b94 <_dtoa_r+0xbcc>
1a005da6:	4615      	mov	r5, r2
1a005da8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
1a005dac:	2b30      	cmp	r3, #48	; 0x30
1a005dae:	f105 32ff 	add.w	r2, r5, #4294967295
1a005db2:	d0f8      	beq.n	1a005da6 <_dtoa_r+0xdde>
1a005db4:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a005db6:	9305      	str	r3, [sp, #20]
1a005db8:	f7ff badd 	b.w	1a005376 <_dtoa_r+0x3ae>
1a005dbc:	401c0000 	.word	0x401c0000
1a005dc0:	40140000 	.word	0x40140000
1a005dc4:	1a008330 	.word	0x1a008330
1a005dc8:	1a0083f8 	.word	0x1a0083f8
1a005dcc:	40240000 	.word	0x40240000
1a005dd0:	3fe00000 	.word	0x3fe00000
1a005dd4:	4643      	mov	r3, r8
1a005dd6:	f8dd b000 	ldr.w	fp, [sp]
1a005dda:	46a0      	mov	r8, r4
1a005ddc:	461c      	mov	r4, r3
1a005dde:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a005de0:	9305      	str	r3, [sp, #20]
1a005de2:	f7ff bab6 	b.w	1a005352 <_dtoa_r+0x38a>
1a005de6:	46b9      	mov	r9, r7
1a005de8:	f7ff bb6b 	b.w	1a0054c2 <_dtoa_r+0x4fa>
1a005dec:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
1a005df0:	d0c7      	beq.n	1a005d82 <_dtoa_r+0xdba>
1a005df2:	f1ba 0f00 	cmp.w	sl, #0
1a005df6:	f77f aeb5 	ble.w	1a005b64 <_dtoa_r+0xb9c>
1a005dfa:	f105 0c31 	add.w	ip, r5, #49	; 0x31
1a005dfe:	e6b1      	b.n	1a005b64 <_dtoa_r+0xb9c>
1a005e00:	f47f aeb0 	bne.w	1a005b64 <_dtoa_r+0xb9c>
1a005e04:	f01c 0f01 	tst.w	ip, #1
1a005e08:	f43f aeac 	beq.w	1a005b64 <_dtoa_r+0xb9c>
1a005e0c:	e6a4      	b.n	1a005b58 <_dtoa_r+0xb90>
1a005e0e:	9b03      	ldr	r3, [sp, #12]
1a005e10:	2b02      	cmp	r3, #2
1a005e12:	dc04      	bgt.n	1a005e1e <_dtoa_r+0xe56>
1a005e14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005e16:	e605      	b.n	1a005a24 <_dtoa_r+0xa5c>
1a005e18:	f04f 0802 	mov.w	r8, #2
1a005e1c:	e4d0      	b.n	1a0057c0 <_dtoa_r+0x7f8>
1a005e1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005e20:	9308      	str	r3, [sp, #32]
1a005e22:	e61b      	b.n	1a005a5c <_dtoa_r+0xa94>
1a005e24:	9b03      	ldr	r3, [sp, #12]
1a005e26:	2b02      	cmp	r3, #2
1a005e28:	dcf9      	bgt.n	1a005e1e <_dtoa_r+0xe56>
1a005e2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005e2c:	f7ff bbef 	b.w	1a00560e <_dtoa_r+0x646>
1a005e30:	2500      	movs	r5, #0
1a005e32:	6465      	str	r5, [r4, #68]	; 0x44
1a005e34:	4629      	mov	r1, r5
1a005e36:	4620      	mov	r0, r4
1a005e38:	f001 f800 	bl	1a006e3c <_Balloc>
1a005e3c:	f04f 33ff 	mov.w	r3, #4294967295
1a005e40:	9308      	str	r3, [sp, #32]
1a005e42:	930e      	str	r3, [sp, #56]	; 0x38
1a005e44:	2301      	movs	r3, #1
1a005e46:	9009      	str	r0, [sp, #36]	; 0x24
1a005e48:	46aa      	mov	sl, r5
1a005e4a:	6420      	str	r0, [r4, #64]	; 0x40
1a005e4c:	930b      	str	r3, [sp, #44]	; 0x2c
1a005e4e:	f7ff b9ce 	b.w	1a0051ee <_dtoa_r+0x226>
1a005e52:	f43f ab4e 	beq.w	1a0054f2 <_dtoa_r+0x52a>
1a005e56:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
1a005e5a:	f7ff bb43 	b.w	1a0054e4 <_dtoa_r+0x51c>
1a005e5e:	2301      	movs	r3, #1
1a005e60:	930b      	str	r3, [sp, #44]	; 0x2c
1a005e62:	e55c      	b.n	1a00591e <_dtoa_r+0x956>
1a005e64:	2701      	movs	r7, #1
1a005e66:	f7ff b98d 	b.w	1a005184 <_dtoa_r+0x1bc>
1a005e6a:	bf00      	nop
1a005e6c:	f3af 8000 	nop.w

1a005e70 <__sflush_r>:
1a005e70:	898b      	ldrh	r3, [r1, #12]
1a005e72:	b29a      	uxth	r2, r3
1a005e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a005e78:	460d      	mov	r5, r1
1a005e7a:	0711      	lsls	r1, r2, #28
1a005e7c:	4680      	mov	r8, r0
1a005e7e:	d43c      	bmi.n	1a005efa <__sflush_r+0x8a>
1a005e80:	686a      	ldr	r2, [r5, #4]
1a005e82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a005e86:	2a00      	cmp	r2, #0
1a005e88:	81ab      	strh	r3, [r5, #12]
1a005e8a:	dd65      	ble.n	1a005f58 <__sflush_r+0xe8>
1a005e8c:	6aae      	ldr	r6, [r5, #40]	; 0x28
1a005e8e:	2e00      	cmp	r6, #0
1a005e90:	d04b      	beq.n	1a005f2a <__sflush_r+0xba>
1a005e92:	b29b      	uxth	r3, r3
1a005e94:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
1a005e98:	2100      	movs	r1, #0
1a005e9a:	b292      	uxth	r2, r2
1a005e9c:	f8d8 4000 	ldr.w	r4, [r8]
1a005ea0:	f8c8 1000 	str.w	r1, [r8]
1a005ea4:	2a00      	cmp	r2, #0
1a005ea6:	d05b      	beq.n	1a005f60 <__sflush_r+0xf0>
1a005ea8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
1a005eaa:	075f      	lsls	r7, r3, #29
1a005eac:	d505      	bpl.n	1a005eba <__sflush_r+0x4a>
1a005eae:	6869      	ldr	r1, [r5, #4]
1a005eb0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
1a005eb2:	1a52      	subs	r2, r2, r1
1a005eb4:	b10b      	cbz	r3, 1a005eba <__sflush_r+0x4a>
1a005eb6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
1a005eb8:	1ad2      	subs	r2, r2, r3
1a005eba:	4640      	mov	r0, r8
1a005ebc:	69e9      	ldr	r1, [r5, #28]
1a005ebe:	2300      	movs	r3, #0
1a005ec0:	47b0      	blx	r6
1a005ec2:	1c46      	adds	r6, r0, #1
1a005ec4:	d056      	beq.n	1a005f74 <__sflush_r+0x104>
1a005ec6:	89ab      	ldrh	r3, [r5, #12]
1a005ec8:	692a      	ldr	r2, [r5, #16]
1a005eca:	602a      	str	r2, [r5, #0]
1a005ecc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a005ed0:	b29b      	uxth	r3, r3
1a005ed2:	2200      	movs	r2, #0
1a005ed4:	606a      	str	r2, [r5, #4]
1a005ed6:	04da      	lsls	r2, r3, #19
1a005ed8:	81ab      	strh	r3, [r5, #12]
1a005eda:	d43b      	bmi.n	1a005f54 <__sflush_r+0xe4>
1a005edc:	6b29      	ldr	r1, [r5, #48]	; 0x30
1a005ede:	f8c8 4000 	str.w	r4, [r8]
1a005ee2:	b311      	cbz	r1, 1a005f2a <__sflush_r+0xba>
1a005ee4:	f105 0340 	add.w	r3, r5, #64	; 0x40
1a005ee8:	4299      	cmp	r1, r3
1a005eea:	d002      	beq.n	1a005ef2 <__sflush_r+0x82>
1a005eec:	4640      	mov	r0, r8
1a005eee:	f000 f955 	bl	1a00619c <_free_r>
1a005ef2:	2000      	movs	r0, #0
1a005ef4:	6328      	str	r0, [r5, #48]	; 0x30
1a005ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a005efa:	692e      	ldr	r6, [r5, #16]
1a005efc:	b1ae      	cbz	r6, 1a005f2a <__sflush_r+0xba>
1a005efe:	682c      	ldr	r4, [r5, #0]
1a005f00:	602e      	str	r6, [r5, #0]
1a005f02:	0791      	lsls	r1, r2, #30
1a005f04:	bf0c      	ite	eq
1a005f06:	696b      	ldreq	r3, [r5, #20]
1a005f08:	2300      	movne	r3, #0
1a005f0a:	1ba4      	subs	r4, r4, r6
1a005f0c:	60ab      	str	r3, [r5, #8]
1a005f0e:	e00a      	b.n	1a005f26 <__sflush_r+0xb6>
1a005f10:	4632      	mov	r2, r6
1a005f12:	4623      	mov	r3, r4
1a005f14:	6a6f      	ldr	r7, [r5, #36]	; 0x24
1a005f16:	69e9      	ldr	r1, [r5, #28]
1a005f18:	4640      	mov	r0, r8
1a005f1a:	47b8      	blx	r7
1a005f1c:	2800      	cmp	r0, #0
1a005f1e:	eba4 0400 	sub.w	r4, r4, r0
1a005f22:	4406      	add	r6, r0
1a005f24:	dd04      	ble.n	1a005f30 <__sflush_r+0xc0>
1a005f26:	2c00      	cmp	r4, #0
1a005f28:	dcf2      	bgt.n	1a005f10 <__sflush_r+0xa0>
1a005f2a:	2000      	movs	r0, #0
1a005f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a005f30:	89ab      	ldrh	r3, [r5, #12]
1a005f32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005f36:	81ab      	strh	r3, [r5, #12]
1a005f38:	f04f 30ff 	mov.w	r0, #4294967295
1a005f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a005f40:	89ab      	ldrh	r3, [r5, #12]
1a005f42:	692a      	ldr	r2, [r5, #16]
1a005f44:	6069      	str	r1, [r5, #4]
1a005f46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a005f4a:	b29b      	uxth	r3, r3
1a005f4c:	81ab      	strh	r3, [r5, #12]
1a005f4e:	04db      	lsls	r3, r3, #19
1a005f50:	602a      	str	r2, [r5, #0]
1a005f52:	d5c3      	bpl.n	1a005edc <__sflush_r+0x6c>
1a005f54:	6528      	str	r0, [r5, #80]	; 0x50
1a005f56:	e7c1      	b.n	1a005edc <__sflush_r+0x6c>
1a005f58:	6bea      	ldr	r2, [r5, #60]	; 0x3c
1a005f5a:	2a00      	cmp	r2, #0
1a005f5c:	dc96      	bgt.n	1a005e8c <__sflush_r+0x1c>
1a005f5e:	e7e4      	b.n	1a005f2a <__sflush_r+0xba>
1a005f60:	2301      	movs	r3, #1
1a005f62:	4640      	mov	r0, r8
1a005f64:	69e9      	ldr	r1, [r5, #28]
1a005f66:	47b0      	blx	r6
1a005f68:	1c43      	adds	r3, r0, #1
1a005f6a:	4602      	mov	r2, r0
1a005f6c:	d019      	beq.n	1a005fa2 <__sflush_r+0x132>
1a005f6e:	89ab      	ldrh	r3, [r5, #12]
1a005f70:	6aae      	ldr	r6, [r5, #40]	; 0x28
1a005f72:	e79a      	b.n	1a005eaa <__sflush_r+0x3a>
1a005f74:	f8d8 1000 	ldr.w	r1, [r8]
1a005f78:	2900      	cmp	r1, #0
1a005f7a:	d0e1      	beq.n	1a005f40 <__sflush_r+0xd0>
1a005f7c:	291d      	cmp	r1, #29
1a005f7e:	d007      	beq.n	1a005f90 <__sflush_r+0x120>
1a005f80:	2916      	cmp	r1, #22
1a005f82:	d005      	beq.n	1a005f90 <__sflush_r+0x120>
1a005f84:	89ab      	ldrh	r3, [r5, #12]
1a005f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005f8a:	81ab      	strh	r3, [r5, #12]
1a005f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a005f90:	89ab      	ldrh	r3, [r5, #12]
1a005f92:	692a      	ldr	r2, [r5, #16]
1a005f94:	602a      	str	r2, [r5, #0]
1a005f96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a005f9a:	2200      	movs	r2, #0
1a005f9c:	81ab      	strh	r3, [r5, #12]
1a005f9e:	606a      	str	r2, [r5, #4]
1a005fa0:	e79c      	b.n	1a005edc <__sflush_r+0x6c>
1a005fa2:	f8d8 3000 	ldr.w	r3, [r8]
1a005fa6:	2b00      	cmp	r3, #0
1a005fa8:	d0e1      	beq.n	1a005f6e <__sflush_r+0xfe>
1a005faa:	2b1d      	cmp	r3, #29
1a005fac:	d007      	beq.n	1a005fbe <__sflush_r+0x14e>
1a005fae:	2b16      	cmp	r3, #22
1a005fb0:	d005      	beq.n	1a005fbe <__sflush_r+0x14e>
1a005fb2:	89ab      	ldrh	r3, [r5, #12]
1a005fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005fb8:	81ab      	strh	r3, [r5, #12]
1a005fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a005fbe:	f8c8 4000 	str.w	r4, [r8]
1a005fc2:	e7b2      	b.n	1a005f2a <__sflush_r+0xba>

1a005fc4 <_fflush_r>:
1a005fc4:	b510      	push	{r4, lr}
1a005fc6:	4604      	mov	r4, r0
1a005fc8:	b082      	sub	sp, #8
1a005fca:	b108      	cbz	r0, 1a005fd0 <_fflush_r+0xc>
1a005fcc:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a005fce:	b153      	cbz	r3, 1a005fe6 <_fflush_r+0x22>
1a005fd0:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
1a005fd4:	b908      	cbnz	r0, 1a005fda <_fflush_r+0x16>
1a005fd6:	b002      	add	sp, #8
1a005fd8:	bd10      	pop	{r4, pc}
1a005fda:	4620      	mov	r0, r4
1a005fdc:	b002      	add	sp, #8
1a005fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a005fe2:	f7ff bf45 	b.w	1a005e70 <__sflush_r>
1a005fe6:	9101      	str	r1, [sp, #4]
1a005fe8:	f000 f880 	bl	1a0060ec <__sinit>
1a005fec:	9901      	ldr	r1, [sp, #4]
1a005fee:	e7ef      	b.n	1a005fd0 <_fflush_r+0xc>

1a005ff0 <_cleanup_r>:
1a005ff0:	4901      	ldr	r1, [pc, #4]	; (1a005ff8 <_cleanup_r+0x8>)
1a005ff2:	f000 bb37 	b.w	1a006664 <_fwalk_reent>
1a005ff6:	bf00      	nop
1a005ff8:	1a007a8d 	.word	0x1a007a8d

1a005ffc <__sinit.part.1>:
1a005ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006000:	4b35      	ldr	r3, [pc, #212]	; (1a0060d8 <__sinit.part.1+0xdc>)
1a006002:	6845      	ldr	r5, [r0, #4]
1a006004:	63c3      	str	r3, [r0, #60]	; 0x3c
1a006006:	2400      	movs	r4, #0
1a006008:	4607      	mov	r7, r0
1a00600a:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
1a00600e:	2304      	movs	r3, #4
1a006010:	2103      	movs	r1, #3
1a006012:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
1a006016:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
1a00601a:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
1a00601e:	b083      	sub	sp, #12
1a006020:	602c      	str	r4, [r5, #0]
1a006022:	606c      	str	r4, [r5, #4]
1a006024:	60ac      	str	r4, [r5, #8]
1a006026:	666c      	str	r4, [r5, #100]	; 0x64
1a006028:	81ec      	strh	r4, [r5, #14]
1a00602a:	612c      	str	r4, [r5, #16]
1a00602c:	616c      	str	r4, [r5, #20]
1a00602e:	61ac      	str	r4, [r5, #24]
1a006030:	81ab      	strh	r3, [r5, #12]
1a006032:	4621      	mov	r1, r4
1a006034:	f105 005c 	add.w	r0, r5, #92	; 0x5c
1a006038:	2208      	movs	r2, #8
1a00603a:	f7fd fbb5 	bl	1a0037a8 <memset>
1a00603e:	68be      	ldr	r6, [r7, #8]
1a006040:	f8df b098 	ldr.w	fp, [pc, #152]	; 1a0060dc <__sinit.part.1+0xe0>
1a006044:	f8df a098 	ldr.w	sl, [pc, #152]	; 1a0060e0 <__sinit.part.1+0xe4>
1a006048:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1a0060e4 <__sinit.part.1+0xe8>
1a00604c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1a0060e8 <__sinit.part.1+0xec>
1a006050:	f8c5 b020 	str.w	fp, [r5, #32]
1a006054:	2301      	movs	r3, #1
1a006056:	2209      	movs	r2, #9
1a006058:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
1a00605c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
1a006060:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
1a006064:	61ed      	str	r5, [r5, #28]
1a006066:	4621      	mov	r1, r4
1a006068:	81f3      	strh	r3, [r6, #14]
1a00606a:	81b2      	strh	r2, [r6, #12]
1a00606c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
1a006070:	6034      	str	r4, [r6, #0]
1a006072:	6074      	str	r4, [r6, #4]
1a006074:	60b4      	str	r4, [r6, #8]
1a006076:	6674      	str	r4, [r6, #100]	; 0x64
1a006078:	6134      	str	r4, [r6, #16]
1a00607a:	6174      	str	r4, [r6, #20]
1a00607c:	61b4      	str	r4, [r6, #24]
1a00607e:	2208      	movs	r2, #8
1a006080:	9301      	str	r3, [sp, #4]
1a006082:	f7fd fb91 	bl	1a0037a8 <memset>
1a006086:	68fd      	ldr	r5, [r7, #12]
1a006088:	61f6      	str	r6, [r6, #28]
1a00608a:	2012      	movs	r0, #18
1a00608c:	2202      	movs	r2, #2
1a00608e:	f8c6 b020 	str.w	fp, [r6, #32]
1a006092:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
1a006096:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
1a00609a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
1a00609e:	4621      	mov	r1, r4
1a0060a0:	81a8      	strh	r0, [r5, #12]
1a0060a2:	81ea      	strh	r2, [r5, #14]
1a0060a4:	602c      	str	r4, [r5, #0]
1a0060a6:	606c      	str	r4, [r5, #4]
1a0060a8:	60ac      	str	r4, [r5, #8]
1a0060aa:	666c      	str	r4, [r5, #100]	; 0x64
1a0060ac:	612c      	str	r4, [r5, #16]
1a0060ae:	616c      	str	r4, [r5, #20]
1a0060b0:	61ac      	str	r4, [r5, #24]
1a0060b2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
1a0060b6:	2208      	movs	r2, #8
1a0060b8:	f7fd fb76 	bl	1a0037a8 <memset>
1a0060bc:	9b01      	ldr	r3, [sp, #4]
1a0060be:	61ed      	str	r5, [r5, #28]
1a0060c0:	f8c5 b020 	str.w	fp, [r5, #32]
1a0060c4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
1a0060c8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
1a0060cc:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
1a0060d0:	63bb      	str	r3, [r7, #56]	; 0x38
1a0060d2:	b003      	add	sp, #12
1a0060d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0060d8:	1a005ff1 	.word	0x1a005ff1
1a0060dc:	1a007871 	.word	0x1a007871
1a0060e0:	1a007895 	.word	0x1a007895
1a0060e4:	1a0078cd 	.word	0x1a0078cd
1a0060e8:	1a0078ed 	.word	0x1a0078ed

1a0060ec <__sinit>:
1a0060ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a0060ee:	b103      	cbz	r3, 1a0060f2 <__sinit+0x6>
1a0060f0:	4770      	bx	lr
1a0060f2:	f7ff bf83 	b.w	1a005ffc <__sinit.part.1>
1a0060f6:	bf00      	nop

1a0060f8 <__sfp_lock_acquire>:
1a0060f8:	4770      	bx	lr
1a0060fa:	bf00      	nop

1a0060fc <__sfp_lock_release>:
1a0060fc:	4770      	bx	lr
1a0060fe:	bf00      	nop

1a006100 <_malloc_trim_r>:
1a006100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a006102:	4f23      	ldr	r7, [pc, #140]	; (1a006190 <_malloc_trim_r+0x90>)
1a006104:	460c      	mov	r4, r1
1a006106:	4606      	mov	r6, r0
1a006108:	f000 fe94 	bl	1a006e34 <__malloc_lock>
1a00610c:	68bb      	ldr	r3, [r7, #8]
1a00610e:	685d      	ldr	r5, [r3, #4]
1a006110:	f025 0503 	bic.w	r5, r5, #3
1a006114:	1b29      	subs	r1, r5, r4
1a006116:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
1a00611a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
1a00611e:	f021 010f 	bic.w	r1, r1, #15
1a006122:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
1a006126:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
1a00612a:	db07      	blt.n	1a00613c <_malloc_trim_r+0x3c>
1a00612c:	4630      	mov	r0, r6
1a00612e:	2100      	movs	r1, #0
1a006130:	f7fb fbfc 	bl	1a00192c <_sbrk_r>
1a006134:	68bb      	ldr	r3, [r7, #8]
1a006136:	442b      	add	r3, r5
1a006138:	4298      	cmp	r0, r3
1a00613a:	d004      	beq.n	1a006146 <_malloc_trim_r+0x46>
1a00613c:	4630      	mov	r0, r6
1a00613e:	f000 fe7b 	bl	1a006e38 <__malloc_unlock>
1a006142:	2000      	movs	r0, #0
1a006144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a006146:	4630      	mov	r0, r6
1a006148:	4261      	negs	r1, r4
1a00614a:	f7fb fbef 	bl	1a00192c <_sbrk_r>
1a00614e:	3001      	adds	r0, #1
1a006150:	d00d      	beq.n	1a00616e <_malloc_trim_r+0x6e>
1a006152:	4b10      	ldr	r3, [pc, #64]	; (1a006194 <_malloc_trim_r+0x94>)
1a006154:	68ba      	ldr	r2, [r7, #8]
1a006156:	6819      	ldr	r1, [r3, #0]
1a006158:	1b2d      	subs	r5, r5, r4
1a00615a:	f045 0501 	orr.w	r5, r5, #1
1a00615e:	4630      	mov	r0, r6
1a006160:	1b09      	subs	r1, r1, r4
1a006162:	6055      	str	r5, [r2, #4]
1a006164:	6019      	str	r1, [r3, #0]
1a006166:	f000 fe67 	bl	1a006e38 <__malloc_unlock>
1a00616a:	2001      	movs	r0, #1
1a00616c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00616e:	4630      	mov	r0, r6
1a006170:	2100      	movs	r1, #0
1a006172:	f7fb fbdb 	bl	1a00192c <_sbrk_r>
1a006176:	68ba      	ldr	r2, [r7, #8]
1a006178:	1a83      	subs	r3, r0, r2
1a00617a:	2b0f      	cmp	r3, #15
1a00617c:	ddde      	ble.n	1a00613c <_malloc_trim_r+0x3c>
1a00617e:	4c06      	ldr	r4, [pc, #24]	; (1a006198 <_malloc_trim_r+0x98>)
1a006180:	4904      	ldr	r1, [pc, #16]	; (1a006194 <_malloc_trim_r+0x94>)
1a006182:	6824      	ldr	r4, [r4, #0]
1a006184:	f043 0301 	orr.w	r3, r3, #1
1a006188:	1b00      	subs	r0, r0, r4
1a00618a:	6053      	str	r3, [r2, #4]
1a00618c:	6008      	str	r0, [r1, #0]
1a00618e:	e7d5      	b.n	1a00613c <_malloc_trim_r+0x3c>
1a006190:	10000558 	.word	0x10000558
1a006194:	10000b00 	.word	0x10000b00
1a006198:	10000964 	.word	0x10000964

1a00619c <_free_r>:
1a00619c:	2900      	cmp	r1, #0
1a00619e:	d04e      	beq.n	1a00623e <_free_r+0xa2>
1a0061a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0061a4:	460c      	mov	r4, r1
1a0061a6:	4680      	mov	r8, r0
1a0061a8:	f000 fe44 	bl	1a006e34 <__malloc_lock>
1a0061ac:	f854 7c04 	ldr.w	r7, [r4, #-4]
1a0061b0:	4962      	ldr	r1, [pc, #392]	; (1a00633c <_free_r+0x1a0>)
1a0061b2:	f027 0201 	bic.w	r2, r7, #1
1a0061b6:	f1a4 0508 	sub.w	r5, r4, #8
1a0061ba:	18ab      	adds	r3, r5, r2
1a0061bc:	688e      	ldr	r6, [r1, #8]
1a0061be:	6858      	ldr	r0, [r3, #4]
1a0061c0:	429e      	cmp	r6, r3
1a0061c2:	f020 0003 	bic.w	r0, r0, #3
1a0061c6:	d05a      	beq.n	1a00627e <_free_r+0xe2>
1a0061c8:	07fe      	lsls	r6, r7, #31
1a0061ca:	6058      	str	r0, [r3, #4]
1a0061cc:	d40b      	bmi.n	1a0061e6 <_free_r+0x4a>
1a0061ce:	f854 7c08 	ldr.w	r7, [r4, #-8]
1a0061d2:	1bed      	subs	r5, r5, r7
1a0061d4:	f101 0e08 	add.w	lr, r1, #8
1a0061d8:	68ac      	ldr	r4, [r5, #8]
1a0061da:	4574      	cmp	r4, lr
1a0061dc:	443a      	add	r2, r7
1a0061de:	d067      	beq.n	1a0062b0 <_free_r+0x114>
1a0061e0:	68ef      	ldr	r7, [r5, #12]
1a0061e2:	60e7      	str	r7, [r4, #12]
1a0061e4:	60bc      	str	r4, [r7, #8]
1a0061e6:	181c      	adds	r4, r3, r0
1a0061e8:	6864      	ldr	r4, [r4, #4]
1a0061ea:	07e4      	lsls	r4, r4, #31
1a0061ec:	d40c      	bmi.n	1a006208 <_free_r+0x6c>
1a0061ee:	4f54      	ldr	r7, [pc, #336]	; (1a006340 <_free_r+0x1a4>)
1a0061f0:	689c      	ldr	r4, [r3, #8]
1a0061f2:	42bc      	cmp	r4, r7
1a0061f4:	4402      	add	r2, r0
1a0061f6:	d07c      	beq.n	1a0062f2 <_free_r+0x156>
1a0061f8:	68d8      	ldr	r0, [r3, #12]
1a0061fa:	60e0      	str	r0, [r4, #12]
1a0061fc:	f042 0301 	orr.w	r3, r2, #1
1a006200:	6084      	str	r4, [r0, #8]
1a006202:	606b      	str	r3, [r5, #4]
1a006204:	50aa      	str	r2, [r5, r2]
1a006206:	e003      	b.n	1a006210 <_free_r+0x74>
1a006208:	f042 0301 	orr.w	r3, r2, #1
1a00620c:	606b      	str	r3, [r5, #4]
1a00620e:	50aa      	str	r2, [r5, r2]
1a006210:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
1a006214:	d214      	bcs.n	1a006240 <_free_r+0xa4>
1a006216:	08d2      	lsrs	r2, r2, #3
1a006218:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
1a00621c:	6848      	ldr	r0, [r1, #4]
1a00621e:	689f      	ldr	r7, [r3, #8]
1a006220:	60af      	str	r7, [r5, #8]
1a006222:	1092      	asrs	r2, r2, #2
1a006224:	2401      	movs	r4, #1
1a006226:	fa04 f202 	lsl.w	r2, r4, r2
1a00622a:	4310      	orrs	r0, r2
1a00622c:	60eb      	str	r3, [r5, #12]
1a00622e:	6048      	str	r0, [r1, #4]
1a006230:	609d      	str	r5, [r3, #8]
1a006232:	60fd      	str	r5, [r7, #12]
1a006234:	4640      	mov	r0, r8
1a006236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a00623a:	f000 bdfd 	b.w	1a006e38 <__malloc_unlock>
1a00623e:	4770      	bx	lr
1a006240:	0a53      	lsrs	r3, r2, #9
1a006242:	2b04      	cmp	r3, #4
1a006244:	d847      	bhi.n	1a0062d6 <_free_r+0x13a>
1a006246:	0993      	lsrs	r3, r2, #6
1a006248:	f103 0438 	add.w	r4, r3, #56	; 0x38
1a00624c:	0060      	lsls	r0, r4, #1
1a00624e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
1a006252:	493a      	ldr	r1, [pc, #232]	; (1a00633c <_free_r+0x1a0>)
1a006254:	6883      	ldr	r3, [r0, #8]
1a006256:	4283      	cmp	r3, r0
1a006258:	d043      	beq.n	1a0062e2 <_free_r+0x146>
1a00625a:	6859      	ldr	r1, [r3, #4]
1a00625c:	f021 0103 	bic.w	r1, r1, #3
1a006260:	4291      	cmp	r1, r2
1a006262:	d902      	bls.n	1a00626a <_free_r+0xce>
1a006264:	689b      	ldr	r3, [r3, #8]
1a006266:	4298      	cmp	r0, r3
1a006268:	d1f7      	bne.n	1a00625a <_free_r+0xbe>
1a00626a:	68da      	ldr	r2, [r3, #12]
1a00626c:	60ea      	str	r2, [r5, #12]
1a00626e:	60ab      	str	r3, [r5, #8]
1a006270:	4640      	mov	r0, r8
1a006272:	6095      	str	r5, [r2, #8]
1a006274:	60dd      	str	r5, [r3, #12]
1a006276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a00627a:	f000 bddd 	b.w	1a006e38 <__malloc_unlock>
1a00627e:	07ff      	lsls	r7, r7, #31
1a006280:	4402      	add	r2, r0
1a006282:	d407      	bmi.n	1a006294 <_free_r+0xf8>
1a006284:	f854 3c08 	ldr.w	r3, [r4, #-8]
1a006288:	1aed      	subs	r5, r5, r3
1a00628a:	441a      	add	r2, r3
1a00628c:	68a8      	ldr	r0, [r5, #8]
1a00628e:	68eb      	ldr	r3, [r5, #12]
1a006290:	60c3      	str	r3, [r0, #12]
1a006292:	6098      	str	r0, [r3, #8]
1a006294:	4b2b      	ldr	r3, [pc, #172]	; (1a006344 <_free_r+0x1a8>)
1a006296:	681b      	ldr	r3, [r3, #0]
1a006298:	f042 0001 	orr.w	r0, r2, #1
1a00629c:	429a      	cmp	r2, r3
1a00629e:	6068      	str	r0, [r5, #4]
1a0062a0:	608d      	str	r5, [r1, #8]
1a0062a2:	d3c7      	bcc.n	1a006234 <_free_r+0x98>
1a0062a4:	4b28      	ldr	r3, [pc, #160]	; (1a006348 <_free_r+0x1ac>)
1a0062a6:	4640      	mov	r0, r8
1a0062a8:	6819      	ldr	r1, [r3, #0]
1a0062aa:	f7ff ff29 	bl	1a006100 <_malloc_trim_r>
1a0062ae:	e7c1      	b.n	1a006234 <_free_r+0x98>
1a0062b0:	1819      	adds	r1, r3, r0
1a0062b2:	6849      	ldr	r1, [r1, #4]
1a0062b4:	07c9      	lsls	r1, r1, #31
1a0062b6:	d409      	bmi.n	1a0062cc <_free_r+0x130>
1a0062b8:	68d9      	ldr	r1, [r3, #12]
1a0062ba:	689b      	ldr	r3, [r3, #8]
1a0062bc:	4402      	add	r2, r0
1a0062be:	f042 0001 	orr.w	r0, r2, #1
1a0062c2:	60d9      	str	r1, [r3, #12]
1a0062c4:	608b      	str	r3, [r1, #8]
1a0062c6:	6068      	str	r0, [r5, #4]
1a0062c8:	50aa      	str	r2, [r5, r2]
1a0062ca:	e7b3      	b.n	1a006234 <_free_r+0x98>
1a0062cc:	f042 0301 	orr.w	r3, r2, #1
1a0062d0:	606b      	str	r3, [r5, #4]
1a0062d2:	50aa      	str	r2, [r5, r2]
1a0062d4:	e7ae      	b.n	1a006234 <_free_r+0x98>
1a0062d6:	2b14      	cmp	r3, #20
1a0062d8:	d814      	bhi.n	1a006304 <_free_r+0x168>
1a0062da:	f103 045b 	add.w	r4, r3, #91	; 0x5b
1a0062de:	0060      	lsls	r0, r4, #1
1a0062e0:	e7b5      	b.n	1a00624e <_free_r+0xb2>
1a0062e2:	684a      	ldr	r2, [r1, #4]
1a0062e4:	10a4      	asrs	r4, r4, #2
1a0062e6:	2001      	movs	r0, #1
1a0062e8:	40a0      	lsls	r0, r4
1a0062ea:	4302      	orrs	r2, r0
1a0062ec:	604a      	str	r2, [r1, #4]
1a0062ee:	461a      	mov	r2, r3
1a0062f0:	e7bc      	b.n	1a00626c <_free_r+0xd0>
1a0062f2:	f042 0301 	orr.w	r3, r2, #1
1a0062f6:	614d      	str	r5, [r1, #20]
1a0062f8:	610d      	str	r5, [r1, #16]
1a0062fa:	60ec      	str	r4, [r5, #12]
1a0062fc:	60ac      	str	r4, [r5, #8]
1a0062fe:	606b      	str	r3, [r5, #4]
1a006300:	50aa      	str	r2, [r5, r2]
1a006302:	e797      	b.n	1a006234 <_free_r+0x98>
1a006304:	2b54      	cmp	r3, #84	; 0x54
1a006306:	d804      	bhi.n	1a006312 <_free_r+0x176>
1a006308:	0b13      	lsrs	r3, r2, #12
1a00630a:	f103 046e 	add.w	r4, r3, #110	; 0x6e
1a00630e:	0060      	lsls	r0, r4, #1
1a006310:	e79d      	b.n	1a00624e <_free_r+0xb2>
1a006312:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
1a006316:	d804      	bhi.n	1a006322 <_free_r+0x186>
1a006318:	0bd3      	lsrs	r3, r2, #15
1a00631a:	f103 0477 	add.w	r4, r3, #119	; 0x77
1a00631e:	0060      	lsls	r0, r4, #1
1a006320:	e795      	b.n	1a00624e <_free_r+0xb2>
1a006322:	f240 5054 	movw	r0, #1364	; 0x554
1a006326:	4283      	cmp	r3, r0
1a006328:	d804      	bhi.n	1a006334 <_free_r+0x198>
1a00632a:	0c93      	lsrs	r3, r2, #18
1a00632c:	f103 047c 	add.w	r4, r3, #124	; 0x7c
1a006330:	0060      	lsls	r0, r4, #1
1a006332:	e78c      	b.n	1a00624e <_free_r+0xb2>
1a006334:	20fc      	movs	r0, #252	; 0xfc
1a006336:	247e      	movs	r4, #126	; 0x7e
1a006338:	e789      	b.n	1a00624e <_free_r+0xb2>
1a00633a:	bf00      	nop
1a00633c:	10000558 	.word	0x10000558
1a006340:	10000560 	.word	0x10000560
1a006344:	10000960 	.word	0x10000960
1a006348:	10000afc 	.word	0x10000afc

1a00634c <__sfvwrite_r>:
1a00634c:	6893      	ldr	r3, [r2, #8]
1a00634e:	2b00      	cmp	r3, #0
1a006350:	d07a      	beq.n	1a006448 <__sfvwrite_r+0xfc>
1a006352:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006356:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
1a00635a:	f01e 0f08 	tst.w	lr, #8
1a00635e:	b083      	sub	sp, #12
1a006360:	460c      	mov	r4, r1
1a006362:	4681      	mov	r9, r0
1a006364:	4616      	mov	r6, r2
1a006366:	d026      	beq.n	1a0063b6 <__sfvwrite_r+0x6a>
1a006368:	690b      	ldr	r3, [r1, #16]
1a00636a:	b323      	cbz	r3, 1a0063b6 <__sfvwrite_r+0x6a>
1a00636c:	f00e 0802 	and.w	r8, lr, #2
1a006370:	fa1f f088 	uxth.w	r0, r8
1a006374:	6835      	ldr	r5, [r6, #0]
1a006376:	b370      	cbz	r0, 1a0063d6 <__sfvwrite_r+0x8a>
1a006378:	f04f 0a00 	mov.w	sl, #0
1a00637c:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 1a006660 <__sfvwrite_r+0x314>
1a006380:	46d0      	mov	r8, sl
1a006382:	45d8      	cmp	r8, fp
1a006384:	4643      	mov	r3, r8
1a006386:	4652      	mov	r2, sl
1a006388:	bf28      	it	cs
1a00638a:	465b      	movcs	r3, fp
1a00638c:	4648      	mov	r0, r9
1a00638e:	f1b8 0f00 	cmp.w	r8, #0
1a006392:	d053      	beq.n	1a00643c <__sfvwrite_r+0xf0>
1a006394:	69e1      	ldr	r1, [r4, #28]
1a006396:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a006398:	47b8      	blx	r7
1a00639a:	2800      	cmp	r0, #0
1a00639c:	dd73      	ble.n	1a006486 <__sfvwrite_r+0x13a>
1a00639e:	68b3      	ldr	r3, [r6, #8]
1a0063a0:	1a1b      	subs	r3, r3, r0
1a0063a2:	4482      	add	sl, r0
1a0063a4:	ebc0 0808 	rsb	r8, r0, r8
1a0063a8:	60b3      	str	r3, [r6, #8]
1a0063aa:	2b00      	cmp	r3, #0
1a0063ac:	d1e9      	bne.n	1a006382 <__sfvwrite_r+0x36>
1a0063ae:	2000      	movs	r0, #0
1a0063b0:	b003      	add	sp, #12
1a0063b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0063b6:	4648      	mov	r0, r9
1a0063b8:	4621      	mov	r1, r4
1a0063ba:	f7fe fd0d 	bl	1a004dd8 <__swsetup_r>
1a0063be:	2800      	cmp	r0, #0
1a0063c0:	f040 8145 	bne.w	1a00664e <__sfvwrite_r+0x302>
1a0063c4:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
1a0063c8:	6835      	ldr	r5, [r6, #0]
1a0063ca:	f00e 0802 	and.w	r8, lr, #2
1a0063ce:	fa1f f088 	uxth.w	r0, r8
1a0063d2:	2800      	cmp	r0, #0
1a0063d4:	d1d0      	bne.n	1a006378 <__sfvwrite_r+0x2c>
1a0063d6:	f01e 0b01 	ands.w	fp, lr, #1
1a0063da:	d15d      	bne.n	1a006498 <__sfvwrite_r+0x14c>
1a0063dc:	46d8      	mov	r8, fp
1a0063de:	f1b8 0f00 	cmp.w	r8, #0
1a0063e2:	d025      	beq.n	1a006430 <__sfvwrite_r+0xe4>
1a0063e4:	f41e 7f00 	tst.w	lr, #512	; 0x200
1a0063e8:	68a7      	ldr	r7, [r4, #8]
1a0063ea:	d02f      	beq.n	1a00644c <__sfvwrite_r+0x100>
1a0063ec:	45b8      	cmp	r8, r7
1a0063ee:	46ba      	mov	sl, r7
1a0063f0:	f0c0 80a9 	bcc.w	1a006546 <__sfvwrite_r+0x1fa>
1a0063f4:	f41e 6f90 	tst.w	lr, #1152	; 0x480
1a0063f8:	f040 80b6 	bne.w	1a006568 <__sfvwrite_r+0x21c>
1a0063fc:	6820      	ldr	r0, [r4, #0]
1a0063fe:	4652      	mov	r2, sl
1a006400:	4659      	mov	r1, fp
1a006402:	f000 fcb3 	bl	1a006d6c <memmove>
1a006406:	68a0      	ldr	r0, [r4, #8]
1a006408:	6822      	ldr	r2, [r4, #0]
1a00640a:	1bc0      	subs	r0, r0, r7
1a00640c:	eb02 030a 	add.w	r3, r2, sl
1a006410:	60a0      	str	r0, [r4, #8]
1a006412:	6023      	str	r3, [r4, #0]
1a006414:	4640      	mov	r0, r8
1a006416:	68b3      	ldr	r3, [r6, #8]
1a006418:	1a1b      	subs	r3, r3, r0
1a00641a:	4483      	add	fp, r0
1a00641c:	ebc0 0808 	rsb	r8, r0, r8
1a006420:	60b3      	str	r3, [r6, #8]
1a006422:	2b00      	cmp	r3, #0
1a006424:	d0c3      	beq.n	1a0063ae <__sfvwrite_r+0x62>
1a006426:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
1a00642a:	f1b8 0f00 	cmp.w	r8, #0
1a00642e:	d1d9      	bne.n	1a0063e4 <__sfvwrite_r+0x98>
1a006430:	f8d5 b000 	ldr.w	fp, [r5]
1a006434:	f8d5 8004 	ldr.w	r8, [r5, #4]
1a006438:	3508      	adds	r5, #8
1a00643a:	e7d0      	b.n	1a0063de <__sfvwrite_r+0x92>
1a00643c:	f8d5 a000 	ldr.w	sl, [r5]
1a006440:	f8d5 8004 	ldr.w	r8, [r5, #4]
1a006444:	3508      	adds	r5, #8
1a006446:	e79c      	b.n	1a006382 <__sfvwrite_r+0x36>
1a006448:	2000      	movs	r0, #0
1a00644a:	4770      	bx	lr
1a00644c:	6820      	ldr	r0, [r4, #0]
1a00644e:	6923      	ldr	r3, [r4, #16]
1a006450:	4298      	cmp	r0, r3
1a006452:	d803      	bhi.n	1a00645c <__sfvwrite_r+0x110>
1a006454:	6962      	ldr	r2, [r4, #20]
1a006456:	4590      	cmp	r8, r2
1a006458:	f080 80b9 	bcs.w	1a0065ce <__sfvwrite_r+0x282>
1a00645c:	4547      	cmp	r7, r8
1a00645e:	bf28      	it	cs
1a006460:	4647      	movcs	r7, r8
1a006462:	463a      	mov	r2, r7
1a006464:	4659      	mov	r1, fp
1a006466:	f000 fc81 	bl	1a006d6c <memmove>
1a00646a:	68a3      	ldr	r3, [r4, #8]
1a00646c:	6822      	ldr	r2, [r4, #0]
1a00646e:	1bdb      	subs	r3, r3, r7
1a006470:	443a      	add	r2, r7
1a006472:	60a3      	str	r3, [r4, #8]
1a006474:	6022      	str	r2, [r4, #0]
1a006476:	2b00      	cmp	r3, #0
1a006478:	d14a      	bne.n	1a006510 <__sfvwrite_r+0x1c4>
1a00647a:	4648      	mov	r0, r9
1a00647c:	4621      	mov	r1, r4
1a00647e:	f7ff fda1 	bl	1a005fc4 <_fflush_r>
1a006482:	2800      	cmp	r0, #0
1a006484:	d044      	beq.n	1a006510 <__sfvwrite_r+0x1c4>
1a006486:	89a3      	ldrh	r3, [r4, #12]
1a006488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00648c:	f04f 30ff 	mov.w	r0, #4294967295
1a006490:	81a3      	strh	r3, [r4, #12]
1a006492:	b003      	add	sp, #12
1a006494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006498:	4680      	mov	r8, r0
1a00649a:	9000      	str	r0, [sp, #0]
1a00649c:	4683      	mov	fp, r0
1a00649e:	4682      	mov	sl, r0
1a0064a0:	f1ba 0f00 	cmp.w	sl, #0
1a0064a4:	d02c      	beq.n	1a006500 <__sfvwrite_r+0x1b4>
1a0064a6:	9b00      	ldr	r3, [sp, #0]
1a0064a8:	2b00      	cmp	r3, #0
1a0064aa:	d050      	beq.n	1a00654e <__sfvwrite_r+0x202>
1a0064ac:	6820      	ldr	r0, [r4, #0]
1a0064ae:	6921      	ldr	r1, [r4, #16]
1a0064b0:	f8d4 e008 	ldr.w	lr, [r4, #8]
1a0064b4:	6962      	ldr	r2, [r4, #20]
1a0064b6:	45d0      	cmp	r8, sl
1a0064b8:	4643      	mov	r3, r8
1a0064ba:	bf28      	it	cs
1a0064bc:	4653      	movcs	r3, sl
1a0064be:	4288      	cmp	r0, r1
1a0064c0:	461f      	mov	r7, r3
1a0064c2:	d904      	bls.n	1a0064ce <__sfvwrite_r+0x182>
1a0064c4:	eb0e 0c02 	add.w	ip, lr, r2
1a0064c8:	4563      	cmp	r3, ip
1a0064ca:	f300 8092 	bgt.w	1a0065f2 <__sfvwrite_r+0x2a6>
1a0064ce:	4293      	cmp	r3, r2
1a0064d0:	db20      	blt.n	1a006514 <__sfvwrite_r+0x1c8>
1a0064d2:	4613      	mov	r3, r2
1a0064d4:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a0064d6:	69e1      	ldr	r1, [r4, #28]
1a0064d8:	4648      	mov	r0, r9
1a0064da:	465a      	mov	r2, fp
1a0064dc:	47b8      	blx	r7
1a0064de:	1e07      	subs	r7, r0, #0
1a0064e0:	ddd1      	ble.n	1a006486 <__sfvwrite_r+0x13a>
1a0064e2:	ebb8 0807 	subs.w	r8, r8, r7
1a0064e6:	d025      	beq.n	1a006534 <__sfvwrite_r+0x1e8>
1a0064e8:	68b3      	ldr	r3, [r6, #8]
1a0064ea:	1bdb      	subs	r3, r3, r7
1a0064ec:	44bb      	add	fp, r7
1a0064ee:	ebc7 0a0a 	rsb	sl, r7, sl
1a0064f2:	60b3      	str	r3, [r6, #8]
1a0064f4:	2b00      	cmp	r3, #0
1a0064f6:	f43f af5a 	beq.w	1a0063ae <__sfvwrite_r+0x62>
1a0064fa:	f1ba 0f00 	cmp.w	sl, #0
1a0064fe:	d1d2      	bne.n	1a0064a6 <__sfvwrite_r+0x15a>
1a006500:	2300      	movs	r3, #0
1a006502:	f8d5 b000 	ldr.w	fp, [r5]
1a006506:	f8d5 a004 	ldr.w	sl, [r5, #4]
1a00650a:	9300      	str	r3, [sp, #0]
1a00650c:	3508      	adds	r5, #8
1a00650e:	e7c7      	b.n	1a0064a0 <__sfvwrite_r+0x154>
1a006510:	4638      	mov	r0, r7
1a006512:	e780      	b.n	1a006416 <__sfvwrite_r+0xca>
1a006514:	461a      	mov	r2, r3
1a006516:	4659      	mov	r1, fp
1a006518:	9301      	str	r3, [sp, #4]
1a00651a:	f000 fc27 	bl	1a006d6c <memmove>
1a00651e:	68a2      	ldr	r2, [r4, #8]
1a006520:	6821      	ldr	r1, [r4, #0]
1a006522:	9b01      	ldr	r3, [sp, #4]
1a006524:	ebb8 0807 	subs.w	r8, r8, r7
1a006528:	eba2 0203 	sub.w	r2, r2, r3
1a00652c:	440b      	add	r3, r1
1a00652e:	60a2      	str	r2, [r4, #8]
1a006530:	6023      	str	r3, [r4, #0]
1a006532:	d1d9      	bne.n	1a0064e8 <__sfvwrite_r+0x19c>
1a006534:	4648      	mov	r0, r9
1a006536:	4621      	mov	r1, r4
1a006538:	f7ff fd44 	bl	1a005fc4 <_fflush_r>
1a00653c:	2800      	cmp	r0, #0
1a00653e:	d1a2      	bne.n	1a006486 <__sfvwrite_r+0x13a>
1a006540:	f8cd 8000 	str.w	r8, [sp]
1a006544:	e7d0      	b.n	1a0064e8 <__sfvwrite_r+0x19c>
1a006546:	6820      	ldr	r0, [r4, #0]
1a006548:	4647      	mov	r7, r8
1a00654a:	46c2      	mov	sl, r8
1a00654c:	e757      	b.n	1a0063fe <__sfvwrite_r+0xb2>
1a00654e:	4658      	mov	r0, fp
1a006550:	210a      	movs	r1, #10
1a006552:	4652      	mov	r2, sl
1a006554:	f000 fbc0 	bl	1a006cd8 <memchr>
1a006558:	2800      	cmp	r0, #0
1a00655a:	d073      	beq.n	1a006644 <__sfvwrite_r+0x2f8>
1a00655c:	3001      	adds	r0, #1
1a00655e:	2301      	movs	r3, #1
1a006560:	ebcb 0800 	rsb	r8, fp, r0
1a006564:	9300      	str	r3, [sp, #0]
1a006566:	e7a1      	b.n	1a0064ac <__sfvwrite_r+0x160>
1a006568:	6967      	ldr	r7, [r4, #20]
1a00656a:	6921      	ldr	r1, [r4, #16]
1a00656c:	6823      	ldr	r3, [r4, #0]
1a00656e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
1a006572:	1a5b      	subs	r3, r3, r1
1a006574:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
1a006578:	1c58      	adds	r0, r3, #1
1a00657a:	107f      	asrs	r7, r7, #1
1a00657c:	4440      	add	r0, r8
1a00657e:	4287      	cmp	r7, r0
1a006580:	463a      	mov	r2, r7
1a006582:	bf3c      	itt	cc
1a006584:	4607      	movcc	r7, r0
1a006586:	463a      	movcc	r2, r7
1a006588:	f41e 6f80 	tst.w	lr, #1024	; 0x400
1a00658c:	9300      	str	r3, [sp, #0]
1a00658e:	d046      	beq.n	1a00661e <__sfvwrite_r+0x2d2>
1a006590:	4611      	mov	r1, r2
1a006592:	4648      	mov	r0, r9
1a006594:	f000 f90e 	bl	1a0067b4 <_malloc_r>
1a006598:	9b00      	ldr	r3, [sp, #0]
1a00659a:	4682      	mov	sl, r0
1a00659c:	2800      	cmp	r0, #0
1a00659e:	d059      	beq.n	1a006654 <__sfvwrite_r+0x308>
1a0065a0:	461a      	mov	r2, r3
1a0065a2:	6921      	ldr	r1, [r4, #16]
1a0065a4:	9300      	str	r3, [sp, #0]
1a0065a6:	f7fd f865 	bl	1a003674 <memcpy>
1a0065aa:	89a2      	ldrh	r2, [r4, #12]
1a0065ac:	9b00      	ldr	r3, [sp, #0]
1a0065ae:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
1a0065b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a0065b6:	81a2      	strh	r2, [r4, #12]
1a0065b8:	eb0a 0003 	add.w	r0, sl, r3
1a0065bc:	1afb      	subs	r3, r7, r3
1a0065be:	f8c4 a010 	str.w	sl, [r4, #16]
1a0065c2:	6167      	str	r7, [r4, #20]
1a0065c4:	6020      	str	r0, [r4, #0]
1a0065c6:	60a3      	str	r3, [r4, #8]
1a0065c8:	4647      	mov	r7, r8
1a0065ca:	46c2      	mov	sl, r8
1a0065cc:	e717      	b.n	1a0063fe <__sfvwrite_r+0xb2>
1a0065ce:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
1a0065d2:	4543      	cmp	r3, r8
1a0065d4:	bf28      	it	cs
1a0065d6:	4643      	movcs	r3, r8
1a0065d8:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a0065da:	fb93 f3f2 	sdiv	r3, r3, r2
1a0065de:	4648      	mov	r0, r9
1a0065e0:	fb03 f302 	mul.w	r3, r3, r2
1a0065e4:	69e1      	ldr	r1, [r4, #28]
1a0065e6:	465a      	mov	r2, fp
1a0065e8:	47b8      	blx	r7
1a0065ea:	2800      	cmp	r0, #0
1a0065ec:	f73f af13 	bgt.w	1a006416 <__sfvwrite_r+0xca>
1a0065f0:	e749      	b.n	1a006486 <__sfvwrite_r+0x13a>
1a0065f2:	4662      	mov	r2, ip
1a0065f4:	4659      	mov	r1, fp
1a0065f6:	f8cd c004 	str.w	ip, [sp, #4]
1a0065fa:	f000 fbb7 	bl	1a006d6c <memmove>
1a0065fe:	6823      	ldr	r3, [r4, #0]
1a006600:	f8dd c004 	ldr.w	ip, [sp, #4]
1a006604:	4463      	add	r3, ip
1a006606:	6023      	str	r3, [r4, #0]
1a006608:	4648      	mov	r0, r9
1a00660a:	4621      	mov	r1, r4
1a00660c:	f7ff fcda 	bl	1a005fc4 <_fflush_r>
1a006610:	f8dd c004 	ldr.w	ip, [sp, #4]
1a006614:	2800      	cmp	r0, #0
1a006616:	f47f af36 	bne.w	1a006486 <__sfvwrite_r+0x13a>
1a00661a:	4667      	mov	r7, ip
1a00661c:	e761      	b.n	1a0064e2 <__sfvwrite_r+0x196>
1a00661e:	4648      	mov	r0, r9
1a006620:	f000 ff02 	bl	1a007428 <_realloc_r>
1a006624:	9b00      	ldr	r3, [sp, #0]
1a006626:	4682      	mov	sl, r0
1a006628:	2800      	cmp	r0, #0
1a00662a:	d1c5      	bne.n	1a0065b8 <__sfvwrite_r+0x26c>
1a00662c:	4648      	mov	r0, r9
1a00662e:	6921      	ldr	r1, [r4, #16]
1a006630:	f7ff fdb4 	bl	1a00619c <_free_r>
1a006634:	89a3      	ldrh	r3, [r4, #12]
1a006636:	220c      	movs	r2, #12
1a006638:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00663c:	b29b      	uxth	r3, r3
1a00663e:	f8c9 2000 	str.w	r2, [r9]
1a006642:	e721      	b.n	1a006488 <__sfvwrite_r+0x13c>
1a006644:	2301      	movs	r3, #1
1a006646:	f10a 0801 	add.w	r8, sl, #1
1a00664a:	9300      	str	r3, [sp, #0]
1a00664c:	e72e      	b.n	1a0064ac <__sfvwrite_r+0x160>
1a00664e:	f04f 30ff 	mov.w	r0, #4294967295
1a006652:	e6ad      	b.n	1a0063b0 <__sfvwrite_r+0x64>
1a006654:	230c      	movs	r3, #12
1a006656:	f8c9 3000 	str.w	r3, [r9]
1a00665a:	89a3      	ldrh	r3, [r4, #12]
1a00665c:	e714      	b.n	1a006488 <__sfvwrite_r+0x13c>
1a00665e:	bf00      	nop
1a006660:	7ffffc00 	.word	0x7ffffc00

1a006664 <_fwalk_reent>:
1a006664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a006668:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
1a00666c:	d01f      	beq.n	1a0066ae <_fwalk_reent+0x4a>
1a00666e:	4688      	mov	r8, r1
1a006670:	4606      	mov	r6, r0
1a006672:	f04f 0900 	mov.w	r9, #0
1a006676:	687d      	ldr	r5, [r7, #4]
1a006678:	68bc      	ldr	r4, [r7, #8]
1a00667a:	3d01      	subs	r5, #1
1a00667c:	d411      	bmi.n	1a0066a2 <_fwalk_reent+0x3e>
1a00667e:	89a3      	ldrh	r3, [r4, #12]
1a006680:	2b01      	cmp	r3, #1
1a006682:	f105 35ff 	add.w	r5, r5, #4294967295
1a006686:	d908      	bls.n	1a00669a <_fwalk_reent+0x36>
1a006688:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
1a00668c:	3301      	adds	r3, #1
1a00668e:	4621      	mov	r1, r4
1a006690:	4630      	mov	r0, r6
1a006692:	d002      	beq.n	1a00669a <_fwalk_reent+0x36>
1a006694:	47c0      	blx	r8
1a006696:	ea49 0900 	orr.w	r9, r9, r0
1a00669a:	1c6b      	adds	r3, r5, #1
1a00669c:	f104 0468 	add.w	r4, r4, #104	; 0x68
1a0066a0:	d1ed      	bne.n	1a00667e <_fwalk_reent+0x1a>
1a0066a2:	683f      	ldr	r7, [r7, #0]
1a0066a4:	2f00      	cmp	r7, #0
1a0066a6:	d1e6      	bne.n	1a006676 <_fwalk_reent+0x12>
1a0066a8:	4648      	mov	r0, r9
1a0066aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0066ae:	46b9      	mov	r9, r7
1a0066b0:	4648      	mov	r0, r9
1a0066b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0066b6:	bf00      	nop

1a0066b8 <__locale_charset>:
1a0066b8:	4800      	ldr	r0, [pc, #0]	; (1a0066bc <__locale_charset+0x4>)
1a0066ba:	4770      	bx	lr
1a0066bc:	10000534 	.word	0x10000534

1a0066c0 <__locale_mb_cur_max>:
1a0066c0:	4b01      	ldr	r3, [pc, #4]	; (1a0066c8 <__locale_mb_cur_max+0x8>)
1a0066c2:	6818      	ldr	r0, [r3, #0]
1a0066c4:	4770      	bx	lr
1a0066c6:	bf00      	nop
1a0066c8:	10000554 	.word	0x10000554

1a0066cc <_localeconv_r>:
1a0066cc:	4800      	ldr	r0, [pc, #0]	; (1a0066d0 <_localeconv_r+0x4>)
1a0066ce:	4770      	bx	lr
1a0066d0:	100004fc 	.word	0x100004fc

1a0066d4 <__smakebuf_r>:
1a0066d4:	898b      	ldrh	r3, [r1, #12]
1a0066d6:	b29a      	uxth	r2, r3
1a0066d8:	f012 0f02 	tst.w	r2, #2
1a0066dc:	d13c      	bne.n	1a006758 <__smakebuf_r+0x84>
1a0066de:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0066e0:	460c      	mov	r4, r1
1a0066e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0066e6:	2900      	cmp	r1, #0
1a0066e8:	b091      	sub	sp, #68	; 0x44
1a0066ea:	4605      	mov	r5, r0
1a0066ec:	db19      	blt.n	1a006722 <__smakebuf_r+0x4e>
1a0066ee:	aa01      	add	r2, sp, #4
1a0066f0:	f7fb f8e0 	bl	1a0018b4 <_fstat_r>
1a0066f4:	2800      	cmp	r0, #0
1a0066f6:	db12      	blt.n	1a00671e <__smakebuf_r+0x4a>
1a0066f8:	9b02      	ldr	r3, [sp, #8]
1a0066fa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
1a0066fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
1a006702:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
1a006706:	fab7 f787 	clz	r7, r7
1a00670a:	ea4f 1757 	mov.w	r7, r7, lsr #5
1a00670e:	d02a      	beq.n	1a006766 <__smakebuf_r+0x92>
1a006710:	89a3      	ldrh	r3, [r4, #12]
1a006712:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a006716:	81a3      	strh	r3, [r4, #12]
1a006718:	f44f 6680 	mov.w	r6, #1024	; 0x400
1a00671c:	e00b      	b.n	1a006736 <__smakebuf_r+0x62>
1a00671e:	89a3      	ldrh	r3, [r4, #12]
1a006720:	b29a      	uxth	r2, r3
1a006722:	f012 0f80 	tst.w	r2, #128	; 0x80
1a006726:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00672a:	81a3      	strh	r3, [r4, #12]
1a00672c:	bf0c      	ite	eq
1a00672e:	f44f 6680 	moveq.w	r6, #1024	; 0x400
1a006732:	2640      	movne	r6, #64	; 0x40
1a006734:	2700      	movs	r7, #0
1a006736:	4628      	mov	r0, r5
1a006738:	4631      	mov	r1, r6
1a00673a:	f000 f83b 	bl	1a0067b4 <_malloc_r>
1a00673e:	89a3      	ldrh	r3, [r4, #12]
1a006740:	b340      	cbz	r0, 1a006794 <__smakebuf_r+0xc0>
1a006742:	4a1a      	ldr	r2, [pc, #104]	; (1a0067ac <__smakebuf_r+0xd8>)
1a006744:	63ea      	str	r2, [r5, #60]	; 0x3c
1a006746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00674a:	81a3      	strh	r3, [r4, #12]
1a00674c:	6020      	str	r0, [r4, #0]
1a00674e:	6120      	str	r0, [r4, #16]
1a006750:	6166      	str	r6, [r4, #20]
1a006752:	b99f      	cbnz	r7, 1a00677c <__smakebuf_r+0xa8>
1a006754:	b011      	add	sp, #68	; 0x44
1a006756:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a006758:	f101 0343 	add.w	r3, r1, #67	; 0x43
1a00675c:	2201      	movs	r2, #1
1a00675e:	600b      	str	r3, [r1, #0]
1a006760:	610b      	str	r3, [r1, #16]
1a006762:	614a      	str	r2, [r1, #20]
1a006764:	4770      	bx	lr
1a006766:	4b12      	ldr	r3, [pc, #72]	; (1a0067b0 <__smakebuf_r+0xdc>)
1a006768:	6aa2      	ldr	r2, [r4, #40]	; 0x28
1a00676a:	429a      	cmp	r2, r3
1a00676c:	d1d0      	bne.n	1a006710 <__smakebuf_r+0x3c>
1a00676e:	89a3      	ldrh	r3, [r4, #12]
1a006770:	f44f 6680 	mov.w	r6, #1024	; 0x400
1a006774:	4333      	orrs	r3, r6
1a006776:	81a3      	strh	r3, [r4, #12]
1a006778:	64e6      	str	r6, [r4, #76]	; 0x4c
1a00677a:	e7dc      	b.n	1a006736 <__smakebuf_r+0x62>
1a00677c:	4628      	mov	r0, r5
1a00677e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a006782:	f7fb f89d 	bl	1a0018c0 <_isatty_r>
1a006786:	2800      	cmp	r0, #0
1a006788:	d0e4      	beq.n	1a006754 <__smakebuf_r+0x80>
1a00678a:	89a3      	ldrh	r3, [r4, #12]
1a00678c:	f043 0301 	orr.w	r3, r3, #1
1a006790:	81a3      	strh	r3, [r4, #12]
1a006792:	e7df      	b.n	1a006754 <__smakebuf_r+0x80>
1a006794:	059a      	lsls	r2, r3, #22
1a006796:	d4dd      	bmi.n	1a006754 <__smakebuf_r+0x80>
1a006798:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a00679c:	f043 0302 	orr.w	r3, r3, #2
1a0067a0:	2101      	movs	r1, #1
1a0067a2:	81a3      	strh	r3, [r4, #12]
1a0067a4:	6022      	str	r2, [r4, #0]
1a0067a6:	6122      	str	r2, [r4, #16]
1a0067a8:	6161      	str	r1, [r4, #20]
1a0067aa:	e7d3      	b.n	1a006754 <__smakebuf_r+0x80>
1a0067ac:	1a005ff1 	.word	0x1a005ff1
1a0067b0:	1a0078cd 	.word	0x1a0078cd

1a0067b4 <_malloc_r>:
1a0067b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0067b8:	f101 050b 	add.w	r5, r1, #11
1a0067bc:	2d16      	cmp	r5, #22
1a0067be:	b083      	sub	sp, #12
1a0067c0:	4606      	mov	r6, r0
1a0067c2:	d927      	bls.n	1a006814 <_malloc_r+0x60>
1a0067c4:	f035 0507 	bics.w	r5, r5, #7
1a0067c8:	f100 80b6 	bmi.w	1a006938 <_malloc_r+0x184>
1a0067cc:	42a9      	cmp	r1, r5
1a0067ce:	f200 80b3 	bhi.w	1a006938 <_malloc_r+0x184>
1a0067d2:	f000 fb2f 	bl	1a006e34 <__malloc_lock>
1a0067d6:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
1a0067da:	d222      	bcs.n	1a006822 <_malloc_r+0x6e>
1a0067dc:	4fc2      	ldr	r7, [pc, #776]	; (1a006ae8 <_malloc_r+0x334>)
1a0067de:	08e8      	lsrs	r0, r5, #3
1a0067e0:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
1a0067e4:	68dc      	ldr	r4, [r3, #12]
1a0067e6:	429c      	cmp	r4, r3
1a0067e8:	f000 81c8 	beq.w	1a006b7c <_malloc_r+0x3c8>
1a0067ec:	6863      	ldr	r3, [r4, #4]
1a0067ee:	68e1      	ldr	r1, [r4, #12]
1a0067f0:	68a5      	ldr	r5, [r4, #8]
1a0067f2:	f023 0303 	bic.w	r3, r3, #3
1a0067f6:	4423      	add	r3, r4
1a0067f8:	4630      	mov	r0, r6
1a0067fa:	685a      	ldr	r2, [r3, #4]
1a0067fc:	60e9      	str	r1, [r5, #12]
1a0067fe:	f042 0201 	orr.w	r2, r2, #1
1a006802:	608d      	str	r5, [r1, #8]
1a006804:	605a      	str	r2, [r3, #4]
1a006806:	f000 fb17 	bl	1a006e38 <__malloc_unlock>
1a00680a:	3408      	adds	r4, #8
1a00680c:	4620      	mov	r0, r4
1a00680e:	b003      	add	sp, #12
1a006810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006814:	2910      	cmp	r1, #16
1a006816:	f200 808f 	bhi.w	1a006938 <_malloc_r+0x184>
1a00681a:	f000 fb0b 	bl	1a006e34 <__malloc_lock>
1a00681e:	2510      	movs	r5, #16
1a006820:	e7dc      	b.n	1a0067dc <_malloc_r+0x28>
1a006822:	0a68      	lsrs	r0, r5, #9
1a006824:	f000 808f 	beq.w	1a006946 <_malloc_r+0x192>
1a006828:	2804      	cmp	r0, #4
1a00682a:	f200 8154 	bhi.w	1a006ad6 <_malloc_r+0x322>
1a00682e:	09a8      	lsrs	r0, r5, #6
1a006830:	3038      	adds	r0, #56	; 0x38
1a006832:	0041      	lsls	r1, r0, #1
1a006834:	4fac      	ldr	r7, [pc, #688]	; (1a006ae8 <_malloc_r+0x334>)
1a006836:	eb07 0181 	add.w	r1, r7, r1, lsl #2
1a00683a:	68cc      	ldr	r4, [r1, #12]
1a00683c:	42a1      	cmp	r1, r4
1a00683e:	d106      	bne.n	1a00684e <_malloc_r+0x9a>
1a006840:	e00c      	b.n	1a00685c <_malloc_r+0xa8>
1a006842:	2a00      	cmp	r2, #0
1a006844:	f280 8082 	bge.w	1a00694c <_malloc_r+0x198>
1a006848:	68e4      	ldr	r4, [r4, #12]
1a00684a:	42a1      	cmp	r1, r4
1a00684c:	d006      	beq.n	1a00685c <_malloc_r+0xa8>
1a00684e:	6863      	ldr	r3, [r4, #4]
1a006850:	f023 0303 	bic.w	r3, r3, #3
1a006854:	1b5a      	subs	r2, r3, r5
1a006856:	2a0f      	cmp	r2, #15
1a006858:	ddf3      	ble.n	1a006842 <_malloc_r+0x8e>
1a00685a:	3801      	subs	r0, #1
1a00685c:	3001      	adds	r0, #1
1a00685e:	49a2      	ldr	r1, [pc, #648]	; (1a006ae8 <_malloc_r+0x334>)
1a006860:	693c      	ldr	r4, [r7, #16]
1a006862:	f101 0e08 	add.w	lr, r1, #8
1a006866:	4574      	cmp	r4, lr
1a006868:	f000 817d 	beq.w	1a006b66 <_malloc_r+0x3b2>
1a00686c:	6863      	ldr	r3, [r4, #4]
1a00686e:	f023 0303 	bic.w	r3, r3, #3
1a006872:	1b5a      	subs	r2, r3, r5
1a006874:	2a0f      	cmp	r2, #15
1a006876:	f300 8163 	bgt.w	1a006b40 <_malloc_r+0x38c>
1a00687a:	2a00      	cmp	r2, #0
1a00687c:	f8c1 e014 	str.w	lr, [r1, #20]
1a006880:	f8c1 e010 	str.w	lr, [r1, #16]
1a006884:	da73      	bge.n	1a00696e <_malloc_r+0x1ba>
1a006886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a00688a:	f080 8139 	bcs.w	1a006b00 <_malloc_r+0x34c>
1a00688e:	08db      	lsrs	r3, r3, #3
1a006890:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
1a006894:	ea4f 0ca3 	mov.w	ip, r3, asr #2
1a006898:	684a      	ldr	r2, [r1, #4]
1a00689a:	f8d8 9008 	ldr.w	r9, [r8, #8]
1a00689e:	f8c4 9008 	str.w	r9, [r4, #8]
1a0068a2:	2301      	movs	r3, #1
1a0068a4:	fa03 f30c 	lsl.w	r3, r3, ip
1a0068a8:	4313      	orrs	r3, r2
1a0068aa:	f8c4 800c 	str.w	r8, [r4, #12]
1a0068ae:	604b      	str	r3, [r1, #4]
1a0068b0:	f8c8 4008 	str.w	r4, [r8, #8]
1a0068b4:	f8c9 400c 	str.w	r4, [r9, #12]
1a0068b8:	1082      	asrs	r2, r0, #2
1a0068ba:	2401      	movs	r4, #1
1a0068bc:	4094      	lsls	r4, r2
1a0068be:	429c      	cmp	r4, r3
1a0068c0:	d862      	bhi.n	1a006988 <_malloc_r+0x1d4>
1a0068c2:	4223      	tst	r3, r4
1a0068c4:	d106      	bne.n	1a0068d4 <_malloc_r+0x120>
1a0068c6:	f020 0003 	bic.w	r0, r0, #3
1a0068ca:	0064      	lsls	r4, r4, #1
1a0068cc:	4223      	tst	r3, r4
1a0068ce:	f100 0004 	add.w	r0, r0, #4
1a0068d2:	d0fa      	beq.n	1a0068ca <_malloc_r+0x116>
1a0068d4:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
1a0068d8:	46c4      	mov	ip, r8
1a0068da:	4681      	mov	r9, r0
1a0068dc:	f8dc 300c 	ldr.w	r3, [ip, #12]
1a0068e0:	459c      	cmp	ip, r3
1a0068e2:	d107      	bne.n	1a0068f4 <_malloc_r+0x140>
1a0068e4:	e141      	b.n	1a006b6a <_malloc_r+0x3b6>
1a0068e6:	2900      	cmp	r1, #0
1a0068e8:	f280 8151 	bge.w	1a006b8e <_malloc_r+0x3da>
1a0068ec:	68db      	ldr	r3, [r3, #12]
1a0068ee:	459c      	cmp	ip, r3
1a0068f0:	f000 813b 	beq.w	1a006b6a <_malloc_r+0x3b6>
1a0068f4:	685a      	ldr	r2, [r3, #4]
1a0068f6:	f022 0203 	bic.w	r2, r2, #3
1a0068fa:	1b51      	subs	r1, r2, r5
1a0068fc:	290f      	cmp	r1, #15
1a0068fe:	ddf2      	ble.n	1a0068e6 <_malloc_r+0x132>
1a006900:	461c      	mov	r4, r3
1a006902:	f8d3 c00c 	ldr.w	ip, [r3, #12]
1a006906:	f854 8f08 	ldr.w	r8, [r4, #8]!
1a00690a:	195a      	adds	r2, r3, r5
1a00690c:	f045 0901 	orr.w	r9, r5, #1
1a006910:	f041 0501 	orr.w	r5, r1, #1
1a006914:	f8c3 9004 	str.w	r9, [r3, #4]
1a006918:	4630      	mov	r0, r6
1a00691a:	f8c8 c00c 	str.w	ip, [r8, #12]
1a00691e:	f8cc 8008 	str.w	r8, [ip, #8]
1a006922:	617a      	str	r2, [r7, #20]
1a006924:	613a      	str	r2, [r7, #16]
1a006926:	f8c2 e00c 	str.w	lr, [r2, #12]
1a00692a:	f8c2 e008 	str.w	lr, [r2, #8]
1a00692e:	6055      	str	r5, [r2, #4]
1a006930:	5051      	str	r1, [r2, r1]
1a006932:	f000 fa81 	bl	1a006e38 <__malloc_unlock>
1a006936:	e769      	b.n	1a00680c <_malloc_r+0x58>
1a006938:	2400      	movs	r4, #0
1a00693a:	230c      	movs	r3, #12
1a00693c:	4620      	mov	r0, r4
1a00693e:	6033      	str	r3, [r6, #0]
1a006940:	b003      	add	sp, #12
1a006942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006946:	217e      	movs	r1, #126	; 0x7e
1a006948:	203f      	movs	r0, #63	; 0x3f
1a00694a:	e773      	b.n	1a006834 <_malloc_r+0x80>
1a00694c:	4423      	add	r3, r4
1a00694e:	68e1      	ldr	r1, [r4, #12]
1a006950:	685a      	ldr	r2, [r3, #4]
1a006952:	68a5      	ldr	r5, [r4, #8]
1a006954:	f042 0201 	orr.w	r2, r2, #1
1a006958:	60e9      	str	r1, [r5, #12]
1a00695a:	4630      	mov	r0, r6
1a00695c:	608d      	str	r5, [r1, #8]
1a00695e:	605a      	str	r2, [r3, #4]
1a006960:	f000 fa6a 	bl	1a006e38 <__malloc_unlock>
1a006964:	3408      	adds	r4, #8
1a006966:	4620      	mov	r0, r4
1a006968:	b003      	add	sp, #12
1a00696a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00696e:	4423      	add	r3, r4
1a006970:	4630      	mov	r0, r6
1a006972:	685a      	ldr	r2, [r3, #4]
1a006974:	f042 0201 	orr.w	r2, r2, #1
1a006978:	605a      	str	r2, [r3, #4]
1a00697a:	f000 fa5d 	bl	1a006e38 <__malloc_unlock>
1a00697e:	3408      	adds	r4, #8
1a006980:	4620      	mov	r0, r4
1a006982:	b003      	add	sp, #12
1a006984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006988:	68bc      	ldr	r4, [r7, #8]
1a00698a:	6863      	ldr	r3, [r4, #4]
1a00698c:	f023 0803 	bic.w	r8, r3, #3
1a006990:	4545      	cmp	r5, r8
1a006992:	d804      	bhi.n	1a00699e <_malloc_r+0x1ea>
1a006994:	ebc5 0308 	rsb	r3, r5, r8
1a006998:	2b0f      	cmp	r3, #15
1a00699a:	f300 808c 	bgt.w	1a006ab6 <_malloc_r+0x302>
1a00699e:	4b53      	ldr	r3, [pc, #332]	; (1a006aec <_malloc_r+0x338>)
1a0069a0:	f8df a158 	ldr.w	sl, [pc, #344]	; 1a006afc <_malloc_r+0x348>
1a0069a4:	681a      	ldr	r2, [r3, #0]
1a0069a6:	f8da 3000 	ldr.w	r3, [sl]
1a0069aa:	3301      	adds	r3, #1
1a0069ac:	442a      	add	r2, r5
1a0069ae:	eb04 0b08 	add.w	fp, r4, r8
1a0069b2:	f000 8150 	beq.w	1a006c56 <_malloc_r+0x4a2>
1a0069b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
1a0069ba:	320f      	adds	r2, #15
1a0069bc:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
1a0069c0:	f022 020f 	bic.w	r2, r2, #15
1a0069c4:	4611      	mov	r1, r2
1a0069c6:	4630      	mov	r0, r6
1a0069c8:	9201      	str	r2, [sp, #4]
1a0069ca:	f7fa ffaf 	bl	1a00192c <_sbrk_r>
1a0069ce:	f1b0 3fff 	cmp.w	r0, #4294967295
1a0069d2:	4681      	mov	r9, r0
1a0069d4:	9a01      	ldr	r2, [sp, #4]
1a0069d6:	f000 8147 	beq.w	1a006c68 <_malloc_r+0x4b4>
1a0069da:	4583      	cmp	fp, r0
1a0069dc:	f200 80ee 	bhi.w	1a006bbc <_malloc_r+0x408>
1a0069e0:	4b43      	ldr	r3, [pc, #268]	; (1a006af0 <_malloc_r+0x33c>)
1a0069e2:	6819      	ldr	r1, [r3, #0]
1a0069e4:	45cb      	cmp	fp, r9
1a0069e6:	4411      	add	r1, r2
1a0069e8:	6019      	str	r1, [r3, #0]
1a0069ea:	f000 8142 	beq.w	1a006c72 <_malloc_r+0x4be>
1a0069ee:	f8da 0000 	ldr.w	r0, [sl]
1a0069f2:	f8df e108 	ldr.w	lr, [pc, #264]	; 1a006afc <_malloc_r+0x348>
1a0069f6:	3001      	adds	r0, #1
1a0069f8:	bf1b      	ittet	ne
1a0069fa:	ebcb 0b09 	rsbne	fp, fp, r9
1a0069fe:	4459      	addne	r1, fp
1a006a00:	f8ce 9000 	streq.w	r9, [lr]
1a006a04:	6019      	strne	r1, [r3, #0]
1a006a06:	f019 0107 	ands.w	r1, r9, #7
1a006a0a:	f000 8107 	beq.w	1a006c1c <_malloc_r+0x468>
1a006a0e:	f1c1 0008 	rsb	r0, r1, #8
1a006a12:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
1a006a16:	4481      	add	r9, r0
1a006a18:	3108      	adds	r1, #8
1a006a1a:	444a      	add	r2, r9
1a006a1c:	f3c2 020b 	ubfx	r2, r2, #0, #12
1a006a20:	ebc2 0a01 	rsb	sl, r2, r1
1a006a24:	4651      	mov	r1, sl
1a006a26:	4630      	mov	r0, r6
1a006a28:	9301      	str	r3, [sp, #4]
1a006a2a:	f7fa ff7f 	bl	1a00192c <_sbrk_r>
1a006a2e:	1c43      	adds	r3, r0, #1
1a006a30:	9b01      	ldr	r3, [sp, #4]
1a006a32:	f000 812c 	beq.w	1a006c8e <_malloc_r+0x4da>
1a006a36:	ebc9 0200 	rsb	r2, r9, r0
1a006a3a:	4452      	add	r2, sl
1a006a3c:	f042 0201 	orr.w	r2, r2, #1
1a006a40:	6819      	ldr	r1, [r3, #0]
1a006a42:	f8c7 9008 	str.w	r9, [r7, #8]
1a006a46:	4451      	add	r1, sl
1a006a48:	42bc      	cmp	r4, r7
1a006a4a:	f8c9 2004 	str.w	r2, [r9, #4]
1a006a4e:	6019      	str	r1, [r3, #0]
1a006a50:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1a006af0 <_malloc_r+0x33c>
1a006a54:	d016      	beq.n	1a006a84 <_malloc_r+0x2d0>
1a006a56:	f1b8 0f0f 	cmp.w	r8, #15
1a006a5a:	f240 80ee 	bls.w	1a006c3a <_malloc_r+0x486>
1a006a5e:	6862      	ldr	r2, [r4, #4]
1a006a60:	f1a8 030c 	sub.w	r3, r8, #12
1a006a64:	f023 0307 	bic.w	r3, r3, #7
1a006a68:	18e0      	adds	r0, r4, r3
1a006a6a:	f002 0201 	and.w	r2, r2, #1
1a006a6e:	f04f 0e05 	mov.w	lr, #5
1a006a72:	431a      	orrs	r2, r3
1a006a74:	2b0f      	cmp	r3, #15
1a006a76:	6062      	str	r2, [r4, #4]
1a006a78:	f8c0 e004 	str.w	lr, [r0, #4]
1a006a7c:	f8c0 e008 	str.w	lr, [r0, #8]
1a006a80:	f200 8109 	bhi.w	1a006c96 <_malloc_r+0x4e2>
1a006a84:	4b1b      	ldr	r3, [pc, #108]	; (1a006af4 <_malloc_r+0x340>)
1a006a86:	68bc      	ldr	r4, [r7, #8]
1a006a88:	681a      	ldr	r2, [r3, #0]
1a006a8a:	4291      	cmp	r1, r2
1a006a8c:	bf88      	it	hi
1a006a8e:	6019      	strhi	r1, [r3, #0]
1a006a90:	4b19      	ldr	r3, [pc, #100]	; (1a006af8 <_malloc_r+0x344>)
1a006a92:	681a      	ldr	r2, [r3, #0]
1a006a94:	4291      	cmp	r1, r2
1a006a96:	6862      	ldr	r2, [r4, #4]
1a006a98:	bf88      	it	hi
1a006a9a:	6019      	strhi	r1, [r3, #0]
1a006a9c:	f022 0203 	bic.w	r2, r2, #3
1a006aa0:	4295      	cmp	r5, r2
1a006aa2:	eba2 0305 	sub.w	r3, r2, r5
1a006aa6:	d801      	bhi.n	1a006aac <_malloc_r+0x2f8>
1a006aa8:	2b0f      	cmp	r3, #15
1a006aaa:	dc04      	bgt.n	1a006ab6 <_malloc_r+0x302>
1a006aac:	4630      	mov	r0, r6
1a006aae:	f000 f9c3 	bl	1a006e38 <__malloc_unlock>
1a006ab2:	2400      	movs	r4, #0
1a006ab4:	e6aa      	b.n	1a00680c <_malloc_r+0x58>
1a006ab6:	1962      	adds	r2, r4, r5
1a006ab8:	f043 0301 	orr.w	r3, r3, #1
1a006abc:	f045 0501 	orr.w	r5, r5, #1
1a006ac0:	6065      	str	r5, [r4, #4]
1a006ac2:	4630      	mov	r0, r6
1a006ac4:	60ba      	str	r2, [r7, #8]
1a006ac6:	6053      	str	r3, [r2, #4]
1a006ac8:	f000 f9b6 	bl	1a006e38 <__malloc_unlock>
1a006acc:	3408      	adds	r4, #8
1a006ace:	4620      	mov	r0, r4
1a006ad0:	b003      	add	sp, #12
1a006ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006ad6:	2814      	cmp	r0, #20
1a006ad8:	d968      	bls.n	1a006bac <_malloc_r+0x3f8>
1a006ada:	2854      	cmp	r0, #84	; 0x54
1a006adc:	f200 8097 	bhi.w	1a006c0e <_malloc_r+0x45a>
1a006ae0:	0b28      	lsrs	r0, r5, #12
1a006ae2:	306e      	adds	r0, #110	; 0x6e
1a006ae4:	0041      	lsls	r1, r0, #1
1a006ae6:	e6a5      	b.n	1a006834 <_malloc_r+0x80>
1a006ae8:	10000558 	.word	0x10000558
1a006aec:	10000afc 	.word	0x10000afc
1a006af0:	10000b00 	.word	0x10000b00
1a006af4:	10000af8 	.word	0x10000af8
1a006af8:	10000af4 	.word	0x10000af4
1a006afc:	10000964 	.word	0x10000964
1a006b00:	0a5a      	lsrs	r2, r3, #9
1a006b02:	2a04      	cmp	r2, #4
1a006b04:	d955      	bls.n	1a006bb2 <_malloc_r+0x3fe>
1a006b06:	2a14      	cmp	r2, #20
1a006b08:	f200 80a7 	bhi.w	1a006c5a <_malloc_r+0x4a6>
1a006b0c:	325b      	adds	r2, #91	; 0x5b
1a006b0e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
1a006b12:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
1a006b16:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 1a006cd4 <_malloc_r+0x520>
1a006b1a:	f8dc 1008 	ldr.w	r1, [ip, #8]
1a006b1e:	4561      	cmp	r1, ip
1a006b20:	d07f      	beq.n	1a006c22 <_malloc_r+0x46e>
1a006b22:	684a      	ldr	r2, [r1, #4]
1a006b24:	f022 0203 	bic.w	r2, r2, #3
1a006b28:	4293      	cmp	r3, r2
1a006b2a:	d202      	bcs.n	1a006b32 <_malloc_r+0x37e>
1a006b2c:	6889      	ldr	r1, [r1, #8]
1a006b2e:	458c      	cmp	ip, r1
1a006b30:	d1f7      	bne.n	1a006b22 <_malloc_r+0x36e>
1a006b32:	68ca      	ldr	r2, [r1, #12]
1a006b34:	687b      	ldr	r3, [r7, #4]
1a006b36:	60e2      	str	r2, [r4, #12]
1a006b38:	60a1      	str	r1, [r4, #8]
1a006b3a:	6094      	str	r4, [r2, #8]
1a006b3c:	60cc      	str	r4, [r1, #12]
1a006b3e:	e6bb      	b.n	1a0068b8 <_malloc_r+0x104>
1a006b40:	1963      	adds	r3, r4, r5
1a006b42:	f042 0701 	orr.w	r7, r2, #1
1a006b46:	f045 0501 	orr.w	r5, r5, #1
1a006b4a:	6065      	str	r5, [r4, #4]
1a006b4c:	4630      	mov	r0, r6
1a006b4e:	614b      	str	r3, [r1, #20]
1a006b50:	610b      	str	r3, [r1, #16]
1a006b52:	f8c3 e00c 	str.w	lr, [r3, #12]
1a006b56:	f8c3 e008 	str.w	lr, [r3, #8]
1a006b5a:	605f      	str	r7, [r3, #4]
1a006b5c:	509a      	str	r2, [r3, r2]
1a006b5e:	3408      	adds	r4, #8
1a006b60:	f000 f96a 	bl	1a006e38 <__malloc_unlock>
1a006b64:	e652      	b.n	1a00680c <_malloc_r+0x58>
1a006b66:	684b      	ldr	r3, [r1, #4]
1a006b68:	e6a6      	b.n	1a0068b8 <_malloc_r+0x104>
1a006b6a:	f109 0901 	add.w	r9, r9, #1
1a006b6e:	f019 0f03 	tst.w	r9, #3
1a006b72:	f10c 0c08 	add.w	ip, ip, #8
1a006b76:	f47f aeb1 	bne.w	1a0068dc <_malloc_r+0x128>
1a006b7a:	e02c      	b.n	1a006bd6 <_malloc_r+0x422>
1a006b7c:	f104 0308 	add.w	r3, r4, #8
1a006b80:	6964      	ldr	r4, [r4, #20]
1a006b82:	42a3      	cmp	r3, r4
1a006b84:	bf08      	it	eq
1a006b86:	3002      	addeq	r0, #2
1a006b88:	f43f ae69 	beq.w	1a00685e <_malloc_r+0xaa>
1a006b8c:	e62e      	b.n	1a0067ec <_malloc_r+0x38>
1a006b8e:	441a      	add	r2, r3
1a006b90:	461c      	mov	r4, r3
1a006b92:	6851      	ldr	r1, [r2, #4]
1a006b94:	68db      	ldr	r3, [r3, #12]
1a006b96:	f854 5f08 	ldr.w	r5, [r4, #8]!
1a006b9a:	f041 0101 	orr.w	r1, r1, #1
1a006b9e:	6051      	str	r1, [r2, #4]
1a006ba0:	4630      	mov	r0, r6
1a006ba2:	60eb      	str	r3, [r5, #12]
1a006ba4:	609d      	str	r5, [r3, #8]
1a006ba6:	f000 f947 	bl	1a006e38 <__malloc_unlock>
1a006baa:	e62f      	b.n	1a00680c <_malloc_r+0x58>
1a006bac:	305b      	adds	r0, #91	; 0x5b
1a006bae:	0041      	lsls	r1, r0, #1
1a006bb0:	e640      	b.n	1a006834 <_malloc_r+0x80>
1a006bb2:	099a      	lsrs	r2, r3, #6
1a006bb4:	3238      	adds	r2, #56	; 0x38
1a006bb6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
1a006bba:	e7aa      	b.n	1a006b12 <_malloc_r+0x35e>
1a006bbc:	42bc      	cmp	r4, r7
1a006bbe:	4b45      	ldr	r3, [pc, #276]	; (1a006cd4 <_malloc_r+0x520>)
1a006bc0:	f43f af0e 	beq.w	1a0069e0 <_malloc_r+0x22c>
1a006bc4:	689c      	ldr	r4, [r3, #8]
1a006bc6:	6862      	ldr	r2, [r4, #4]
1a006bc8:	f022 0203 	bic.w	r2, r2, #3
1a006bcc:	e768      	b.n	1a006aa0 <_malloc_r+0x2ec>
1a006bce:	f8d8 8000 	ldr.w	r8, [r8]
1a006bd2:	4598      	cmp	r8, r3
1a006bd4:	d17c      	bne.n	1a006cd0 <_malloc_r+0x51c>
1a006bd6:	f010 0f03 	tst.w	r0, #3
1a006bda:	f1a8 0308 	sub.w	r3, r8, #8
1a006bde:	f100 30ff 	add.w	r0, r0, #4294967295
1a006be2:	d1f4      	bne.n	1a006bce <_malloc_r+0x41a>
1a006be4:	687b      	ldr	r3, [r7, #4]
1a006be6:	ea23 0304 	bic.w	r3, r3, r4
1a006bea:	607b      	str	r3, [r7, #4]
1a006bec:	0064      	lsls	r4, r4, #1
1a006bee:	429c      	cmp	r4, r3
1a006bf0:	f63f aeca 	bhi.w	1a006988 <_malloc_r+0x1d4>
1a006bf4:	2c00      	cmp	r4, #0
1a006bf6:	f43f aec7 	beq.w	1a006988 <_malloc_r+0x1d4>
1a006bfa:	4223      	tst	r3, r4
1a006bfc:	4648      	mov	r0, r9
1a006bfe:	f47f ae69 	bne.w	1a0068d4 <_malloc_r+0x120>
1a006c02:	0064      	lsls	r4, r4, #1
1a006c04:	4223      	tst	r3, r4
1a006c06:	f100 0004 	add.w	r0, r0, #4
1a006c0a:	d0fa      	beq.n	1a006c02 <_malloc_r+0x44e>
1a006c0c:	e662      	b.n	1a0068d4 <_malloc_r+0x120>
1a006c0e:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
1a006c12:	d818      	bhi.n	1a006c46 <_malloc_r+0x492>
1a006c14:	0be8      	lsrs	r0, r5, #15
1a006c16:	3077      	adds	r0, #119	; 0x77
1a006c18:	0041      	lsls	r1, r0, #1
1a006c1a:	e60b      	b.n	1a006834 <_malloc_r+0x80>
1a006c1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
1a006c20:	e6fb      	b.n	1a006a1a <_malloc_r+0x266>
1a006c22:	f8d8 3004 	ldr.w	r3, [r8, #4]
1a006c26:	1092      	asrs	r2, r2, #2
1a006c28:	f04f 0c01 	mov.w	ip, #1
1a006c2c:	fa0c f202 	lsl.w	r2, ip, r2
1a006c30:	4313      	orrs	r3, r2
1a006c32:	f8c8 3004 	str.w	r3, [r8, #4]
1a006c36:	460a      	mov	r2, r1
1a006c38:	e77d      	b.n	1a006b36 <_malloc_r+0x382>
1a006c3a:	2301      	movs	r3, #1
1a006c3c:	f8c9 3004 	str.w	r3, [r9, #4]
1a006c40:	464c      	mov	r4, r9
1a006c42:	2200      	movs	r2, #0
1a006c44:	e72c      	b.n	1a006aa0 <_malloc_r+0x2ec>
1a006c46:	f240 5354 	movw	r3, #1364	; 0x554
1a006c4a:	4298      	cmp	r0, r3
1a006c4c:	d81c      	bhi.n	1a006c88 <_malloc_r+0x4d4>
1a006c4e:	0ca8      	lsrs	r0, r5, #18
1a006c50:	307c      	adds	r0, #124	; 0x7c
1a006c52:	0041      	lsls	r1, r0, #1
1a006c54:	e5ee      	b.n	1a006834 <_malloc_r+0x80>
1a006c56:	3210      	adds	r2, #16
1a006c58:	e6b4      	b.n	1a0069c4 <_malloc_r+0x210>
1a006c5a:	2a54      	cmp	r2, #84	; 0x54
1a006c5c:	d823      	bhi.n	1a006ca6 <_malloc_r+0x4f2>
1a006c5e:	0b1a      	lsrs	r2, r3, #12
1a006c60:	326e      	adds	r2, #110	; 0x6e
1a006c62:	ea4f 0c42 	mov.w	ip, r2, lsl #1
1a006c66:	e754      	b.n	1a006b12 <_malloc_r+0x35e>
1a006c68:	68bc      	ldr	r4, [r7, #8]
1a006c6a:	6862      	ldr	r2, [r4, #4]
1a006c6c:	f022 0203 	bic.w	r2, r2, #3
1a006c70:	e716      	b.n	1a006aa0 <_malloc_r+0x2ec>
1a006c72:	f3cb 000b 	ubfx	r0, fp, #0, #12
1a006c76:	2800      	cmp	r0, #0
1a006c78:	f47f aeb9 	bne.w	1a0069ee <_malloc_r+0x23a>
1a006c7c:	4442      	add	r2, r8
1a006c7e:	68bb      	ldr	r3, [r7, #8]
1a006c80:	f042 0201 	orr.w	r2, r2, #1
1a006c84:	605a      	str	r2, [r3, #4]
1a006c86:	e6fd      	b.n	1a006a84 <_malloc_r+0x2d0>
1a006c88:	21fc      	movs	r1, #252	; 0xfc
1a006c8a:	207e      	movs	r0, #126	; 0x7e
1a006c8c:	e5d2      	b.n	1a006834 <_malloc_r+0x80>
1a006c8e:	2201      	movs	r2, #1
1a006c90:	f04f 0a00 	mov.w	sl, #0
1a006c94:	e6d4      	b.n	1a006a40 <_malloc_r+0x28c>
1a006c96:	f104 0108 	add.w	r1, r4, #8
1a006c9a:	4630      	mov	r0, r6
1a006c9c:	f7ff fa7e 	bl	1a00619c <_free_r>
1a006ca0:	f8da 1000 	ldr.w	r1, [sl]
1a006ca4:	e6ee      	b.n	1a006a84 <_malloc_r+0x2d0>
1a006ca6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a006caa:	d804      	bhi.n	1a006cb6 <_malloc_r+0x502>
1a006cac:	0bda      	lsrs	r2, r3, #15
1a006cae:	3277      	adds	r2, #119	; 0x77
1a006cb0:	ea4f 0c42 	mov.w	ip, r2, lsl #1
1a006cb4:	e72d      	b.n	1a006b12 <_malloc_r+0x35e>
1a006cb6:	f240 5154 	movw	r1, #1364	; 0x554
1a006cba:	428a      	cmp	r2, r1
1a006cbc:	d804      	bhi.n	1a006cc8 <_malloc_r+0x514>
1a006cbe:	0c9a      	lsrs	r2, r3, #18
1a006cc0:	327c      	adds	r2, #124	; 0x7c
1a006cc2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
1a006cc6:	e724      	b.n	1a006b12 <_malloc_r+0x35e>
1a006cc8:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
1a006ccc:	227e      	movs	r2, #126	; 0x7e
1a006cce:	e720      	b.n	1a006b12 <_malloc_r+0x35e>
1a006cd0:	687b      	ldr	r3, [r7, #4]
1a006cd2:	e78b      	b.n	1a006bec <_malloc_r+0x438>
1a006cd4:	10000558 	.word	0x10000558

1a006cd8 <memchr>:
1a006cd8:	0783      	lsls	r3, r0, #30
1a006cda:	b470      	push	{r4, r5, r6}
1a006cdc:	b2c9      	uxtb	r1, r1
1a006cde:	d040      	beq.n	1a006d62 <memchr+0x8a>
1a006ce0:	1e54      	subs	r4, r2, #1
1a006ce2:	2a00      	cmp	r2, #0
1a006ce4:	d03f      	beq.n	1a006d66 <memchr+0x8e>
1a006ce6:	7803      	ldrb	r3, [r0, #0]
1a006ce8:	428b      	cmp	r3, r1
1a006cea:	bf18      	it	ne
1a006cec:	1c43      	addne	r3, r0, #1
1a006cee:	d106      	bne.n	1a006cfe <memchr+0x26>
1a006cf0:	e01d      	b.n	1a006d2e <memchr+0x56>
1a006cf2:	b1f4      	cbz	r4, 1a006d32 <memchr+0x5a>
1a006cf4:	7802      	ldrb	r2, [r0, #0]
1a006cf6:	428a      	cmp	r2, r1
1a006cf8:	f104 34ff 	add.w	r4, r4, #4294967295
1a006cfc:	d017      	beq.n	1a006d2e <memchr+0x56>
1a006cfe:	f013 0f03 	tst.w	r3, #3
1a006d02:	4618      	mov	r0, r3
1a006d04:	f103 0301 	add.w	r3, r3, #1
1a006d08:	d1f3      	bne.n	1a006cf2 <memchr+0x1a>
1a006d0a:	2c03      	cmp	r4, #3
1a006d0c:	d814      	bhi.n	1a006d38 <memchr+0x60>
1a006d0e:	b184      	cbz	r4, 1a006d32 <memchr+0x5a>
1a006d10:	7803      	ldrb	r3, [r0, #0]
1a006d12:	428b      	cmp	r3, r1
1a006d14:	d00b      	beq.n	1a006d2e <memchr+0x56>
1a006d16:	1905      	adds	r5, r0, r4
1a006d18:	1c43      	adds	r3, r0, #1
1a006d1a:	e002      	b.n	1a006d22 <memchr+0x4a>
1a006d1c:	7802      	ldrb	r2, [r0, #0]
1a006d1e:	428a      	cmp	r2, r1
1a006d20:	d005      	beq.n	1a006d2e <memchr+0x56>
1a006d22:	42ab      	cmp	r3, r5
1a006d24:	4618      	mov	r0, r3
1a006d26:	f103 0301 	add.w	r3, r3, #1
1a006d2a:	d1f7      	bne.n	1a006d1c <memchr+0x44>
1a006d2c:	2000      	movs	r0, #0
1a006d2e:	bc70      	pop	{r4, r5, r6}
1a006d30:	4770      	bx	lr
1a006d32:	4620      	mov	r0, r4
1a006d34:	bc70      	pop	{r4, r5, r6}
1a006d36:	4770      	bx	lr
1a006d38:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
1a006d3c:	4602      	mov	r2, r0
1a006d3e:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
1a006d42:	4610      	mov	r0, r2
1a006d44:	3204      	adds	r2, #4
1a006d46:	6803      	ldr	r3, [r0, #0]
1a006d48:	4073      	eors	r3, r6
1a006d4a:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
1a006d4e:	ea25 0303 	bic.w	r3, r5, r3
1a006d52:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
1a006d56:	d1da      	bne.n	1a006d0e <memchr+0x36>
1a006d58:	3c04      	subs	r4, #4
1a006d5a:	2c03      	cmp	r4, #3
1a006d5c:	4610      	mov	r0, r2
1a006d5e:	d8f0      	bhi.n	1a006d42 <memchr+0x6a>
1a006d60:	e7d5      	b.n	1a006d0e <memchr+0x36>
1a006d62:	4614      	mov	r4, r2
1a006d64:	e7d1      	b.n	1a006d0a <memchr+0x32>
1a006d66:	4610      	mov	r0, r2
1a006d68:	e7e1      	b.n	1a006d2e <memchr+0x56>
1a006d6a:	bf00      	nop

1a006d6c <memmove>:
1a006d6c:	4288      	cmp	r0, r1
1a006d6e:	b5f0      	push	{r4, r5, r6, r7, lr}
1a006d70:	d90d      	bls.n	1a006d8e <memmove+0x22>
1a006d72:	188b      	adds	r3, r1, r2
1a006d74:	4298      	cmp	r0, r3
1a006d76:	d20a      	bcs.n	1a006d8e <memmove+0x22>
1a006d78:	1881      	adds	r1, r0, r2
1a006d7a:	2a00      	cmp	r2, #0
1a006d7c:	d054      	beq.n	1a006e28 <memmove+0xbc>
1a006d7e:	1a9a      	subs	r2, r3, r2
1a006d80:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a006d84:	f801 4d01 	strb.w	r4, [r1, #-1]!
1a006d88:	4293      	cmp	r3, r2
1a006d8a:	d1f9      	bne.n	1a006d80 <memmove+0x14>
1a006d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a006d8e:	2a0f      	cmp	r2, #15
1a006d90:	d948      	bls.n	1a006e24 <memmove+0xb8>
1a006d92:	ea40 0301 	orr.w	r3, r0, r1
1a006d96:	079b      	lsls	r3, r3, #30
1a006d98:	d147      	bne.n	1a006e2a <memmove+0xbe>
1a006d9a:	f100 0410 	add.w	r4, r0, #16
1a006d9e:	f101 0310 	add.w	r3, r1, #16
1a006da2:	4615      	mov	r5, r2
1a006da4:	f853 6c10 	ldr.w	r6, [r3, #-16]
1a006da8:	f844 6c10 	str.w	r6, [r4, #-16]
1a006dac:	f853 6c0c 	ldr.w	r6, [r3, #-12]
1a006db0:	f844 6c0c 	str.w	r6, [r4, #-12]
1a006db4:	f853 6c08 	ldr.w	r6, [r3, #-8]
1a006db8:	f844 6c08 	str.w	r6, [r4, #-8]
1a006dbc:	3d10      	subs	r5, #16
1a006dbe:	f853 6c04 	ldr.w	r6, [r3, #-4]
1a006dc2:	f844 6c04 	str.w	r6, [r4, #-4]
1a006dc6:	2d0f      	cmp	r5, #15
1a006dc8:	f103 0310 	add.w	r3, r3, #16
1a006dcc:	f104 0410 	add.w	r4, r4, #16
1a006dd0:	d8e8      	bhi.n	1a006da4 <memmove+0x38>
1a006dd2:	f1a2 0310 	sub.w	r3, r2, #16
1a006dd6:	f023 030f 	bic.w	r3, r3, #15
1a006dda:	f002 0e0f 	and.w	lr, r2, #15
1a006dde:	3310      	adds	r3, #16
1a006de0:	f1be 0f03 	cmp.w	lr, #3
1a006de4:	4419      	add	r1, r3
1a006de6:	4403      	add	r3, r0
1a006de8:	d921      	bls.n	1a006e2e <memmove+0xc2>
1a006dea:	1f1e      	subs	r6, r3, #4
1a006dec:	460d      	mov	r5, r1
1a006dee:	4674      	mov	r4, lr
1a006df0:	3c04      	subs	r4, #4
1a006df2:	f855 7b04 	ldr.w	r7, [r5], #4
1a006df6:	f846 7f04 	str.w	r7, [r6, #4]!
1a006dfa:	2c03      	cmp	r4, #3
1a006dfc:	d8f8      	bhi.n	1a006df0 <memmove+0x84>
1a006dfe:	f1ae 0404 	sub.w	r4, lr, #4
1a006e02:	f024 0403 	bic.w	r4, r4, #3
1a006e06:	3404      	adds	r4, #4
1a006e08:	4423      	add	r3, r4
1a006e0a:	4421      	add	r1, r4
1a006e0c:	f002 0203 	and.w	r2, r2, #3
1a006e10:	b152      	cbz	r2, 1a006e28 <memmove+0xbc>
1a006e12:	3b01      	subs	r3, #1
1a006e14:	440a      	add	r2, r1
1a006e16:	f811 4b01 	ldrb.w	r4, [r1], #1
1a006e1a:	f803 4f01 	strb.w	r4, [r3, #1]!
1a006e1e:	4291      	cmp	r1, r2
1a006e20:	d1f9      	bne.n	1a006e16 <memmove+0xaa>
1a006e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a006e24:	4603      	mov	r3, r0
1a006e26:	e7f3      	b.n	1a006e10 <memmove+0xa4>
1a006e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a006e2a:	4603      	mov	r3, r0
1a006e2c:	e7f1      	b.n	1a006e12 <memmove+0xa6>
1a006e2e:	4672      	mov	r2, lr
1a006e30:	e7ee      	b.n	1a006e10 <memmove+0xa4>
1a006e32:	bf00      	nop

1a006e34 <__malloc_lock>:
1a006e34:	4770      	bx	lr
1a006e36:	bf00      	nop

1a006e38 <__malloc_unlock>:
1a006e38:	4770      	bx	lr
1a006e3a:	bf00      	nop

1a006e3c <_Balloc>:
1a006e3c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a006e3e:	b570      	push	{r4, r5, r6, lr}
1a006e40:	4605      	mov	r5, r0
1a006e42:	460c      	mov	r4, r1
1a006e44:	b14b      	cbz	r3, 1a006e5a <_Balloc+0x1e>
1a006e46:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1a006e4a:	b180      	cbz	r0, 1a006e6e <_Balloc+0x32>
1a006e4c:	6802      	ldr	r2, [r0, #0]
1a006e4e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
1a006e52:	2300      	movs	r3, #0
1a006e54:	6103      	str	r3, [r0, #16]
1a006e56:	60c3      	str	r3, [r0, #12]
1a006e58:	bd70      	pop	{r4, r5, r6, pc}
1a006e5a:	2104      	movs	r1, #4
1a006e5c:	2221      	movs	r2, #33	; 0x21
1a006e5e:	f000 fde5 	bl	1a007a2c <_calloc_r>
1a006e62:	64e8      	str	r0, [r5, #76]	; 0x4c
1a006e64:	4603      	mov	r3, r0
1a006e66:	2800      	cmp	r0, #0
1a006e68:	d1ed      	bne.n	1a006e46 <_Balloc+0xa>
1a006e6a:	2000      	movs	r0, #0
1a006e6c:	bd70      	pop	{r4, r5, r6, pc}
1a006e6e:	2101      	movs	r1, #1
1a006e70:	fa01 f604 	lsl.w	r6, r1, r4
1a006e74:	1d72      	adds	r2, r6, #5
1a006e76:	4628      	mov	r0, r5
1a006e78:	0092      	lsls	r2, r2, #2
1a006e7a:	f000 fdd7 	bl	1a007a2c <_calloc_r>
1a006e7e:	2800      	cmp	r0, #0
1a006e80:	d0f3      	beq.n	1a006e6a <_Balloc+0x2e>
1a006e82:	6044      	str	r4, [r0, #4]
1a006e84:	6086      	str	r6, [r0, #8]
1a006e86:	e7e4      	b.n	1a006e52 <_Balloc+0x16>

1a006e88 <_Bfree>:
1a006e88:	b131      	cbz	r1, 1a006e98 <_Bfree+0x10>
1a006e8a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a006e8c:	684a      	ldr	r2, [r1, #4]
1a006e8e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
1a006e92:	6008      	str	r0, [r1, #0]
1a006e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
1a006e98:	4770      	bx	lr
1a006e9a:	bf00      	nop

1a006e9c <__multadd>:
1a006e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a006e9e:	690c      	ldr	r4, [r1, #16]
1a006ea0:	b083      	sub	sp, #12
1a006ea2:	460d      	mov	r5, r1
1a006ea4:	4606      	mov	r6, r0
1a006ea6:	f101 0e14 	add.w	lr, r1, #20
1a006eaa:	2700      	movs	r7, #0
1a006eac:	f8de 1000 	ldr.w	r1, [lr]
1a006eb0:	b288      	uxth	r0, r1
1a006eb2:	0c09      	lsrs	r1, r1, #16
1a006eb4:	fb02 3300 	mla	r3, r2, r0, r3
1a006eb8:	fb02 f101 	mul.w	r1, r2, r1
1a006ebc:	eb01 4113 	add.w	r1, r1, r3, lsr #16
1a006ec0:	3701      	adds	r7, #1
1a006ec2:	b29b      	uxth	r3, r3
1a006ec4:	eb03 4301 	add.w	r3, r3, r1, lsl #16
1a006ec8:	42bc      	cmp	r4, r7
1a006eca:	f84e 3b04 	str.w	r3, [lr], #4
1a006ece:	ea4f 4311 	mov.w	r3, r1, lsr #16
1a006ed2:	dceb      	bgt.n	1a006eac <__multadd+0x10>
1a006ed4:	b13b      	cbz	r3, 1a006ee6 <__multadd+0x4a>
1a006ed6:	68aa      	ldr	r2, [r5, #8]
1a006ed8:	4294      	cmp	r4, r2
1a006eda:	da07      	bge.n	1a006eec <__multadd+0x50>
1a006edc:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a006ee0:	3401      	adds	r4, #1
1a006ee2:	6153      	str	r3, [r2, #20]
1a006ee4:	612c      	str	r4, [r5, #16]
1a006ee6:	4628      	mov	r0, r5
1a006ee8:	b003      	add	sp, #12
1a006eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a006eec:	6869      	ldr	r1, [r5, #4]
1a006eee:	9301      	str	r3, [sp, #4]
1a006ef0:	3101      	adds	r1, #1
1a006ef2:	4630      	mov	r0, r6
1a006ef4:	f7ff ffa2 	bl	1a006e3c <_Balloc>
1a006ef8:	692a      	ldr	r2, [r5, #16]
1a006efa:	3202      	adds	r2, #2
1a006efc:	f105 010c 	add.w	r1, r5, #12
1a006f00:	4607      	mov	r7, r0
1a006f02:	0092      	lsls	r2, r2, #2
1a006f04:	300c      	adds	r0, #12
1a006f06:	f7fc fbb5 	bl	1a003674 <memcpy>
1a006f0a:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
1a006f0c:	6869      	ldr	r1, [r5, #4]
1a006f0e:	9b01      	ldr	r3, [sp, #4]
1a006f10:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
1a006f14:	6028      	str	r0, [r5, #0]
1a006f16:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
1a006f1a:	463d      	mov	r5, r7
1a006f1c:	e7de      	b.n	1a006edc <__multadd+0x40>
1a006f1e:	bf00      	nop

1a006f20 <__hi0bits>:
1a006f20:	0c03      	lsrs	r3, r0, #16
1a006f22:	041b      	lsls	r3, r3, #16
1a006f24:	b9b3      	cbnz	r3, 1a006f54 <__hi0bits+0x34>
1a006f26:	0400      	lsls	r0, r0, #16
1a006f28:	2310      	movs	r3, #16
1a006f2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
1a006f2e:	bf04      	itt	eq
1a006f30:	0200      	lsleq	r0, r0, #8
1a006f32:	3308      	addeq	r3, #8
1a006f34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
1a006f38:	bf04      	itt	eq
1a006f3a:	0100      	lsleq	r0, r0, #4
1a006f3c:	3304      	addeq	r3, #4
1a006f3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
1a006f42:	bf04      	itt	eq
1a006f44:	0080      	lsleq	r0, r0, #2
1a006f46:	3302      	addeq	r3, #2
1a006f48:	2800      	cmp	r0, #0
1a006f4a:	db07      	blt.n	1a006f5c <__hi0bits+0x3c>
1a006f4c:	0042      	lsls	r2, r0, #1
1a006f4e:	d403      	bmi.n	1a006f58 <__hi0bits+0x38>
1a006f50:	2020      	movs	r0, #32
1a006f52:	4770      	bx	lr
1a006f54:	2300      	movs	r3, #0
1a006f56:	e7e8      	b.n	1a006f2a <__hi0bits+0xa>
1a006f58:	1c58      	adds	r0, r3, #1
1a006f5a:	4770      	bx	lr
1a006f5c:	4618      	mov	r0, r3
1a006f5e:	4770      	bx	lr

1a006f60 <__lo0bits>:
1a006f60:	6803      	ldr	r3, [r0, #0]
1a006f62:	f013 0207 	ands.w	r2, r3, #7
1a006f66:	d007      	beq.n	1a006f78 <__lo0bits+0x18>
1a006f68:	07d9      	lsls	r1, r3, #31
1a006f6a:	d420      	bmi.n	1a006fae <__lo0bits+0x4e>
1a006f6c:	079a      	lsls	r2, r3, #30
1a006f6e:	d420      	bmi.n	1a006fb2 <__lo0bits+0x52>
1a006f70:	089b      	lsrs	r3, r3, #2
1a006f72:	6003      	str	r3, [r0, #0]
1a006f74:	2002      	movs	r0, #2
1a006f76:	4770      	bx	lr
1a006f78:	b299      	uxth	r1, r3
1a006f7a:	b909      	cbnz	r1, 1a006f80 <__lo0bits+0x20>
1a006f7c:	0c1b      	lsrs	r3, r3, #16
1a006f7e:	2210      	movs	r2, #16
1a006f80:	f013 0fff 	tst.w	r3, #255	; 0xff
1a006f84:	bf04      	itt	eq
1a006f86:	0a1b      	lsreq	r3, r3, #8
1a006f88:	3208      	addeq	r2, #8
1a006f8a:	0719      	lsls	r1, r3, #28
1a006f8c:	bf04      	itt	eq
1a006f8e:	091b      	lsreq	r3, r3, #4
1a006f90:	3204      	addeq	r2, #4
1a006f92:	0799      	lsls	r1, r3, #30
1a006f94:	bf04      	itt	eq
1a006f96:	089b      	lsreq	r3, r3, #2
1a006f98:	3202      	addeq	r2, #2
1a006f9a:	07d9      	lsls	r1, r3, #31
1a006f9c:	d404      	bmi.n	1a006fa8 <__lo0bits+0x48>
1a006f9e:	085b      	lsrs	r3, r3, #1
1a006fa0:	d101      	bne.n	1a006fa6 <__lo0bits+0x46>
1a006fa2:	2020      	movs	r0, #32
1a006fa4:	4770      	bx	lr
1a006fa6:	3201      	adds	r2, #1
1a006fa8:	6003      	str	r3, [r0, #0]
1a006faa:	4610      	mov	r0, r2
1a006fac:	4770      	bx	lr
1a006fae:	2000      	movs	r0, #0
1a006fb0:	4770      	bx	lr
1a006fb2:	085b      	lsrs	r3, r3, #1
1a006fb4:	6003      	str	r3, [r0, #0]
1a006fb6:	2001      	movs	r0, #1
1a006fb8:	4770      	bx	lr
1a006fba:	bf00      	nop

1a006fbc <__i2b>:
1a006fbc:	b510      	push	{r4, lr}
1a006fbe:	460c      	mov	r4, r1
1a006fc0:	2101      	movs	r1, #1
1a006fc2:	f7ff ff3b 	bl	1a006e3c <_Balloc>
1a006fc6:	2201      	movs	r2, #1
1a006fc8:	6144      	str	r4, [r0, #20]
1a006fca:	6102      	str	r2, [r0, #16]
1a006fcc:	bd10      	pop	{r4, pc}
1a006fce:	bf00      	nop

1a006fd0 <__multiply>:
1a006fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006fd4:	690f      	ldr	r7, [r1, #16]
1a006fd6:	6916      	ldr	r6, [r2, #16]
1a006fd8:	42b7      	cmp	r7, r6
1a006fda:	b083      	sub	sp, #12
1a006fdc:	460d      	mov	r5, r1
1a006fde:	4614      	mov	r4, r2
1a006fe0:	f2c0 808d 	blt.w	1a0070fe <__multiply+0x12e>
1a006fe4:	4633      	mov	r3, r6
1a006fe6:	463e      	mov	r6, r7
1a006fe8:	461f      	mov	r7, r3
1a006fea:	68ab      	ldr	r3, [r5, #8]
1a006fec:	6869      	ldr	r1, [r5, #4]
1a006fee:	eb06 0807 	add.w	r8, r6, r7
1a006ff2:	4598      	cmp	r8, r3
1a006ff4:	bfc8      	it	gt
1a006ff6:	3101      	addgt	r1, #1
1a006ff8:	f7ff ff20 	bl	1a006e3c <_Balloc>
1a006ffc:	f100 0c14 	add.w	ip, r0, #20
1a007000:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
1a007004:	45cc      	cmp	ip, r9
1a007006:	9000      	str	r0, [sp, #0]
1a007008:	d205      	bcs.n	1a007016 <__multiply+0x46>
1a00700a:	4663      	mov	r3, ip
1a00700c:	2100      	movs	r1, #0
1a00700e:	f843 1b04 	str.w	r1, [r3], #4
1a007012:	4599      	cmp	r9, r3
1a007014:	d8fb      	bhi.n	1a00700e <__multiply+0x3e>
1a007016:	f104 0214 	add.w	r2, r4, #20
1a00701a:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
1a00701e:	f105 0314 	add.w	r3, r5, #20
1a007022:	4552      	cmp	r2, sl
1a007024:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
1a007028:	d254      	bcs.n	1a0070d4 <__multiply+0x104>
1a00702a:	f8cd 9004 	str.w	r9, [sp, #4]
1a00702e:	4699      	mov	r9, r3
1a007030:	f852 3b04 	ldr.w	r3, [r2], #4
1a007034:	fa1f fb83 	uxth.w	fp, r3
1a007038:	f1bb 0f00 	cmp.w	fp, #0
1a00703c:	d020      	beq.n	1a007080 <__multiply+0xb0>
1a00703e:	2000      	movs	r0, #0
1a007040:	464f      	mov	r7, r9
1a007042:	4666      	mov	r6, ip
1a007044:	4605      	mov	r5, r0
1a007046:	e000      	b.n	1a00704a <__multiply+0x7a>
1a007048:	461e      	mov	r6, r3
1a00704a:	f857 4b04 	ldr.w	r4, [r7], #4
1a00704e:	6830      	ldr	r0, [r6, #0]
1a007050:	b2a1      	uxth	r1, r4
1a007052:	b283      	uxth	r3, r0
1a007054:	fb0b 3101 	mla	r1, fp, r1, r3
1a007058:	0c24      	lsrs	r4, r4, #16
1a00705a:	0c00      	lsrs	r0, r0, #16
1a00705c:	194b      	adds	r3, r1, r5
1a00705e:	fb0b 0004 	mla	r0, fp, r4, r0
1a007062:	eb00 4013 	add.w	r0, r0, r3, lsr #16
1a007066:	b299      	uxth	r1, r3
1a007068:	4633      	mov	r3, r6
1a00706a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
1a00706e:	45be      	cmp	lr, r7
1a007070:	ea4f 4510 	mov.w	r5, r0, lsr #16
1a007074:	f843 1b04 	str.w	r1, [r3], #4
1a007078:	d8e6      	bhi.n	1a007048 <__multiply+0x78>
1a00707a:	6075      	str	r5, [r6, #4]
1a00707c:	f852 3c04 	ldr.w	r3, [r2, #-4]
1a007080:	ea5f 4b13 	movs.w	fp, r3, lsr #16
1a007084:	d020      	beq.n	1a0070c8 <__multiply+0xf8>
1a007086:	f8dc 3000 	ldr.w	r3, [ip]
1a00708a:	4667      	mov	r7, ip
1a00708c:	4618      	mov	r0, r3
1a00708e:	464d      	mov	r5, r9
1a007090:	2100      	movs	r1, #0
1a007092:	e000      	b.n	1a007096 <__multiply+0xc6>
1a007094:	4637      	mov	r7, r6
1a007096:	882c      	ldrh	r4, [r5, #0]
1a007098:	0c00      	lsrs	r0, r0, #16
1a00709a:	fb0b 0004 	mla	r0, fp, r4, r0
1a00709e:	4401      	add	r1, r0
1a0070a0:	b29c      	uxth	r4, r3
1a0070a2:	463e      	mov	r6, r7
1a0070a4:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
1a0070a8:	f846 3b04 	str.w	r3, [r6], #4
1a0070ac:	6878      	ldr	r0, [r7, #4]
1a0070ae:	f855 4b04 	ldr.w	r4, [r5], #4
1a0070b2:	b283      	uxth	r3, r0
1a0070b4:	0c24      	lsrs	r4, r4, #16
1a0070b6:	fb0b 3404 	mla	r4, fp, r4, r3
1a0070ba:	eb04 4311 	add.w	r3, r4, r1, lsr #16
1a0070be:	45ae      	cmp	lr, r5
1a0070c0:	ea4f 4113 	mov.w	r1, r3, lsr #16
1a0070c4:	d8e6      	bhi.n	1a007094 <__multiply+0xc4>
1a0070c6:	607b      	str	r3, [r7, #4]
1a0070c8:	4592      	cmp	sl, r2
1a0070ca:	f10c 0c04 	add.w	ip, ip, #4
1a0070ce:	d8af      	bhi.n	1a007030 <__multiply+0x60>
1a0070d0:	f8dd 9004 	ldr.w	r9, [sp, #4]
1a0070d4:	f1b8 0f00 	cmp.w	r8, #0
1a0070d8:	dd0b      	ble.n	1a0070f2 <__multiply+0x122>
1a0070da:	f859 3c04 	ldr.w	r3, [r9, #-4]
1a0070de:	f1a9 0904 	sub.w	r9, r9, #4
1a0070e2:	b11b      	cbz	r3, 1a0070ec <__multiply+0x11c>
1a0070e4:	e005      	b.n	1a0070f2 <__multiply+0x122>
1a0070e6:	f859 3d04 	ldr.w	r3, [r9, #-4]!
1a0070ea:	b913      	cbnz	r3, 1a0070f2 <__multiply+0x122>
1a0070ec:	f1b8 0801 	subs.w	r8, r8, #1
1a0070f0:	d1f9      	bne.n	1a0070e6 <__multiply+0x116>
1a0070f2:	9800      	ldr	r0, [sp, #0]
1a0070f4:	f8c0 8010 	str.w	r8, [r0, #16]
1a0070f8:	b003      	add	sp, #12
1a0070fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0070fe:	4615      	mov	r5, r2
1a007100:	460c      	mov	r4, r1
1a007102:	e772      	b.n	1a006fea <__multiply+0x1a>

1a007104 <__pow5mult>:
1a007104:	f012 0303 	ands.w	r3, r2, #3
1a007108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00710c:	4614      	mov	r4, r2
1a00710e:	4607      	mov	r7, r0
1a007110:	460e      	mov	r6, r1
1a007112:	d12d      	bne.n	1a007170 <__pow5mult+0x6c>
1a007114:	10a4      	asrs	r4, r4, #2
1a007116:	d01c      	beq.n	1a007152 <__pow5mult+0x4e>
1a007118:	6cbd      	ldr	r5, [r7, #72]	; 0x48
1a00711a:	b395      	cbz	r5, 1a007182 <__pow5mult+0x7e>
1a00711c:	07e3      	lsls	r3, r4, #31
1a00711e:	f04f 0800 	mov.w	r8, #0
1a007122:	d406      	bmi.n	1a007132 <__pow5mult+0x2e>
1a007124:	1064      	asrs	r4, r4, #1
1a007126:	d014      	beq.n	1a007152 <__pow5mult+0x4e>
1a007128:	6828      	ldr	r0, [r5, #0]
1a00712a:	b1a8      	cbz	r0, 1a007158 <__pow5mult+0x54>
1a00712c:	4605      	mov	r5, r0
1a00712e:	07e3      	lsls	r3, r4, #31
1a007130:	d5f8      	bpl.n	1a007124 <__pow5mult+0x20>
1a007132:	4638      	mov	r0, r7
1a007134:	4631      	mov	r1, r6
1a007136:	462a      	mov	r2, r5
1a007138:	f7ff ff4a 	bl	1a006fd0 <__multiply>
1a00713c:	b1b6      	cbz	r6, 1a00716c <__pow5mult+0x68>
1a00713e:	6872      	ldr	r2, [r6, #4]
1a007140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a007142:	1064      	asrs	r4, r4, #1
1a007144:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a007148:	6031      	str	r1, [r6, #0]
1a00714a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
1a00714e:	4606      	mov	r6, r0
1a007150:	d1ea      	bne.n	1a007128 <__pow5mult+0x24>
1a007152:	4630      	mov	r0, r6
1a007154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a007158:	4629      	mov	r1, r5
1a00715a:	462a      	mov	r2, r5
1a00715c:	4638      	mov	r0, r7
1a00715e:	f7ff ff37 	bl	1a006fd0 <__multiply>
1a007162:	6028      	str	r0, [r5, #0]
1a007164:	f8c0 8000 	str.w	r8, [r0]
1a007168:	4605      	mov	r5, r0
1a00716a:	e7e0      	b.n	1a00712e <__pow5mult+0x2a>
1a00716c:	4606      	mov	r6, r0
1a00716e:	e7d9      	b.n	1a007124 <__pow5mult+0x20>
1a007170:	1e5a      	subs	r2, r3, #1
1a007172:	4d0b      	ldr	r5, [pc, #44]	; (1a0071a0 <__pow5mult+0x9c>)
1a007174:	2300      	movs	r3, #0
1a007176:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
1a00717a:	f7ff fe8f 	bl	1a006e9c <__multadd>
1a00717e:	4606      	mov	r6, r0
1a007180:	e7c8      	b.n	1a007114 <__pow5mult+0x10>
1a007182:	2101      	movs	r1, #1
1a007184:	4638      	mov	r0, r7
1a007186:	f7ff fe59 	bl	1a006e3c <_Balloc>
1a00718a:	f240 2171 	movw	r1, #625	; 0x271
1a00718e:	2201      	movs	r2, #1
1a007190:	2300      	movs	r3, #0
1a007192:	6141      	str	r1, [r0, #20]
1a007194:	6102      	str	r2, [r0, #16]
1a007196:	4605      	mov	r5, r0
1a007198:	64b8      	str	r0, [r7, #72]	; 0x48
1a00719a:	6003      	str	r3, [r0, #0]
1a00719c:	e7be      	b.n	1a00711c <__pow5mult+0x18>
1a00719e:	bf00      	nop
1a0071a0:	1a008320 	.word	0x1a008320

1a0071a4 <__lshift>:
1a0071a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0071a8:	690f      	ldr	r7, [r1, #16]
1a0071aa:	688b      	ldr	r3, [r1, #8]
1a0071ac:	ea4f 1962 	mov.w	r9, r2, asr #5
1a0071b0:	444f      	add	r7, r9
1a0071b2:	1c7d      	adds	r5, r7, #1
1a0071b4:	429d      	cmp	r5, r3
1a0071b6:	460e      	mov	r6, r1
1a0071b8:	4614      	mov	r4, r2
1a0071ba:	6849      	ldr	r1, [r1, #4]
1a0071bc:	4680      	mov	r8, r0
1a0071be:	dd04      	ble.n	1a0071ca <__lshift+0x26>
1a0071c0:	005b      	lsls	r3, r3, #1
1a0071c2:	429d      	cmp	r5, r3
1a0071c4:	f101 0101 	add.w	r1, r1, #1
1a0071c8:	dcfa      	bgt.n	1a0071c0 <__lshift+0x1c>
1a0071ca:	4640      	mov	r0, r8
1a0071cc:	f7ff fe36 	bl	1a006e3c <_Balloc>
1a0071d0:	f1b9 0f00 	cmp.w	r9, #0
1a0071d4:	f100 0114 	add.w	r1, r0, #20
1a0071d8:	dd09      	ble.n	1a0071ee <__lshift+0x4a>
1a0071da:	2300      	movs	r3, #0
1a0071dc:	469e      	mov	lr, r3
1a0071de:	460a      	mov	r2, r1
1a0071e0:	3301      	adds	r3, #1
1a0071e2:	454b      	cmp	r3, r9
1a0071e4:	f842 eb04 	str.w	lr, [r2], #4
1a0071e8:	d1fa      	bne.n	1a0071e0 <__lshift+0x3c>
1a0071ea:	eb01 0183 	add.w	r1, r1, r3, lsl #2
1a0071ee:	6932      	ldr	r2, [r6, #16]
1a0071f0:	f106 0314 	add.w	r3, r6, #20
1a0071f4:	f014 0c1f 	ands.w	ip, r4, #31
1a0071f8:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
1a0071fc:	d01f      	beq.n	1a00723e <__lshift+0x9a>
1a0071fe:	f1cc 0920 	rsb	r9, ip, #32
1a007202:	2200      	movs	r2, #0
1a007204:	681c      	ldr	r4, [r3, #0]
1a007206:	fa04 f40c 	lsl.w	r4, r4, ip
1a00720a:	4314      	orrs	r4, r2
1a00720c:	468a      	mov	sl, r1
1a00720e:	f841 4b04 	str.w	r4, [r1], #4
1a007212:	f853 4b04 	ldr.w	r4, [r3], #4
1a007216:	459e      	cmp	lr, r3
1a007218:	fa24 f209 	lsr.w	r2, r4, r9
1a00721c:	d8f2      	bhi.n	1a007204 <__lshift+0x60>
1a00721e:	f8ca 2004 	str.w	r2, [sl, #4]
1a007222:	b102      	cbz	r2, 1a007226 <__lshift+0x82>
1a007224:	1cbd      	adds	r5, r7, #2
1a007226:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
1a00722a:	6872      	ldr	r2, [r6, #4]
1a00722c:	3d01      	subs	r5, #1
1a00722e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a007232:	6105      	str	r5, [r0, #16]
1a007234:	6031      	str	r1, [r6, #0]
1a007236:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
1a00723a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00723e:	3904      	subs	r1, #4
1a007240:	f853 2b04 	ldr.w	r2, [r3], #4
1a007244:	f841 2f04 	str.w	r2, [r1, #4]!
1a007248:	459e      	cmp	lr, r3
1a00724a:	d8f9      	bhi.n	1a007240 <__lshift+0x9c>
1a00724c:	e7eb      	b.n	1a007226 <__lshift+0x82>
1a00724e:	bf00      	nop

1a007250 <__mcmp>:
1a007250:	6902      	ldr	r2, [r0, #16]
1a007252:	690b      	ldr	r3, [r1, #16]
1a007254:	1ad2      	subs	r2, r2, r3
1a007256:	d113      	bne.n	1a007280 <__mcmp+0x30>
1a007258:	009b      	lsls	r3, r3, #2
1a00725a:	3014      	adds	r0, #20
1a00725c:	3114      	adds	r1, #20
1a00725e:	4419      	add	r1, r3
1a007260:	b410      	push	{r4}
1a007262:	4403      	add	r3, r0
1a007264:	e001      	b.n	1a00726a <__mcmp+0x1a>
1a007266:	4298      	cmp	r0, r3
1a007268:	d20c      	bcs.n	1a007284 <__mcmp+0x34>
1a00726a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
1a00726e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a007272:	4294      	cmp	r4, r2
1a007274:	d0f7      	beq.n	1a007266 <__mcmp+0x16>
1a007276:	d309      	bcc.n	1a00728c <__mcmp+0x3c>
1a007278:	2001      	movs	r0, #1
1a00727a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00727e:	4770      	bx	lr
1a007280:	4610      	mov	r0, r2
1a007282:	4770      	bx	lr
1a007284:	2000      	movs	r0, #0
1a007286:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00728a:	4770      	bx	lr
1a00728c:	f04f 30ff 	mov.w	r0, #4294967295
1a007290:	f85d 4b04 	ldr.w	r4, [sp], #4
1a007294:	4770      	bx	lr
1a007296:	bf00      	nop

1a007298 <__mdiff>:
1a007298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00729c:	460e      	mov	r6, r1
1a00729e:	4605      	mov	r5, r0
1a0072a0:	4611      	mov	r1, r2
1a0072a2:	4630      	mov	r0, r6
1a0072a4:	4614      	mov	r4, r2
1a0072a6:	f7ff ffd3 	bl	1a007250 <__mcmp>
1a0072aa:	1e07      	subs	r7, r0, #0
1a0072ac:	d054      	beq.n	1a007358 <__mdiff+0xc0>
1a0072ae:	db4d      	blt.n	1a00734c <__mdiff+0xb4>
1a0072b0:	f04f 0800 	mov.w	r8, #0
1a0072b4:	6871      	ldr	r1, [r6, #4]
1a0072b6:	4628      	mov	r0, r5
1a0072b8:	f7ff fdc0 	bl	1a006e3c <_Balloc>
1a0072bc:	6937      	ldr	r7, [r6, #16]
1a0072be:	6923      	ldr	r3, [r4, #16]
1a0072c0:	f8c0 800c 	str.w	r8, [r0, #12]
1a0072c4:	3614      	adds	r6, #20
1a0072c6:	f104 0214 	add.w	r2, r4, #20
1a0072ca:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
1a0072ce:	f100 0514 	add.w	r5, r0, #20
1a0072d2:	eb06 0e87 	add.w	lr, r6, r7, lsl #2
1a0072d6:	2300      	movs	r3, #0
1a0072d8:	f856 8b04 	ldr.w	r8, [r6], #4
1a0072dc:	f852 4b04 	ldr.w	r4, [r2], #4
1a0072e0:	fa13 f388 	uxtah	r3, r3, r8
1a0072e4:	b2a1      	uxth	r1, r4
1a0072e6:	0c24      	lsrs	r4, r4, #16
1a0072e8:	1a59      	subs	r1, r3, r1
1a0072ea:	ebc4 4318 	rsb	r3, r4, r8, lsr #16
1a0072ee:	eb03 4321 	add.w	r3, r3, r1, asr #16
1a0072f2:	b289      	uxth	r1, r1
1a0072f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0072f8:	4594      	cmp	ip, r2
1a0072fa:	f845 1b04 	str.w	r1, [r5], #4
1a0072fe:	ea4f 4323 	mov.w	r3, r3, asr #16
1a007302:	4634      	mov	r4, r6
1a007304:	d8e8      	bhi.n	1a0072d8 <__mdiff+0x40>
1a007306:	45b6      	cmp	lr, r6
1a007308:	46ac      	mov	ip, r5
1a00730a:	d915      	bls.n	1a007338 <__mdiff+0xa0>
1a00730c:	f854 2b04 	ldr.w	r2, [r4], #4
1a007310:	fa13 f182 	uxtah	r1, r3, r2
1a007314:	0c13      	lsrs	r3, r2, #16
1a007316:	eb03 4321 	add.w	r3, r3, r1, asr #16
1a00731a:	b289      	uxth	r1, r1
1a00731c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a007320:	45a6      	cmp	lr, r4
1a007322:	f845 1b04 	str.w	r1, [r5], #4
1a007326:	ea4f 4323 	mov.w	r3, r3, asr #16
1a00732a:	d8ef      	bhi.n	1a00730c <__mdiff+0x74>
1a00732c:	43f6      	mvns	r6, r6
1a00732e:	4476      	add	r6, lr
1a007330:	f026 0503 	bic.w	r5, r6, #3
1a007334:	3504      	adds	r5, #4
1a007336:	4465      	add	r5, ip
1a007338:	3d04      	subs	r5, #4
1a00733a:	b921      	cbnz	r1, 1a007346 <__mdiff+0xae>
1a00733c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
1a007340:	3f01      	subs	r7, #1
1a007342:	2b00      	cmp	r3, #0
1a007344:	d0fa      	beq.n	1a00733c <__mdiff+0xa4>
1a007346:	6107      	str	r7, [r0, #16]
1a007348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00734c:	4633      	mov	r3, r6
1a00734e:	f04f 0801 	mov.w	r8, #1
1a007352:	4626      	mov	r6, r4
1a007354:	461c      	mov	r4, r3
1a007356:	e7ad      	b.n	1a0072b4 <__mdiff+0x1c>
1a007358:	4628      	mov	r0, r5
1a00735a:	4639      	mov	r1, r7
1a00735c:	f7ff fd6e 	bl	1a006e3c <_Balloc>
1a007360:	2301      	movs	r3, #1
1a007362:	6147      	str	r7, [r0, #20]
1a007364:	6103      	str	r3, [r0, #16]
1a007366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00736a:	bf00      	nop

1a00736c <__d2b>:
1a00736c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a007370:	ec57 6b10 	vmov	r6, r7, d0
1a007374:	b083      	sub	sp, #12
1a007376:	4688      	mov	r8, r1
1a007378:	2101      	movs	r1, #1
1a00737a:	463c      	mov	r4, r7
1a00737c:	f3c7 550a 	ubfx	r5, r7, #20, #11
1a007380:	4617      	mov	r7, r2
1a007382:	f7ff fd5b 	bl	1a006e3c <_Balloc>
1a007386:	f3c4 0413 	ubfx	r4, r4, #0, #20
1a00738a:	4681      	mov	r9, r0
1a00738c:	b10d      	cbz	r5, 1a007392 <__d2b+0x26>
1a00738e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
1a007392:	9401      	str	r4, [sp, #4]
1a007394:	b31e      	cbz	r6, 1a0073de <__d2b+0x72>
1a007396:	a802      	add	r0, sp, #8
1a007398:	f840 6d08 	str.w	r6, [r0, #-8]!
1a00739c:	f7ff fde0 	bl	1a006f60 <__lo0bits>
1a0073a0:	2800      	cmp	r0, #0
1a0073a2:	d134      	bne.n	1a00740e <__d2b+0xa2>
1a0073a4:	e89d 000c 	ldmia.w	sp, {r2, r3}
1a0073a8:	f8c9 2014 	str.w	r2, [r9, #20]
1a0073ac:	2b00      	cmp	r3, #0
1a0073ae:	bf14      	ite	ne
1a0073b0:	2402      	movne	r4, #2
1a0073b2:	2401      	moveq	r4, #1
1a0073b4:	f8c9 3018 	str.w	r3, [r9, #24]
1a0073b8:	f8c9 4010 	str.w	r4, [r9, #16]
1a0073bc:	b9dd      	cbnz	r5, 1a0073f6 <__d2b+0x8a>
1a0073be:	eb09 0384 	add.w	r3, r9, r4, lsl #2
1a0073c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
1a0073c6:	f8c8 0000 	str.w	r0, [r8]
1a0073ca:	6918      	ldr	r0, [r3, #16]
1a0073cc:	f7ff fda8 	bl	1a006f20 <__hi0bits>
1a0073d0:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
1a0073d4:	6038      	str	r0, [r7, #0]
1a0073d6:	4648      	mov	r0, r9
1a0073d8:	b003      	add	sp, #12
1a0073da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0073de:	a801      	add	r0, sp, #4
1a0073e0:	f7ff fdbe 	bl	1a006f60 <__lo0bits>
1a0073e4:	2401      	movs	r4, #1
1a0073e6:	9b01      	ldr	r3, [sp, #4]
1a0073e8:	f8c9 3014 	str.w	r3, [r9, #20]
1a0073ec:	3020      	adds	r0, #32
1a0073ee:	f8c9 4010 	str.w	r4, [r9, #16]
1a0073f2:	2d00      	cmp	r5, #0
1a0073f4:	d0e3      	beq.n	1a0073be <__d2b+0x52>
1a0073f6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
1a0073fa:	4405      	add	r5, r0
1a0073fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
1a007400:	f8c8 5000 	str.w	r5, [r8]
1a007404:	6038      	str	r0, [r7, #0]
1a007406:	4648      	mov	r0, r9
1a007408:	b003      	add	sp, #12
1a00740a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00740e:	e89d 000c 	ldmia.w	sp, {r2, r3}
1a007412:	f1c0 0120 	rsb	r1, r0, #32
1a007416:	fa03 f101 	lsl.w	r1, r3, r1
1a00741a:	430a      	orrs	r2, r1
1a00741c:	40c3      	lsrs	r3, r0
1a00741e:	9301      	str	r3, [sp, #4]
1a007420:	f8c9 2014 	str.w	r2, [r9, #20]
1a007424:	e7c2      	b.n	1a0073ac <__d2b+0x40>
1a007426:	bf00      	nop

1a007428 <_realloc_r>:
1a007428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00742c:	4617      	mov	r7, r2
1a00742e:	b083      	sub	sp, #12
1a007430:	460e      	mov	r6, r1
1a007432:	2900      	cmp	r1, #0
1a007434:	f000 80e7 	beq.w	1a007606 <_realloc_r+0x1de>
1a007438:	4681      	mov	r9, r0
1a00743a:	f107 050b 	add.w	r5, r7, #11
1a00743e:	f7ff fcf9 	bl	1a006e34 <__malloc_lock>
1a007442:	f856 3c04 	ldr.w	r3, [r6, #-4]
1a007446:	2d16      	cmp	r5, #22
1a007448:	f023 0403 	bic.w	r4, r3, #3
1a00744c:	f1a6 0808 	sub.w	r8, r6, #8
1a007450:	d84c      	bhi.n	1a0074ec <_realloc_r+0xc4>
1a007452:	2210      	movs	r2, #16
1a007454:	4615      	mov	r5, r2
1a007456:	42af      	cmp	r7, r5
1a007458:	d84d      	bhi.n	1a0074f6 <_realloc_r+0xce>
1a00745a:	4294      	cmp	r4, r2
1a00745c:	f280 8084 	bge.w	1a007568 <_realloc_r+0x140>
1a007460:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 1a007810 <_realloc_r+0x3e8>
1a007464:	f8db 0008 	ldr.w	r0, [fp, #8]
1a007468:	eb08 0104 	add.w	r1, r8, r4
1a00746c:	4288      	cmp	r0, r1
1a00746e:	f000 80d6 	beq.w	1a00761e <_realloc_r+0x1f6>
1a007472:	6848      	ldr	r0, [r1, #4]
1a007474:	f020 0e01 	bic.w	lr, r0, #1
1a007478:	448e      	add	lr, r1
1a00747a:	f8de e004 	ldr.w	lr, [lr, #4]
1a00747e:	f01e 0f01 	tst.w	lr, #1
1a007482:	d13f      	bne.n	1a007504 <_realloc_r+0xdc>
1a007484:	f020 0003 	bic.w	r0, r0, #3
1a007488:	4420      	add	r0, r4
1a00748a:	4290      	cmp	r0, r2
1a00748c:	f280 80c1 	bge.w	1a007612 <_realloc_r+0x1ea>
1a007490:	07db      	lsls	r3, r3, #31
1a007492:	f100 808f 	bmi.w	1a0075b4 <_realloc_r+0x18c>
1a007496:	f856 3c08 	ldr.w	r3, [r6, #-8]
1a00749a:	ebc3 0a08 	rsb	sl, r3, r8
1a00749e:	f8da 3004 	ldr.w	r3, [sl, #4]
1a0074a2:	f023 0303 	bic.w	r3, r3, #3
1a0074a6:	eb00 0e03 	add.w	lr, r0, r3
1a0074aa:	4596      	cmp	lr, r2
1a0074ac:	db34      	blt.n	1a007518 <_realloc_r+0xf0>
1a0074ae:	68cb      	ldr	r3, [r1, #12]
1a0074b0:	688a      	ldr	r2, [r1, #8]
1a0074b2:	4657      	mov	r7, sl
1a0074b4:	60d3      	str	r3, [r2, #12]
1a0074b6:	609a      	str	r2, [r3, #8]
1a0074b8:	f857 1f08 	ldr.w	r1, [r7, #8]!
1a0074bc:	f8da 300c 	ldr.w	r3, [sl, #12]
1a0074c0:	60cb      	str	r3, [r1, #12]
1a0074c2:	1f22      	subs	r2, r4, #4
1a0074c4:	2a24      	cmp	r2, #36	; 0x24
1a0074c6:	6099      	str	r1, [r3, #8]
1a0074c8:	f200 8136 	bhi.w	1a007738 <_realloc_r+0x310>
1a0074cc:	2a13      	cmp	r2, #19
1a0074ce:	f240 80fd 	bls.w	1a0076cc <_realloc_r+0x2a4>
1a0074d2:	6833      	ldr	r3, [r6, #0]
1a0074d4:	f8ca 3008 	str.w	r3, [sl, #8]
1a0074d8:	6873      	ldr	r3, [r6, #4]
1a0074da:	f8ca 300c 	str.w	r3, [sl, #12]
1a0074de:	2a1b      	cmp	r2, #27
1a0074e0:	f200 8140 	bhi.w	1a007764 <_realloc_r+0x33c>
1a0074e4:	3608      	adds	r6, #8
1a0074e6:	f10a 0310 	add.w	r3, sl, #16
1a0074ea:	e0f0      	b.n	1a0076ce <_realloc_r+0x2a6>
1a0074ec:	f025 0507 	bic.w	r5, r5, #7
1a0074f0:	2d00      	cmp	r5, #0
1a0074f2:	462a      	mov	r2, r5
1a0074f4:	daaf      	bge.n	1a007456 <_realloc_r+0x2e>
1a0074f6:	230c      	movs	r3, #12
1a0074f8:	2000      	movs	r0, #0
1a0074fa:	f8c9 3000 	str.w	r3, [r9]
1a0074fe:	b003      	add	sp, #12
1a007500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007504:	07d9      	lsls	r1, r3, #31
1a007506:	d455      	bmi.n	1a0075b4 <_realloc_r+0x18c>
1a007508:	f856 3c08 	ldr.w	r3, [r6, #-8]
1a00750c:	ebc3 0a08 	rsb	sl, r3, r8
1a007510:	f8da 3004 	ldr.w	r3, [sl, #4]
1a007514:	f023 0303 	bic.w	r3, r3, #3
1a007518:	4423      	add	r3, r4
1a00751a:	4293      	cmp	r3, r2
1a00751c:	db4a      	blt.n	1a0075b4 <_realloc_r+0x18c>
1a00751e:	4657      	mov	r7, sl
1a007520:	f8da 100c 	ldr.w	r1, [sl, #12]
1a007524:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a007528:	1f22      	subs	r2, r4, #4
1a00752a:	2a24      	cmp	r2, #36	; 0x24
1a00752c:	60c1      	str	r1, [r0, #12]
1a00752e:	6088      	str	r0, [r1, #8]
1a007530:	f200 810e 	bhi.w	1a007750 <_realloc_r+0x328>
1a007534:	2a13      	cmp	r2, #19
1a007536:	f240 8109 	bls.w	1a00774c <_realloc_r+0x324>
1a00753a:	6831      	ldr	r1, [r6, #0]
1a00753c:	f8ca 1008 	str.w	r1, [sl, #8]
1a007540:	6871      	ldr	r1, [r6, #4]
1a007542:	f8ca 100c 	str.w	r1, [sl, #12]
1a007546:	2a1b      	cmp	r2, #27
1a007548:	f200 8121 	bhi.w	1a00778e <_realloc_r+0x366>
1a00754c:	3608      	adds	r6, #8
1a00754e:	f10a 0210 	add.w	r2, sl, #16
1a007552:	6831      	ldr	r1, [r6, #0]
1a007554:	6011      	str	r1, [r2, #0]
1a007556:	6871      	ldr	r1, [r6, #4]
1a007558:	6051      	str	r1, [r2, #4]
1a00755a:	68b1      	ldr	r1, [r6, #8]
1a00755c:	6091      	str	r1, [r2, #8]
1a00755e:	461c      	mov	r4, r3
1a007560:	f8da 3004 	ldr.w	r3, [sl, #4]
1a007564:	463e      	mov	r6, r7
1a007566:	46d0      	mov	r8, sl
1a007568:	1b62      	subs	r2, r4, r5
1a00756a:	2a0f      	cmp	r2, #15
1a00756c:	f003 0301 	and.w	r3, r3, #1
1a007570:	d80e      	bhi.n	1a007590 <_realloc_r+0x168>
1a007572:	4323      	orrs	r3, r4
1a007574:	4444      	add	r4, r8
1a007576:	f8c8 3004 	str.w	r3, [r8, #4]
1a00757a:	6863      	ldr	r3, [r4, #4]
1a00757c:	f043 0301 	orr.w	r3, r3, #1
1a007580:	6063      	str	r3, [r4, #4]
1a007582:	4648      	mov	r0, r9
1a007584:	f7ff fc58 	bl	1a006e38 <__malloc_unlock>
1a007588:	4630      	mov	r0, r6
1a00758a:	b003      	add	sp, #12
1a00758c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007590:	eb08 0105 	add.w	r1, r8, r5
1a007594:	431d      	orrs	r5, r3
1a007596:	f042 0301 	orr.w	r3, r2, #1
1a00759a:	440a      	add	r2, r1
1a00759c:	f8c8 5004 	str.w	r5, [r8, #4]
1a0075a0:	604b      	str	r3, [r1, #4]
1a0075a2:	6853      	ldr	r3, [r2, #4]
1a0075a4:	f043 0301 	orr.w	r3, r3, #1
1a0075a8:	3108      	adds	r1, #8
1a0075aa:	6053      	str	r3, [r2, #4]
1a0075ac:	4648      	mov	r0, r9
1a0075ae:	f7fe fdf5 	bl	1a00619c <_free_r>
1a0075b2:	e7e6      	b.n	1a007582 <_realloc_r+0x15a>
1a0075b4:	4639      	mov	r1, r7
1a0075b6:	4648      	mov	r0, r9
1a0075b8:	f7ff f8fc 	bl	1a0067b4 <_malloc_r>
1a0075bc:	4607      	mov	r7, r0
1a0075be:	b1d8      	cbz	r0, 1a0075f8 <_realloc_r+0x1d0>
1a0075c0:	f856 3c04 	ldr.w	r3, [r6, #-4]
1a0075c4:	f023 0201 	bic.w	r2, r3, #1
1a0075c8:	4442      	add	r2, r8
1a0075ca:	f1a0 0108 	sub.w	r1, r0, #8
1a0075ce:	4291      	cmp	r1, r2
1a0075d0:	f000 80ac 	beq.w	1a00772c <_realloc_r+0x304>
1a0075d4:	1f22      	subs	r2, r4, #4
1a0075d6:	2a24      	cmp	r2, #36	; 0x24
1a0075d8:	f200 8099 	bhi.w	1a00770e <_realloc_r+0x2e6>
1a0075dc:	2a13      	cmp	r2, #19
1a0075de:	d86a      	bhi.n	1a0076b6 <_realloc_r+0x28e>
1a0075e0:	4603      	mov	r3, r0
1a0075e2:	4632      	mov	r2, r6
1a0075e4:	6811      	ldr	r1, [r2, #0]
1a0075e6:	6019      	str	r1, [r3, #0]
1a0075e8:	6851      	ldr	r1, [r2, #4]
1a0075ea:	6059      	str	r1, [r3, #4]
1a0075ec:	6892      	ldr	r2, [r2, #8]
1a0075ee:	609a      	str	r2, [r3, #8]
1a0075f0:	4631      	mov	r1, r6
1a0075f2:	4648      	mov	r0, r9
1a0075f4:	f7fe fdd2 	bl	1a00619c <_free_r>
1a0075f8:	4648      	mov	r0, r9
1a0075fa:	f7ff fc1d 	bl	1a006e38 <__malloc_unlock>
1a0075fe:	4638      	mov	r0, r7
1a007600:	b003      	add	sp, #12
1a007602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007606:	4611      	mov	r1, r2
1a007608:	b003      	add	sp, #12
1a00760a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00760e:	f7ff b8d1 	b.w	1a0067b4 <_malloc_r>
1a007612:	68ca      	ldr	r2, [r1, #12]
1a007614:	6889      	ldr	r1, [r1, #8]
1a007616:	4604      	mov	r4, r0
1a007618:	60ca      	str	r2, [r1, #12]
1a00761a:	6091      	str	r1, [r2, #8]
1a00761c:	e7a4      	b.n	1a007568 <_realloc_r+0x140>
1a00761e:	6841      	ldr	r1, [r0, #4]
1a007620:	f021 0103 	bic.w	r1, r1, #3
1a007624:	4421      	add	r1, r4
1a007626:	f105 0010 	add.w	r0, r5, #16
1a00762a:	4281      	cmp	r1, r0
1a00762c:	da5b      	bge.n	1a0076e6 <_realloc_r+0x2be>
1a00762e:	07db      	lsls	r3, r3, #31
1a007630:	d4c0      	bmi.n	1a0075b4 <_realloc_r+0x18c>
1a007632:	f856 3c08 	ldr.w	r3, [r6, #-8]
1a007636:	ebc3 0a08 	rsb	sl, r3, r8
1a00763a:	f8da 3004 	ldr.w	r3, [sl, #4]
1a00763e:	f023 0303 	bic.w	r3, r3, #3
1a007642:	eb01 0c03 	add.w	ip, r1, r3
1a007646:	4560      	cmp	r0, ip
1a007648:	f73f af66 	bgt.w	1a007518 <_realloc_r+0xf0>
1a00764c:	4657      	mov	r7, sl
1a00764e:	f8da 300c 	ldr.w	r3, [sl, #12]
1a007652:	f857 1f08 	ldr.w	r1, [r7, #8]!
1a007656:	1f22      	subs	r2, r4, #4
1a007658:	2a24      	cmp	r2, #36	; 0x24
1a00765a:	60cb      	str	r3, [r1, #12]
1a00765c:	6099      	str	r1, [r3, #8]
1a00765e:	f200 80b8 	bhi.w	1a0077d2 <_realloc_r+0x3aa>
1a007662:	2a13      	cmp	r2, #19
1a007664:	f240 80a9 	bls.w	1a0077ba <_realloc_r+0x392>
1a007668:	6833      	ldr	r3, [r6, #0]
1a00766a:	f8ca 3008 	str.w	r3, [sl, #8]
1a00766e:	6873      	ldr	r3, [r6, #4]
1a007670:	f8ca 300c 	str.w	r3, [sl, #12]
1a007674:	2a1b      	cmp	r2, #27
1a007676:	f200 80b5 	bhi.w	1a0077e4 <_realloc_r+0x3bc>
1a00767a:	3608      	adds	r6, #8
1a00767c:	f10a 0310 	add.w	r3, sl, #16
1a007680:	6832      	ldr	r2, [r6, #0]
1a007682:	601a      	str	r2, [r3, #0]
1a007684:	6872      	ldr	r2, [r6, #4]
1a007686:	605a      	str	r2, [r3, #4]
1a007688:	68b2      	ldr	r2, [r6, #8]
1a00768a:	609a      	str	r2, [r3, #8]
1a00768c:	eb0a 0205 	add.w	r2, sl, r5
1a007690:	ebc5 030c 	rsb	r3, r5, ip
1a007694:	f043 0301 	orr.w	r3, r3, #1
1a007698:	f8cb 2008 	str.w	r2, [fp, #8]
1a00769c:	6053      	str	r3, [r2, #4]
1a00769e:	f8da 3004 	ldr.w	r3, [sl, #4]
1a0076a2:	f003 0301 	and.w	r3, r3, #1
1a0076a6:	431d      	orrs	r5, r3
1a0076a8:	4648      	mov	r0, r9
1a0076aa:	f8ca 5004 	str.w	r5, [sl, #4]
1a0076ae:	f7ff fbc3 	bl	1a006e38 <__malloc_unlock>
1a0076b2:	4638      	mov	r0, r7
1a0076b4:	e769      	b.n	1a00758a <_realloc_r+0x162>
1a0076b6:	6833      	ldr	r3, [r6, #0]
1a0076b8:	6003      	str	r3, [r0, #0]
1a0076ba:	6873      	ldr	r3, [r6, #4]
1a0076bc:	6043      	str	r3, [r0, #4]
1a0076be:	2a1b      	cmp	r2, #27
1a0076c0:	d829      	bhi.n	1a007716 <_realloc_r+0x2ee>
1a0076c2:	f100 0308 	add.w	r3, r0, #8
1a0076c6:	f106 0208 	add.w	r2, r6, #8
1a0076ca:	e78b      	b.n	1a0075e4 <_realloc_r+0x1bc>
1a0076cc:	463b      	mov	r3, r7
1a0076ce:	6832      	ldr	r2, [r6, #0]
1a0076d0:	601a      	str	r2, [r3, #0]
1a0076d2:	6872      	ldr	r2, [r6, #4]
1a0076d4:	605a      	str	r2, [r3, #4]
1a0076d6:	68b2      	ldr	r2, [r6, #8]
1a0076d8:	609a      	str	r2, [r3, #8]
1a0076da:	463e      	mov	r6, r7
1a0076dc:	4674      	mov	r4, lr
1a0076de:	f8da 3004 	ldr.w	r3, [sl, #4]
1a0076e2:	46d0      	mov	r8, sl
1a0076e4:	e740      	b.n	1a007568 <_realloc_r+0x140>
1a0076e6:	eb08 0205 	add.w	r2, r8, r5
1a0076ea:	1b4b      	subs	r3, r1, r5
1a0076ec:	f043 0301 	orr.w	r3, r3, #1
1a0076f0:	f8cb 2008 	str.w	r2, [fp, #8]
1a0076f4:	6053      	str	r3, [r2, #4]
1a0076f6:	f856 3c04 	ldr.w	r3, [r6, #-4]
1a0076fa:	f003 0301 	and.w	r3, r3, #1
1a0076fe:	431d      	orrs	r5, r3
1a007700:	4648      	mov	r0, r9
1a007702:	f846 5c04 	str.w	r5, [r6, #-4]
1a007706:	f7ff fb97 	bl	1a006e38 <__malloc_unlock>
1a00770a:	4630      	mov	r0, r6
1a00770c:	e73d      	b.n	1a00758a <_realloc_r+0x162>
1a00770e:	4631      	mov	r1, r6
1a007710:	f7ff fb2c 	bl	1a006d6c <memmove>
1a007714:	e76c      	b.n	1a0075f0 <_realloc_r+0x1c8>
1a007716:	68b3      	ldr	r3, [r6, #8]
1a007718:	6083      	str	r3, [r0, #8]
1a00771a:	68f3      	ldr	r3, [r6, #12]
1a00771c:	60c3      	str	r3, [r0, #12]
1a00771e:	2a24      	cmp	r2, #36	; 0x24
1a007720:	d02c      	beq.n	1a00777c <_realloc_r+0x354>
1a007722:	f100 0310 	add.w	r3, r0, #16
1a007726:	f106 0210 	add.w	r2, r6, #16
1a00772a:	e75b      	b.n	1a0075e4 <_realloc_r+0x1bc>
1a00772c:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a007730:	f022 0203 	bic.w	r2, r2, #3
1a007734:	4414      	add	r4, r2
1a007736:	e717      	b.n	1a007568 <_realloc_r+0x140>
1a007738:	4631      	mov	r1, r6
1a00773a:	4638      	mov	r0, r7
1a00773c:	4674      	mov	r4, lr
1a00773e:	463e      	mov	r6, r7
1a007740:	f7ff fb14 	bl	1a006d6c <memmove>
1a007744:	46d0      	mov	r8, sl
1a007746:	f8da 3004 	ldr.w	r3, [sl, #4]
1a00774a:	e70d      	b.n	1a007568 <_realloc_r+0x140>
1a00774c:	463a      	mov	r2, r7
1a00774e:	e700      	b.n	1a007552 <_realloc_r+0x12a>
1a007750:	4631      	mov	r1, r6
1a007752:	4638      	mov	r0, r7
1a007754:	461c      	mov	r4, r3
1a007756:	463e      	mov	r6, r7
1a007758:	f7ff fb08 	bl	1a006d6c <memmove>
1a00775c:	46d0      	mov	r8, sl
1a00775e:	f8da 3004 	ldr.w	r3, [sl, #4]
1a007762:	e701      	b.n	1a007568 <_realloc_r+0x140>
1a007764:	68b3      	ldr	r3, [r6, #8]
1a007766:	f8ca 3010 	str.w	r3, [sl, #16]
1a00776a:	68f3      	ldr	r3, [r6, #12]
1a00776c:	f8ca 3014 	str.w	r3, [sl, #20]
1a007770:	2a24      	cmp	r2, #36	; 0x24
1a007772:	d018      	beq.n	1a0077a6 <_realloc_r+0x37e>
1a007774:	3610      	adds	r6, #16
1a007776:	f10a 0318 	add.w	r3, sl, #24
1a00777a:	e7a8      	b.n	1a0076ce <_realloc_r+0x2a6>
1a00777c:	6933      	ldr	r3, [r6, #16]
1a00777e:	6103      	str	r3, [r0, #16]
1a007780:	6973      	ldr	r3, [r6, #20]
1a007782:	6143      	str	r3, [r0, #20]
1a007784:	f106 0218 	add.w	r2, r6, #24
1a007788:	f100 0318 	add.w	r3, r0, #24
1a00778c:	e72a      	b.n	1a0075e4 <_realloc_r+0x1bc>
1a00778e:	68b1      	ldr	r1, [r6, #8]
1a007790:	f8ca 1010 	str.w	r1, [sl, #16]
1a007794:	68f1      	ldr	r1, [r6, #12]
1a007796:	f8ca 1014 	str.w	r1, [sl, #20]
1a00779a:	2a24      	cmp	r2, #36	; 0x24
1a00779c:	d00f      	beq.n	1a0077be <_realloc_r+0x396>
1a00779e:	3610      	adds	r6, #16
1a0077a0:	f10a 0218 	add.w	r2, sl, #24
1a0077a4:	e6d5      	b.n	1a007552 <_realloc_r+0x12a>
1a0077a6:	6933      	ldr	r3, [r6, #16]
1a0077a8:	f8ca 3018 	str.w	r3, [sl, #24]
1a0077ac:	6973      	ldr	r3, [r6, #20]
1a0077ae:	f8ca 301c 	str.w	r3, [sl, #28]
1a0077b2:	3618      	adds	r6, #24
1a0077b4:	f10a 0320 	add.w	r3, sl, #32
1a0077b8:	e789      	b.n	1a0076ce <_realloc_r+0x2a6>
1a0077ba:	463b      	mov	r3, r7
1a0077bc:	e760      	b.n	1a007680 <_realloc_r+0x258>
1a0077be:	6932      	ldr	r2, [r6, #16]
1a0077c0:	f8ca 2018 	str.w	r2, [sl, #24]
1a0077c4:	6972      	ldr	r2, [r6, #20]
1a0077c6:	f8ca 201c 	str.w	r2, [sl, #28]
1a0077ca:	3618      	adds	r6, #24
1a0077cc:	f10a 0220 	add.w	r2, sl, #32
1a0077d0:	e6bf      	b.n	1a007552 <_realloc_r+0x12a>
1a0077d2:	4631      	mov	r1, r6
1a0077d4:	4638      	mov	r0, r7
1a0077d6:	f8cd c004 	str.w	ip, [sp, #4]
1a0077da:	f7ff fac7 	bl	1a006d6c <memmove>
1a0077de:	f8dd c004 	ldr.w	ip, [sp, #4]
1a0077e2:	e753      	b.n	1a00768c <_realloc_r+0x264>
1a0077e4:	68b3      	ldr	r3, [r6, #8]
1a0077e6:	f8ca 3010 	str.w	r3, [sl, #16]
1a0077ea:	68f3      	ldr	r3, [r6, #12]
1a0077ec:	f8ca 3014 	str.w	r3, [sl, #20]
1a0077f0:	2a24      	cmp	r2, #36	; 0x24
1a0077f2:	d003      	beq.n	1a0077fc <_realloc_r+0x3d4>
1a0077f4:	3610      	adds	r6, #16
1a0077f6:	f10a 0318 	add.w	r3, sl, #24
1a0077fa:	e741      	b.n	1a007680 <_realloc_r+0x258>
1a0077fc:	6933      	ldr	r3, [r6, #16]
1a0077fe:	f8ca 3018 	str.w	r3, [sl, #24]
1a007802:	6973      	ldr	r3, [r6, #20]
1a007804:	f8ca 301c 	str.w	r3, [sl, #28]
1a007808:	3618      	adds	r6, #24
1a00780a:	f10a 0320 	add.w	r3, sl, #32
1a00780e:	e737      	b.n	1a007680 <_realloc_r+0x258>
1a007810:	10000558 	.word	0x10000558

1a007814 <__fpclassifyd>:
1a007814:	ec53 2b10 	vmov	r2, r3, d0
1a007818:	b410      	push	{r4}
1a00781a:	f033 4400 	bics.w	r4, r3, #2147483648	; 0x80000000
1a00781e:	d008      	beq.n	1a007832 <__fpclassifyd+0x1e>
1a007820:	4911      	ldr	r1, [pc, #68]	; (1a007868 <__fpclassifyd+0x54>)
1a007822:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
1a007826:	4288      	cmp	r0, r1
1a007828:	d808      	bhi.n	1a00783c <__fpclassifyd+0x28>
1a00782a:	2004      	movs	r0, #4
1a00782c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a007830:	4770      	bx	lr
1a007832:	b91a      	cbnz	r2, 1a00783c <__fpclassifyd+0x28>
1a007834:	2002      	movs	r0, #2
1a007836:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00783a:	4770      	bx	lr
1a00783c:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
1a007840:	4909      	ldr	r1, [pc, #36]	; (1a007868 <__fpclassifyd+0x54>)
1a007842:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
1a007846:	428b      	cmp	r3, r1
1a007848:	d9ef      	bls.n	1a00782a <__fpclassifyd+0x16>
1a00784a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
1a00784e:	d201      	bcs.n	1a007854 <__fpclassifyd+0x40>
1a007850:	2003      	movs	r0, #3
1a007852:	e7eb      	b.n	1a00782c <__fpclassifyd+0x18>
1a007854:	4b05      	ldr	r3, [pc, #20]	; (1a00786c <__fpclassifyd+0x58>)
1a007856:	429c      	cmp	r4, r3
1a007858:	d001      	beq.n	1a00785e <__fpclassifyd+0x4a>
1a00785a:	2000      	movs	r0, #0
1a00785c:	e7e6      	b.n	1a00782c <__fpclassifyd+0x18>
1a00785e:	fab2 f082 	clz	r0, r2
1a007862:	0940      	lsrs	r0, r0, #5
1a007864:	e7e2      	b.n	1a00782c <__fpclassifyd+0x18>
1a007866:	bf00      	nop
1a007868:	7fdfffff 	.word	0x7fdfffff
1a00786c:	7ff00000 	.word	0x7ff00000

1a007870 <__sread>:
1a007870:	b510      	push	{r4, lr}
1a007872:	460c      	mov	r4, r1
1a007874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a007878:	f7fa f832 	bl	1a0018e0 <_read_r>
1a00787c:	2800      	cmp	r0, #0
1a00787e:	db03      	blt.n	1a007888 <__sread+0x18>
1a007880:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a007882:	4403      	add	r3, r0
1a007884:	6523      	str	r3, [r4, #80]	; 0x50
1a007886:	bd10      	pop	{r4, pc}
1a007888:	89a3      	ldrh	r3, [r4, #12]
1a00788a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a00788e:	81a3      	strh	r3, [r4, #12]
1a007890:	bd10      	pop	{r4, pc}
1a007892:	bf00      	nop

1a007894 <__swrite>:
1a007894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a007898:	4616      	mov	r6, r2
1a00789a:	898a      	ldrh	r2, [r1, #12]
1a00789c:	461d      	mov	r5, r3
1a00789e:	05d3      	lsls	r3, r2, #23
1a0078a0:	460c      	mov	r4, r1
1a0078a2:	4607      	mov	r7, r0
1a0078a4:	d506      	bpl.n	1a0078b4 <__swrite+0x20>
1a0078a6:	2200      	movs	r2, #0
1a0078a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0078ac:	2302      	movs	r3, #2
1a0078ae:	f7fa f811 	bl	1a0018d4 <_lseek_r>
1a0078b2:	89a2      	ldrh	r2, [r4, #12]
1a0078b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0078b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
1a0078bc:	81a2      	strh	r2, [r4, #12]
1a0078be:	4638      	mov	r0, r7
1a0078c0:	4632      	mov	r2, r6
1a0078c2:	462b      	mov	r3, r5
1a0078c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a0078c8:	f7fa b840 	b.w	1a00194c <_write_r>

1a0078cc <__sseek>:
1a0078cc:	b510      	push	{r4, lr}
1a0078ce:	460c      	mov	r4, r1
1a0078d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0078d4:	f7f9 fffe 	bl	1a0018d4 <_lseek_r>
1a0078d8:	89a3      	ldrh	r3, [r4, #12]
1a0078da:	1c42      	adds	r2, r0, #1
1a0078dc:	bf0e      	itee	eq
1a0078de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a0078e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a0078e6:	6520      	strne	r0, [r4, #80]	; 0x50
1a0078e8:	81a3      	strh	r3, [r4, #12]
1a0078ea:	bd10      	pop	{r4, pc}

1a0078ec <__sclose>:
1a0078ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0078f0:	f7f9 bfda 	b.w	1a0018a8 <_close_r>

1a0078f4 <__sprint_r.part.0>:
1a0078f4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
1a0078f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0078fa:	049c      	lsls	r4, r3, #18
1a0078fc:	460f      	mov	r7, r1
1a0078fe:	4692      	mov	sl, r2
1a007900:	d52b      	bpl.n	1a00795a <__sprint_r.part.0+0x66>
1a007902:	6893      	ldr	r3, [r2, #8]
1a007904:	6812      	ldr	r2, [r2, #0]
1a007906:	b333      	cbz	r3, 1a007956 <__sprint_r.part.0+0x62>
1a007908:	4680      	mov	r8, r0
1a00790a:	f102 0908 	add.w	r9, r2, #8
1a00790e:	e919 0060 	ldmdb	r9, {r5, r6}
1a007912:	08b6      	lsrs	r6, r6, #2
1a007914:	d017      	beq.n	1a007946 <__sprint_r.part.0+0x52>
1a007916:	3d04      	subs	r5, #4
1a007918:	2400      	movs	r4, #0
1a00791a:	e001      	b.n	1a007920 <__sprint_r.part.0+0x2c>
1a00791c:	42a6      	cmp	r6, r4
1a00791e:	d010      	beq.n	1a007942 <__sprint_r.part.0+0x4e>
1a007920:	4640      	mov	r0, r8
1a007922:	f855 1f04 	ldr.w	r1, [r5, #4]!
1a007926:	463a      	mov	r2, r7
1a007928:	f000 f94a 	bl	1a007bc0 <_fputwc_r>
1a00792c:	1c43      	adds	r3, r0, #1
1a00792e:	f104 0401 	add.w	r4, r4, #1
1a007932:	d1f3      	bne.n	1a00791c <__sprint_r.part.0+0x28>
1a007934:	2300      	movs	r3, #0
1a007936:	f8ca 3008 	str.w	r3, [sl, #8]
1a00793a:	f8ca 3004 	str.w	r3, [sl, #4]
1a00793e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a007942:	f8da 3008 	ldr.w	r3, [sl, #8]
1a007946:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
1a00794a:	f8ca 3008 	str.w	r3, [sl, #8]
1a00794e:	f109 0908 	add.w	r9, r9, #8
1a007952:	2b00      	cmp	r3, #0
1a007954:	d1db      	bne.n	1a00790e <__sprint_r.part.0+0x1a>
1a007956:	2000      	movs	r0, #0
1a007958:	e7ec      	b.n	1a007934 <__sprint_r.part.0+0x40>
1a00795a:	f7fe fcf7 	bl	1a00634c <__sfvwrite_r>
1a00795e:	2300      	movs	r3, #0
1a007960:	f8ca 3008 	str.w	r3, [sl, #8]
1a007964:	f8ca 3004 	str.w	r3, [sl, #4]
1a007968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

1a00796c <__sprint_r>:
1a00796c:	6893      	ldr	r3, [r2, #8]
1a00796e:	b410      	push	{r4}
1a007970:	b11b      	cbz	r3, 1a00797a <__sprint_r+0xe>
1a007972:	f85d 4b04 	ldr.w	r4, [sp], #4
1a007976:	f7ff bfbd 	b.w	1a0078f4 <__sprint_r.part.0>
1a00797a:	4618      	mov	r0, r3
1a00797c:	6053      	str	r3, [r2, #4]
1a00797e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a007982:	4770      	bx	lr

1a007984 <__swbuf_r>:
1a007984:	b570      	push	{r4, r5, r6, lr}
1a007986:	460d      	mov	r5, r1
1a007988:	4614      	mov	r4, r2
1a00798a:	4606      	mov	r6, r0
1a00798c:	b110      	cbz	r0, 1a007994 <__swbuf_r+0x10>
1a00798e:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a007990:	2b00      	cmp	r3, #0
1a007992:	d048      	beq.n	1a007a26 <__swbuf_r+0xa2>
1a007994:	89a2      	ldrh	r2, [r4, #12]
1a007996:	69a3      	ldr	r3, [r4, #24]
1a007998:	60a3      	str	r3, [r4, #8]
1a00799a:	b291      	uxth	r1, r2
1a00799c:	0708      	lsls	r0, r1, #28
1a00799e:	d538      	bpl.n	1a007a12 <__swbuf_r+0x8e>
1a0079a0:	6923      	ldr	r3, [r4, #16]
1a0079a2:	2b00      	cmp	r3, #0
1a0079a4:	d035      	beq.n	1a007a12 <__swbuf_r+0x8e>
1a0079a6:	0489      	lsls	r1, r1, #18
1a0079a8:	b2ed      	uxtb	r5, r5
1a0079aa:	d515      	bpl.n	1a0079d8 <__swbuf_r+0x54>
1a0079ac:	6822      	ldr	r2, [r4, #0]
1a0079ae:	6961      	ldr	r1, [r4, #20]
1a0079b0:	1ad3      	subs	r3, r2, r3
1a0079b2:	428b      	cmp	r3, r1
1a0079b4:	da1c      	bge.n	1a0079f0 <__swbuf_r+0x6c>
1a0079b6:	3301      	adds	r3, #1
1a0079b8:	68a1      	ldr	r1, [r4, #8]
1a0079ba:	1c50      	adds	r0, r2, #1
1a0079bc:	3901      	subs	r1, #1
1a0079be:	60a1      	str	r1, [r4, #8]
1a0079c0:	6020      	str	r0, [r4, #0]
1a0079c2:	7015      	strb	r5, [r2, #0]
1a0079c4:	6962      	ldr	r2, [r4, #20]
1a0079c6:	429a      	cmp	r2, r3
1a0079c8:	d01a      	beq.n	1a007a00 <__swbuf_r+0x7c>
1a0079ca:	89a3      	ldrh	r3, [r4, #12]
1a0079cc:	07db      	lsls	r3, r3, #31
1a0079ce:	d501      	bpl.n	1a0079d4 <__swbuf_r+0x50>
1a0079d0:	2d0a      	cmp	r5, #10
1a0079d2:	d015      	beq.n	1a007a00 <__swbuf_r+0x7c>
1a0079d4:	4628      	mov	r0, r5
1a0079d6:	bd70      	pop	{r4, r5, r6, pc}
1a0079d8:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a0079da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a0079de:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a0079e2:	81a2      	strh	r2, [r4, #12]
1a0079e4:	6822      	ldr	r2, [r4, #0]
1a0079e6:	6661      	str	r1, [r4, #100]	; 0x64
1a0079e8:	6961      	ldr	r1, [r4, #20]
1a0079ea:	1ad3      	subs	r3, r2, r3
1a0079ec:	428b      	cmp	r3, r1
1a0079ee:	dbe2      	blt.n	1a0079b6 <__swbuf_r+0x32>
1a0079f0:	4630      	mov	r0, r6
1a0079f2:	4621      	mov	r1, r4
1a0079f4:	f7fe fae6 	bl	1a005fc4 <_fflush_r>
1a0079f8:	b940      	cbnz	r0, 1a007a0c <__swbuf_r+0x88>
1a0079fa:	6822      	ldr	r2, [r4, #0]
1a0079fc:	2301      	movs	r3, #1
1a0079fe:	e7db      	b.n	1a0079b8 <__swbuf_r+0x34>
1a007a00:	4630      	mov	r0, r6
1a007a02:	4621      	mov	r1, r4
1a007a04:	f7fe fade 	bl	1a005fc4 <_fflush_r>
1a007a08:	2800      	cmp	r0, #0
1a007a0a:	d0e3      	beq.n	1a0079d4 <__swbuf_r+0x50>
1a007a0c:	f04f 30ff 	mov.w	r0, #4294967295
1a007a10:	bd70      	pop	{r4, r5, r6, pc}
1a007a12:	4630      	mov	r0, r6
1a007a14:	4621      	mov	r1, r4
1a007a16:	f7fd f9df 	bl	1a004dd8 <__swsetup_r>
1a007a1a:	2800      	cmp	r0, #0
1a007a1c:	d1f6      	bne.n	1a007a0c <__swbuf_r+0x88>
1a007a1e:	89a2      	ldrh	r2, [r4, #12]
1a007a20:	6923      	ldr	r3, [r4, #16]
1a007a22:	b291      	uxth	r1, r2
1a007a24:	e7bf      	b.n	1a0079a6 <__swbuf_r+0x22>
1a007a26:	f7fe fb61 	bl	1a0060ec <__sinit>
1a007a2a:	e7b3      	b.n	1a007994 <__swbuf_r+0x10>

1a007a2c <_calloc_r>:
1a007a2c:	b510      	push	{r4, lr}
1a007a2e:	fb02 f101 	mul.w	r1, r2, r1
1a007a32:	f7fe febf 	bl	1a0067b4 <_malloc_r>
1a007a36:	4604      	mov	r4, r0
1a007a38:	b168      	cbz	r0, 1a007a56 <_calloc_r+0x2a>
1a007a3a:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a007a3e:	f022 0203 	bic.w	r2, r2, #3
1a007a42:	3a04      	subs	r2, #4
1a007a44:	2a24      	cmp	r2, #36	; 0x24
1a007a46:	d818      	bhi.n	1a007a7a <_calloc_r+0x4e>
1a007a48:	2a13      	cmp	r2, #19
1a007a4a:	d806      	bhi.n	1a007a5a <_calloc_r+0x2e>
1a007a4c:	4603      	mov	r3, r0
1a007a4e:	2200      	movs	r2, #0
1a007a50:	601a      	str	r2, [r3, #0]
1a007a52:	605a      	str	r2, [r3, #4]
1a007a54:	609a      	str	r2, [r3, #8]
1a007a56:	4620      	mov	r0, r4
1a007a58:	bd10      	pop	{r4, pc}
1a007a5a:	2300      	movs	r3, #0
1a007a5c:	2a1b      	cmp	r2, #27
1a007a5e:	6003      	str	r3, [r0, #0]
1a007a60:	6043      	str	r3, [r0, #4]
1a007a62:	d90f      	bls.n	1a007a84 <_calloc_r+0x58>
1a007a64:	2a24      	cmp	r2, #36	; 0x24
1a007a66:	6083      	str	r3, [r0, #8]
1a007a68:	60c3      	str	r3, [r0, #12]
1a007a6a:	bf05      	ittet	eq
1a007a6c:	6103      	streq	r3, [r0, #16]
1a007a6e:	6143      	streq	r3, [r0, #20]
1a007a70:	f100 0310 	addne.w	r3, r0, #16
1a007a74:	f100 0318 	addeq.w	r3, r0, #24
1a007a78:	e7e9      	b.n	1a007a4e <_calloc_r+0x22>
1a007a7a:	2100      	movs	r1, #0
1a007a7c:	f7fb fe94 	bl	1a0037a8 <memset>
1a007a80:	4620      	mov	r0, r4
1a007a82:	bd10      	pop	{r4, pc}
1a007a84:	f100 0308 	add.w	r3, r0, #8
1a007a88:	e7e1      	b.n	1a007a4e <_calloc_r+0x22>
1a007a8a:	bf00      	nop

1a007a8c <_fclose_r>:
1a007a8c:	2900      	cmp	r1, #0
1a007a8e:	d03d      	beq.n	1a007b0c <_fclose_r+0x80>
1a007a90:	b570      	push	{r4, r5, r6, lr}
1a007a92:	4605      	mov	r5, r0
1a007a94:	460c      	mov	r4, r1
1a007a96:	b108      	cbz	r0, 1a007a9c <_fclose_r+0x10>
1a007a98:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a007a9a:	b37b      	cbz	r3, 1a007afc <_fclose_r+0x70>
1a007a9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007aa0:	b90b      	cbnz	r3, 1a007aa6 <_fclose_r+0x1a>
1a007aa2:	2000      	movs	r0, #0
1a007aa4:	bd70      	pop	{r4, r5, r6, pc}
1a007aa6:	4628      	mov	r0, r5
1a007aa8:	4621      	mov	r1, r4
1a007aaa:	f7fe f9e1 	bl	1a005e70 <__sflush_r>
1a007aae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a007ab0:	4606      	mov	r6, r0
1a007ab2:	b133      	cbz	r3, 1a007ac2 <_fclose_r+0x36>
1a007ab4:	4628      	mov	r0, r5
1a007ab6:	69e1      	ldr	r1, [r4, #28]
1a007ab8:	4798      	blx	r3
1a007aba:	2800      	cmp	r0, #0
1a007abc:	bfb8      	it	lt
1a007abe:	f04f 36ff 	movlt.w	r6, #4294967295
1a007ac2:	89a3      	ldrh	r3, [r4, #12]
1a007ac4:	061b      	lsls	r3, r3, #24
1a007ac6:	d41c      	bmi.n	1a007b02 <_fclose_r+0x76>
1a007ac8:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a007aca:	b141      	cbz	r1, 1a007ade <_fclose_r+0x52>
1a007acc:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a007ad0:	4299      	cmp	r1, r3
1a007ad2:	d002      	beq.n	1a007ada <_fclose_r+0x4e>
1a007ad4:	4628      	mov	r0, r5
1a007ad6:	f7fe fb61 	bl	1a00619c <_free_r>
1a007ada:	2300      	movs	r3, #0
1a007adc:	6323      	str	r3, [r4, #48]	; 0x30
1a007ade:	6c61      	ldr	r1, [r4, #68]	; 0x44
1a007ae0:	b121      	cbz	r1, 1a007aec <_fclose_r+0x60>
1a007ae2:	4628      	mov	r0, r5
1a007ae4:	f7fe fb5a 	bl	1a00619c <_free_r>
1a007ae8:	2300      	movs	r3, #0
1a007aea:	6463      	str	r3, [r4, #68]	; 0x44
1a007aec:	f7fe fb04 	bl	1a0060f8 <__sfp_lock_acquire>
1a007af0:	2300      	movs	r3, #0
1a007af2:	81a3      	strh	r3, [r4, #12]
1a007af4:	f7fe fb02 	bl	1a0060fc <__sfp_lock_release>
1a007af8:	4630      	mov	r0, r6
1a007afa:	bd70      	pop	{r4, r5, r6, pc}
1a007afc:	f7fe faf6 	bl	1a0060ec <__sinit>
1a007b00:	e7cc      	b.n	1a007a9c <_fclose_r+0x10>
1a007b02:	4628      	mov	r0, r5
1a007b04:	6921      	ldr	r1, [r4, #16]
1a007b06:	f7fe fb49 	bl	1a00619c <_free_r>
1a007b0a:	e7dd      	b.n	1a007ac8 <_fclose_r+0x3c>
1a007b0c:	2000      	movs	r0, #0
1a007b0e:	4770      	bx	lr

1a007b10 <__fputwc>:
1a007b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a007b14:	b082      	sub	sp, #8
1a007b16:	4607      	mov	r7, r0
1a007b18:	460e      	mov	r6, r1
1a007b1a:	4614      	mov	r4, r2
1a007b1c:	f7fe fdd0 	bl	1a0066c0 <__locale_mb_cur_max>
1a007b20:	2801      	cmp	r0, #1
1a007b22:	d041      	beq.n	1a007ba8 <__fputwc+0x98>
1a007b24:	4638      	mov	r0, r7
1a007b26:	a901      	add	r1, sp, #4
1a007b28:	4632      	mov	r2, r6
1a007b2a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
1a007b2e:	f000 f859 	bl	1a007be4 <_wcrtomb_r>
1a007b32:	f1b0 3fff 	cmp.w	r0, #4294967295
1a007b36:	4680      	mov	r8, r0
1a007b38:	d02f      	beq.n	1a007b9a <__fputwc+0x8a>
1a007b3a:	2800      	cmp	r0, #0
1a007b3c:	d03c      	beq.n	1a007bb8 <__fputwc+0xa8>
1a007b3e:	f89d 1004 	ldrb.w	r1, [sp, #4]
1a007b42:	2500      	movs	r5, #0
1a007b44:	e009      	b.n	1a007b5a <__fputwc+0x4a>
1a007b46:	6823      	ldr	r3, [r4, #0]
1a007b48:	7019      	strb	r1, [r3, #0]
1a007b4a:	6823      	ldr	r3, [r4, #0]
1a007b4c:	3301      	adds	r3, #1
1a007b4e:	6023      	str	r3, [r4, #0]
1a007b50:	3501      	adds	r5, #1
1a007b52:	45a8      	cmp	r8, r5
1a007b54:	d930      	bls.n	1a007bb8 <__fputwc+0xa8>
1a007b56:	ab01      	add	r3, sp, #4
1a007b58:	5d59      	ldrb	r1, [r3, r5]
1a007b5a:	68a3      	ldr	r3, [r4, #8]
1a007b5c:	3b01      	subs	r3, #1
1a007b5e:	2b00      	cmp	r3, #0
1a007b60:	60a3      	str	r3, [r4, #8]
1a007b62:	daf0      	bge.n	1a007b46 <__fputwc+0x36>
1a007b64:	69a2      	ldr	r2, [r4, #24]
1a007b66:	4293      	cmp	r3, r2
1a007b68:	db07      	blt.n	1a007b7a <__fputwc+0x6a>
1a007b6a:	6823      	ldr	r3, [r4, #0]
1a007b6c:	7019      	strb	r1, [r3, #0]
1a007b6e:	6823      	ldr	r3, [r4, #0]
1a007b70:	7819      	ldrb	r1, [r3, #0]
1a007b72:	290a      	cmp	r1, #10
1a007b74:	f103 0301 	add.w	r3, r3, #1
1a007b78:	d1e9      	bne.n	1a007b4e <__fputwc+0x3e>
1a007b7a:	4638      	mov	r0, r7
1a007b7c:	4622      	mov	r2, r4
1a007b7e:	f7ff ff01 	bl	1a007984 <__swbuf_r>
1a007b82:	f1a0 30ff 	sub.w	r0, r0, #4294967295
1a007b86:	fab0 f080 	clz	r0, r0
1a007b8a:	0940      	lsrs	r0, r0, #5
1a007b8c:	2800      	cmp	r0, #0
1a007b8e:	d0df      	beq.n	1a007b50 <__fputwc+0x40>
1a007b90:	f04f 30ff 	mov.w	r0, #4294967295
1a007b94:	b002      	add	sp, #8
1a007b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a007b9a:	89a3      	ldrh	r3, [r4, #12]
1a007b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a007ba0:	81a3      	strh	r3, [r4, #12]
1a007ba2:	b002      	add	sp, #8
1a007ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a007ba8:	1e73      	subs	r3, r6, #1
1a007baa:	2bfe      	cmp	r3, #254	; 0xfe
1a007bac:	d8ba      	bhi.n	1a007b24 <__fputwc+0x14>
1a007bae:	b2f1      	uxtb	r1, r6
1a007bb0:	4680      	mov	r8, r0
1a007bb2:	f88d 1004 	strb.w	r1, [sp, #4]
1a007bb6:	e7c4      	b.n	1a007b42 <__fputwc+0x32>
1a007bb8:	4630      	mov	r0, r6
1a007bba:	b002      	add	sp, #8
1a007bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a007bc0 <_fputwc_r>:
1a007bc0:	8993      	ldrh	r3, [r2, #12]
1a007bc2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
1a007bc6:	d10b      	bne.n	1a007be0 <_fputwc_r+0x20>
1a007bc8:	b410      	push	{r4}
1a007bca:	6e54      	ldr	r4, [r2, #100]	; 0x64
1a007bcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a007bd0:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
1a007bd4:	6654      	str	r4, [r2, #100]	; 0x64
1a007bd6:	8193      	strh	r3, [r2, #12]
1a007bd8:	f85d 4b04 	ldr.w	r4, [sp], #4
1a007bdc:	f7ff bf98 	b.w	1a007b10 <__fputwc>
1a007be0:	f7ff bf96 	b.w	1a007b10 <__fputwc>

1a007be4 <_wcrtomb_r>:
1a007be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a007be8:	4605      	mov	r5, r0
1a007bea:	b086      	sub	sp, #24
1a007bec:	461e      	mov	r6, r3
1a007bee:	460c      	mov	r4, r1
1a007bf0:	b1a1      	cbz	r1, 1a007c1c <_wcrtomb_r+0x38>
1a007bf2:	4b10      	ldr	r3, [pc, #64]	; (1a007c34 <_wcrtomb_r+0x50>)
1a007bf4:	4617      	mov	r7, r2
1a007bf6:	f8d3 8000 	ldr.w	r8, [r3]
1a007bfa:	f7fe fd5d 	bl	1a0066b8 <__locale_charset>
1a007bfe:	9600      	str	r6, [sp, #0]
1a007c00:	4603      	mov	r3, r0
1a007c02:	4621      	mov	r1, r4
1a007c04:	463a      	mov	r2, r7
1a007c06:	4628      	mov	r0, r5
1a007c08:	47c0      	blx	r8
1a007c0a:	1c43      	adds	r3, r0, #1
1a007c0c:	d103      	bne.n	1a007c16 <_wcrtomb_r+0x32>
1a007c0e:	2200      	movs	r2, #0
1a007c10:	238a      	movs	r3, #138	; 0x8a
1a007c12:	6032      	str	r2, [r6, #0]
1a007c14:	602b      	str	r3, [r5, #0]
1a007c16:	b006      	add	sp, #24
1a007c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a007c1c:	4b05      	ldr	r3, [pc, #20]	; (1a007c34 <_wcrtomb_r+0x50>)
1a007c1e:	681f      	ldr	r7, [r3, #0]
1a007c20:	f7fe fd4a 	bl	1a0066b8 <__locale_charset>
1a007c24:	9600      	str	r6, [sp, #0]
1a007c26:	4603      	mov	r3, r0
1a007c28:	4622      	mov	r2, r4
1a007c2a:	4628      	mov	r0, r5
1a007c2c:	a903      	add	r1, sp, #12
1a007c2e:	47b8      	blx	r7
1a007c30:	e7eb      	b.n	1a007c0a <_wcrtomb_r+0x26>
1a007c32:	bf00      	nop
1a007c34:	10000968 	.word	0x10000968

1a007c38 <__ascii_wctomb>:
1a007c38:	b121      	cbz	r1, 1a007c44 <__ascii_wctomb+0xc>
1a007c3a:	2aff      	cmp	r2, #255	; 0xff
1a007c3c:	d804      	bhi.n	1a007c48 <__ascii_wctomb+0x10>
1a007c3e:	700a      	strb	r2, [r1, #0]
1a007c40:	2001      	movs	r0, #1
1a007c42:	4770      	bx	lr
1a007c44:	4608      	mov	r0, r1
1a007c46:	4770      	bx	lr
1a007c48:	238a      	movs	r3, #138	; 0x8a
1a007c4a:	6003      	str	r3, [r0, #0]
1a007c4c:	f04f 30ff 	mov.w	r0, #4294967295
1a007c50:	4770      	bx	lr
1a007c52:	bf00      	nop

1a007c54 <__gedf2>:
1a007c54:	f04f 3cff 	mov.w	ip, #4294967295
1a007c58:	e006      	b.n	1a007c68 <__cmpdf2+0x4>
1a007c5a:	bf00      	nop

1a007c5c <__ledf2>:
1a007c5c:	f04f 0c01 	mov.w	ip, #1
1a007c60:	e002      	b.n	1a007c68 <__cmpdf2+0x4>
1a007c62:	bf00      	nop

1a007c64 <__cmpdf2>:
1a007c64:	f04f 0c01 	mov.w	ip, #1
1a007c68:	f84d cd04 	str.w	ip, [sp, #-4]!
1a007c6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a007c70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a007c74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a007c78:	bf18      	it	ne
1a007c7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a007c7e:	d01b      	beq.n	1a007cb8 <__cmpdf2+0x54>
1a007c80:	b001      	add	sp, #4
1a007c82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a007c86:	bf0c      	ite	eq
1a007c88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a007c8c:	ea91 0f03 	teqne	r1, r3
1a007c90:	bf02      	ittt	eq
1a007c92:	ea90 0f02 	teqeq	r0, r2
1a007c96:	2000      	moveq	r0, #0
1a007c98:	4770      	bxeq	lr
1a007c9a:	f110 0f00 	cmn.w	r0, #0
1a007c9e:	ea91 0f03 	teq	r1, r3
1a007ca2:	bf58      	it	pl
1a007ca4:	4299      	cmppl	r1, r3
1a007ca6:	bf08      	it	eq
1a007ca8:	4290      	cmpeq	r0, r2
1a007caa:	bf2c      	ite	cs
1a007cac:	17d8      	asrcs	r0, r3, #31
1a007cae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a007cb2:	f040 0001 	orr.w	r0, r0, #1
1a007cb6:	4770      	bx	lr
1a007cb8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a007cbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a007cc0:	d102      	bne.n	1a007cc8 <__cmpdf2+0x64>
1a007cc2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a007cc6:	d107      	bne.n	1a007cd8 <__cmpdf2+0x74>
1a007cc8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a007ccc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a007cd0:	d1d6      	bne.n	1a007c80 <__cmpdf2+0x1c>
1a007cd2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a007cd6:	d0d3      	beq.n	1a007c80 <__cmpdf2+0x1c>
1a007cd8:	f85d 0b04 	ldr.w	r0, [sp], #4
1a007cdc:	4770      	bx	lr
1a007cde:	bf00      	nop

1a007ce0 <__aeabi_cdrcmple>:
1a007ce0:	4684      	mov	ip, r0
1a007ce2:	4610      	mov	r0, r2
1a007ce4:	4662      	mov	r2, ip
1a007ce6:	468c      	mov	ip, r1
1a007ce8:	4619      	mov	r1, r3
1a007cea:	4663      	mov	r3, ip
1a007cec:	e000      	b.n	1a007cf0 <__aeabi_cdcmpeq>
1a007cee:	bf00      	nop

1a007cf0 <__aeabi_cdcmpeq>:
1a007cf0:	b501      	push	{r0, lr}
1a007cf2:	f7ff ffb7 	bl	1a007c64 <__cmpdf2>
1a007cf6:	2800      	cmp	r0, #0
1a007cf8:	bf48      	it	mi
1a007cfa:	f110 0f00 	cmnmi.w	r0, #0
1a007cfe:	bd01      	pop	{r0, pc}

1a007d00 <__aeabi_dcmpeq>:
1a007d00:	f84d ed08 	str.w	lr, [sp, #-8]!
1a007d04:	f7ff fff4 	bl	1a007cf0 <__aeabi_cdcmpeq>
1a007d08:	bf0c      	ite	eq
1a007d0a:	2001      	moveq	r0, #1
1a007d0c:	2000      	movne	r0, #0
1a007d0e:	f85d fb08 	ldr.w	pc, [sp], #8
1a007d12:	bf00      	nop

1a007d14 <__aeabi_dcmplt>:
1a007d14:	f84d ed08 	str.w	lr, [sp, #-8]!
1a007d18:	f7ff ffea 	bl	1a007cf0 <__aeabi_cdcmpeq>
1a007d1c:	bf34      	ite	cc
1a007d1e:	2001      	movcc	r0, #1
1a007d20:	2000      	movcs	r0, #0
1a007d22:	f85d fb08 	ldr.w	pc, [sp], #8
1a007d26:	bf00      	nop

1a007d28 <__aeabi_dcmple>:
1a007d28:	f84d ed08 	str.w	lr, [sp, #-8]!
1a007d2c:	f7ff ffe0 	bl	1a007cf0 <__aeabi_cdcmpeq>
1a007d30:	bf94      	ite	ls
1a007d32:	2001      	movls	r0, #1
1a007d34:	2000      	movhi	r0, #0
1a007d36:	f85d fb08 	ldr.w	pc, [sp], #8
1a007d3a:	bf00      	nop

1a007d3c <__aeabi_dcmpge>:
1a007d3c:	f84d ed08 	str.w	lr, [sp, #-8]!
1a007d40:	f7ff ffce 	bl	1a007ce0 <__aeabi_cdrcmple>
1a007d44:	bf94      	ite	ls
1a007d46:	2001      	movls	r0, #1
1a007d48:	2000      	movhi	r0, #0
1a007d4a:	f85d fb08 	ldr.w	pc, [sp], #8
1a007d4e:	bf00      	nop

1a007d50 <__aeabi_dcmpgt>:
1a007d50:	f84d ed08 	str.w	lr, [sp, #-8]!
1a007d54:	f7ff ffc4 	bl	1a007ce0 <__aeabi_cdrcmple>
1a007d58:	bf34      	ite	cc
1a007d5a:	2001      	movcc	r0, #1
1a007d5c:	2000      	movcs	r0, #0
1a007d5e:	f85d fb08 	ldr.w	pc, [sp], #8
1a007d62:	bf00      	nop

1a007d64 <__aeabi_d2iz>:
1a007d64:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a007d68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a007d6c:	d215      	bcs.n	1a007d9a <__aeabi_d2iz+0x36>
1a007d6e:	d511      	bpl.n	1a007d94 <__aeabi_d2iz+0x30>
1a007d70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a007d74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a007d78:	d912      	bls.n	1a007da0 <__aeabi_d2iz+0x3c>
1a007d7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a007d7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a007d82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a007d86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a007d8a:	fa23 f002 	lsr.w	r0, r3, r2
1a007d8e:	bf18      	it	ne
1a007d90:	4240      	negne	r0, r0
1a007d92:	4770      	bx	lr
1a007d94:	f04f 0000 	mov.w	r0, #0
1a007d98:	4770      	bx	lr
1a007d9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a007d9e:	d105      	bne.n	1a007dac <__aeabi_d2iz+0x48>
1a007da0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a007da4:	bf08      	it	eq
1a007da6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a007daa:	4770      	bx	lr
1a007dac:	f04f 0000 	mov.w	r0, #0
1a007db0:	4770      	bx	lr
1a007db2:	bf00      	nop
1a007db4:	63696e49 	.word	0x63696e49
1a007db8:	696c6169 	.word	0x696c6169
1a007dbc:	646e617a 	.word	0x646e617a
1a007dc0:	4d49206f 	.word	0x4d49206f
1a007dc4:	504d2055 	.word	0x504d2055
1a007dc8:	35323955 	.word	0x35323955
1a007dcc:	2e2e2e30 	.word	0x2e2e2e30
1a007dd0:	0000000d 	.word	0x0000000d
1a007dd4:	20554d49 	.word	0x20554d49
1a007dd8:	3955504d 	.word	0x3955504d
1a007ddc:	20303532 	.word	0x20303532
1a007de0:	69206f6e 	.word	0x69206f6e
1a007de4:	6963696e 	.word	0x6963696e
1a007de8:	7a696c61 	.word	0x7a696c61
1a007dec:	2c6f6461 	.word	0x2c6f6461
1a007df0:	65686320 	.word	0x65686320
1a007df4:	65657571 	.word	0x65657571
1a007df8:	73616c20 	.word	0x73616c20
1a007dfc:	6e6f6320 	.word	0x6e6f6320
1a007e00:	6f697865 	.word	0x6f697865
1a007e04:	3a73656e 	.word	0x3a73656e
1a007e08:	000d0a0d 	.word	0x000d0a0d
1a007e0c:	3955504d 	.word	0x3955504d
1a007e10:	20303532 	.word	0x20303532
1a007e14:	2d2d2d2d 	.word	0x2d2d2d2d
1a007e18:	55444520 	.word	0x55444520
1a007e1c:	4149432d 	.word	0x4149432d
1a007e20:	584e2d41 	.word	0x584e2d41
1a007e24:	0d0a0d50 	.word	0x0d0a0d50
1a007e28:	00000000 	.word	0x00000000
1a007e2c:	20202020 	.word	0x20202020
1a007e30:	20434356 	.word	0x20434356
1a007e34:	2d2d2d2d 	.word	0x2d2d2d2d
1a007e38:	332e3320 	.word	0x332e3320
1a007e3c:	00000d56 	.word	0x00000d56
1a007e40:	20202020 	.word	0x20202020
1a007e44:	20444e47 	.word	0x20444e47
1a007e48:	2d2d2d2d 	.word	0x2d2d2d2d
1a007e4c:	444e4720 	.word	0x444e4720
1a007e50:	0000000d 	.word	0x0000000d
1a007e54:	20202020 	.word	0x20202020
1a007e58:	204c4353 	.word	0x204c4353
1a007e5c:	2d2d2d2d 	.word	0x2d2d2d2d
1a007e60:	4c435320 	.word	0x4c435320
1a007e64:	0000000d 	.word	0x0000000d
1a007e68:	20202020 	.word	0x20202020
1a007e6c:	20414453 	.word	0x20414453
1a007e70:	2d2d2d2d 	.word	0x2d2d2d2d
1a007e74:	41445320 	.word	0x41445320
1a007e78:	0000000d 	.word	0x0000000d
1a007e7c:	20202020 	.word	0x20202020
1a007e80:	20304441 	.word	0x20304441
1a007e84:	2d2d2d2d 	.word	0x2d2d2d2d
1a007e88:	444e4720 	.word	0x444e4720
1a007e8c:	000d0a0d 	.word	0x000d0a0d
1a007e90:	64206553 	.word	0x64206553
1a007e94:	65697465 	.word	0x65697465
1a007e98:	6520656e 	.word	0x6520656e
1a007e9c:	7270206c 	.word	0x7270206c
1a007ea0:	6172676f 	.word	0x6172676f
1a007ea4:	0d2e616d 	.word	0x0d2e616d
1a007ea8:	00000000 	.word	0x00000000
1a007eac:	20554d49 	.word	0x20554d49
1a007eb0:	3955504d 	.word	0x3955504d
1a007eb4:	20303532 	.word	0x20303532
1a007eb8:	63696e69 	.word	0x63696e69
1a007ebc:	696c6169 	.word	0x696c6169
1a007ec0:	6f64617a 	.word	0x6f64617a
1a007ec4:	726f6320 	.word	0x726f6320
1a007ec8:	74636572 	.word	0x74636572
1a007ecc:	6e656d61 	.word	0x6e656d61
1a007ed0:	0d2e6574 	.word	0x0d2e6574
1a007ed4:	00000d0a 	.word	0x00000d0a
1a007ed8:	6f726947 	.word	0x6f726947
1a007edc:	706f6373 	.word	0x706f6373
1a007ee0:	20203a6f 	.word	0x20203a6f
1a007ee4:	20202020 	.word	0x20202020
1a007ee8:	2c662528 	.word	0x2c662528
1a007eec:	2c662520 	.word	0x2c662520
1a007ef0:	29662520 	.word	0x29662520
1a007ef4:	5b202020 	.word	0x5b202020
1a007ef8:	2f646172 	.word	0x2f646172
1a007efc:	0a0d5d73 	.word	0x0a0d5d73
1a007f00:	00000000 	.word	0x00000000
1a007f04:	6c656341 	.word	0x6c656341
1a007f08:	6d6f7265 	.word	0x6d6f7265
1a007f0c:	6f727465 	.word	0x6f727465
1a007f10:	2020203a 	.word	0x2020203a
1a007f14:	2c662528 	.word	0x2c662528
1a007f18:	2c662520 	.word	0x2c662520
1a007f1c:	29662520 	.word	0x29662520
1a007f20:	5b202020 	.word	0x5b202020
1a007f24:	32732f6d 	.word	0x32732f6d
1a007f28:	000a0d5d 	.word	0x000a0d5d
1a007f2c:	6e67614d 	.word	0x6e67614d
1a007f30:	6d6f7465 	.word	0x6d6f7465
1a007f34:	6f727465 	.word	0x6f727465
1a007f38:	2020203a 	.word	0x2020203a
1a007f3c:	2c662528 	.word	0x2c662528
1a007f40:	2c662520 	.word	0x2c662520
1a007f44:	29662520 	.word	0x29662520
1a007f48:	5b202020 	.word	0x5b202020
1a007f4c:	0d5d5475 	.word	0x0d5d5475
1a007f50:	0000000a 	.word	0x0000000a
1a007f54:	706d6554 	.word	0x706d6554
1a007f58:	74617265 	.word	0x74617265
1a007f5c:	3a617275 	.word	0x3a617275
1a007f60:	20202020 	.word	0x20202020
1a007f64:	20206625 	.word	0x20206625
1a007f68:	5d435b20 	.word	0x5d435b20
1a007f6c:	0a0d0a0d 	.word	0x0a0d0a0d
1a007f70:	00000000 	.word	0x00000000

1a007f74 <ultrasonicSensorsIrqMap>:
1a007f74:	00020100                                ....

1a007f78 <gpioPinsInit>:
1a007f78:	02000104 00050701 05010d03 04080100     ................
1a007f88:	02020002 02000304 00000403 04070002     ................
1a007f98:	030c0300 09050402 05040103 04030208     ................
1a007fa8:	04020305 06040504 0802000c 03000b06     ................
1a007fb8:	00090607 07060503 060f0504 03030004     ................
1a007fc8:	02000404 00050404 06040502 04060200     ................
1a007fd8:	0c050408 05040a04 0003010e 14010a00     ................
1a007fe8:	010f0000 0d000012 00001101 0010010c     ................
1a007ff8:	07070300 000f0300 01000001 00000000     ................
1a008008:	000a0600 08060603 06100504 04030005     ................
1a008018:	03000106 04090400 04010d05 010b0000     ................
1a008028:	0200000f 00000001 00010104 02010800     ................
1a008038:	01090000 09010006 05040002 04010200     ................
1a008048:	02020105 02020504 0e00000a 01000b02     ................
1a008058:	000c020b 00040c01 04000200 01020001     ................
1a008068:	02000204 00030402 03070302 070b0300     ................
1a008078:	0c030004 03000507 0006070d 01020e03     ................
1a008088:	04010504 06020006 02000504 00040405     ................
1a008098:	08040402 040c0504 0d050409 05040a04     ................
1a0080a8:	0005010e 00000801                       ........

1a0080b0 <lpcUarts>:
1a0080b0:	40081000 06020406 00180205 40081000     ...@...........@
1a0080c0:	09070509 00180706 40082000 00000000     ......... .@....
1a0080d0:	00190000 400c1000 07060107 001a0602     .......@........
1a0080e0:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a0080f0:	02020302 001b0204                       ........

1a0080f8 <GpioPorts>:
1a0080f8:	03030003 0f050403 05031005 07030603     ................
1a008108:	00000802                                ....

1a00810c <OscRateIn>:
1a00810c:	00b71b00                                ....

1a008110 <ExtRateIn>:
1a008110:	00000000                                ....

1a008114 <GpioButtons>:
1a008114:	08000400 09010900                       ........

1a00811c <GpioLeds>:
1a00811c:	01050005 0e000205 0c010b01              ............

1a008128 <InitClkStates>:
1a008128:	00010308 00010307 01010f01              ............

1a008134 <pinmuxing>:
1a008134:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a008144:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a008154:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a008164:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a008174:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a008184:	00d50301 00d50401 00160107 00560207     ..............V.
1a008194:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a0081a4:	00570206 00f30f01 00f71001 00f31101     ..W.............
1a0081b4:	00b31201 00f01301 00b31401 00b60707     ................
1a0081c4:	00f20000 00b60100                       ........

1a0081cc <UART_BClock>:
1a0081cc:	01a201c2 01620182                       ......b.

1a0081d4 <UART_PClock>:
1a0081d4:	00820081 00a200a1 08040201 0f0f0f03     ................
1a0081e4:	000000ff                                ....

1a0081e8 <periph_to_base>:
1a0081e8:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0081f8:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a008208:	000100e0 01000100 01200003 00060120     .......... . ...
1a008218:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a008228:	01820013 00120182 01a201a2 01c20011     ................
1a008238:	001001c2 01e201e2 0202000f 000e0202     ................
1a008248:	02220222 0223000d 001c0223              "."...#.#...

1a008254 <InitClkStates>:
1a008254:	00010100 00010909 0001090a 01010701     ................
1a008264:	00010902 00010906 0101090c 0001090d     ................
1a008274:	0001090e 0001090f 00010910 00010911     ................
1a008284:	00010912 00010913 00011114 00011119     ................
1a008294:	0001111a 0001111b                       ........

1a00829c <zeroes.6931>:
1a00829c:	30303030 30303030 30303030 30303030     0000000000000000
1a0082ac:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
1a0082bc:	33323130 37363534 42413938 46454443     0123456789ABCDEF
1a0082cc:	00000000 33323130 37363534 62613938     ....0123456789ab
1a0082dc:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
1a0082ec:	00000030                                0...

1a0082f0 <blanks.6930>:
1a0082f0:	20202020 20202020 20202020 20202020                     
1a008300:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
1a008310:	00000043 49534f50 00000058 0000002e     C...POSIX.......

1a008320 <p05.5296>:
1a008320:	00000005 00000019 0000007d 00000000     ........}.......

1a008330 <__mprec_tens>:
1a008330:	00000000 3ff00000 00000000 40240000     .......?......$@
1a008340:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
1a008350:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
1a008360:	00000000 412e8480 00000000 416312d0     .......A......cA
1a008370:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
1a008380:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
1a008390:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
1a0083a0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
1a0083b0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
1a0083c0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
1a0083d0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
1a0083e0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
1a0083f0:	79d99db4 44ea7843                       ...yCx.D

1a0083f8 <__mprec_bigtens>:
1a0083f8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
1a008408:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
1a008418:	7f73bf3c 75154fdd                       <.s..O.u
